{
    "BYOL/evaluate_dgcnn.py": {
        "sklearn": {
            "SVC_111": {
                "variable": {
                    "value": "svc",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel": {
                    "value": "linear",
                    "type": "str",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "load_21": {
                "variable": {
                    "value": "ckpt",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "weight_path",
                    "type": "Variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_82": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_98": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ModelNet40SubSetCls(args.num_points, train=True, xyz_only=True, percent=args.percent)",
                            "Call"
                        ],
                        [
                            "ModelNet40Cls(args.num_points, train=True, xyz_only=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_99": {
                "variable": {
                    "value": "val_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ModelNet40SubSetCls(args.num_points, train=False, xyz_only=True, percent=1)",
                            "Call"
                        ],
                        [
                            "ModelNet40Cls(args.num_points, train=False, xyz_only=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_82": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "BYOL/evaluate_pointnet.py": {
        "sklearn": {
            "SVC_86": {
                "variable": {
                    "value": "svc",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel": {
                    "value": "linear",
                    "type": "str",
                    "possible_values": []
                },
                "verbose": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "load_19": {
                "variable": {
                    "value": "ckpt",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "weight_path",
                    "type": "Variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_64": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_77": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ModelNet40Cls(args.num_points, train=True, xyz_only=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_78": {
                "variable": {
                    "value": "val_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ModelNet40Cls(args.num_points, train=False, xyz_only=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_64": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "downstream/classification/dgcnn/main.py": {
        "sklearn": {
            "accuracy_score_186": {
                "variable": {
                    "value": "test_acc",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "test_true",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(test_true)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(test_true)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "test_pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(test_pred)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(test_pred)",
                            "Call"
                        ]
                    ]
                }
            },
            "balanced_accuracy_score_187": {
                "variable": {
                    "value": "avg_per_class_acc",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "test_true",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(test_true)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(test_true)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "test_pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(test_pred)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(test_pred)",
                            "Call"
                        ]
                    ]
                }
            },
            "accuracy_score_148": {
                "variable": {
                    "value": "test_acc",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "test_true",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(test_true)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(test_true)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "test_pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(test_pred)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(test_pred)",
                            "Call"
                        ]
                    ]
                }
            },
            "balanced_accuracy_score_149": {
                "variable": {
                    "value": "avg_per_class_acc",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "test_true",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(test_true)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(test_true)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "test_pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(test_pred)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(test_pred)",
                            "Call"
                        ]
                    ]
                }
            },
            "accuracy_score_119": {
                "y_true": {
                    "value": "train_true",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(train_true)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "train_pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(train_pred)",
                            "Call"
                        ]
                    ]
                }
            },
            "balanced_accuracy_score_121": {
                "y_true": {
                    "value": "train_true",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(train_true)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "train_pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(train_pred)",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "device_52": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if args.cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataParallel_71": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "PointNet(args).to(device)",
                            "Call"
                        ],
                        [
                            "DGCNN(args).to(device)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "DGCNN(args).to(device)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model.eval()",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_161": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "ModelNet40(partition='test', num_points=args.num_points)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_164": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if args.cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataParallel_168": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "PointNet(args).to(device)",
                            "Call"
                        ],
                        [
                            "DGCNN(args).to(device)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "DGCNN(args).to(device)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model.eval()",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_42": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "ModelNet40Subset(partition='train', num_points=args.num_points, normalize=args.normalize_input, percent=args.percent_train)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_44": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "ModelNet40Subset(partition='test', num_points=args.num_points, normalize=args.normalize_input)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_47": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "ModelNet40(partition='train', num_points=args.num_points, normalize=args.normalize_input)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_49": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "ModelNet40(partition='test', num_points=args.num_points, normalize=args.normalize_input)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_65": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.pretrain_weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_76": {
                "variable": {
                    "value": "opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr * 100",
                    "type": "BinOp",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "CosineAnnealingLR_77": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "opt",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "optim.SGD(model.parameters(), lr=args.lr * 100, momentum=args.momentum, weight_decay=0.0001)",
                            "Call"
                        ],
                        [
                            "optim.Adam(model.parameters(), lr=args.lr, weight_decay=0.0001)",
                            "Call"
                        ]
                    ]
                },
                "T_max": {
                    "value": "args.epochs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eta_min": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_81": {
                "variable": {
                    "value": "opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "CosineAnnealingLR_82": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "opt",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "optim.SGD(model.parameters(), lr=args.lr * 100, momentum=args.momentum, weight_decay=0.0001)",
                            "Call"
                        ],
                        [
                            "optim.Adam(model.parameters(), lr=args.lr, weight_decay=0.0001)",
                            "Call"
                        ]
                    ]
                },
                "T_max": {
                    "value": "args.epochs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eta_min": {
                    "value": "args.lr / 100",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "manual_seed_244": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_count_72": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_169": {
                "f": {
                    "value": "args.model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_243": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_248": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_157": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'checkpoints/%s/models/model.t7' % args.exp_name",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_count_247": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "current_device_247": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "downstream/segmentation/dgcnn/main_partseg.py": {
        "sklearn": {
            "accuracy_score_280": {
                "variable": {
                    "value": "test_acc",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "test_true_cls",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(test_true_cls)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(test_true_cls)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "test_pred_cls",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(test_pred_cls)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(test_pred_cls)",
                            "Call"
                        ]
                    ]
                }
            },
            "balanced_accuracy_score_281": {
                "variable": {
                    "value": "avg_per_class_acc",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "test_true_cls",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(test_true_cls)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(test_true_cls)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "test_pred_cls",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(test_pred_cls)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(test_pred_cls)",
                            "Call"
                        ]
                    ]
                }
            },
            "accuracy_score_168": {
                "variable": {
                    "value": "train_acc",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "train_true_cls",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(train_true_cls)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "train_pred_cls",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(train_pred_cls)",
                            "Call"
                        ]
                    ]
                }
            },
            "balanced_accuracy_score_169": {
                "variable": {
                    "value": "avg_per_class_acc",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "train_true_cls",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(train_true_cls)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "train_pred_cls",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(train_pred_cls)",
                            "Call"
                        ]
                    ]
                }
            },
            "accuracy_score_218": {
                "variable": {
                    "value": "test_acc",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "test_true_cls",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(test_true_cls)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(test_true_cls)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "test_pred_cls",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(test_pred_cls)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(test_pred_cls)",
                            "Call"
                        ]
                    ]
                }
            },
            "balanced_accuracy_score_219": {
                "variable": {
                    "value": "avg_per_class_acc",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "test_true_cls",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(test_true_cls)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(test_true_cls)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "test_pred_cls",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(test_pred_cls)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(test_pred_cls)",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "DataLoader_77": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ShapeNetPart(partition='trainval', num_points=args.num_points, class_choice=args.class_choice)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "drop_last",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "Constant"
                        ],
                        [
                            "True",
                            "Constant"
                        ]
                    ]
                }
            },
            "DataLoader_78": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "ShapeNetPart(partition='test', num_points=args.num_points, class_choice=args.class_choice)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_81": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if args.cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataParallel_100": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "DGCNN_partseg(args, seg_num_all).to(device)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "DGCNN_partseg(args, seg_num_all).to(device)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model.eval()",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_236": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "ShapeNetPart(partition='test', num_points=args.num_points, class_choice=args.class_choice, class_test=args.class_test)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_239": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if args.cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataParallel_249": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "DGCNN_partseg(args, seg_num_all).to(device)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "DGCNN_partseg(args, seg_num_all).to(device)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model.eval()",
                            "Call"
                        ]
                    ]
                }
            },
            "load_94": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.pretrain_weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_105": {
                "variable": {
                    "value": "opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr * 100",
                    "type": "BinOp",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_108": {
                "variable": {
                    "value": "opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "CosineAnnealingLR_111": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "opt",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "optim.SGD(model.parameters(), lr=args.lr * 100, momentum=args.momentum, weight_decay=0.0001)",
                            "Call"
                        ],
                        [
                            "optim.Adam(model.parameters(), lr=args.lr, weight_decay=0.0001)",
                            "Call"
                        ]
                    ]
                },
                "T_max": {
                    "value": "args.epochs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eta_min": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "from_numpy_264": {
                "variable": {
                    "value": "label_one_hot",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "label_one_hot.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_351": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_count_101": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "StepLR_113": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "opt",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "optim.SGD(model.parameters(), lr=args.lr * 100, momentum=args.momentum, weight_decay=0.0001)",
                            "Call"
                        ],
                        [
                            "optim.Adam(model.parameters(), lr=args.lr, weight_decay=0.0001)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "from_numpy_138": {
                "variable": {
                    "value": "label_one_hot",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "label_one_hot.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_199": {
                "variable": {
                    "value": "label_one_hot",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "label_one_hot.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_250": {
                "f": {
                    "value": "args.model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_350": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_355": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_232": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'checkpoints/%s/models/model.t7' % args.exp_name",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_count_354": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "current_device_354": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "downstream/segmentation/dgcnn/main_semseg.py": {
        "sklearn": {
            "accuracy_score_138": {
                "variable": {
                    "value": "train_acc",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "train_true_cls",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(train_true_cls)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "train_pred_cls",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(train_pred_cls)",
                            "Call"
                        ]
                    ]
                }
            },
            "balanced_accuracy_score_139": {
                "variable": {
                    "value": "avg_per_class_acc",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "train_true_cls",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(train_true_cls)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "train_pred_cls",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(train_pred_cls)",
                            "Call"
                        ]
                    ]
                }
            },
            "accuracy_score_181": {
                "variable": {
                    "value": "test_acc",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "test_true_cls",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(test_true_cls)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(test_true_cls)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "test_pred_cls",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(test_pred_cls)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(test_pred_cls)",
                            "Call"
                        ]
                    ]
                }
            },
            "balanced_accuracy_score_182": {
                "variable": {
                    "value": "avg_per_class_acc",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "test_true_cls",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(test_true_cls)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(test_true_cls)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "test_pred_cls",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(test_pred_cls)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(test_pred_cls)",
                            "Call"
                        ]
                    ]
                }
            },
            "accuracy_score_257": {
                "variable": {
                    "value": "all_acc",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "all_true_cls",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(all_true_cls)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "all_pred_cls",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(all_pred_cls)",
                            "Call"
                        ]
                    ]
                }
            },
            "balanced_accuracy_score_258": {
                "variable": {
                    "value": "avg_per_class_acc",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "all_true_cls",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(all_true_cls)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "all_pred_cls",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(all_pred_cls)",
                            "Call"
                        ]
                    ]
                }
            },
            "accuracy_score_239": {
                "variable": {
                    "value": "test_acc",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "test_true_cls",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(test_true_cls)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(test_true_cls)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "test_pred_cls",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(test_pred_cls)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(test_pred_cls)",
                            "Call"
                        ]
                    ]
                }
            },
            "balanced_accuracy_score_240": {
                "variable": {
                    "value": "avg_per_class_acc",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "test_true_cls",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(test_true_cls)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(test_true_cls)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "test_pred_cls",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(test_pred_cls)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(test_pred_cls)",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "DataLoader_53": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "S3DIS(partition='train', num_points=args.num_points, test_area=args.test_area, train_area=args.train_area)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_56": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "S3DIS(partition='test', num_points=args.num_points, test_area=args.test_area, train_area=args.train_area)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_59": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if args.cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataParallel_76": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "DGCNN_semseg(args).to(device)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "DGCNN_semseg(args).to(device)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model.eval()",
                            "Call"
                        ]
                    ]
                }
            },
            "load_70": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.pretrain_weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_81": {
                "variable": {
                    "value": "opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr * 100",
                    "type": "BinOp",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_84": {
                "variable": {
                    "value": "opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "CosineAnnealingLR_87": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "opt",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "optim.SGD(model.parameters(), lr=args.lr * 100, momentum=args.momentum, weight_decay=0.0001)",
                            "Call"
                        ],
                        [
                            "optim.Adam(model.parameters(), lr=args.lr, weight_decay=0.0001)",
                            "Call"
                        ]
                    ]
                },
                "T_max": {
                    "value": "args.epochs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eta_min": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "manual_seed_323": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_count_77": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "StepLR_89": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "opt",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "optim.SGD(model.parameters(), lr=args.lr * 100, momentum=args.momentum, weight_decay=0.0001)",
                            "Call"
                        ],
                        [
                            "optim.Adam(model.parameters(), lr=args.lr, weight_decay=0.0001)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "last_epoch": {
                    "value": "args.epochs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_204": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "S3DIS(partition='test', num_points=args.num_points, test_area=test_area)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_207": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if args.cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataParallel_215": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "DGCNN_semseg(args).to(device)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "DGCNN_semseg(args).to(device)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model.eval()",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_322": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_327": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_193": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'checkpoints/%s/models/model_%s.t7' % (args.exp_name, args.test_area)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_216": {
                "f": {
                    "value": "os.path.join(args.model_root, 'model_%s.t7' % test_area)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_count_326": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "current_device_326": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "downstream/detection/votenet/utils/tf_logger.py": {
        "tensorflow": {
            "FileWriter_19": {
                "variable": {
                    "value": "self.writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "log_dir",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Summary_23": {
                "variable": {
                    "value": "summary",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[tf.Summary.Value(tag=tag, simple_value=value)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Summary_46": {
                "variable": {
                    "value": "summary",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "img_summaries",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "HistogramProto_56": {
                "variable": {
                    "value": "hist",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Summary_73": {
                "variable": {
                    "value": "summary",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[tf.Summary.Value(tag=tag, histo=hist)]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "BYOL/data/ModelNet40Loader.py": {
        "torch": {
            "DataLoader_366": {
                "variable": {
                    "value": "dloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ModelNet40Cls(16, train=True, transforms=transforms)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "BYOL/data/ModelNet40subsetLoader.py": {
        "torch": {}
    },
    "BYOL/data/ScanNetLoader.py": {
        "torch": {
            "DataLoader_288": {
                "variable": {
                    "value": "dloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ScanNetFrameWhole(4096, transforms_1=train_transforms_1, transforms_2=train_transforms_2, train=True, root_path='/media/siyuan/2f9b2b54-148c-456e-912c-24c692a0a092/home/siyuan/Dataset/scannet/scans')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "unsqueeze_104": {
                "variable": {
                    "value": "height",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "height",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "point_set[:, 2] - floor",
                            "BinOp"
                        ],
                        [
                            "torch.unsqueeze(height, 1)",
                            "Call"
                        ],
                        [
                            "point_set[:, 2] - floor",
                            "BinOp"
                        ],
                        [
                            "torch.unsqueeze(height, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_105": {
                "variable": {
                    "value": "height_",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "height_",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "point_set_[:, 2] - floor_",
                            "BinOp"
                        ],
                        [
                            "torch.unsqueeze(height_, 1)",
                            "Call"
                        ],
                        [
                            "point_set_[:, 2] - floor_",
                            "BinOp"
                        ],
                        [
                            "torch.unsqueeze(height_, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_106": {
                "variable": {
                    "value": "point_set",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[point_set, height]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_107": {
                "variable": {
                    "value": "point_set_",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[point_set_, height_]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_216": {
                "variable": {
                    "value": "height",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "height",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "point_set[:, 2] - floor",
                            "BinOp"
                        ],
                        [
                            "torch.unsqueeze(height, 1)",
                            "Call"
                        ],
                        [
                            "point_set[:, 2] - floor",
                            "BinOp"
                        ],
                        [
                            "torch.unsqueeze(height, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_217": {
                "variable": {
                    "value": "height_",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "height_",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "point_set_[:, 2] - floor_",
                            "BinOp"
                        ],
                        [
                            "torch.unsqueeze(height_, 1)",
                            "Call"
                        ],
                        [
                            "point_set_[:, 2] - floor_",
                            "BinOp"
                        ],
                        [
                            "torch.unsqueeze(height_, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_218": {
                "variable": {
                    "value": "point_set",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[point_set, height]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_219": {
                "variable": {
                    "value": "point_set_",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[point_set_, height_]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "BYOL/data/ShapeNetLoader.py": {
        "torch": {}
    },
    "BYOL/data/data_utils.py": {
        "torch": {
            "from_numpy_30": {
                "variable": {
                    "value": "R",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "cosval * np.eye(3) + sinval * cross_prod_mat + (1.0 - cosval) * np.outer(u, u)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Tensor_55": {
                "variable": {
                    "value": "cids",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_412": {
                "variable": {
                    "value": "points",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "norm_49": {
                "variable": {
                    "value": "dist_c",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "points - points[cids[-1]]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_50": {
                "variable": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "dist < dist_c",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros(points.shape[0]) + 10000.0",
                            "BinOp"
                        ],
                        [
                            "dist.type_as(points)",
                            "Call"
                        ],
                        [
                            "torch.where(dist < dist_c, dist, dist_c)",
                            "Call"
                        ],
                        [
                            "r - 2 * loc_matmul + r_t",
                            "BinOp"
                        ],
                        [
                            "dist[cids]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "dist_c",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.norm(points - points[cids[-1]], p=2, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmin_52": {
                "variable": {
                    "value": "new_cid",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros(points.shape[0]) + 10000.0",
                            "BinOp"
                        ],
                        [
                            "dist.type_as(points)",
                            "Call"
                        ],
                        [
                            "torch.where(dist < dist_c, dist, dist_c)",
                            "Call"
                        ],
                        [
                            "r - 2 * loc_matmul + r_t",
                            "BinOp"
                        ],
                        [
                            "dist[cids]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "matmul_122": {
                "input": {
                    "value": "Rz",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "angle_axis(angles[2], np.array([0.0, 0.0, 1.0]))",
                            "Call"
                        ],
                        [
                            "angle_axis(angles[2], np.array([0.0, 0.0, 1.0]))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "Ry",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "angle_axis(angles[1], np.array([0.0, 1.0, 0.0]))",
                            "Call"
                        ],
                        [
                            "angle_axis(angles[1], np.array([0.0, 1.0, 0.0]))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_375": {
                "variable": {
                    "value": "loc_matmul",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xyzs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "points[:, :3]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "xyzs.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_377": {
                "variable": {
                    "value": "r",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loc_norm",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "xyzs * xyzs",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_397": {
                "variable": {
                    "value": "new_points",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sample_points",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "points[choice]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_398": {
                "variable": {
                    "value": "new_points",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[points, new_points]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_46": {
                "*size": {
                    "value": "points.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_85": {
                "input": {
                    "value": "Rz",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "angle_axis(angles[2], np.array([0.0, 0.0, 1.0]))",
                            "Call"
                        ],
                        [
                            "angle_axis(angles[2], np.array([0.0, 0.0, 1.0]))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "Ry",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "angle_axis(angles[1], np.array([0.0, 1.0, 0.0]))",
                            "Call"
                        ],
                        [
                            "angle_axis(angles[1], np.array([0.0, 1.0, 0.0]))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_96": {
                "variable": {
                    "value": "points[:, 0:3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "pc_xyz",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "points[:, 0:3]",
                            "Subscript"
                        ],
                        [
                            "points[:, 0:3]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "rotation_matrix.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_97": {
                "variable": {
                    "value": "points[:, 3:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "pc_normals",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "points[:, 3:]",
                            "Subscript"
                        ],
                        [
                            "points[:, 3:]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "rotation_matrix.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_130": {
                "variable": {
                    "value": "points[:, 0:3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "pc_xyz",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "points[:, 0:3]",
                            "Subscript"
                        ],
                        [
                            "points[:, 0:3]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "rotation_matrix.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_131": {
                "variable": {
                    "value": "points[:, 3:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "pc_normals",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "points[:, 3:]",
                            "Subscript"
                        ],
                        [
                            "points[:, 3:]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "rotation_matrix.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_168": {
                "ndarray": {
                    "value": "points",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.random.uniform(0, 100, [1024, 3])",
                            "Call"
                        ],
                        [
                            "torch.Tensor(points).cuda()",
                            "Call"
                        ],
                        [
                            "points[pt_idxs[0:num], :]",
                            "Subscript"
                        ],
                        [
                            "points.numpy()",
                            "Call"
                        ],
                        [
                            "points.numpy()",
                            "Call"
                        ],
                        [
                            "points.numpy()",
                            "Call"
                        ],
                        [
                            "points[cut_indices == False]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_173": {
                "ndarray": {
                    "value": "points",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.random.uniform(0, 100, [1024, 3])",
                            "Call"
                        ],
                        [
                            "torch.Tensor(points).cuda()",
                            "Call"
                        ],
                        [
                            "points[pt_idxs[0:num], :]",
                            "Subscript"
                        ],
                        [
                            "points.numpy()",
                            "Call"
                        ],
                        [
                            "points.numpy()",
                            "Call"
                        ],
                        [
                            "points.numpy()",
                            "Call"
                        ],
                        [
                            "points[cut_indices == False]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_192": {
                "ndarray": {
                    "value": "pc",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "points.numpy()",
                            "Call"
                        ],
                        [
                            "points.numpy()",
                            "Call"
                        ],
                        [
                            "pc[pt_idxs[0:self.num_points], :]",
                            "Subscript"
                        ],
                        [
                            "pc - centroid",
                            "BinOp"
                        ],
                        [
                            "pc / m",
                            "BinOp"
                        ],
                        [
                            "points.numpy()",
                            "Call"
                        ],
                        [
                            "points.numpy()",
                            "Call"
                        ],
                        [
                            "pc[valid, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_205": {
                "ndarray": {
                    "value": "pc",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "points.numpy()",
                            "Call"
                        ],
                        [
                            "points.numpy()",
                            "Call"
                        ],
                        [
                            "pc[pt_idxs[0:self.num_points], :]",
                            "Subscript"
                        ],
                        [
                            "pc - centroid",
                            "BinOp"
                        ],
                        [
                            "pc / m",
                            "BinOp"
                        ],
                        [
                            "points.numpy()",
                            "Call"
                        ],
                        [
                            "points.numpy()",
                            "Call"
                        ],
                        [
                            "pc[valid, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_223": {
                "ndarray": {
                    "value": "pc",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "points.numpy()",
                            "Call"
                        ],
                        [
                            "points.numpy()",
                            "Call"
                        ],
                        [
                            "pc[pt_idxs[0:self.num_points], :]",
                            "Subscript"
                        ],
                        [
                            "pc - centroid",
                            "BinOp"
                        ],
                        [
                            "pc / m",
                            "BinOp"
                        ],
                        [
                            "points.numpy()",
                            "Call"
                        ],
                        [
                            "points.numpy()",
                            "Call"
                        ],
                        [
                            "pc[valid, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_234": {
                "ndarray": {
                    "value": "pc",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "points.numpy()",
                            "Call"
                        ],
                        [
                            "points.numpy()",
                            "Call"
                        ],
                        [
                            "pc[pt_idxs[0:self.num_points], :]",
                            "Subscript"
                        ],
                        [
                            "pc - centroid",
                            "BinOp"
                        ],
                        [
                            "pc / m",
                            "BinOp"
                        ],
                        [
                            "points.numpy()",
                            "Call"
                        ],
                        [
                            "points.numpy()",
                            "Call"
                        ],
                        [
                            "pc[valid, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_297": {
                "ndarray": {
                    "value": "new_points",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "upsample(points)",
                            "Call"
                        ],
                        [
                            "points[new_indices]",
                            "Subscript"
                        ],
                        [
                            "torch.mean(sample_points, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([points, new_points], 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_347": {
                "ndarray": {
                    "value": "points",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.random.uniform(0, 100, [1024, 3])",
                            "Call"
                        ],
                        [
                            "torch.Tensor(points).cuda()",
                            "Call"
                        ],
                        [
                            "points[pt_idxs[0:num], :]",
                            "Subscript"
                        ],
                        [
                            "points.numpy()",
                            "Call"
                        ],
                        [
                            "points.numpy()",
                            "Call"
                        ],
                        [
                            "points.numpy()",
                            "Call"
                        ],
                        [
                            "points[cut_indices == False]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "matmul_92": {
                "input": {
                    "value": "points",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.random.uniform(0, 100, [1024, 3])",
                            "Call"
                        ],
                        [
                            "torch.Tensor(points).cuda()",
                            "Call"
                        ],
                        [
                            "points[pt_idxs[0:num], :]",
                            "Subscript"
                        ],
                        [
                            "points.numpy()",
                            "Call"
                        ],
                        [
                            "points.numpy()",
                            "Call"
                        ],
                        [
                            "points.numpy()",
                            "Call"
                        ],
                        [
                            "points[cut_indices == False]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "rotation_matrix.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_126": {
                "input": {
                    "value": "points",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.random.uniform(0, 100, [1024, 3])",
                            "Call"
                        ],
                        [
                            "torch.Tensor(points).cuda()",
                            "Call"
                        ],
                        [
                            "points[pt_idxs[0:num], :]",
                            "Subscript"
                        ],
                        [
                            "points.numpy()",
                            "Call"
                        ],
                        [
                            "points.numpy()",
                            "Call"
                        ],
                        [
                            "points.numpy()",
                            "Call"
                        ],
                        [
                            "points[cut_indices == False]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "rotation_matrix.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "topk_385": {
                "input": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros(points.shape[0]) + 10000.0",
                            "BinOp"
                        ],
                        [
                            "dist.type_as(points)",
                            "Call"
                        ],
                        [
                            "torch.where(dist < dist_c, dist, dist_c)",
                            "Call"
                        ],
                        [
                            "r - 2 * loc_matmul + r_t",
                            "BinOp"
                        ],
                        [
                            "dist[cids]",
                            "Subscript"
                        ]
                    ]
                },
                "k": {
                    "value": "self.nsample * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "largest": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "from_numpy_290": {
                "ndarray": {
                    "value": "points",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.random.uniform(0, 100, [1024, 3])",
                            "Call"
                        ],
                        [
                            "torch.Tensor(points).cuda()",
                            "Call"
                        ],
                        [
                            "points[pt_idxs[0:num], :]",
                            "Subscript"
                        ],
                        [
                            "points.numpy()",
                            "Call"
                        ],
                        [
                            "points.numpy()",
                            "Call"
                        ],
                        [
                            "points.numpy()",
                            "Call"
                        ],
                        [
                            "points[cut_indices == False]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_335": {
                "ndarray": {
                    "value": "points",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.random.uniform(0, 100, [1024, 3])",
                            "Call"
                        ],
                        [
                            "torch.Tensor(points).cuda()",
                            "Call"
                        ],
                        [
                            "points[pt_idxs[0:num], :]",
                            "Subscript"
                        ],
                        [
                            "points.numpy()",
                            "Call"
                        ],
                        [
                            "points.numpy()",
                            "Call"
                        ],
                        [
                            "points.numpy()",
                            "Call"
                        ],
                        [
                            "points[cut_indices == False]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "BYOL/models/base_model.py": {
        "torch": {
            "normalize_87": {
                "variable": {
                    "value": "norm_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_88": {
                "variable": {
                    "value": "norm_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_134": {
                "variable": {
                    "value": "reduced_outputs[val_loss]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[output['val_loss'] for output in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "mean_134": {
                "variable": {
                    "value": "reduced_outputs[val_loss]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CosineAnnealingLR_175": {
                "variable": {
                    "value": "lr_scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(self.parameters(), lr=self.hparams['optimizer.lr'], weight_decay=self.hparams['optimizer.weight_decay'])",
                            "Call"
                        ],
                        [
                            "LARSWrapper(optimizer)",
                            "Call"
                        ],
                        [
                            "torch.optim.AdamW(self.parameters(), lr=self.hparams['optimizer.lr'], weight_decay=self.hparams['optimizer.weight_decay'])",
                            "Call"
                        ],
                        [
                            "torch.optim.SGD(self.parameters(), lr=self.hparams['optimizer.lr'], weight_decay=self.hparams['optimizer.weight_decay'], momentum=0.9)",
                            "Call"
                        ],
                        [
                            "LARSWrapper(base_optimizer)",
                            "Call"
                        ]
                    ]
                },
                "T_max": {
                    "value": "self.hparams['epochs']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "eta_min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "last_epoch": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Adam_145": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.hparams['optimizer.lr']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.hparams['optimizer.weight_decay']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "DataLoader_275": {
                "dataset": {
                    "value": "dset",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.hparams['batch_size']",
                            "Subscript"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "mode == 'train'",
                    "type": "Compare",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.hparams['num_workers']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_80": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdamW_153": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.hparams['optimizer.lr']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.hparams['optimizer.weight_decay']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "SGD_160": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.hparams['optimizer.lr']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.hparams['optimizer.weight_decay']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "SGD_168": {
                "variable": {
                    "value": "base_optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.hparams['optimizer.lr']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.hparams['optimizer.weight_decay']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "BYOL/models/lars_scheduling.py": {
        "torch": {
            "no_grad_54": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "norm_77": {
                "variable": {
                    "value": "p_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "norm_78": {
                "variable": {
                    "value": "g_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p.grad.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "BYOL/models/networks_PointNet.py": {
        "torch": {
            "Conv1d_19": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_20": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_21": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_22": {
                "variable": {
                    "value": "self.conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_23": {
                "variable": {
                    "value": "self.conv5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.emb_dims",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_24": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_25": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_26": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_27": {
                "variable": {
                    "value": "self.bn4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_28": {
                "variable": {
                    "value": "self.bn5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.emb_dims",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_31": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_32": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_33": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn3(self.conv3(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_34": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn4(self.conv4(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_35": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn5(self.conv5(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "adaptive_max_pool1d_36": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "squeeze_36": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_52": {
                "variable": {
                    "value": "self.projector",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.emb_dims, self.hparams['mlp_hidden_size'], bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_83": {
                "variable": {
                    "value": "self.predictor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.hparams['projection_size'], self.hparams['mlp_hidden_size'], bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_53": {
                "in_features": {
                    "value": "self.emb_dims",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hparams['mlp_hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_54": {
                "num_features": {
                    "value": "self.hparams['mlp_hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_55": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_56": {
                "in_features": {
                    "value": "self.hparams['mlp_hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hparams['projection_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_84": {
                "in_features": {
                    "value": "self.hparams['projection_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hparams['mlp_hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_85": {
                "num_features": {
                    "value": "self.hparams['mlp_hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_86": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_87": {
                "in_features": {
                    "value": "self.hparams['mlp_hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hparams['projection_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "BYOL/models/networks_dgcnn.py": {
        "torch": {
            "sum_15": {
                "variable": {
                    "value": "xx",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_28": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_44": {
                "variable": {
                    "value": "feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(feature - x, x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "permute_44": {
                "variable": {
                    "value": "feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_57": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_58": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_59": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_60": {
                "variable": {
                    "value": "self.bn4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_61": {
                "variable": {
                    "value": "self.bn5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.emb_dims",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_63": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(6, 64, kernel_size=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_66": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(64 * 2, 64, kernel_size=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_69": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(64 * 2, 128, kernel_size=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_72": {
                "variable": {
                    "value": "self.conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(128 * 2, 256, kernel_size=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_75": {
                "variable": {
                    "value": "self.conv5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv1d(512, self.emb_dims, kernel_size=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_104": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x1, x2, x3, x4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "adaptive_max_pool1d_107": {
                "variable": {
                    "value": "x1",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool1d_108": {
                "variable": {
                    "value": "x2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.view(batch_size, -1, num_points)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(batch_size, num_points, 1, num_dims).repeat(1, 1, k, 1)",
                            "Call"
                        ],
                        [
                            "get_graph_feature(x, k=self.k)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "get_graph_feature(x1, k=self.k)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "get_graph_feature(x2, k=self.k)",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "get_graph_feature(x3, k=self.k)",
                            "Call"
                        ],
                        [
                            "self.conv4(x)",
                            "Call"
                        ],
                        [
                            "torch.cat((x1, x2, x3, x4), dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv5(x)",
                            "Call"
                        ],
                        [
                            "torch.cat((x1, x2), 1)",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_109": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x1, x2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_132": {
                "variable": {
                    "value": "self.projector",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.emb_dims * 2, self.hparams['mlp_hidden_size'], bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_163": {
                "variable": {
                    "value": "self.predictor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.hparams['projection_size'], self.hparams['mlp_hidden_size'], bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_14": {
                "input": {
                    "value": "x.transpose(2, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.view(batch_size, -1, num_points)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(batch_size, num_points, 1, num_dims).repeat(1, 1, k, 1)",
                            "Call"
                        ],
                        [
                            "get_graph_feature(x, k=self.k)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "get_graph_feature(x1, k=self.k)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "get_graph_feature(x2, k=self.k)",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "get_graph_feature(x3, k=self.k)",
                            "Call"
                        ],
                        [
                            "self.conv4(x)",
                            "Call"
                        ],
                        [
                            "torch.cat((x1, x2, x3, x4), dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv5(x)",
                            "Call"
                        ],
                        [
                            "torch.cat((x1, x2), 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_30": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.size(0)",
                            "Call"
                        ],
                        [
                            "x.size(0)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda')",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_63": {
                "in_channels": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_65": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_66": {
                "in_channels": {
                    "value": "64 * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_68": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_69": {
                "in_channels": {
                    "value": "64 * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_71": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_72": {
                "in_channels": {
                    "value": "128 * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_74": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv1d_75": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.emb_dims",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_77": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_133": {
                "in_features": {
                    "value": "self.emb_dims * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hparams['mlp_hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_134": {
                "num_features": {
                    "value": "self.hparams['mlp_hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_135": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_136": {
                "in_features": {
                    "value": "self.hparams['mlp_hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hparams['projection_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_164": {
                "in_features": {
                    "value": "self.hparams['projection_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hparams['mlp_hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_165": {
                "num_features": {
                    "value": "self.hparams['mlp_hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_166": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_167": {
                "in_features": {
                    "value": "self.hparams['mlp_hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hparams['projection_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "BYOL/models/networks_dgcnn_partseg.py": {
        "torch": {
            "sum_16": {
                "variable": {
                    "value": "xx",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_29": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_45": {
                "variable": {
                    "value": "feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(feature - x, x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "permute_45": {
                "variable": {
                    "value": "feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_57": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_58": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_59": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_61": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(6, 64, kernel_size=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_64": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(64, 128, kernel_size=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_67": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv1d(128, 1024, kernel_size=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_71": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_72": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_73": {
                "variable": {
                    "value": "self.linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_74": {
                "variable": {
                    "value": "self.bn4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_76": {
                "variable": {
                    "value": "self.transform",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "3 * 3",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "leaky_relu_90": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn3(self.linear1(x))",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_91": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn4(self.linear2(x))",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "BatchNorm2d_106": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_107": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_108": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_109": {
                "variable": {
                    "value": "self.bn4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_110": {
                "variable": {
                    "value": "self.bn5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_111": {
                "variable": {
                    "value": "self.bn6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.hparams['emb_dims']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "BatchNorm1d_112": {
                "variable": {
                    "value": "self.bn7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_113": {
                "variable": {
                    "value": "self.bn8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_114": {
                "variable": {
                    "value": "self.bn9",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_115": {
                "variable": {
                    "value": "self.bn10",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_117": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(6, 64, kernel_size=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_120": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(64, 64, kernel_size=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_123": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(64 * 2, 64, kernel_size=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_126": {
                "variable": {
                    "value": "self.conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(64, 64, kernel_size=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_129": {
                "variable": {
                    "value": "self.conv5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(64 * 2, 64, kernel_size=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_132": {
                "variable": {
                    "value": "self.conv6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv1d(192, self.hparams['emb_dims'], kernel_size=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_159": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.view(batch_size, -1, num_points)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(batch_size, num_points, 1, num_dims).repeat(1, 1, k, 1)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "x.max(dim=-1, keepdim=False)[0]",
                            "Subscript"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "x.max(dim=-1, keepdim=False)[0]",
                            "Subscript"
                        ],
                        [
                            "F.leaky_relu(self.bn3(self.linear1(x)), negative_slope=0.2)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.bn4(self.linear2(x)), negative_slope=0.2)",
                            "Call"
                        ],
                        [
                            "self.transform(x)",
                            "Call"
                        ],
                        [
                            "x.view(batch_size, 3, 3)",
                            "Call"
                        ],
                        [
                            "x[:, :3, :]",
                            "Subscript"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(x, t)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "get_graph_feature(x, k=self.k)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "get_graph_feature(x1, k=self.k)",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "self.conv4(x)",
                            "Call"
                        ],
                        [
                            "get_graph_feature(x2, k=self.k)",
                            "Call"
                        ],
                        [
                            "self.conv5(x)",
                            "Call"
                        ],
                        [
                            "torch.cat((x1, x2, x3), dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv6(x)",
                            "Call"
                        ],
                        [
                            "x.max(dim=-1, keepdim=True)[0]",
                            "Subscript"
                        ],
                        [
                            "x.squeeze()",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.transform_net(x0)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_176": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x1, x2, x3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_212": {
                "variable": {
                    "value": "self.projector",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.emb_dims, self.hparams['mlp_hidden_size'], bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_243": {
                "variable": {
                    "value": "self.predictor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.hparams['projection_size'], self.hparams['mlp_hidden_size'], bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_272": {
                "variable": {
                    "value": "self.projector",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.emb_dims, self.hparams['mlp_hidden_size'], bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_15": {
                "input": {
                    "value": "x.transpose(2, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.view(batch_size, -1, num_points)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(batch_size, num_points, 1, num_dims).repeat(1, 1, k, 1)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "x.max(dim=-1, keepdim=False)[0]",
                            "Subscript"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "x.max(dim=-1, keepdim=False)[0]",
                            "Subscript"
                        ],
                        [
                            "F.leaky_relu(self.bn3(self.linear1(x)), negative_slope=0.2)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.bn4(self.linear2(x)), negative_slope=0.2)",
                            "Call"
                        ],
                        [
                            "self.transform(x)",
                            "Call"
                        ],
                        [
                            "x.view(batch_size, 3, 3)",
                            "Call"
                        ],
                        [
                            "x[:, :3, :]",
                            "Subscript"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(x, t)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "get_graph_feature(x, k=self.k)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "get_graph_feature(x1, k=self.k)",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "self.conv4(x)",
                            "Call"
                        ],
                        [
                            "get_graph_feature(x2, k=self.k)",
                            "Call"
                        ],
                        [
                            "self.conv5(x)",
                            "Call"
                        ],
                        [
                            "torch.cat((x1, x2, x3), dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv6(x)",
                            "Call"
                        ],
                        [
                            "x.max(dim=-1, keepdim=True)[0]",
                            "Subscript"
                        ],
                        [
                            "x.squeeze()",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_31": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.size(0)",
                            "Call"
                        ],
                        [
                            "x.size(0)",
                            "Call"
                        ],
                        [
                            "x.size(0)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda')",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_61": {
                "in_channels": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_63": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_64": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_66": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv1d_67": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_69": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_117": {
                "in_channels": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_119": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_120": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_122": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_123": {
                "in_channels": {
                    "value": "64 * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_125": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_126": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_128": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_129": {
                "in_channels": {
                    "value": "64 * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_131": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv1d_132": {
                "in_channels": {
                    "value": "192",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.hparams['emb_dims']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_134": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_213": {
                "in_features": {
                    "value": "self.emb_dims",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hparams['mlp_hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_214": {
                "num_features": {
                    "value": "self.hparams['mlp_hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_215": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_216": {
                "in_features": {
                    "value": "self.hparams['mlp_hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hparams['projection_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_244": {
                "in_features": {
                    "value": "self.hparams['projection_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hparams['mlp_hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_245": {
                "num_features": {
                    "value": "self.hparams['mlp_hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_246": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_247": {
                "in_features": {
                    "value": "self.hparams['mlp_hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hparams['projection_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_273": {
                "in_features": {
                    "value": "self.emb_dims",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hparams['mlp_hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_274": {
                "num_features": {
                    "value": "self.hparams['mlp_hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_275": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_276": {
                "in_features": {
                    "value": "self.hparams['mlp_hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hparams['projection_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "BYOL/models/networks_dgcnn_semseg.py": {
        "torch": {
            "sum_15": {
                "variable": {
                    "value": "xx",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_28": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_44": {
                "variable": {
                    "value": "feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(feature - x, x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "permute_44": {
                "variable": {
                    "value": "feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_54": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_55": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_56": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_57": {
                "variable": {
                    "value": "self.bn4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_58": {
                "variable": {
                    "value": "self.bn5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_59": {
                "variable": {
                    "value": "self.bn6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.hparams['emb_dims']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "BatchNorm1d_60": {
                "variable": {
                    "value": "self.bn7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_61": {
                "variable": {
                    "value": "self.bn8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_63": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(6, 64, kernel_size=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_66": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(64, 64, kernel_size=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_69": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(64 * 2, 64, kernel_size=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_72": {
                "variable": {
                    "value": "self.conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(64, 64, kernel_size=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_75": {
                "variable": {
                    "value": "self.conv5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(64 * 2, 64, kernel_size=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_78": {
                "variable": {
                    "value": "self.conv6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv1d(192, self.hparams['emb_dims'], kernel_size=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_81": {
                "variable": {
                    "value": "self.conv7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv1d(1216, 512, kernel_size=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_84": {
                "variable": {
                    "value": "self.conv8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv1d(512, 256, kernel_size=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_109": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x1, x2, x3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_113": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.view(batch_size, -1, num_points)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(batch_size, num_points, 1, num_dims).repeat(1, 1, k, 1)",
                            "Call"
                        ],
                        [
                            "get_graph_feature(x, k=self.hparams['k'])",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "get_graph_feature(x1, self.hparams['k'])",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "self.conv4(x)",
                            "Call"
                        ],
                        [
                            "get_graph_feature(x2, self.hparams['k'])",
                            "Call"
                        ],
                        [
                            "self.conv5(x)",
                            "Call"
                        ],
                        [
                            "torch.cat((x1, x2, x3), dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv6(x)",
                            "Call"
                        ],
                        [
                            "x.max(dim=-1, keepdim=True)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.squeeze(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_140": {
                "variable": {
                    "value": "self.projector",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.hparams['emb_dims'], self.hparams['mlp_hidden_size'], bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_171": {
                "variable": {
                    "value": "self.predictor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.hparams['projection_size'], self.hparams['mlp_hidden_size'], bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_14": {
                "input": {
                    "value": "x.transpose(2, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.view(batch_size, -1, num_points)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(batch_size, num_points, 1, num_dims).repeat(1, 1, k, 1)",
                            "Call"
                        ],
                        [
                            "get_graph_feature(x, k=self.hparams['k'])",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "get_graph_feature(x1, self.hparams['k'])",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "self.conv4(x)",
                            "Call"
                        ],
                        [
                            "get_graph_feature(x2, self.hparams['k'])",
                            "Call"
                        ],
                        [
                            "self.conv5(x)",
                            "Call"
                        ],
                        [
                            "torch.cat((x1, x2, x3), dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv6(x)",
                            "Call"
                        ],
                        [
                            "x.max(dim=-1, keepdim=True)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.squeeze(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_30": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.size(0)",
                            "Call"
                        ],
                        [
                            "x.size(0)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda')",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_63": {
                "in_channels": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_65": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_66": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_68": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_69": {
                "in_channels": {
                    "value": "64 * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_71": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_72": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_74": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_75": {
                "in_channels": {
                    "value": "64 * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_77": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv1d_78": {
                "in_channels": {
                    "value": "192",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.hparams['emb_dims']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_80": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv1d_81": {
                "in_channels": {
                    "value": "1216",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_83": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv1d_84": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_86": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_141": {
                "in_features": {
                    "value": "self.hparams['emb_dims']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hparams['mlp_hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_142": {
                "num_features": {
                    "value": "self.hparams['mlp_hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_143": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_144": {
                "in_features": {
                    "value": "self.hparams['mlp_hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hparams['projection_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_172": {
                "in_features": {
                    "value": "self.hparams['projection_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hparams['mlp_hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_173": {
                "num_features": {
                    "value": "self.hparams['mlp_hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_174": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_175": {
                "in_features": {
                    "value": "self.hparams['mlp_hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hparams['projection_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "BYOL/models/networks_votenet.py": {
        "torch": {
            "MaxPool1d_73": {
                "variable": {
                    "value": "self.max_pooling",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_194": {
                "variable": {
                    "value": "self.projector",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(256, self.hparams['mlp_hidden_size'], bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_225": {
                "variable": {
                    "value": "self.predictor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(256, self.hparams['mlp_hidden_size'], bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_195": {
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hparams['mlp_hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_196": {
                "num_features": {
                    "value": "self.hparams['mlp_hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_197": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_198": {
                "in_features": {
                    "value": "self.hparams['mlp_hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hparams['projection_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_226": {
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hparams['mlp_hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_227": {
                "num_features": {
                    "value": "self.hparams['mlp_hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_228": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_229": {
                "in_features": {
                    "value": "self.hparams['mlp_hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hparams['projection_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "BYOL/pointnet2_vote/pointnet2_modules.py": {
        "torch": {
            "ModuleList_111": {
                "variable": {
                    "value": "self.groupers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_112": {
                "variable": {
                    "value": "self.mlps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_295": {
                "variable": {
                    "value": "self.groupers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_296": {
                "variable": {
                    "value": "self.mlps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_440": {
                "variable": {
                    "value": "self.groupers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_441": {
                "variable": {
                    "value": "self.mlps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_502": {
                "seed": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_all_503": {
                "seed": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_68": {
                "variable": {
                    "value": "new_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.groupers[i](xyz, new_xyz, features)",
                            "Call"
                        ],
                        [
                            "self.mlps[i](new_features)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "new_features.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "self.mlp_module(grouped_features)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "new_features.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "torch.sum(new_features * rbf.unsqueeze(1), -1, keepdim=True) / float(self.nsample)",
                            "BinOp"
                        ],
                        [
                            "self.groupers[i](xyz, new_xyz, features)",
                            "Call"
                        ],
                        [
                            "self.mlps[i](new_features)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "new_features.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "torch.cat([interpolated_feats, unknow_feats], dim=1)",
                            "Call"
                        ],
                        [
                            "interpolated_feats",
                            "Name"
                        ],
                        [
                            "new_features.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "self.mlp(new_features)",
                            "Call"
                        ],
                        [
                            "self.groupers[i](xyz1, xyz2, features1)",
                            "Call"
                        ],
                        [
                            "self.mlps[i](new_features)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "new_features.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "torch.cat([new_features, features2], dim=1)",
                            "Call"
                        ],
                        [
                            "new_features.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "self.post_mlp(new_features)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "[1, new_features.size(3)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "max_pool2d_256": {
                "variable": {
                    "value": "new_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.groupers[i](xyz, new_xyz, features)",
                            "Call"
                        ],
                        [
                            "self.mlps[i](new_features)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "new_features.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "self.mlp_module(grouped_features)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "new_features.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "torch.sum(new_features * rbf.unsqueeze(1), -1, keepdim=True) / float(self.nsample)",
                            "BinOp"
                        ],
                        [
                            "self.groupers[i](xyz, new_xyz, features)",
                            "Call"
                        ],
                        [
                            "self.mlps[i](new_features)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "new_features.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "torch.cat([interpolated_feats, unknow_feats], dim=1)",
                            "Call"
                        ],
                        [
                            "interpolated_feats",
                            "Name"
                        ],
                        [
                            "new_features.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "self.mlp(new_features)",
                            "Call"
                        ],
                        [
                            "self.groupers[i](xyz1, xyz2, features1)",
                            "Call"
                        ],
                        [
                            "self.mlps[i](new_features)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "new_features.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "torch.cat([new_features, features2], dim=1)",
                            "Call"
                        ],
                        [
                            "new_features.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "self.post_mlp(new_features)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "[1, new_features.size(3)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "max_pool2d_347": {
                "variable": {
                    "value": "new_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.groupers[i](xyz, new_xyz, features)",
                            "Call"
                        ],
                        [
                            "self.mlps[i](new_features)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "new_features.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "self.mlp_module(grouped_features)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "new_features.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "torch.sum(new_features * rbf.unsqueeze(1), -1, keepdim=True) / float(self.nsample)",
                            "BinOp"
                        ],
                        [
                            "self.groupers[i](xyz, new_xyz, features)",
                            "Call"
                        ],
                        [
                            "self.mlps[i](new_features)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "new_features.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "torch.cat([interpolated_feats, unknow_feats], dim=1)",
                            "Call"
                        ],
                        [
                            "interpolated_feats",
                            "Name"
                        ],
                        [
                            "new_features.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "self.mlp(new_features)",
                            "Call"
                        ],
                        [
                            "self.groupers[i](xyz1, xyz2, features1)",
                            "Call"
                        ],
                        [
                            "self.mlps[i](new_features)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "new_features.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "torch.cat([new_features, features2], dim=1)",
                            "Call"
                        ],
                        [
                            "new_features.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "self.post_mlp(new_features)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "[1, new_features.size(3)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sum_397": {
                "variable": {
                    "value": "norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dist_recip",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1.0 / (dist + 1e-08)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_409": {
                "variable": {
                    "value": "new_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[interpolated_feats, unknow_feats]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_483": {
                "variable": {
                    "value": "new_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.groupers[i](xyz, new_xyz, features)",
                            "Call"
                        ],
                        [
                            "self.mlps[i](new_features)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "new_features.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "self.mlp_module(grouped_features)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "new_features.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "torch.sum(new_features * rbf.unsqueeze(1), -1, keepdim=True) / float(self.nsample)",
                            "BinOp"
                        ],
                        [
                            "self.groupers[i](xyz, new_xyz, features)",
                            "Call"
                        ],
                        [
                            "self.mlps[i](new_features)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "new_features.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "torch.cat([interpolated_feats, unknow_feats], dim=1)",
                            "Call"
                        ],
                        [
                            "interpolated_feats",
                            "Name"
                        ],
                        [
                            "new_features.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "self.mlp(new_features)",
                            "Call"
                        ],
                        [
                            "self.groupers[i](xyz1, xyz2, features1)",
                            "Call"
                        ],
                        [
                            "self.mlps[i](new_features)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "new_features.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "torch.cat([new_features, features2], dim=1)",
                            "Call"
                        ],
                        [
                            "new_features.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "self.post_mlp(new_features)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "[1, new_features.size(3)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_497": {
                "tensors": {
                    "value": "new_features_list",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_497": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "randn_504": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "9",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_505": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "9",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_75": {
                "tensors": {
                    "value": "new_features_list",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "avg_pool2d_260": {
                "variable": {
                    "value": "new_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.groupers[i](xyz, new_xyz, features)",
                            "Call"
                        ],
                        [
                            "self.mlps[i](new_features)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "new_features.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "self.mlp_module(grouped_features)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "new_features.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "torch.sum(new_features * rbf.unsqueeze(1), -1, keepdim=True) / float(self.nsample)",
                            "BinOp"
                        ],
                        [
                            "self.groupers[i](xyz, new_xyz, features)",
                            "Call"
                        ],
                        [
                            "self.mlps[i](new_features)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "new_features.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "torch.cat([interpolated_feats, unknow_feats], dim=1)",
                            "Call"
                        ],
                        [
                            "interpolated_feats",
                            "Name"
                        ],
                        [
                            "new_features.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "self.mlp(new_features)",
                            "Call"
                        ],
                        [
                            "self.groupers[i](xyz1, xyz2, features1)",
                            "Call"
                        ],
                        [
                            "self.mlps[i](new_features)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "new_features.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "torch.cat([new_features, features2], dim=1)",
                            "Call"
                        ],
                        [
                            "new_features.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "self.post_mlp(new_features)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "[1, new_features.size(3)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_354": {
                "tensors": {
                    "value": "new_features_list",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_489": {
                "variable": {
                    "value": "new_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[new_features, features2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_266": {
                "variable": {
                    "value": "rbf",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1 * grouped_xyz.pow(2).sum(1, keepdim=False) / self.sigma ** 2 / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_267": {
                "input": {
                    "value": "new_features * rbf.unsqueeze(1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "BYOL/pointnet2_vote/pointnet2_test.py": {
        "torch": {
            "randn_22": {
                "variable": {
                    "value": "feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "feat_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "from_numpy_25": {
                "variable": {
                    "value": "idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array([[[0, 1, 2], [1, 2, 3]]])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_26": {
                "variable": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array([[[1, 1, 1], [2, 2, 2]]])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gradcheck_30": {
                "func": {
                    "value": "interpolate_func",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "feats",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.randn(batch_size, feat_dim, m, requires_grad=True).float().cuda()",
                            "Call"
                        ]
                    ]
                },
                "atol": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "rtol": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "BYOL/pointnet2_vote/pointnet2_utils.py": {
        "torch": {
            "zeros_337": {
                "variable": {
                    "value": "unique_cnt",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(idx.shape[0], idx.shape[1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sqrt_142": {
                "input": {
                    "value": "dist2",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_357": {
                "variable": {
                    "value": "new_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[grouped_xyz, grouped_features]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_415": {
                "variable": {
                    "value": "new_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[grouped_xyz, grouped_features]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unique_340": {
                "variable": {
                    "value": "unique_ind",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "idx[i_batch, i_region, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "randint_343": {
                "variable": {
                    "value": "sample_ind",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "num_unique",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "unique_ind.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "size": {
                    "value": "(self.nsample - num_unique,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_344": {
                "variable": {
                    "value": "all_ind",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(unique_ind, unique_ind[sample_ind])",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "BYOL/pointnet2_vote/pytorch_utils.py": {
        "torch": {
            "Linear_240": {
                "variable": {
                    "value": "fc",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "not bn",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ReLU_18": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_133": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_167": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_201": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_232": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "BYOL/pointnet2_vote/setup.py": {
        "torch": {}
    },
    "BYOL/train.py": {
        "torch": {}
    },
    "BYOL/transform_ckpt.py": {
        "torch": {
            "load_20": {
                "variable": {
                    "value": "ckpt",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "input_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.input_path",
                            "Attribute"
                        ]
                    ]
                }
            },
            "save_34": {
                "obj": {
                    "value": "transformed_ckpt",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "output_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_path[:-5] + '_transformed.ckpt'",
                            "BinOp"
                        ],
                        [
                            "args.output_path",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "BYOL/transform_ckpt_votenet.py": {
        "torch": {
            "load_20": {
                "variable": {
                    "value": "ckpt",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "input_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.input_path",
                            "Attribute"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_36": {
                "obj": {
                    "value": "output_ckpt",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{'model_state_dict': target_state_dict}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "output_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_path[:-5] + '_transformed.tar'",
                            "BinOp"
                        ],
                        [
                            "args.output_path",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "downstream/classification/dgcnn/data.py": {
        "torch": {}
    },
    "downstream/classification/dgcnn/model.py": {
        "torch": {
            "sum_23": {
                "variable": {
                    "value": "xx",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_36": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_51": {
                "variable": {
                    "value": "feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(feature - x, x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "permute_51": {
                "variable": {
                    "value": "feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_60": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_61": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_62": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_63": {
                "variable": {
                    "value": "self.conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_64": {
                "variable": {
                    "value": "self.conv5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "args.emb_dims",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_65": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_66": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_67": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_68": {
                "variable": {
                    "value": "self.bn4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_69": {
                "variable": {
                    "value": "self.bn5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "args.emb_dims",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_70": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.emb_dims",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_71": {
                "variable": {
                    "value": "self.bn6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_72": {
                "variable": {
                    "value": "self.dp1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_73": {
                "variable": {
                    "value": "self.linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "40",
                            "MethodArgument"
                        ],
                        [
                            "40",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "relu_76": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_77": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_78": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn3(self.conv3(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_79": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn4(self.conv4(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_80": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn5(self.conv5(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "adaptive_max_pool1d_81": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "squeeze_81": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_82": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn6(self.linear1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm2d_94": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_95": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_96": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_97": {
                "variable": {
                    "value": "self.bn4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_98": {
                "variable": {
                    "value": "self.bn5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "args.emb_dims",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_100": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(6, 64, kernel_size=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_103": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(64 * 2, 64, kernel_size=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_106": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(64 * 2, 128, kernel_size=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_109": {
                "variable": {
                    "value": "self.conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(128 * 2, 256, kernel_size=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_112": {
                "variable": {
                    "value": "self.conv5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv1d(512, args.emb_dims, kernel_size=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_115": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.emb_dims * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_116": {
                "variable": {
                    "value": "self.bn6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_117": {
                "variable": {
                    "value": "self.dp1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "args.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_118": {
                "variable": {
                    "value": "self.linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_119": {
                "variable": {
                    "value": "self.bn7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_120": {
                "variable": {
                    "value": "self.dp2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "args.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_121": {
                "variable": {
                    "value": "self.linear3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "40",
                            "MethodArgument"
                        ],
                        [
                            "40",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_141": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x1, x2, x3, x4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "adaptive_max_pool1d_144": {
                "variable": {
                    "value": "x1",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool1d_145": {
                "variable": {
                    "value": "x2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.view(batch_size, -1, num_points)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(batch_size, num_points, 1, num_dims).repeat(1, 1, k, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(self.conv4(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5(self.conv5(x)))",
                            "Call"
                        ],
                        [
                            "F.adaptive_max_pool1d(x, 1).squeeze()",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn6(self.linear1(x)))",
                            "Call"
                        ],
                        [
                            "self.dp1(x)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "get_graph_feature(x, k=self.k)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "get_graph_feature(x1, k=self.k)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "get_graph_feature(x2, k=self.k)",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "get_graph_feature(x3, k=self.k)",
                            "Call"
                        ],
                        [
                            "self.conv4(x)",
                            "Call"
                        ],
                        [
                            "torch.cat((x1, x2, x3, x4), dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv5(x)",
                            "Call"
                        ],
                        [
                            "torch.cat((x1, x2), 1)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.bn6(self.linear1(x)), negative_slope=0.2)",
                            "Call"
                        ],
                        [
                            "self.dp1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.bn7(self.linear2(x)), negative_slope=0.2)",
                            "Call"
                        ],
                        [
                            "self.dp2(x)",
                            "Call"
                        ],
                        [
                            "self.linear3(x)",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_146": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x1, x2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "leaky_relu_148": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn6(self.linear1(x))",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_150": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn7(self.linear2(x))",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "matmul_22": {
                "input": {
                    "value": "x.transpose(2, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.view(batch_size, -1, num_points)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(batch_size, num_points, 1, num_dims).repeat(1, 1, k, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(self.conv4(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5(self.conv5(x)))",
                            "Call"
                        ],
                        [
                            "F.adaptive_max_pool1d(x, 1).squeeze()",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn6(self.linear1(x)))",
                            "Call"
                        ],
                        [
                            "self.dp1(x)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "get_graph_feature(x, k=self.k)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "get_graph_feature(x1, k=self.k)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "get_graph_feature(x2, k=self.k)",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "get_graph_feature(x3, k=self.k)",
                            "Call"
                        ],
                        [
                            "self.conv4(x)",
                            "Call"
                        ],
                        [
                            "torch.cat((x1, x2, x3, x4), dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv5(x)",
                            "Call"
                        ],
                        [
                            "torch.cat((x1, x2), 1)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.bn6(self.linear1(x)), negative_slope=0.2)",
                            "Call"
                        ],
                        [
                            "self.dp1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.bn7(self.linear2(x)), negative_slope=0.2)",
                            "Call"
                        ],
                        [
                            "self.dp2(x)",
                            "Call"
                        ],
                        [
                            "self.linear3(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_38": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.size(0)",
                            "Call"
                        ],
                        [
                            "x.size(0)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda')",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_100": {
                "in_channels": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_102": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_103": {
                "in_channels": {
                    "value": "64 * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_105": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_106": {
                "in_channels": {
                    "value": "64 * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_108": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_109": {
                "in_channels": {
                    "value": "128 * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_111": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv1d_112": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "args.emb_dims",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_114": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "downstream/classification/dgcnn/util.py": {
        "torch": {
            "zeros_like_25": {
                "variable": {
                    "value": "one_hot",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "scatter_25": {
                "variable": {
                    "value": "one_hot",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "gold.view(-1, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "index": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_27": {
                "variable": {
                    "value": "log_prb",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cross_entropy_31": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "target": {
                    "value": "gold",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "gold.contiguous().view(-1)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "downstream/detection/votenet/demo.py": {
        "torch": {
            "device_66": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_75": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "load_76": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(demo_dir, 'pretrained_votenet_on_sunrgbd.tar')",
                            "Call"
                        ],
                        [
                            "os.path.join(demo_dir, 'pretrained_votenet_on_scannet.tar')",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_89": {
                "ndarray": {
                    "value": "pc",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "preprocess_point_cloud(point_cloud)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(point_cloud.astype(np.float32), 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_91": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_66": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "downstream/detection/votenet/eval.py": {
        "torch": {
            "DataLoader_95": {
                "variable": {
                    "value": "TEST_DATALOADER",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "TEST_DATASET",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "SunrgbdDetectionVotesDataset('val', num_points=NUM_POINT, augment=False, use_color=FLAGS.use_color, use_height=not FLAGS.no_height, use_v1=not FLAGS.use_sunrgbd_v2)",
                            "Call"
                        ],
                        [
                            "ScannetDetectionDataset('val', num_points=NUM_POINT, augment=False, use_color=FLAGS.use_color, use_height=not FLAGS.no_height)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "BATCH_SIZE",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "FLAGS.batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "FLAGS.shuffle_dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "worker_init_fn": {
                    "value": "my_worker_init_fn",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "device_100": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_120": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "load_124": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "CHECKPOINT_PATH",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "FLAGS.checkpoint_path",
                            "Attribute"
                        ]
                    ]
                }
            },
            "is_available_100": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_149": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "downstream/detection/votenet/models/ap_helper.py": {
        "torch": {
            "argmax_62": {
                "variable": {
                    "value": "pred_heading_class",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "end_points['heading_scores']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "gather_63": {
                "variable": {
                    "value": "pred_heading_residual",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "end_points['heading_residuals']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "pred_heading_class.unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argmax_66": {
                "variable": {
                    "value": "pred_size_class",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "end_points['size_scores']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "gather_67": {
                "variable": {
                    "value": "pred_size_residual",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "end_points['size_residuals']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "pred_size_class.unsqueeze(-1).unsqueeze(-1).repeat(1, 1, 1, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argmax_70": {
                "variable": {
                    "value": "pred_sem_cls",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "end_points['sem_cls_scores']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "downstream/detection/votenet/models/backbone_module.py": {
        "torch": {
            "rand_140": {
                "*size": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "20000",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "downstream/detection/votenet/models/boxnet.py": {
        "torch": {
            "from_numpy_110": {
                "variable": {
                    "value": "end_points[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "sample[key]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_110": {
                "variable": {
                    "value": "end_points[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_103": {
                "ndarray": {
                    "value": "sample['point_clouds']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_103": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "downstream/detection/votenet/models/dump_helper.py": {
        "torch": {
            "argmax_49": {
                "variable": {
                    "value": "pred_heading_class",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "end_points['heading_scores']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "gather_50": {
                "variable": {
                    "value": "pred_heading_residual",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "end_points['heading_residuals']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "pred_heading_class.unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argmax_53": {
                "variable": {
                    "value": "pred_size_class",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "end_points['size_scores']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "gather_54": {
                "variable": {
                    "value": "pred_size_residual",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "end_points['size_residuals']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "pred_size_class.unsqueeze(-1).unsqueeze(-1).repeat(1, 1, 1, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "downstream/detection/votenet/models/loss_helper.py": {
        "torch": {
            "gather_53": {
                "variable": {
                    "value": "seed_gt_votes_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "end_points['vote_label_mask']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "seed_inds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "end_points['seed_inds'].long()",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_55": {
                "variable": {
                    "value": "seed_gt_votes",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "end_points['vote_label']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "seed_inds_expand",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "seed_inds.view(batch_size, num_seed, 1).repeat(1, 1, 3 * GT_VOTE_FACTOR)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_63": {
                "variable": {
                    "value": "(votes_dist, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "dist2",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_92": {
                "variable": {
                    "value": "euclidean_dist1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dist1 + 1e-06",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_93": {
                "variable": {
                    "value": "objectness_label",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(B, K)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_94": {
                "variable": {
                    "value": "objectness_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(B, K)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_101": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "torch.Tensor(OBJECTNESS_CLS_WEIGHTS).cuda()",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "gather_146": {
                "variable": {
                    "value": "heading_class_label",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "end_points['heading_class_label']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "object_assignment",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ind1",
                            "Name"
                        ],
                        [
                            "end_points['object_assignment']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_147": {
                "variable": {
                    "value": "criterion_heading_class",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "gather_151": {
                "variable": {
                    "value": "heading_residual_label",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "end_points['heading_residual_label']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "object_assignment",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ind1",
                            "Name"
                        ],
                        [
                            "end_points['object_assignment']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "gather_161": {
                "variable": {
                    "value": "size_class_label",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "end_points['size_class_label']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "object_assignment",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ind1",
                            "Name"
                        ],
                        [
                            "end_points['object_assignment']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_162": {
                "variable": {
                    "value": "criterion_size_class",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "gather_166": {
                "variable": {
                    "value": "size_residual_label",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "end_points['size_residual_label']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "object_assignment.unsqueeze(-1).repeat(1, 1, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_170": {
                "variable": {
                    "value": "predicted_size_residual_normalized",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "end_points['size_residuals_normalized'] * size_label_one_hot_tiled",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_172": {
                "variable": {
                    "value": "mean_size_arr_expanded",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mean_size_arr.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_172": {
                "variable": {
                    "value": "mean_size_arr_expanded",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_173": {
                "variable": {
                    "value": "mean_size_label",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "size_label_one_hot_tiled * mean_size_arr_expanded",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_175": {
                "variable": {
                    "value": "size_residual_normalized_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "huber_loss(predicted_size_residual_normalized - size_residual_label_normalized, delta=1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_179": {
                "variable": {
                    "value": "sem_cls_label",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "end_points['sem_cls_label']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "object_assignment",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ind1",
                            "Name"
                        ],
                        [
                            "end_points['object_assignment']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_180": {
                "variable": {
                    "value": "criterion_sem_cls",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "argmax_246": {
                "variable": {
                    "value": "obj_pred_val",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "end_points['objectness_scores']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_65": {
                "input": {
                    "value": "seed_gt_votes_mask.float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_103": {
                "input": {
                    "value": "objectness_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros((B, K)).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_140": {
                "input": {
                    "value": "objectness_label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros((B, K), dtype=torch.long).cuda()",
                            "Call"
                        ],
                        [
                            "end_points['objectness_label'].float()",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_142": {
                "input": {
                    "value": "box_label_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "end_points['box_label_mask']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sum_149": {
                "input": {
                    "value": "objectness_label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros((B, K), dtype=torch.long).cuda()",
                            "Call"
                        ],
                        [
                            "end_points['objectness_label'].float()",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_158": {
                "input": {
                    "value": "objectness_label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros((B, K), dtype=torch.long).cuda()",
                            "Call"
                        ],
                        [
                            "end_points['objectness_label'].float()",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_164": {
                "input": {
                    "value": "objectness_label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros((B, K), dtype=torch.long).cuda()",
                            "Call"
                        ],
                        [
                            "end_points['objectness_label'].float()",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_176": {
                "input": {
                    "value": "objectness_label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros((B, K), dtype=torch.long).cuda()",
                            "Call"
                        ],
                        [
                            "end_points['objectness_label'].float()",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_182": {
                "input": {
                    "value": "objectness_label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros((B, K), dtype=torch.long).cuda()",
                            "Call"
                        ],
                        [
                            "end_points['objectness_label'].float()",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_223": {
                "input": {
                    "value": "objectness_label.float().cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_247": {
                "input": {
                    "value": "objectness_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros((B, K)).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_157": {
                "input": {
                    "value": "end_points['heading_residuals_normalized'] * heading_label_one_hot",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_225": {
                "input": {
                    "value": "objectness_mask.float()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "downstream/detection/votenet/models/loss_helper_boxnet.py": {
        "torch": {
            "gather_44": {
                "variable": {
                    "value": "seed_gt_votes_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "end_points['vote_label_mask']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "seed_inds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "end_points['seed_inds'].long()",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_47": {
                "variable": {
                    "value": "objectness_label",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "end_points['seed_labels']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "aggregated_vote_inds.long()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_48": {
                "variable": {
                    "value": "objectness_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(objectness_label.shape[0], objectness_label.shape[1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_52": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "torch.Tensor(OBJECTNESS_CLS_WEIGHTS).cuda()",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "argmax_118": {
                "variable": {
                    "value": "obj_pred_val",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "end_points['objectness_scores']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_54": {
                "input": {
                    "value": "objectness_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.ones((objectness_label.shape[0], objectness_label.shape[1])).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_95": {
                "input": {
                    "value": "objectness_label.float().cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_119": {
                "input": {
                    "value": "objectness_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.ones((objectness_label.shape[0], objectness_label.shape[1])).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_97": {
                "input": {
                    "value": "objectness_mask.float()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "downstream/detection/votenet/models/proposal_module.py": {
        "torch": {
            "Conv1d_72": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_73": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_74": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2 + 3 + num_heading_bin * 2 + num_size_cluster * 4 + self.num_class",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_75": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_76": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_108": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(features))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_109": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(net))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_40": {
                "ndarray": {
                    "value": "mean_size_arr.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_40": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_121": {
                "*size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_122": {
                "*size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_99": {
                "variable": {
                    "value": "sample_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "num_seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "end_points['seed_xyz'].shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "size": {
                    "value": "(batch_size, self.num_proposal)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "downstream/detection/votenet/models/votenet.py": {
        "torch": {
            "norm_97": {
                "variable": {
                    "value": "features_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "end_points['fp2_features']",
                            "Subscript"
                        ],
                        [
                            "features.div(features_norm.unsqueeze(1))",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_133": {
                "variable": {
                    "value": "end_points[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "sample[key]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_133": {
                "variable": {
                    "value": "end_points[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_121": {
                "ndarray": {
                    "value": "sample['point_clouds']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_121": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_124": {
                "*size": {
                    "value": "(20000, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "unsqueeze_124": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "downstream/detection/votenet/models/voting_module.py": {
        "torch": {
            "Conv1d_32": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.in_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.in_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_33": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.in_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.in_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_34": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.in_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "(3 + self.out_dim) * self.vote_factor",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_35": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.in_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm1d_36": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.in_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_51": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(seed_features))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_52": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(net))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rand_69": {
                "*size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "downstream/detection/votenet/pointnet2_vote/pointnet2_modules.py": {
        "torch": {
            "ModuleList_111": {
                "variable": {
                    "value": "self.groupers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_112": {
                "variable": {
                    "value": "self.mlps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_295": {
                "variable": {
                    "value": "self.groupers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_296": {
                "variable": {
                    "value": "self.mlps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_440": {
                "variable": {
                    "value": "self.groupers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_441": {
                "variable": {
                    "value": "self.mlps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_502": {
                "seed": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_all_503": {
                "seed": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_68": {
                "variable": {
                    "value": "new_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.groupers[i](xyz, new_xyz, features)",
                            "Call"
                        ],
                        [
                            "self.mlps[i](new_features)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "new_features.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "self.mlp_module(grouped_features)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "new_features.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "torch.sum(new_features * rbf.unsqueeze(1), -1, keepdim=True) / float(self.nsample)",
                            "BinOp"
                        ],
                        [
                            "self.groupers[i](xyz, new_xyz, features)",
                            "Call"
                        ],
                        [
                            "self.mlps[i](new_features)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "new_features.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "torch.cat([interpolated_feats, unknow_feats], dim=1)",
                            "Call"
                        ],
                        [
                            "interpolated_feats",
                            "Name"
                        ],
                        [
                            "new_features.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "self.mlp(new_features)",
                            "Call"
                        ],
                        [
                            "self.groupers[i](xyz1, xyz2, features1)",
                            "Call"
                        ],
                        [
                            "self.mlps[i](new_features)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "new_features.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "torch.cat([new_features, features2], dim=1)",
                            "Call"
                        ],
                        [
                            "new_features.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "self.post_mlp(new_features)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "[1, new_features.size(3)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "max_pool2d_256": {
                "variable": {
                    "value": "new_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.groupers[i](xyz, new_xyz, features)",
                            "Call"
                        ],
                        [
                            "self.mlps[i](new_features)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "new_features.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "self.mlp_module(grouped_features)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "new_features.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "torch.sum(new_features * rbf.unsqueeze(1), -1, keepdim=True) / float(self.nsample)",
                            "BinOp"
                        ],
                        [
                            "self.groupers[i](xyz, new_xyz, features)",
                            "Call"
                        ],
                        [
                            "self.mlps[i](new_features)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "new_features.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "torch.cat([interpolated_feats, unknow_feats], dim=1)",
                            "Call"
                        ],
                        [
                            "interpolated_feats",
                            "Name"
                        ],
                        [
                            "new_features.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "self.mlp(new_features)",
                            "Call"
                        ],
                        [
                            "self.groupers[i](xyz1, xyz2, features1)",
                            "Call"
                        ],
                        [
                            "self.mlps[i](new_features)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "new_features.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "torch.cat([new_features, features2], dim=1)",
                            "Call"
                        ],
                        [
                            "new_features.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "self.post_mlp(new_features)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "[1, new_features.size(3)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "max_pool2d_347": {
                "variable": {
                    "value": "new_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.groupers[i](xyz, new_xyz, features)",
                            "Call"
                        ],
                        [
                            "self.mlps[i](new_features)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "new_features.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "self.mlp_module(grouped_features)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "new_features.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "torch.sum(new_features * rbf.unsqueeze(1), -1, keepdim=True) / float(self.nsample)",
                            "BinOp"
                        ],
                        [
                            "self.groupers[i](xyz, new_xyz, features)",
                            "Call"
                        ],
                        [
                            "self.mlps[i](new_features)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "new_features.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "torch.cat([interpolated_feats, unknow_feats], dim=1)",
                            "Call"
                        ],
                        [
                            "interpolated_feats",
                            "Name"
                        ],
                        [
                            "new_features.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "self.mlp(new_features)",
                            "Call"
                        ],
                        [
                            "self.groupers[i](xyz1, xyz2, features1)",
                            "Call"
                        ],
                        [
                            "self.mlps[i](new_features)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "new_features.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "torch.cat([new_features, features2], dim=1)",
                            "Call"
                        ],
                        [
                            "new_features.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "self.post_mlp(new_features)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "[1, new_features.size(3)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sum_397": {
                "variable": {
                    "value": "norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dist_recip",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1.0 / (dist + 1e-08)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_409": {
                "variable": {
                    "value": "new_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[interpolated_feats, unknow_feats]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_483": {
                "variable": {
                    "value": "new_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.groupers[i](xyz, new_xyz, features)",
                            "Call"
                        ],
                        [
                            "self.mlps[i](new_features)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "new_features.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "self.mlp_module(grouped_features)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "new_features.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "torch.sum(new_features * rbf.unsqueeze(1), -1, keepdim=True) / float(self.nsample)",
                            "BinOp"
                        ],
                        [
                            "self.groupers[i](xyz, new_xyz, features)",
                            "Call"
                        ],
                        [
                            "self.mlps[i](new_features)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "new_features.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "torch.cat([interpolated_feats, unknow_feats], dim=1)",
                            "Call"
                        ],
                        [
                            "interpolated_feats",
                            "Name"
                        ],
                        [
                            "new_features.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "self.mlp(new_features)",
                            "Call"
                        ],
                        [
                            "self.groupers[i](xyz1, xyz2, features1)",
                            "Call"
                        ],
                        [
                            "self.mlps[i](new_features)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "new_features.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "torch.cat([new_features, features2], dim=1)",
                            "Call"
                        ],
                        [
                            "new_features.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "self.post_mlp(new_features)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "[1, new_features.size(3)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_497": {
                "tensors": {
                    "value": "new_features_list",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_497": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "randn_504": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "9",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_505": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "9",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_75": {
                "tensors": {
                    "value": "new_features_list",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "avg_pool2d_260": {
                "variable": {
                    "value": "new_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.groupers[i](xyz, new_xyz, features)",
                            "Call"
                        ],
                        [
                            "self.mlps[i](new_features)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "new_features.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "self.mlp_module(grouped_features)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "new_features.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "torch.sum(new_features * rbf.unsqueeze(1), -1, keepdim=True) / float(self.nsample)",
                            "BinOp"
                        ],
                        [
                            "self.groupers[i](xyz, new_xyz, features)",
                            "Call"
                        ],
                        [
                            "self.mlps[i](new_features)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "new_features.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "torch.cat([interpolated_feats, unknow_feats], dim=1)",
                            "Call"
                        ],
                        [
                            "interpolated_feats",
                            "Name"
                        ],
                        [
                            "new_features.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "self.mlp(new_features)",
                            "Call"
                        ],
                        [
                            "self.groupers[i](xyz1, xyz2, features1)",
                            "Call"
                        ],
                        [
                            "self.mlps[i](new_features)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(new_features, kernel_size=[1, new_features.size(3)])",
                            "Call"
                        ],
                        [
                            "new_features.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "torch.cat([new_features, features2], dim=1)",
                            "Call"
                        ],
                        [
                            "new_features.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "self.post_mlp(new_features)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "[1, new_features.size(3)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_354": {
                "tensors": {
                    "value": "new_features_list",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_489": {
                "variable": {
                    "value": "new_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[new_features, features2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_266": {
                "variable": {
                    "value": "rbf",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1 * grouped_xyz.pow(2).sum(1, keepdim=False) / self.sigma ** 2 / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_267": {
                "input": {
                    "value": "new_features * rbf.unsqueeze(1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "downstream/detection/votenet/pointnet2_vote/pointnet2_test.py": {
        "torch": {
            "randn_22": {
                "variable": {
                    "value": "feats",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "feat_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "from_numpy_25": {
                "variable": {
                    "value": "idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array([[[0, 1, 2], [1, 2, 3]]])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_26": {
                "variable": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array([[[1, 1, 1], [2, 2, 2]]])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gradcheck_30": {
                "func": {
                    "value": "interpolate_func",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "feats",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.randn(batch_size, feat_dim, m, requires_grad=True).float().cuda()",
                            "Call"
                        ]
                    ]
                },
                "atol": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "rtol": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "downstream/detection/votenet/pointnet2_vote/pointnet2_utils.py": {
        "torch": {
            "zeros_337": {
                "variable": {
                    "value": "unique_cnt",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(idx.shape[0], idx.shape[1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sqrt_142": {
                "input": {
                    "value": "dist2",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_357": {
                "variable": {
                    "value": "new_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[grouped_xyz, grouped_features]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_415": {
                "variable": {
                    "value": "new_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[grouped_xyz, grouped_features]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unique_340": {
                "variable": {
                    "value": "unique_ind",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "idx[i_batch, i_region, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "randint_343": {
                "variable": {
                    "value": "sample_ind",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "num_unique",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "unique_ind.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "size": {
                    "value": "(self.nsample - num_unique,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_344": {
                "variable": {
                    "value": "all_ind",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(unique_ind, unique_ind[sample_ind])",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "downstream/detection/votenet/pointnet2_vote/pytorch_utils.py": {
        "torch": {
            "Linear_240": {
                "variable": {
                    "value": "fc",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "not bn",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ReLU_18": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_133": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_167": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_201": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_232": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "downstream/detection/votenet/pointnet2_vote/setup.py": {
        "torch": {}
    },
    "downstream/detection/votenet/scannet/scannet_detection_dataset.py": {
        "torch": {}
    },
    "downstream/detection/votenet/train.py": {
        "torch": {
            "DataLoader_146": {
                "variable": {
                    "value": "TRAIN_DATALOADER",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "TRAIN_DATASET",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "SunrgbdDetectionVotesDataset('train', num_points=NUM_POINT, augment=True, use_color=FLAGS.use_color, use_height=not FLAGS.no_height, use_v1=not FLAGS.use_sunrgbd_v2)",
                            "Call"
                        ],
                        [
                            "ScannetDetectionDataset('train', num_points=NUM_POINT, augment=True, use_color=FLAGS.use_color, use_height=not FLAGS.no_height)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "BATCH_SIZE",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "FLAGS.batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "worker_init_fn": {
                    "value": "my_worker_init_fn",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "DataLoader_148": {
                "variable": {
                    "value": "TEST_DATALOADER",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "TEST_DATASET",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "SunrgbdDetectionVotesDataset('val', num_points=NUM_POINT, augment=False, use_color=FLAGS.use_color, use_height=not FLAGS.no_height, use_v1=not FLAGS.use_sunrgbd_v2)",
                            "Call"
                        ],
                        [
                            "ScannetDetectionDataset('val', num_points=NUM_POINT, augment=False, use_color=FLAGS.use_color, use_height=not FLAGS.no_height)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "BATCH_SIZE",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "FLAGS.batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "worker_init_fn": {
                    "value": "my_worker_init_fn",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "device_154": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "load_174": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "INIT_WEIGHT",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "FLAGS.init_weight",
                            "Attribute"
                        ]
                    ]
                }
            },
            "DataParallel_195": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Detector(num_class=DATASET_CONFIG.num_class, num_heading_bin=DATASET_CONFIG.num_heading_bin, num_size_cluster=DATASET_CONFIG.num_size_cluster, mean_size_arr=DATASET_CONFIG.mean_size_arr, num_proposal=FLAGS.num_target, input_feature_dim=num_input_channel, vote_factor=FLAGS.vote_factor, sampling=FLAGS.cluster_sampling)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(net)",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_204": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[{'params': others, 'lr': BASE_LEARNING_RATE}, {'params': backbones, 'lr': BASE_LEARNING_RATE * FLAGS.backbone_finetune_lr}]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "BASE_LEARNING_RATE",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "FLAGS.learning_rate",
                            "Attribute"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "FLAGS.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_208": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, net.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "BASE_LEARNING_RATE",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "FLAGS.learning_rate",
                            "Attribute"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "FLAGS.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_212": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "CHECKPOINT_PATH",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "FLAGS.checkpoint_path if FLAGS.checkpoint_path is not None else DEFAULT_CHECKPOINT_PATH",
                            "IfExp"
                        ]
                    ]
                }
            },
            "device_count_192": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_154": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_363": {
                "obj": {
                    "value": "save_dict",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{'epoch': epoch + 1, 'optimizer_state_dict': optimizer.state_dict(), 'loss': loss}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(LOG_DIR, 'checkpoint.tar')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_count_193": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_300": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "downstream/detection/votenet/utils/metric_util.py": {
        "torch": {
            "is_tensor_41": {
                "obj": {
                    "value": "label_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.ones((labels.shape[0], labels.shape[1]))",
                            "Call"
                        ]
                    ]
                }
            },
            "is_tensor_42": {
                "obj": {
                    "value": "pred_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.ones((pred.shape[0], pred.shape[1]))",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "downstream/detection/votenet/utils/nn_distance.py": {
        "torch": {
            "abs_27": {
                "variable": {
                    "value": "abs_error",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "error",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.abs(pc1arr[0, i, :] - pc2arr[0, j, :])",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_29": {
                "variable": {
                    "value": "quadratic",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "abs_error",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.abs(error)",
                            "Call"
                        ]
                    ]
                },
                "max": {
                    "value": "delta",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "min_59": {
                "variable": {
                    "value": "(dist1, idx1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "pc_dist",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sum(huber_loss(pc_diff, delta), dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.abs(pc_diff), dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.sum(pc_diff ** 2, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_60": {
                "variable": {
                    "value": "(dist2, idx2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "pc_dist",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sum(huber_loss(pc_diff, delta), dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.abs(pc_diff), dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.sum(pc_diff ** 2, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_67": {
                "variable": {
                    "value": "pc1",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pc1arr.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_68": {
                "variable": {
                    "value": "pc2",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pc2arr.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_54": {
                "variable": {
                    "value": "pc_dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "huber_loss(pc_diff, delta)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_56": {
                "variable": {
                    "value": "pc_dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(pc_diff)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_58": {
                "variable": {
                    "value": "pc_dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pc_diff ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "abs_56": {
                "input": {
                    "value": "pc_diff",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pc1_expand_tile - pc2_expand_tile",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "downstream/segmentation/dgcnn/data.py": {
        "torch": {}
    },
    "downstream/segmentation/dgcnn/model.py": {
        "torch": {
            "sum_29": {
                "variable": {
                    "value": "xx",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_45": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_60": {
                "variable": {
                    "value": "feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(feature - x, x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "permute_60": {
                "variable": {
                    "value": "feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_69": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_70": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_71": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_72": {
                "variable": {
                    "value": "self.conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_73": {
                "variable": {
                    "value": "self.conv5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "args.emb_dims",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_74": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_75": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_76": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_77": {
                "variable": {
                    "value": "self.bn4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_78": {
                "variable": {
                    "value": "self.bn5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "args.emb_dims",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_79": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.emb_dims",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_80": {
                "variable": {
                    "value": "self.bn6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_81": {
                "variable": {
                    "value": "self.dp1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_82": {
                "variable": {
                    "value": "self.linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "40",
                            "MethodArgument"
                        ],
                        [
                            "40",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "relu_85": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_86": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_87": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn3(self.conv3(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_88": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn4(self.conv4(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_89": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn5(self.conv5(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "adaptive_max_pool1d_90": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "squeeze_90": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_91": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn6(self.linear1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm2d_103": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_104": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_105": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_106": {
                "variable": {
                    "value": "self.bn4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_107": {
                "variable": {
                    "value": "self.bn5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "args.emb_dims",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_109": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(6, 64, kernel_size=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_112": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(64 * 2, 64, kernel_size=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_115": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(64 * 2, 128, kernel_size=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_118": {
                "variable": {
                    "value": "self.conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(128 * 2, 256, kernel_size=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_121": {
                "variable": {
                    "value": "self.conv5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv1d(512, args.emb_dims, kernel_size=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_124": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.emb_dims * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_125": {
                "variable": {
                    "value": "self.bn6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_126": {
                "variable": {
                    "value": "self.dp1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "args.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_127": {
                "variable": {
                    "value": "self.linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_128": {
                "variable": {
                    "value": "self.bn7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_129": {
                "variable": {
                    "value": "self.dp2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "args.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_130": {
                "variable": {
                    "value": "self.linear3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "40",
                            "MethodArgument"
                        ],
                        [
                            "40",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_150": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x1, x2, x3, x4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "adaptive_max_pool1d_153": {
                "variable": {
                    "value": "x1",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool1d_154": {
                "variable": {
                    "value": "x2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.view(batch_size, -1, num_points)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(batch_size, num_points, 1, num_dims).repeat(1, 1, k, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(self.conv4(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5(self.conv5(x)))",
                            "Call"
                        ],
                        [
                            "F.adaptive_max_pool1d(x, 1).squeeze()",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn6(self.linear1(x)))",
                            "Call"
                        ],
                        [
                            "self.dp1(x)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "get_graph_feature(x, k=self.k)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "get_graph_feature(x1, k=self.k)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "get_graph_feature(x2, k=self.k)",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "get_graph_feature(x3, k=self.k)",
                            "Call"
                        ],
                        [
                            "self.conv4(x)",
                            "Call"
                        ],
                        [
                            "torch.cat((x1, x2, x3, x4), dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv5(x)",
                            "Call"
                        ],
                        [
                            "torch.cat((x1, x2), 1)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.bn6(self.linear1(x)), negative_slope=0.2)",
                            "Call"
                        ],
                        [
                            "self.dp1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.bn7(self.linear2(x)), negative_slope=0.2)",
                            "Call"
                        ],
                        [
                            "self.dp2(x)",
                            "Call"
                        ],
                        [
                            "self.linear3(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "x.max(dim=-1, keepdim=False)[0]",
                            "Subscript"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "x.max(dim=-1, keepdim=False)[0]",
                            "Subscript"
                        ],
                        [
                            "F.leaky_relu(self.bn3(self.linear1(x)), negative_slope=0.2)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.bn4(self.linear2(x)), negative_slope=0.2)",
                            "Call"
                        ],
                        [
                            "self.transform(x)",
                            "Call"
                        ],
                        [
                            "x.view(batch_size, 3, 3)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(x, t)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "get_graph_feature(x, k=self.k)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "get_graph_feature(x1, k=self.k)",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "self.conv4(x)",
                            "Call"
                        ],
                        [
                            "get_graph_feature(x2, k=self.k)",
                            "Call"
                        ],
                        [
                            "self.conv5(x)",
                            "Call"
                        ],
                        [
                            "torch.cat((x1, x2, x3), dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv6(x)",
                            "Call"
                        ],
                        [
                            "x.max(dim=-1, keepdim=True)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.cat((x, l), dim=1)",
                            "Call"
                        ],
                        [
                            "x.repeat(1, 1, num_points)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, x1, x2, x3), dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv8(x)",
                            "Call"
                        ],
                        [
                            "self.dp1(x)",
                            "Call"
                        ],
                        [
                            "self.conv9(x)",
                            "Call"
                        ],
                        [
                            "self.dp2(x)",
                            "Call"
                        ],
                        [
                            "self.conv10(x)",
                            "Call"
                        ],
                        [
                            "self.conv11(x)",
                            "Call"
                        ],
                        [
                            "x[:, :3, :]",
                            "Subscript"
                        ],
                        [
                            "get_graph_feature(x, k=self.k, dim9=False)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "get_graph_feature(x1, k=self.k)",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "self.conv4(x)",
                            "Call"
                        ],
                        [
                            "get_graph_feature(x2, k=self.k)",
                            "Call"
                        ],
                        [
                            "self.conv5(x)",
                            "Call"
                        ],
                        [
                            "torch.cat((x1, x2, x3), dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv6(x)",
                            "Call"
                        ],
                        [
                            "x.max(dim=-1, keepdim=True)[0]",
                            "Subscript"
                        ],
                        [
                            "x.repeat(1, 1, num_points)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, x1, x2, x3), dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv7(x)",
                            "Call"
                        ],
                        [
                            "self.conv8(x)",
                            "Call"
                        ],
                        [
                            "self.dp1(x)",
                            "Call"
                        ],
                        [
                            "self.conv9(x)",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_155": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x1, x2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "leaky_relu_157": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn6(self.linear1(x))",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_159": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn7(self.linear2(x))",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "BatchNorm2d_172": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_173": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_174": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_176": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(6, 64, kernel_size=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_179": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(64, 128, kernel_size=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_182": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv1d(128, 1024, kernel_size=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_186": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_187": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_188": {
                "variable": {
                    "value": "self.linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_189": {
                "variable": {
                    "value": "self.bn4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_191": {
                "variable": {
                    "value": "self.transform",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "3 * 3",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "leaky_relu_205": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn3(self.linear1(x))",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_206": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn4(self.linear2(x))",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "BatchNorm2d_222": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_223": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_224": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_225": {
                "variable": {
                    "value": "self.bn4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_226": {
                "variable": {
                    "value": "self.bn5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_227": {
                "variable": {
                    "value": "self.bn6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "args.emb_dims",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm1d_228": {
                "variable": {
                    "value": "self.bn7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_229": {
                "variable": {
                    "value": "self.bn8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_230": {
                "variable": {
                    "value": "self.bn9",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_231": {
                "variable": {
                    "value": "self.bn10",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_233": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(6, 64, kernel_size=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_236": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(64, 64, kernel_size=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_239": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(64 * 2, 64, kernel_size=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_242": {
                "variable": {
                    "value": "self.conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(64, 64, kernel_size=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_245": {
                "variable": {
                    "value": "self.conv5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(64 * 2, 64, kernel_size=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_248": {
                "variable": {
                    "value": "self.conv6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv1d(192, args.emb_dims, kernel_size=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_251": {
                "variable": {
                    "value": "self.conv7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv1d(16, 64, kernel_size=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_254": {
                "variable": {
                    "value": "self.conv8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv1d(1280, 256, kernel_size=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_257": {
                "variable": {
                    "value": "self.dp1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "args.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_258": {
                "variable": {
                    "value": "self.conv9",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv1d(256, 256, kernel_size=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_261": {
                "variable": {
                    "value": "self.dp2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "args.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_262": {
                "variable": {
                    "value": "self.conv10",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv1d(256, 128, kernel_size=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv1d_265": {
                "variable": {
                    "value": "self.conv11",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.seg_num_all",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "bmm_275": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.view(batch_size, -1, num_points)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(batch_size, num_points, 1, num_dims).repeat(1, 1, k, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(self.conv4(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5(self.conv5(x)))",
                            "Call"
                        ],
                        [
                            "F.adaptive_max_pool1d(x, 1).squeeze()",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn6(self.linear1(x)))",
                            "Call"
                        ],
                        [
                            "self.dp1(x)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "get_graph_feature(x, k=self.k)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "get_graph_feature(x1, k=self.k)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "get_graph_feature(x2, k=self.k)",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "get_graph_feature(x3, k=self.k)",
                            "Call"
                        ],
                        [
                            "self.conv4(x)",
                            "Call"
                        ],
                        [
                            "torch.cat((x1, x2, x3, x4), dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv5(x)",
                            "Call"
                        ],
                        [
                            "torch.cat((x1, x2), 1)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.bn6(self.linear1(x)), negative_slope=0.2)",
                            "Call"
                        ],
                        [
                            "self.dp1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.bn7(self.linear2(x)), negative_slope=0.2)",
                            "Call"
                        ],
                        [
                            "self.dp2(x)",
                            "Call"
                        ],
                        [
                            "self.linear3(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "x.max(dim=-1, keepdim=False)[0]",
                            "Subscript"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "x.max(dim=-1, keepdim=False)[0]",
                            "Subscript"
                        ],
                        [
                            "F.leaky_relu(self.bn3(self.linear1(x)), negative_slope=0.2)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.bn4(self.linear2(x)), negative_slope=0.2)",
                            "Call"
                        ],
                        [
                            "self.transform(x)",
                            "Call"
                        ],
                        [
                            "x.view(batch_size, 3, 3)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(x, t)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "get_graph_feature(x, k=self.k)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "get_graph_feature(x1, k=self.k)",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "self.conv4(x)",
                            "Call"
                        ],
                        [
                            "get_graph_feature(x2, k=self.k)",
                            "Call"
                        ],
                        [
                            "self.conv5(x)",
                            "Call"
                        ],
                        [
                            "torch.cat((x1, x2, x3), dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv6(x)",
                            "Call"
                        ],
                        [
                            "x.max(dim=-1, keepdim=True)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.cat((x, l), dim=1)",
                            "Call"
                        ],
                        [
                            "x.repeat(1, 1, num_points)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, x1, x2, x3), dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv8(x)",
                            "Call"
                        ],
                        [
                            "self.dp1(x)",
                            "Call"
                        ],
                        [
                            "self.conv9(x)",
                            "Call"
                        ],
                        [
                            "self.dp2(x)",
                            "Call"
                        ],
                        [
                            "self.conv10(x)",
                            "Call"
                        ],
                        [
                            "self.conv11(x)",
                            "Call"
                        ],
                        [
                            "x[:, :3, :]",
                            "Subscript"
                        ],
                        [
                            "get_graph_feature(x, k=self.k, dim9=False)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "get_graph_feature(x1, k=self.k)",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "self.conv4(x)",
                            "Call"
                        ],
                        [
                            "get_graph_feature(x2, k=self.k)",
                            "Call"
                        ],
                        [
                            "self.conv5(x)",
                            "Call"
                        ],
                        [
                            "torch.cat((x1, x2, x3), dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv6(x)",
                            "Call"
                        ],
                        [
                            "x.max(dim=-1, keepdim=True)[0]",
                            "Subscript"
                        ],
                        [
                            "x.repeat(1, 1, num_points)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, x1, x2, x3), dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv7(x)",
                            "Call"
                        ],
                        [
                            "self.conv8(x)",
                            "Call"
                        ],
                        [
                            "self.dp1(x)",
                            "Call"
                        ],
                        [
                            "self.conv9(x)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.transform_net(x0)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_292": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x1, x2, x3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_300": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, l)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_303": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, x1, x2, x3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_321": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_322": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_323": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_324": {
                "variable": {
                    "value": "self.bn4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_325": {
                "variable": {
                    "value": "self.bn5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_326": {
                "variable": {
                    "value": "self.bn6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "args.emb_dims",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm1d_327": {
                "variable": {
                    "value": "self.bn7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_328": {
                "variable": {
                    "value": "self.bn8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_334": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(6, 64, kernel_size=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_337": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(64, 64, kernel_size=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_340": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(64 * 2, 64, kernel_size=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_343": {
                "variable": {
                    "value": "self.conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(64, 64, kernel_size=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_346": {
                "variable": {
                    "value": "self.conv5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(64 * 2, 64, kernel_size=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_349": {
                "variable": {
                    "value": "self.conv6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv1d(192, args.emb_dims, kernel_size=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_352": {
                "variable": {
                    "value": "self.conv7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv1d(1216, 512, kernel_size=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_355": {
                "variable": {
                    "value": "self.conv8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv1d(512, 256, kernel_size=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_358": {
                "variable": {
                    "value": "self.dp1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "args.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv1d_359": {
                "variable": {
                    "value": "self.conv9",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "13",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_384": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x1, x2, x3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_390": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, x1, x2, x3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_28": {
                "input": {
                    "value": "x.transpose(2, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.view(batch_size, -1, num_points)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(batch_size, num_points, 1, num_dims).repeat(1, 1, k, 1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn4(self.conv4(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn5(self.conv5(x)))",
                            "Call"
                        ],
                        [
                            "F.adaptive_max_pool1d(x, 1).squeeze()",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn6(self.linear1(x)))",
                            "Call"
                        ],
                        [
                            "self.dp1(x)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ],
                        [
                            "get_graph_feature(x, k=self.k)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "get_graph_feature(x1, k=self.k)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "get_graph_feature(x2, k=self.k)",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "get_graph_feature(x3, k=self.k)",
                            "Call"
                        ],
                        [
                            "self.conv4(x)",
                            "Call"
                        ],
                        [
                            "torch.cat((x1, x2, x3, x4), dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv5(x)",
                            "Call"
                        ],
                        [
                            "torch.cat((x1, x2), 1)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.bn6(self.linear1(x)), negative_slope=0.2)",
                            "Call"
                        ],
                        [
                            "self.dp1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.bn7(self.linear2(x)), negative_slope=0.2)",
                            "Call"
                        ],
                        [
                            "self.dp2(x)",
                            "Call"
                        ],
                        [
                            "self.linear3(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "x.max(dim=-1, keepdim=False)[0]",
                            "Subscript"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "x.max(dim=-1, keepdim=False)[0]",
                            "Subscript"
                        ],
                        [
                            "F.leaky_relu(self.bn3(self.linear1(x)), negative_slope=0.2)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.bn4(self.linear2(x)), negative_slope=0.2)",
                            "Call"
                        ],
                        [
                            "self.transform(x)",
                            "Call"
                        ],
                        [
                            "x.view(batch_size, 3, 3)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(x, t)",
                            "Call"
                        ],
                        [
                            "x.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "get_graph_feature(x, k=self.k)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "get_graph_feature(x1, k=self.k)",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "self.conv4(x)",
                            "Call"
                        ],
                        [
                            "get_graph_feature(x2, k=self.k)",
                            "Call"
                        ],
                        [
                            "self.conv5(x)",
                            "Call"
                        ],
                        [
                            "torch.cat((x1, x2, x3), dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv6(x)",
                            "Call"
                        ],
                        [
                            "x.max(dim=-1, keepdim=True)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.cat((x, l), dim=1)",
                            "Call"
                        ],
                        [
                            "x.repeat(1, 1, num_points)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, x1, x2, x3), dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv8(x)",
                            "Call"
                        ],
                        [
                            "self.dp1(x)",
                            "Call"
                        ],
                        [
                            "self.conv9(x)",
                            "Call"
                        ],
                        [
                            "self.dp2(x)",
                            "Call"
                        ],
                        [
                            "self.conv10(x)",
                            "Call"
                        ],
                        [
                            "self.conv11(x)",
                            "Call"
                        ],
                        [
                            "x[:, :3, :]",
                            "Subscript"
                        ],
                        [
                            "get_graph_feature(x, k=self.k, dim9=False)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "get_graph_feature(x1, k=self.k)",
                            "Call"
                        ],
                        [
                            "self.conv3(x)",
                            "Call"
                        ],
                        [
                            "self.conv4(x)",
                            "Call"
                        ],
                        [
                            "get_graph_feature(x2, k=self.k)",
                            "Call"
                        ],
                        [
                            "self.conv5(x)",
                            "Call"
                        ],
                        [
                            "torch.cat((x1, x2, x3), dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv6(x)",
                            "Call"
                        ],
                        [
                            "x.max(dim=-1, keepdim=True)[0]",
                            "Subscript"
                        ],
                        [
                            "x.repeat(1, 1, num_points)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, x1, x2, x3), dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv7(x)",
                            "Call"
                        ],
                        [
                            "self.conv8(x)",
                            "Call"
                        ],
                        [
                            "self.dp1(x)",
                            "Call"
                        ],
                        [
                            "self.conv9(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_47": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.size(0)",
                            "Call"
                        ],
                        [
                            "x.size(0)",
                            "Call"
                        ],
                        [
                            "x.size(0)",
                            "Call"
                        ],
                        [
                            "x.size(0)",
                            "Call"
                        ],
                        [
                            "x.size(0)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda')",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_109": {
                "in_channels": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_111": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_112": {
                "in_channels": {
                    "value": "64 * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_114": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_115": {
                "in_channels": {
                    "value": "64 * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_117": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_118": {
                "in_channels": {
                    "value": "128 * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_120": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv1d_121": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "args.emb_dims",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_123": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_176": {
                "in_channels": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_178": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_179": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_181": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv1d_182": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_184": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_233": {
                "in_channels": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_235": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_236": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_238": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_239": {
                "in_channels": {
                    "value": "64 * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_241": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_242": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_244": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_245": {
                "in_channels": {
                    "value": "64 * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_247": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv1d_248": {
                "in_channels": {
                    "value": "192",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "args.emb_dims",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_250": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv1d_251": {
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_253": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv1d_254": {
                "in_channels": {
                    "value": "1280",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_256": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv1d_258": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_260": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv1d_262": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_264": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_334": {
                "in_channels": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_336": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_337": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_339": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_340": {
                "in_channels": {
                    "value": "64 * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_342": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_343": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_345": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_346": {
                "in_channels": {
                    "value": "64 * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_348": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv1d_349": {
                "in_channels": {
                    "value": "192",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "args.emb_dims",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_351": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv1d_352": {
                "in_channels": {
                    "value": "1216",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_354": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv1d_355": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_357": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "downstream/segmentation/dgcnn/util.py": {
        "torch": {
            "zeros_like_25": {
                "variable": {
                    "value": "one_hot",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "scatter_25": {
                "variable": {
                    "value": "one_hot",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "gold.view(-1, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "index": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_27": {
                "variable": {
                    "value": "log_prb",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cross_entropy_31": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "target": {
                    "value": "gold",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "gold.contiguous().view(-1)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    }
}