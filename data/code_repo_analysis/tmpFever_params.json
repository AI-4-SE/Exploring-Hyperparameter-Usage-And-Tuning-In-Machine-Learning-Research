{
    "src/common/training/run.py": {
        "sklearn": {
            "accuracy_score_15": {
                "y_true": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[ls.idx[i] for (i, _) in enumerate(ls.idx)]",
                            "ListComp"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "predicted.data.numpy().reshape(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shuffle_40": {
                "*arrays_0": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "accuracy_score_85": {
                "y_true": {
                    "value": "actual",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[labels[i] for i in actual]",
                            "ListComp"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "predict(model, features, 500).data.numpy().reshape(-1).tolist()",
                            "Call"
                        ],
                        [
                            "[labels[i] for i in predictions]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "classification_report_86": {
                "y_true": {
                    "value": "actual",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[labels[i] for i in actual]",
                            "ListComp"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "predict(model, features, 500).data.numpy().reshape(-1).tolist()",
                            "Call"
                        ],
                        [
                            "[labels[i] for i in predictions]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "confusion_matrix_87": {
                "y_true": {
                    "value": "actual",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[labels[i] for i in actual]",
                            "ListComp"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "predict(model, features, 500).data.numpy().reshape(-1).tolist()",
                            "Call"
                        ],
                        [
                            "[labels[i] for i in predictions]",
                            "ListComp"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "Adam_30": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr",
                            "Method Argument"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "stack_27": {
                "tensors": {
                    "value": "predicted",
                    "type": "variable",
                    "possible_values": [
                        [
                            "predict(model, data, batch_size)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cross_entropy_51": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(d).cpu()",
                            "Call"
                        ],
                        [
                            "model(d)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "gold",
                    "type": "variable",
                    "possible_values": [
                        [
                            "prepare_with_labels(batch, labels[start:end])",
                            "Call"
                        ]
                    ]
                }
            },
            "max_26": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(d).cpu()",
                            "Call"
                        ],
                        [
                            "model(d)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/retrieval/process_tfidf.py": {
        "sklearn": {
            "cosine_similarity_35": {
                "X": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "Y": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "src/retrieval/sent_features.py": {
        "sklearn": {}
    },
    "src/rte/riedel/fever_features.py": {
        "sklearn": {
            "CountVectorizer_81": {
                "variable": {
                    "value": "self.bow_vectorizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_features": {
                    "value": "self.lim_unigram",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stop_words": {
                    "value": "TermFrequencyFeatureFunction.stop_words",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TfidfTransformer_86": {
                "variable": {
                    "value": "self.tfreq_vectorizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_idf": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TfidfVectorizer_89": {
                "variable": {
                    "value": "self.tfidf_vectorizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_features": {
                    "value": "self.lim_unigram",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stop_words": {
                    "value": "TermFrequencyFeatureFunction.stop_words",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cosine_similarity_145": {
                "X": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "Y": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "src/scripts/process_tfidf.py": {
        "sklearn": {
            "cosine_similarity_35": {
                "X": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "Y": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "src/common/dataset/tmp/fever_dataset.py": {
        "torch": {}
    },
    "src/common/training/batcher.py": {
        "torch": {}
    },
    "src/common/training/early_stopping.py": {
        "torch": {
            "save_25": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'models/{0}.best.save'.format(self.name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_40": {
                "f": {
                    "value": "'models/{0}.best.save'.format(self.name)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "src/common/training/options.py": {
        "torch": {
            "set_device_11": {
                "device": {
                    "value": "int(os.getenv('CUDA_DEVICE', 0))",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "src/common/util/random.py": {
        "torch": {
            "manual_seed_32": {
                "seed": {
                    "value": "SimpleRandom.get_seed()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_all_34": {
                "seed": {
                    "value": "SimpleRandom.get_seed()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "src/rte/coetaur0/esim/data.py": {
        "torch": {
            "tensor_362": {
                "variable": {
                    "value": "self.data[premises][i][:end]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "premise[:end]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_366": {
                "variable": {
                    "value": "self.data[hypotheses][i][:end]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "hypothesis[:end]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_357": {
                "data": {
                    "value": "data['labels']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_351": {
                "*size": {
                    "value": "(self.num_sequences, self.max_premise_length)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_354": {
                "*size": {
                    "value": "(self.num_sequences, self.max_hypothesis_length)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/rte/coetaur0/esim/fever_data.py": {
        "torch": {
            "tensor_438": {
                "variable": {
                    "value": "self.data[hypotheses][i][:end]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "hypothesis[:end]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_422": {
                "data": {
                    "value": "data['labels']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_428": {
                "variable": {
                    "value": "self.data[premises][i][:end]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "premise[:end]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_412": {
                "*size": {
                    "value": "(self.num_sequences, self.max_premise_length)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_419": {
                "*size": {
                    "value": "(self.num_sequences, self.max_hypothesis_length)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_434": {
                "variable": {
                    "value": "self.data[premises][i][j][:sen_end]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "sentence[:sen_end]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_432": {
                "*size": {
                    "value": "self.max_premise_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/rte/coetaur0/esim/layers.py": {
        "torch": {
            "dropout_35": {
                "variable": {
                    "value": "dropout_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ones",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sequences_batch.data.new_ones(sequences_batch.shape[0], sequences_batch.shape[-1])",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.p",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_115": {
                "variable": {
                    "value": "packed_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sorted_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sort_by_seq_lens(sequences_batch, sequences_lengths)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "sorted_lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sort_by_seq_lens(sequences_batch, sequences_lengths)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_121": {
                "variable": {
                    "value": "(outputs, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._encoder(packed_batch, None)",
                            "Call"
                        ],
                        [
                            "nn.utils.rnn.pad_packed_sequence(outputs, batch_first=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "src/rte/coetaur0/esim/model.py": {
        "torch": {
            "Embedding_55": {
                "variable": {
                    "value": "self._word_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "padding_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "_weight": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_71": {
                "variable": {
                    "value": "self._projection",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(4 * 2 * self.hidden_size, self.hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_80": {
                "variable": {
                    "value": "self._classification",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Dropout(p=self.dropout)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_135": {
                "variable": {
                    "value": "enhanced_premises",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[encoded_premises, attended_premises, encoded_premises - attended_premises, encoded_premises * attended_premises]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_140": {
                "variable": {
                    "value": "enhanced_hypotheses",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[encoded_hypotheses, attended_hypotheses, encoded_hypotheses - attended_hypotheses, encoded_hypotheses * attended_hypotheses]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_168": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[v_a_avg, v_a_max, v_b_avg, v_b_max]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_171": {
                "variable": {
                    "value": "probabilities",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._classification(v)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_71": {
                "in_features": {
                    "value": "4 * 2 * self.hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_73": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_80": {
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_81": {
                "in_features": {
                    "value": "2 * 4 * self.hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tanh_83": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_84": {
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_85": {
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_158": {
                "input": {
                    "value": "v_ai * premises_mask.unsqueeze(1).transpose(2, 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_160": {
                "input": {
                    "value": "premises_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_mask(premises, premises_lengths).to(self.device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_161": {
                "input": {
                    "value": "v_bj * hypotheses_mask.unsqueeze(1).transpose(2, 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_163": {
                "input": {
                    "value": "hypotheses_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_mask(hypotheses, hypotheses_lengths).to(self.device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "src/rte/coetaur0/esim/utils.py": {
        "torch": {
            "max_64": {
                "variable": {
                    "value": "max_length",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sequences_lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sequences_lengths",
                            "Method Argument"
                        ],
                        [
                            "sequences_lengths",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_65": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sequences_batch.size()[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "max_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(sequences_lengths)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_96": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "reshaped_tensor * reshaped_mask",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_41": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "len(sequences_lengths)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "src/rte/coetaur0/scripts/testing/active_test_fever.py": {
        "torch": {
            "device_108": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "load_112": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "pretrained_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pretrained_file",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_133": {
                "variable": {
                    "value": "agg_checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "aggregator_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_grad_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_152": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "NLIDataset(pickle.load(pkl), max_premise_length=max_premise_length, premises_concat=premises_concat)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataLoader_154": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "NLIDataset(pickle.load(pkl), max_premise_length=max_premise_length, premises_concat=premises_concat)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "custom_collate",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_available_108": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/rte/coetaur0/scripts/testing/test_fever.py": {
        "torch": {
            "device_107": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "load_111": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "pretrained_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pretrained_file",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataLoader_125": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "NLIDataset(pickle.load(pkl), max_premise_length=max_premise_length, premises_concat=premises_concat)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataLoader_127": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "NLIDataset(pickle.load(pkl), max_premise_length=max_premise_length, premises_concat=premises_concat)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "custom_collate",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "load_141": {
                "variable": {
                    "value": "agg_checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "aggregator_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_grad_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_107": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/rte/coetaur0/scripts/training/train_fever.py": {
        "torch": {
            "device_60": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_72": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "NLIDataset(pickle.load(pkl), max_premise_length=max_premises_length, premises_concat=premises_concat)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataLoader_78": {
                "variable": {
                    "value": "valid_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "valid_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "NLIDataset(pickle.load(pkl), max_premise_length=max_premises_length, premises_concat=premises_concat)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_95": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_96": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0004",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReduceLROnPlateau_97": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(model.parameters(), lr=lr)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "max",
                    "type": "str",
                    "possible_values": []
                },
                "factor": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "patience": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_83": {
                "variable": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "pickle.load(pkl)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_112": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(checkpoint)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "save_185": {
                "obj": {
                    "value": "{'epoch': epoch, 'model': model.state_dict(), 'best_score': best_score, 'optimizer': optimizer.state_dict(), 'epochs_count': epochs_count, 'train_losses': train_losses, 'valid_losses': valid_losses}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(target_dir, 'esim_{}.pth.tar'.format(epoch))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_60": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_176": {
                "obj": {
                    "value": "{'epoch': epoch, 'model': model.state_dict(), 'best_score': best_score, 'epochs_count': epochs_count, 'train_losses': train_losses, 'valid_losses': valid_losses}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(target_dir, 'best.pth.tar')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "src/rte/coetaur0/scripts/training/train_fever_agg.py": {
        "torch": {
            "device_82": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_95": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "NLIDataset(pickle.load(pkl), max_premise_length=max_premises_length, premises_concat=premises_concat)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "custom_collate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "custom_collate",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataLoader_102": {
                "variable": {
                    "value": "valid_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "valid_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "NLIDataset(pickle.load(pkl), max_premise_length=max_premises_length, premises_concat=premises_concat)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "custom_collate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "custom_collate",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_119": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_120": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0004",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReduceLROnPlateau_121": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(model.parameters(), lr=lr)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "max",
                    "type": "str",
                    "possible_values": []
                },
                "factor": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "patience": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_129": {
                "variable": {
                    "value": "agg_criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_132": {
                "variable": {
                    "value": "agg_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "agg_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "aggregator.parameters()",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0004",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_107": {
                "variable": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "pickle.load(pkl)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_144": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(checkpoint)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_158": {
                "variable": {
                    "value": "agg_checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "agg_checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(agg_checkpoint)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_26": {
                "*size": {
                    "value": "len(batch)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_248": {
                "obj": {
                    "value": "{'epoch': epoch, 'model': model.state_dict(), 'best_score': best_score, 'optimizer': optimizer.state_dict(), 'epochs_count': epochs_count, 'train_losses': train_losses, 'valid_losses': valid_losses}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(target_dir, 'esim_{}.pth.tar'.format(epoch))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_256": {
                "obj": {
                    "value": "{'epoch': epoch, 'model': aggregator.state_dict(), 'best_score': best_score, 'optimizer': agg_optimizer.state_dict(), 'epochs_count': epochs_count, 'train_losses': train_losses, 'valid_losses': valid_losses}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(target_dir, 'agg_{}.pth.tar'.format(epoch))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_82": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_232": {
                "obj": {
                    "value": "{'epoch': epoch, 'model': model.state_dict(), 'best_score': best_score, 'epochs_count': epochs_count, 'train_losses': train_losses, 'valid_losses': valid_losses}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(target_dir, 'best.pth.tar')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_239": {
                "obj": {
                    "value": "{'epoch': epoch, 'model': aggregator.state_dict(), 'best_score': best_score, 'epochs_count': epochs_count, 'train_losses': train_losses, 'valid_losses': valid_losses}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(target_dir, 'best_agg.pth.tar')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "src/rte/coetaur0/scripts/training/utils.py": {
        "torch": {
            "zeros_268": {
                "variable": {
                    "value": "flat_batch_prems",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_269": {
                "variable": {
                    "value": "flat_batch_prem_lens",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_270": {
                "variable": {
                    "value": "flat_batch_hypos",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_271": {
                "variable": {
                    "value": "flat_batch_hypo_lens",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_272": {
                "variable": {
                    "value": "flat_batch_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_298": {
                "variable": {
                    "value": "rolled_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(labels), input_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_277": {
                "variable": {
                    "value": "hypo_len",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "hypotheses_lengths[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_281": {
                "variable": {
                    "value": "hypo_len",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "hypo_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(hypotheses_lengths[i]).to(device)",
                            "Call"
                        ],
                        [
                            "torch.tensor(hypo_len, dtype=torch.long).unsqueeze(0).unsqueeze(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_281": {
                "variable": {
                    "value": "hypo_len",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_282": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels[i].to(device)",
                            "Call"
                        ],
                        [
                            "torch.tensor(label, dtype=torch.long).unsqueeze(0).unsqueeze(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_282": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_grad_norm__66": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "max_gradient_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_gradient_norm",
                            "Method Argument"
                        ],
                        [
                            "max_gradient_norm",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_grad_112": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_152": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__224": {
                "parameters": {
                    "value": "aggregator.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "max_gradient_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_gradient_norm",
                            "Method Argument"
                        ],
                        [
                            "max_gradient_norm",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clip_grad_norm__228": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "max_gradient_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_gradient_norm",
                            "Method Argument"
                        ],
                        [
                            "max_gradient_norm",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_285": {
                "variable": {
                    "value": "sen_len",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "sen_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(prem, prem_len)",
                            "Call"
                        ],
                        [
                            "torch.tensor(sen_len, dtype=torch.long).unsqueeze(0).unsqueeze(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_285": {
                "variable": {
                    "value": "sen_len",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_287": {
                "variable": {
                    "value": "flat_batch_prems",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[flat_batch_prems, sentence.to(device)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_288": {
                "variable": {
                    "value": "flat_batch_prem_lens",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[flat_batch_prem_lens, sen_len.to(device)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_289": {
                "variable": {
                    "value": "flat_batch_hypos",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[flat_batch_hypos, hypo.to(device)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_290": {
                "variable": {
                    "value": "flat_batch_hypo_lens",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[flat_batch_hypo_lens, hypo_len.to(device)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_291": {
                "variable": {
                    "value": "flat_batch_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[flat_batch_labels, label.to(device)]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "src/rte/riedel/model.py": {
        "torch": {
            "Linear_6": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_7": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_9": {
                "variable": {
                    "value": "self.do",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "1 - keep_p",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_10": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/rte/tmp/lbl_agg.py": {
        "torch": {
            "Linear_13": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_labels * num_sentences * 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_labels * num_sentences * 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Linear_14": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_labels * num_sentences * 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_labels * num_sentences * 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Linear_15": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_labels * num_sentences * 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_labels * num_sentences * 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Linear_16": {
                "variable": {
                    "value": "self.fc4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_labels * num_sentences * 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_17": {
                "variable": {
                    "value": "self.dout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReLU_18": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_34": {
                "variable": {
                    "value": "probabilities",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fc4(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "save_44": {
                "obj": {
                    "value": "self.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "save_path",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_40": {
                "f": {
                    "value": "state_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state_path",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "src/rte/tmp/nei_rte_model.py": {
        "torch": {}
    }
}