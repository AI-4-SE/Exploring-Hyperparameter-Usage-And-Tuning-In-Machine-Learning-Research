{
    "examples/plot_cv_vs_cp_path.py": {
        "sklearn": {
            "KFold_31": {
                "variable": {
                    "value": "kf",
                    "type": "variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "n_splits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "examples/plot_datadriven_sigma.py": {
        "sklearn": {
            "f1_score_65": {
                "y_true": {
                    "value": "w != 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "w_true != 0",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    },
    "examples/plot_existence_stopping.py": {
        "sklearn": {
            "LassoLars_34": {
                "variable": {
                    "value": "clf",
                    "type": "variable",
                    "possible_values": []
                },
                "alpha": {
                    "value": "1e-20",
                    "type": "float",
                    "possible_values": []
                },
                "fit_intercept": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "examples/plot_rate_bregman.py": {
        "sklearn": {
            "LassoLars_29": {
                "variable": {
                    "value": "clf",
                    "type": "variable",
                    "possible_values": []
                },
                "alpha": {
                    "value": "1e-20",
                    "type": "float",
                    "possible_values": []
                },
                "fit_intercept": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "examples/plot_sparse_recovery.py": {
        "sklearn": {
            "train_test_split_40": {
                "variable": {
                    "value": "(X, X_test, y, y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X_",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y_",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.25",
                    "type": "float",
                    "possible_values": []
                }
            },
            "f1_score_53": {
                "y_true": {
                    "value": "w != 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "w_true != 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "mean_squared_error_54": {
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "X_test @ w",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "f1_score_70": {
                "y_true": {
                    "value": "coef != 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "w_true != 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "mean_squared_error_73": {
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "X_test @ coef",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "iterreg/low_rank/estimators.py": {
        "sklearn": {
            "LinearRegression_97": {
                "variable": {
                    "value": "least_squares",
                    "type": "variable",
                    "possible_values": []
                },
                "fit_intercept": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "iterreg/sparse/estimators.py": {
        "sklearn": {
            "train_test_split_50": {
                "variable": {
                    "value": "(X_train, X_test, y_train, y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "train_size": {
                    "value": "self.train_ratio",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LinearRegression_73": {
                "variable": {
                    "value": "least_squares",
                    "type": "variable",
                    "possible_values": []
                },
                "fit_intercept": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_squared_error_57": {
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "X_test @ w",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "iterreg/utils.py": {
        "sklearn": {
            "check_random_state_74": {
                "variable": {
                    "value": "rng",
                    "type": "variable",
                    "possible_values": []
                },
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "24",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "fetch_openml_100": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "leukemia",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    }
}