{
    "utils/data.py": {
        "tensorflow": {},
        "torch": {
            "tensor_263": {
                "variable": {
                    "value": "input_ids_batch",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_ids for f in input_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_264": {
                "variable": {
                    "value": "input_mask_batch",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_mask for f in input_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_265": {
                "variable": {
                    "value": "example_index_batch",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_ids_batch.size()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_269": {
                "variable": {
                    "value": "target_batch",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_ids for f in target_feature]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_271": {
                "variable": {
                    "value": "target_mask_batch",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_mask for f in target_feature]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_272": {
                "variable": {
                    "value": "target_index_batch",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "target_batch.size()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_324": {
                "variable": {
                    "value": "train_dl",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Dataset(tokenizer, *train)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "Name",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_329": {
                "variable": {
                    "value": "val_dl",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Dataset(tokenizer, *val)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "Name",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_334": {
                "variable": {
                    "value": "test_dl",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Dataset(tokenizer, *test)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "Name",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_370": {
                "variable": {
                    "value": "input_ids_batch",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "input_ids",
                    "type": "Name",
                    "possible_values": [
                        [
                            "bert_tokenizer.convert_tokens_to_ids(tokens)",
                            "Call"
                        ],
                        [
                            "self.bert_tokenizer.convert_tokens_to_ids(tokens)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_371": {
                "variable": {
                    "value": "input_mask_batch",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "input_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[1] * len(input_ids)",
                            "BinOp"
                        ],
                        [
                            "[1] * len(input_ids)",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_372": {
                "variable": {
                    "value": "example_index_batch",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_ids_batch.size()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_228": {
                "variable": {
                    "value": "padded_seqs",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(sequences)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "max(lengths)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_236": {
                "variable": {
                    "value": "padded_seqs",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(sequences)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "max(lengths)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_248": {
                "variable": {
                    "value": "padded_seqs",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(sequences)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "max(lengths_row)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "main.py": {
        "torch": {}
    },
    "model/common_layer.py": {
        "torch": {
            "from_numpy_381": {
                "variable": {
                    "value": "torch_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.triu(np.full([max_length, max_length], -np.inf), 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_415": {
                "variable": {
                    "value": "subsequent_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "subsequent_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.triu(np.ones(attn_shape), k=1).astype('uint8')",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(subsequent_mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "Dropout_49": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "layer_dropout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_112": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "layer_dropout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_199": {
                "variable": {
                    "value": "self.query_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_depth",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "total_key_depth",
                    "type": "Name",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_200": {
                "variable": {
                    "value": "self.key_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_depth",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "total_key_depth",
                    "type": "Name",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_201": {
                "variable": {
                    "value": "self.value_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_depth",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "total_value_depth",
                    "type": "Name",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_202": {
                "variable": {
                    "value": "self.output_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "total_value_depth",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_depth",
                    "type": "Name",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_204": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "matmul_252": {
                "variable": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "queries",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.query_linear(queries)",
                            "Call"
                        ],
                        [
                            "self._split_heads(queries)",
                            "Call"
                        ],
                        [
                            "queries * self.query_scale",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "keys.permute(0, 1, 3, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_271": {
                "variable": {
                    "value": "weights",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.matmul(queries, keys.permute(0, 1, 3, 2))",
                            "Call"
                        ],
                        [
                            "logits.masked_fill(mask, -1e+18)",
                            "Call"
                        ],
                        [
                            "self.output_projection(hidden)",
                            "Call"
                        ],
                        [
                            "self.output_projection(hidden)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_278": {
                "variable": {
                    "value": "contexts",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "nn.functional.softmax(logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.dropout(weights)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "values",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.value_linear(values)",
                            "Call"
                        ],
                        [
                            "self._split_heads(values)",
                            "Call"
                        ]
                    ]
                }
            },
            "ConstantPad1d_305": {
                "variable": {
                    "value": "self.pad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(kernel_size - 1, 0) if pad_type == 'left' else (kernel_size // 2, (kernel_size - 1) // 2)",
                            "IfExp"
                        ],
                        [
                            "'left'",
                            "MethodArgument"
                        ]
                    ]
                },
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv1d_306": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_size",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "output_size",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Name",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ModuleList_346": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "layers",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "ReLU_347": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_348": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Parameter_366": {
                "variable": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_367": {
                "variable": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_401": {
                "ndarray": {
                    "value": "signal",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.concatenate([np.sin(scaled_time), np.cos(scaled_time)], axis=1)",
                            "Call"
                        ],
                        [
                            "np.pad(signal, [[0, 0], [0, channels % 2]], 'constant', constant_values=[0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "signal.reshape([1, length, channels])",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_430": {
                "variable": {
                    "value": "self.output_projection",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_size",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "softmax_442": {
                "variable": {
                    "value": "probs",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.matmul(queries, keys.permute(0, 1, 3, 2))",
                            "Call"
                        ],
                        [
                            "logits.masked_fill(mask, -1e+18)",
                            "Call"
                        ],
                        [
                            "self.output_projection(hidden)",
                            "Call"
                        ],
                        [
                            "self.output_projection(hidden)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "max_443": {
                "variable": {
                    "value": "(_, predictions)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.softmax(logits, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_softmax_449": {
                "variable": {
                    "value": "log_probs",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.matmul(queries, keys.permute(0, 1, 3, 2))",
                            "Call"
                        ],
                        [
                            "logits.masked_fill(mask, -1e+18)",
                            "Call"
                        ],
                        [
                            "self.output_projection(hidden)",
                            "Call"
                        ],
                        [
                            "self.output_projection(hidden)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "KLDivLoss_468": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "nonzero_481": {
                "variable": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "target.data == self.padding_idx",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "zeros_544": {
                "variable": {
                    "value": "coverage",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "enc_batch.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "nll_loss_450": {
                "input": {
                    "value": "log_probs.view(-1, self.output_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "labels.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_540": {
                "variable": {
                    "value": "extra_zeros",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, batch['max_art_oovs'])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_366": {
                "*size": {
                    "value": "features",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "zeros_367": {
                "*size": {
                    "value": "features",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Linear_340": {
                "in_features": {
                    "value": "*s",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "model/transformer.py": {
        "torch": {
            "manual_seed_23": {
                "seed": {
                    "value": "123",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "is_available_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_all_25": {
                "seed": {
                    "value": "123",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_70": {
                "variable": {
                    "value": "self.embedding_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embedding_size",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Name",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_73": {
                "variable": {
                    "value": "self.dec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[DecoderLayer(*params) for l in range(num_layers)]",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_76": {
                "variable": {
                    "value": "self.input_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "input_dropout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_104": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "vocab",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Linear_105": {
                "variable": {
                    "value": "self.p_gen_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BCELoss_106": {
                "variable": {
                    "value": "self.copyloss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sigmoid_107": {
                "variable": {
                    "value": "self.m",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "NLLLoss_150": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "config.PAD_idx",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "NLLLoss_151": {
                "variable": {
                    "value": "self.criterion_ppl",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "config.PAD_idx",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_160": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "config.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_210": {
                "variable": {
                    "value": "sos_token",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_213": {
                "variable": {
                    "value": "dec_batch_shift",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(sos_token, dec_batch[:, :-1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_285": {
                "variable": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat(logits, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_286": {
                "variable": {
                    "value": "attns",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "attns",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat(attns, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_297": {
                "variable": {
                    "value": "ys",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gt_81": {
                "variable": {
                    "value": "dec_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_trg + self.mask[:, :mask_trg.size(-1), :mask_trg.size(-1)]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_118": {
                "variable": {
                    "value": "vocab_dist",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "logit / temp",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_121": {
                "variable": {
                    "value": "attn_dist_",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_dist / temp",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_123": {
                "variable": {
                    "value": "enc_batch_extend_vocab_",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[enc_batch_extend_vocab.unsqueeze(1)] * x.size(1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_126": {
                "variable": {
                    "value": "logit",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "vocab_dist_.scatter_add(2, enc_batch_extend_vocab_, attn_dist_)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_165": {
                "variable": {
                    "value": "state",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "model_file_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, location: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "save_193": {
                "obj": {
                    "value": "state",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.load(model_file_path, map_location=lambda storage, location: storage)",
                            "Call"
                        ],
                        [
                            "{'iter': iter, 'decoder_state_dict': self.decoder.state_dict(), 'generator_dict': self.generator.state_dict(), 'embedding_dict': self.embedding.state_dict(), 'current_loss': loss}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "model_save_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(self.model_dir, 'model_{}_{:.4f}_{:.4f}'.format(iter, loss, r_avg))",
                            "Call"
                        ]
                    ]
                }
            },
            "max_248": {
                "variable": {
                    "value": "(_, next_word)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "prob[:, -1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_304": {
                "variable": {
                    "value": "(_, next_word)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "prob[:, -1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_125": {
                "variable": {
                    "value": "enc_batch_extend_vocab_",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[enc_batch_extend_vocab_[0].unsqueeze(0)] * x.size(0)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_softmax_130": {
                "input": {
                    "value": "logit",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.proj(x)",
                            "Call"
                        ],
                        [
                            "torch.log(vocab_dist_.scatter_add(2, enc_batch_extend_vocab_, attn_dist_))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "no_grad_205": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_274": {
                "variable": {
                    "value": "context_input_mask_batch",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "context_input_mask_batch",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(context_input_mask_batch)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_294": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_310": {
                "variable": {
                    "value": "ys",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ys, torch.ones(1, 1).long().fill_(next_word).cuda()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_313": {
                "variable": {
                    "value": "ys",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ys, torch.ones(1, 1).long().fill_(next_word)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Adam_162": {
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.9, 0.98)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-09",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_266": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_310": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_313": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "utils/beam_omt.py": {
        "torch": {
            "arange_244": {
                "variable": {
                    "value": "seq_range",
                    "type": "Name",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "max_len",
                    "type": "Name",
                    "possible_values": [
                        [
                            "sequence_length.data.max()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_270": {
                "variable": {
                    "value": "c_t_1",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, 2 * config.hidden_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_20": {
                "variable": {
                    "value": "self.scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "device_112": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if config.USE_CUDA else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "zeros_274": {
                "variable": {
                    "value": "coverage",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "enc_batch.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sort_75": {
                "input": {
                    "value": "self.scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_268": {
                "variable": {
                    "value": "extra_zeros",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, batch['max_art_oovs'])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "full_27": {
                "size": {
                    "value": "(size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "config.PAD_idx",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "stack_154": {
                "variable": {
                    "value": "dec_partial_seq",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "dec_partial_seq",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[b.get_current_state() for b in inst_dec_beams if not b.done]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(dec_partial_seq).to(self.device)",
                            "Call"
                        ],
                        [
                            "dec_partial_seq.view(-1, len_dec_seq)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_159": {
                "variable": {
                    "value": "dec_partial_pos",
                    "type": "Name",
                    "possible_values": []
                },
                "start": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "len_dec_seq + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_166": {
                "variable": {
                    "value": "mask_src",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mask_src[0].unsqueeze(0)] * mask_trg.size(0)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_205": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils/beam_ptr.py": {
        "torch": {
            "arange_196": {
                "variable": {
                    "value": "seq_range",
                    "type": "Name",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "max_len",
                    "type": "Name",
                    "possible_values": [
                        [
                            "sequence_length.data.max()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_222": {
                "variable": {
                    "value": "c_t_1",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, 2 * config.hidden_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_226": {
                "variable": {
                    "value": "coverage",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "enc_batch.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_139": {
                "variable": {
                    "value": "c_t_1",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_context",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "topk_151": {
                "variable": {
                    "value": "(topk_log_probs, topk_ids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "final_dist",
                    "type": "Name",
                    "possible_values": []
                },
                "k": {
                    "value": "config.beam_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_220": {
                "variable": {
                    "value": "extra_zeros",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, batch['max_art_oovs'])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "stack_146": {
                "variable": {
                    "value": "coverage_t_1",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_coverage",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_138": {
                "tensors": {
                    "value": "all_state_c",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_138": {
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "utils/config.py": {
        "torch": {
            "is_available_74": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}