{
    "test_functions.py": {
        "sklearn": {
            "roc_curve_64": {
                "variable": {
                    "value": "(fpr, tpr, thresholds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(labels)",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(scores)",
                            "Call"
                        ]
                    ]
                },
                "pos_label": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "auc_65": {
                "variable": {
                    "value": "roc_auc",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fpr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "y": {
                    "value": "tpr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "auc_352": {
                "x": {
                    "value": "fpr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "y": {
                    "value": "tpr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "CosineSimilarity_28": {
                "variable": {
                    "value": "similarity_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_85": {
                "variable": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "inputs.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MSELoss_87": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CosineSimilarity_88": {
                "variable": {
                    "value": "similarity_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_96": {
                "variable": {
                    "value": "loss_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1 - similarity_loss(y_pred_1.view(y_pred_1.shape[0], -1), y_1.view(y_1.shape[0], -1))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_98": {
                "variable": {
                    "value": "loss_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1 - similarity_loss(y_pred_2.view(y_pred_2.shape[0], -1), y_2.view(y_2.shape[0], -1))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_100": {
                "variable": {
                    "value": "loss_3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1 - similarity_loss(y_pred_3.view(y_pred_3.shape[0], -1), y_3.view(y_3.shape[0], -1))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "MSELoss_142": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CosineSimilarity_143": {
                "variable": {
                    "value": "similarity_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_151": {
                "variable": {
                    "value": "loss_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1 - similarity_loss(y_pred_1.view(y_pred_1.shape[0], -1), y_1.view(y_1.shape[0], -1))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_153": {
                "variable": {
                    "value": "loss_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1 - similarity_loss(y_pred_2.view(y_pred_2.shape[0], -1), y_2.view(y_2.shape[0], -1))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_155": {
                "variable": {
                    "value": "loss_3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1 - similarity_loss(y_pred_3.view(y_pred_3.shape[0], -1), y_3.view(y_3.shape[0], -1))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_47": {
                "variable": {
                    "value": "abs_loss_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(y_pred_1 - y_1) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "(1, 2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "mean_49": {
                "variable": {
                    "value": "abs_loss_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(y_pred_2 - y_2) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "(1, 2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "mean_51": {
                "variable": {
                    "value": "abs_loss_3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(y_pred_3 - y_3) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "(1, 2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "clamp_256": {
                "input": {
                    "value": "grad_in[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "max_176": {
                "input": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_dataloader",
                            "Name"
                        ],
                        [
                            "test_dataloader",
                            "Name"
                        ],
                        [
                            "test_dataloader",
                            "Name"
                        ],
                        [
                            "x.view(1, 3, 128, 128)",
                            "Call"
                        ],
                        [
                            "test_dataloader",
                            "Name"
                        ],
                        [
                            "x.view(1, 3, 128, 128)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_176": {
                "input": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_dataloader",
                            "Name"
                        ],
                        [
                            "test_dataloader",
                            "Name"
                        ],
                        [
                            "test_dataloader",
                            "Name"
                        ],
                        [
                            "x.view(1, 3, 128, 128)",
                            "Call"
                        ],
                        [
                            "test_dataloader",
                            "Name"
                        ],
                        [
                            "x.view(1, 3, 128, 128)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "dataloader.py": {
        "torch": {
            "DataLoader_102": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CIFAR10('./Dataset/CIFAR10/train', train=True, download=True, transform=img_transform)",
                            "Call"
                        ],
                        [
                            "MNIST('./Dataset/MNIST/train', train=True, download=True, transform=img_transform)",
                            "Call"
                        ],
                        [
                            "FashionMNIST('./Dataset/FashionMNIST/train', train=True, download=True, transform=img_transform)",
                            "Call"
                        ],
                        [
                            "ImageFolder(root=data_path, transform=orig_transform)",
                            "Call"
                        ],
                        [
                            "ImageFolder(root=data_path, transform=orig_transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['batch_size']",
                            "Subscript"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_107": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CIFAR10('./Dataset/CIFAR10/test', train=False, download=True, transform=img_transform)",
                            "Call"
                        ],
                        [
                            "MNIST('./Dataset/MNIST/test', train=False, download=True, transform=img_transform)",
                            "Call"
                        ],
                        [
                            "FashionMNIST('./Dataset/FashionMNIST/test', train=False, download=True, transform=img_transform)",
                            "Call"
                        ],
                        [
                            "ImageFolder(root=test_data_path, transform=orig_transform)",
                            "Call"
                        ],
                        [
                            "ImageFolder(root=test_data_path, transform=orig_transform)",
                            "Call"
                        ],
                        [
                            "ImageFolder(root=test_data_path, transform=orig_transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['batch_size']",
                            "Subscript"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_127": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CIFAR10('./Dataset/CIFAR10/test', train=False, download=True, transform=img_transform)",
                            "Call"
                        ],
                        [
                            "MNIST('./Dataset/MNIST/test', train=False, download=True, transform=img_transform)",
                            "Call"
                        ],
                        [
                            "FashionMNIST('./Dataset/FashionMNIST/test', train=False, download=True, transform=img_transform)",
                            "Call"
                        ],
                        [
                            "ImageFolder(root=test_data_path, transform=orig_transform)",
                            "Call"
                        ],
                        [
                            "ImageFolder(root=test_data_path, transform=orig_transform)",
                            "Call"
                        ],
                        [
                            "ImageFolder(root=test_data_path, transform=orig_transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_135": {
                "variable": {
                    "value": "ground_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "ground_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ImageFolder(root=ground_data_path, transform=orig_transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "loss_functions.py": {
        "torch": {
            "MSELoss_9": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CosineSimilarity_10": {
                "variable": {
                    "value": "self.similarity_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_18": {
                "variable": {
                    "value": "loss_0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1 - self.similarity_loss(y_pred_0.view(y_pred_0.shape[0], -1), y_0.view(y_0.shape[0], -1))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_20": {
                "variable": {
                    "value": "loss_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1 - self.similarity_loss(y_pred_1.view(y_pred_1.shape[0], -1), y_1.view(y_1.shape[0], -1))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_22": {
                "variable": {
                    "value": "loss_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1 - self.similarity_loss(y_pred_2.view(y_pred_2.shape[0], -1), y_2.view(y_2.shape[0], -1))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_24": {
                "variable": {
                    "value": "loss_3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1 - self.similarity_loss(y_pred_3.view(y_pred_3.shape[0], -1), y_3.view(y_3.shape[0], -1))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "CosineSimilarity_35": {
                "variable": {
                    "value": "self.similarity_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_41": {
                "variable": {
                    "value": "loss_0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1 - self.similarity_loss(y_pred_0.view(y_pred_0.shape[0], -1), y_0.view(y_0.shape[0], -1))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_42": {
                "variable": {
                    "value": "loss_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1 - self.similarity_loss(y_pred_1.view(y_pred_1.shape[0], -1), y_1.view(y_1.shape[0], -1))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_43": {
                "variable": {
                    "value": "loss_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1 - self.similarity_loss(y_pred_2.view(y_pred_2.shape[0], -1), y_2.view(y_2.shape[0], -1))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_44": {
                "variable": {
                    "value": "loss_3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1 - self.similarity_loss(y_pred_3.view(y_pred_3.shape[0], -1), y_3.view(y_3.shape[0], -1))",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "models/network.py": {
        "torch": {
            "Sequential_60": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ModuleList_81": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(vgg16('vgg16-397923af.pth').features)",
                            "Call"
                        ]
                    ]
                }
            },
            "ModuleList_113": {
                "modules": {
                    "value": "model.features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_53": {
                "variable": {
                    "value": "conv2d",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "cfg[i]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "cfg[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['use_bias']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "load_120": {
                "f": {
                    "value": "'{}Cloner_{}_epoch_{}.pth'.format(checkpoint_path, normal_class, last_checkpoint)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_128": {
                "obj": {
                    "value": "vgg.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}Source_{}_random_vgg.pth'.format(checkpoint_path, normal_class)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_26": {
                "modules": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_49": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "load_123": {
                "f": {
                    "value": "'{}Source_{}_random_vgg.pth'.format(checkpoint_path, normal_class)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MaxPool2d_51": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_56": {
                "num_features": {
                    "value": "cfg[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_56": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_58": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {}
    }
}