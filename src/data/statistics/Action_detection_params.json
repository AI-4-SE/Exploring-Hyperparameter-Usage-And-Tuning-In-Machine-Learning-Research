{
    "action_detection/dataset.py": {
        "torch": {
            "from_numpy_60": {
                "variable": {
                    "value": "bbox",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "bbox",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bbox[idx]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(bbox)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_tensor_44": {
                "obj": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "idx.tolist()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "action_detection/model.py": {
        "torch": {
            "sum_81": {
                "variable": {
                    "value": "acts",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "actionness",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool3d_98": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(d, h, w)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv1d_112": {
                "variable": {
                    "value": "self.c1_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "36",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv1d_113": {
                "variable": {
                    "value": "self.c1_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "9",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_115": {
                "variable": {
                    "value": "self.fc_bboxes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "h * w * 36",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "36",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_116": {
                "variable": {
                    "value": "self.fc_ascores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "h * w * 9",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "9",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_119": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.squeeze(x, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x1, x2), dim=1)",
                            "Call"
                        ],
                        [
                            "x.reshape((512, 8, -1))",
                            "Call"
                        ],
                        [
                            "self.conv11(x)",
                            "Call"
                        ],
                        [
                            "self.pool1(F.leaky_relu(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.pool2(conv2)",
                            "Call"
                        ],
                        [
                            "self.pool3(F.leaky_relu(self.conv3b(F.leaky_relu(self.conv3a(x)))))",
                            "Call"
                        ],
                        [
                            "self.pool4(F.leaky_relu(self.conv4b(F.leaky_relu(self.conv4a(x)))))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.conv5b(F.leaky_relu(self.conv5a(x))))",
                            "Call"
                        ],
                        [
                            "self.toi(ref_tube_props)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc6(x))",
                            "Call"
                        ],
                        [
                            "self.drop1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc7(x))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_145": {
                "variable": {
                    "value": "self.conv11",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "144",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "8192",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_146": {
                "variable": {
                    "value": "self.fc6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * 8 * fc6_units",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "fc7_units",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_147": {
                "variable": {
                    "value": "self.fc7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "fc7_units",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "fc8_units",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_148": {
                "variable": {
                    "value": "self.fc8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "fc8_units",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "norm_172": {
                "variable": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.toi2(tubes)",
                            "Call"
                        ],
                        [
                            "torch.norm(x1, p=2)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_175": {
                "variable": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.toi5(bboxes)",
                            "Call"
                        ],
                        [
                            "x2.repeat(1, 8, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.norm(x2, p=2)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_176": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x1, x2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flatten_179": {
                "variable": {
                    "value": "reg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.squeeze(x, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x1, x2), dim=1)",
                            "Call"
                        ],
                        [
                            "x.reshape((512, 8, -1))",
                            "Call"
                        ],
                        [
                            "self.conv11(x)",
                            "Call"
                        ],
                        [
                            "self.pool1(F.leaky_relu(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.pool2(conv2)",
                            "Call"
                        ],
                        [
                            "self.pool3(F.leaky_relu(self.conv3b(F.leaky_relu(self.conv3a(x)))))",
                            "Call"
                        ],
                        [
                            "self.pool4(F.leaky_relu(self.conv4b(F.leaky_relu(self.conv4a(x)))))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.conv5b(F.leaky_relu(self.conv5a(x))))",
                            "Call"
                        ],
                        [
                            "self.toi(ref_tube_props)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc6(x))",
                            "Call"
                        ],
                        [
                            "self.drop1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc7(x))",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_196": {
                "variable": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv3d_199": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool3d_200": {
                "variable": {
                    "value": "self.pool1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv3d_201": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool3d_202": {
                "variable": {
                    "value": "self.pool2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(2, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv3d_203": {
                "variable": {
                    "value": "self.conv3a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv3d_204": {
                "variable": {
                    "value": "self.conv3b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool3d_205": {
                "variable": {
                    "value": "self.pool3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(2, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_206": {
                "variable": {
                    "value": "self.conv4a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv3d_207": {
                "variable": {
                    "value": "self.conv4b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool3d_208": {
                "variable": {
                    "value": "self.pool4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(2, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv3d_209": {
                "variable": {
                    "value": "self.conv5a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv3d_210": {
                "variable": {
                    "value": "self.conv5b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv3d_214": {
                "variable": {
                    "value": "self.reg_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "fc8_units",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.n_anchor * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv3d_215": {
                "variable": {
                    "value": "self.cls_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "fc8_units",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.n_anchor * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_217": {
                "variable": {
                    "value": "self.fc6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "648",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_218": {
                "variable": {
                    "value": "self.drop1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.25",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_219": {
                "variable": {
                    "value": "self.fc7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "N_CLASSES",
                    "type": "variable",
                    "possible_values": [
                        [
                            "11",
                            "int"
                        ]
                    ]
                }
            },
            "leaky_relu_225": {
                "variable": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_232": {
                "input": {
                    "value": "self.conv5a(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "flatten_240": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.squeeze(x, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat((x1, x2), dim=1)",
                            "Call"
                        ],
                        [
                            "x.reshape((512, 8, -1))",
                            "Call"
                        ],
                        [
                            "self.conv11(x)",
                            "Call"
                        ],
                        [
                            "self.pool1(F.leaky_relu(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.pool2(conv2)",
                            "Call"
                        ],
                        [
                            "self.pool3(F.leaky_relu(self.conv3b(F.leaky_relu(self.conv3a(x)))))",
                            "Call"
                        ],
                        [
                            "self.pool4(F.leaky_relu(self.conv4b(F.leaky_relu(self.conv4a(x)))))",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.conv5b(F.leaky_relu(self.conv5a(x))))",
                            "Call"
                        ],
                        [
                            "self.toi(ref_tube_props)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc6(x))",
                            "Call"
                        ],
                        [
                            "self.drop1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc7(x))",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_241": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc6(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_243": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc7(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_224": {
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_227": {
                "input": {
                    "value": "self.conv3b(F.leaky_relu(self.conv3a(x)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_230": {
                "input": {
                    "value": "self.conv4b(F.leaky_relu(self.conv4a(x)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_228": {
                "input": {
                    "value": "self.conv3a(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_231": {
                "input": {
                    "value": "self.conv4a(x)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "action_detection/training.py": {
        "torch": {
            "CrossEntropyLoss_45": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_46": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "SubsetRandomSampler_73": {
                "variable": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "train_indices",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "SubsetRandomSampler_74": {
                "variable": {
                    "value": "valid_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "val_indices",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataLoader_76": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ActionsDataset(data_map, transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "BATCH_SIZE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "int"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SubsetRandomSampler(train_indices)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_78": {
                "variable": {
                    "value": "validation_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ActionsDataset(data_map, transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "BATCH_SIZE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "int"
                        ]
                    ]
                },
                "sampler": {
                    "value": "valid_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SubsetRandomSampler(val_indices)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_89": {
                "input": {
                    "value": "data['image'].unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "action_detection/utils.py": {
        "torch": {
            "device_47": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "no_grad_54": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_60": {
                "variable": {
                    "value": "(_, preds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_47": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}