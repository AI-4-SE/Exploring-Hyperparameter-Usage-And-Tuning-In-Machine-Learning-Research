{
    "microesc/test.py": {
        "sklearn": {
            "accuracy_score_88": {
                "variable": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.classID",
                            "Attribute"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "numpy.argmax(p, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "confusion_matrix_90": {
                "variable": {
                    "value": "confusion",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.classID",
                            "Attribute"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "numpy.argmax(p, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(range(len(urbansound8k.classnames)))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "microesc/train.py": {
        "sklearn": {},
        "tensorflow": {
            "ConfigProto_206": {
                "variable": {
                    "value": "session_config",
                    "type": "variable",
                    "possible_values": []
                },
                "gpu_options": {
                    "value": "tf.GPUOptions(allow_growth=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Session_207": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "session_config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(gpu_options=tf.GPUOptions(allow_growth=True))",
                            "Call"
                        ]
                    ]
                }
            },
            "GPUOptions_206": {
                "allow_growth": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "microesc/variations.py": {
        "sklearn": {
            "ParameterSampler_23": {
                "variable": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "param_distributions": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dict(kernel_t=range(3, 10, 2), kernel_f=range(3, 10, 2), pool_t=range(2, 5), pool_f=range(2, 5), kernels_start=range(16, 64), fully_connected=range(16, 128))",
                            "Call"
                        ]
                    ]
                },
                "n_iter": {
                    "value": "n_iter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "400",
                            "Method Argument"
                        ]
                    ]
                },
                "random_state": {
                    "value": "random_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "report/pyplots/logloss.py": {
        "sklearn": {
            "log_loss_9": {
                "y_true": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "[x]",
                    "type": "List",
                    "possible_values": []
                },
                "labels": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "log_loss_10": {
                "y_true": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "[x]",
                    "type": "List",
                    "possible_values": []
                },
                "labels": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "microesc/models/crnn.py": {
        "tensorflow": {
            "Sequential_35": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SeparableConv2D_41": {
                "filters": {
                    "value": "conv_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filters",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "conv_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(3",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "MaxPooling2D_42": {
                "pool_size": {
                    "value": "downsample_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(2",
                            "Method Argument"
                        ],
                        [
                            "downsample_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Reshape_55": {
                "target_shape": {
                    "value": "(o[1], -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Bidirectional_56": {
                "layer": {
                    "value": "GRU(rnn_units, return_sequences=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Bidirectional_57": {
                "layer": {
                    "value": "GRU(rnn_units, return_sequences=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TimeDistributed_70": {
                "layer": {
                    "value": "Dense(fully_connected, activation='linear')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Softmax_72": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GRU_56": {
                "units": {
                    "value": "rnn_units",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "return_sequences": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GRU_57": {
                "units": {
                    "value": "rnn_units",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "return_sequences": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SeparableConv2D_60": {
                "filters": {
                    "value": "rnn_units",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(9, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "SeparableConv2D_61": {
                "filters": {
                    "value": "rnn_units",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(9, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Dense_70": {
                "units": {
                    "value": "fully_connected",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "linear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "TimeDistributed_76": {
                "layer": {
                    "value": "Dense(n_classes, activation='linear')",
                    "type": "Call",
                    "possible_values": []
                },
                "input_shape": {
                    "value": "(o[1], o[2])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Softmax_77": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_76": {
                "units": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "linear",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "microesc/stats.py": {
        "tensorflow": {
            "Graph_67": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "RunMetadata_68": {
                "variable": {
                    "value": "run_meta",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ProfileOptionBuilder_82": {
                "variable": {
                    "value": "opts",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "profile_84": {
                "variable": {
                    "value": "params_stats",
                    "type": "variable",
                    "possible_values": []
                },
                "graph": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Graph()",
                            "Call"
                        ]
                    ]
                },
                "run_meta": {
                    "value": "run_meta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.RunMetadata()",
                            "Call"
                        ]
                    ]
                },
                "cmd": {
                    "value": "scope",
                    "type": "str",
                    "possible_values": []
                },
                "options": {
                    "value": "opts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.profiler.ProfileOptionBuilder().trainable_variables_parameter()",
                            "Call"
                        ],
                        [
                            "tf.profiler.ProfileOptionBuilder().float_operation()",
                            "Call"
                        ]
                    ]
                }
            },
            "ProfileOptionBuilder_92": {
                "variable": {
                    "value": "opts",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "profile_94": {
                "variable": {
                    "value": "flops_stats",
                    "type": "variable",
                    "possible_values": []
                },
                "graph": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Graph()",
                            "Call"
                        ]
                    ]
                },
                "run_meta": {
                    "value": "run_meta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.RunMetadata()",
                            "Call"
                        ]
                    ]
                },
                "cmd": {
                    "value": "scope",
                    "type": "str",
                    "possible_values": []
                },
                "options": {
                    "value": "opts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.profiler.ProfileOptionBuilder().trainable_variables_parameter()",
                            "Call"
                        ],
                        [
                            "tf.profiler.ProfileOptionBuilder().float_operation()",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_69": {
                "graph": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Graph()",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_77": {
                "variable": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1] + list(shape)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    }
}