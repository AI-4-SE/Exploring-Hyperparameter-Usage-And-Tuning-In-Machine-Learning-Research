{
    "src/model_based_version/scripts/dataloader.py": {
        "torch": {
            "device_18": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "tensor_126": {
                "variable": {
                    "value": "current_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "current_state",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.load(self.root + '/state/' + index_item[0])",
                            "Call"
                        ],
                        [
                            "torch.tensor(current_state, dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_129": {
                "variable": {
                    "value": "next_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "next_state",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.load(self.root + '/next_state/' + index_item[0])",
                            "Call"
                        ],
                        [
                            "torch.tensor(next_state, dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_132": {
                "variable": {
                    "value": "action",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "action",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.load(self.root + '/action/' + index_item[0])",
                            "Call"
                        ],
                        [
                            "torch.tensor(action, dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_136": {
                "variable": {
                    "value": "reward",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "reward",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.load(self.root + '/reward/' + index)",
                            "Call"
                        ],
                        [
                            "np.load(self.root + '/reward/' + index_item[0])",
                            "Call"
                        ],
                        [
                            "torch.tensor(reward, dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_18": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/model_based_version/scripts/dataloader_list.py": {
        "torch": {
            "device_18": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "tensor_126": {
                "variable": {
                    "value": "current_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "current_state",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.load(self.root + '/state/' + index_item[0])",
                            "Call"
                        ],
                        [
                            "torch.tensor(current_state, dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_129": {
                "variable": {
                    "value": "next_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "next_state",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.load(self.root + '/next_state/' + index_item[0])",
                            "Call"
                        ],
                        [
                            "torch.tensor(next_state, dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_132": {
                "variable": {
                    "value": "action",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "action",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.load(self.root + '/action/' + index_item[0])",
                            "Call"
                        ],
                        [
                            "torch.tensor(action, dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_136": {
                "variable": {
                    "value": "reward",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "reward",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.load(self.root + '/reward/' + index)",
                            "Call"
                        ],
                        [
                            "np.load(self.root + '/reward/' + index_item[0])",
                            "Call"
                        ],
                        [
                            "torch.tensor(reward, dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_18": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/model_based_version/scripts/ensemble_model.py": {
        "torch": {
            "device_25": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "SummaryWriter_492": {
                "variable": {
                    "value": "writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "/home/cyx/model-based-social-navigation/src/model_based_version/dataset/log",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DataLoader_498": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_db",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Transition_Model_Dataset(root, mode='training')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "BATCH_SIZE",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_499": {
                "variable": {
                    "value": "val_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_db",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Transition_Model_Dataset(root, mode='validation')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "BATCH_SIZE",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "Constant"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_500": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_db",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Transition_Model_Dataset(root, mode='testing')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "BATCH_SIZE",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "Constant"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_487": {
                "seed": {
                    "value": "999",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_489": {
                "seed": {
                    "value": "999",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_249": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_279": {
                "obj": {
                    "value": "self.model_list[idx].generator.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "filename + '_generator'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_280": {
                "obj": {
                    "value": "self.model_list[idx].optimizer_G.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "filename + '_generator_optimizer'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_377": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_285": {
                "f": {
                    "value": "filename + '_generator'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_286": {
                "f": {
                    "value": "filename + '_generator_optimizer'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_314": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/model_based_version/scripts/main_four.py": {
        "torch": {
            "SummaryWriter_66": {
                "variable": {
                    "value": "writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "pkg_path + '/log/'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "manual_seed_443": {
                "seed": {
                    "value": "999",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_445": {
                "seed": {
                    "value": "999",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/model_based_version/scripts/main_one.py": {
        "torch": {
            "SummaryWriter_66": {
                "variable": {
                    "value": "writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "pkg_path + '/log/'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "manual_seed_382": {
                "seed": {
                    "value": "666",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_384": {
                "seed": {
                    "value": "666",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/model_based_version/scripts/main_one_model_free.py": {
        "torch": {
            "SummaryWriter_53": {
                "variable": {
                    "value": "writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "pkg_path + '/log'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_55": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "manual_seed_59": {
                "seed": {
                    "value": "666",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_61": {
                "seed": {
                    "value": "666",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_55": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/model_based_version/scripts/policy.py": {
        "torch": {
            "device_16": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Sequential_99": {
                "variable": {
                    "value": "self.group1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(1, 4, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_104": {
                "variable": {
                    "value": "self.group2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(4, 8, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_109": {
                "variable": {
                    "value": "self.group3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(8, 16, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_114": {
                "variable": {
                    "value": "self.group4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(16, 32, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_120": {
                "variable": {
                    "value": "self.l_vel_ang",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_121": {
                "variable": {
                    "value": "self.l_goal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_122": {
                "variable": {
                    "value": "self.l_lidar_state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "32 * 1 * 5 * 10",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_124": {
                "variable": {
                    "value": "self.l0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_125": {
                "variable": {
                    "value": "self.l1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256 + 32 + 32",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_126": {
                "variable": {
                    "value": "self.l2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_127": {
                "variable": {
                    "value": "self.l3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "action_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "leaky_relu_135": {
                "variable": {
                    "value": "lidar_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.group1(lidar_state)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_136": {
                "variable": {
                    "value": "lidar_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.group2(lidar_state)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_137": {
                "variable": {
                    "value": "lidar_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.group3(lidar_state)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_138": {
                "variable": {
                    "value": "lidar_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.group4(lidar_state)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_141": {
                "variable": {
                    "value": "lidar_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.l_lidar_state(lidar_state)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_142": {
                "variable": {
                    "value": "lidar_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.l0(lidar_state)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_144": {
                "variable": {
                    "value": "vel_ang_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.l_vel_ang(vel_ang)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_146": {
                "variable": {
                    "value": "goal_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.l_goal(goal)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_149": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[lidar_state, vel_ang_state, goal_state]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "leaky_relu_151": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.l1(a)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_152": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.l2(a)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_164": {
                "variable": {
                    "value": "self.group1_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(1, 4, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_169": {
                "variable": {
                    "value": "self.group2_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(4, 8, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_174": {
                "variable": {
                    "value": "self.group3_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(8, 16, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_179": {
                "variable": {
                    "value": "self.group4_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(16, 32, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_184": {
                "variable": {
                    "value": "self.l_vel_ang_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_185": {
                "variable": {
                    "value": "self.l_goal_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_186": {
                "variable": {
                    "value": "self.l_lidar_state_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "32 * 1 * 5 * 10",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_187": {
                "variable": {
                    "value": "self.l_action_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "action_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_189": {
                "variable": {
                    "value": "self.l1_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_190": {
                "variable": {
                    "value": "self.l2_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256 + 32 + 32 + 32",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_191": {
                "variable": {
                    "value": "self.l3_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_192": {
                "variable": {
                    "value": "self.l4_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_197": {
                "variable": {
                    "value": "self.group1_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(1, 4, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_202": {
                "variable": {
                    "value": "self.group2_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(4, 8, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_207": {
                "variable": {
                    "value": "self.group3_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(8, 16, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_212": {
                "variable": {
                    "value": "self.group4_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(16, 32, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_217": {
                "variable": {
                    "value": "self.l_vel_ang_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_218": {
                "variable": {
                    "value": "self.l_goal_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_219": {
                "variable": {
                    "value": "self.l_lidar_state_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "32 * 1 * 5 * 10",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_220": {
                "variable": {
                    "value": "self.l_action_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "action_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_222": {
                "variable": {
                    "value": "self.l1_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_223": {
                "variable": {
                    "value": "self.l2_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256 + 32 + 32 + 32",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_224": {
                "variable": {
                    "value": "self.l3_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_225": {
                "variable": {
                    "value": "self.l4_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "leaky_relu_233": {
                "variable": {
                    "value": "lidar_state_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.group1_1(lidar_state)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_234": {
                "variable": {
                    "value": "lidar_state_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.group2_1(lidar_state_1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_235": {
                "variable": {
                    "value": "lidar_state_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.group3_1(lidar_state_1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_236": {
                "variable": {
                    "value": "lidar_state_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.group4_1(lidar_state_1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_239": {
                "variable": {
                    "value": "lidar_state_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.l_lidar_state_1(lidar_state_1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_240": {
                "variable": {
                    "value": "lidar_state_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.l1_1(lidar_state_1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_242": {
                "variable": {
                    "value": "vel_ang_state_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.l_vel_ang_1(vel_ang)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_244": {
                "variable": {
                    "value": "goal_state_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.l_goal_1(goal)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_246": {
                "variable": {
                    "value": "action_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.l_action_1(action)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_248": {
                "variable": {
                    "value": "sa1",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[lidar_state_1, vel_ang_state_1, goal_state_1, action_1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "leaky_relu_249": {
                "variable": {
                    "value": "q1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.l2_1(sa1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_250": {
                "variable": {
                    "value": "q1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.l3_1(q1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_254": {
                "variable": {
                    "value": "lidar_state_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.group1_2(lidar_state)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_255": {
                "variable": {
                    "value": "lidar_state_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.group2_2(lidar_state_2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_256": {
                "variable": {
                    "value": "lidar_state_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.group3_2(lidar_state_2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_257": {
                "variable": {
                    "value": "lidar_state_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.group4_2(lidar_state_2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_260": {
                "variable": {
                    "value": "lidar_state_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.l_lidar_state_2(lidar_state_2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_261": {
                "variable": {
                    "value": "lidar_state_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.l1_2(lidar_state_2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_263": {
                "variable": {
                    "value": "vel_ang_state_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.l_vel_ang_2(vel_ang)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_265": {
                "variable": {
                    "value": "goal_state_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.l_goal_2(goal)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_267": {
                "variable": {
                    "value": "action_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.l_action_2(action)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_269": {
                "variable": {
                    "value": "sa2",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[lidar_state_2, vel_ang_state_2, goal_state_2, action_2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "leaky_relu_270": {
                "variable": {
                    "value": "q2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.l2_2(sa2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_271": {
                "variable": {
                    "value": "q2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.l3_2(q2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_281": {
                "variable": {
                    "value": "lidar_state_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.group1_1(lidar_state)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_282": {
                "variable": {
                    "value": "lidar_state_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.group2_1(lidar_state_1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_283": {
                "variable": {
                    "value": "lidar_state_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.group3_1(lidar_state_1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_284": {
                "variable": {
                    "value": "lidar_state_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.group4_1(lidar_state_1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_287": {
                "variable": {
                    "value": "lidar_state_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.l_lidar_state_1(lidar_state_1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_288": {
                "variable": {
                    "value": "lidar_state_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.l1_1(lidar_state_1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_290": {
                "variable": {
                    "value": "vel_ang_state_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.l_vel_ang_1(vel_ang)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_292": {
                "variable": {
                    "value": "goal_state_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.l_goal_1(goal)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_294": {
                "variable": {
                    "value": "action_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.l_action_1(action)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_296": {
                "variable": {
                    "value": "sa1",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[lidar_state_1, vel_ang_state_1, goal_state_1, action_1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "leaky_relu_297": {
                "variable": {
                    "value": "q1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.l2_1(sa1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_298": {
                "variable": {
                    "value": "q1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.l3_1(q1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_320": {
                "variable": {
                    "value": "self.actor_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.actor.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0003",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_325": {
                "variable": {
                    "value": "self.critic_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.critic.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0003",
                    "type": "float",
                    "possible_values": []
                }
            },
            "StepLR_327": {
                "variable": {
                    "value": "self.scheduler_actor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.actor_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "step_size": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.99",
                    "type": "float",
                    "possible_values": []
                }
            },
            "StepLR_328": {
                "variable": {
                    "value": "self.scheduler_critic",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.critic_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "step_size": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.99",
                    "type": "float",
                    "possible_values": []
                }
            },
            "from_numpy_372": {
                "variable": {
                    "value": "lidar_ego_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "lidar_ego_image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.zeros((1, 10, 80, 160))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(lidar_ego_image).float()",
                            "Call"
                        ],
                        [
                            "lidar_ego_image.unsqueeze(1).to(device)",
                            "Call"
                        ],
                        [
                            "np.zeros((state.shape[0], 10, 80, 160))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(lidar_ego_image).float()",
                            "Call"
                        ],
                        [
                            "lidar_ego_image.unsqueeze(1).to(device)",
                            "Call"
                        ],
                        [
                            "np.zeros((state.shape[0], 10, 80, 160))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(lidar_ego_image).float()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(lidar_ego_image.unsqueeze(1).numpy()).float().to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_408": {
                "variable": {
                    "value": "vel_ang",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "vel_ang",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "state[3630:3632]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(vel_ang).unsqueeze(0).float().to(device)",
                            "Call"
                        ],
                        [
                            "state[:, 3630:3632]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(vel_ang).float().to(device)",
                            "Call"
                        ],
                        [
                            "state[:, 3630:3632]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(vel_ang).float().to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_408": {
                "variable": {
                    "value": "vel_ang",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_409": {
                "variable": {
                    "value": "goal",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "goal",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "state[3632:3634]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(goal).unsqueeze(0).float().to(device)",
                            "Call"
                        ],
                        [
                            "state[:, 3632:3634]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(goal).float().to(device)",
                            "Call"
                        ],
                        [
                            "state[:, 3632:3634]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(goal).float().to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_409": {
                "variable": {
                    "value": "goal",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_444": {
                "variable": {
                    "value": "lidar_ego_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "lidar_ego_image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.zeros((1, 10, 80, 160))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(lidar_ego_image).float()",
                            "Call"
                        ],
                        [
                            "lidar_ego_image.unsqueeze(1).to(device)",
                            "Call"
                        ],
                        [
                            "np.zeros((state.shape[0], 10, 80, 160))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(lidar_ego_image).float()",
                            "Call"
                        ],
                        [
                            "lidar_ego_image.unsqueeze(1).to(device)",
                            "Call"
                        ],
                        [
                            "np.zeros((state.shape[0], 10, 80, 160))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(lidar_ego_image).float()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(lidar_ego_image.unsqueeze(1).numpy()).float().to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_524": {
                "variable": {
                    "value": "lidar_ego_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "lidar_ego_image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.zeros((1, 10, 80, 160))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(lidar_ego_image).float()",
                            "Call"
                        ],
                        [
                            "lidar_ego_image.unsqueeze(1).to(device)",
                            "Call"
                        ],
                        [
                            "np.zeros((state.shape[0], 10, 80, 160))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(lidar_ego_image).float()",
                            "Call"
                        ],
                        [
                            "lidar_ego_image.unsqueeze(1).to(device)",
                            "Call"
                        ],
                        [
                            "np.zeros((state.shape[0], 10, 80, 160))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(lidar_ego_image).float()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(lidar_ego_image.unsqueeze(1).numpy()).float().to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_589": {
                "variable": {
                    "value": "next_lidar_ego_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "next_lidar_ego_image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.zeros((state.shape[0], 10, 80, 160))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(next_lidar_ego_image).float()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(next_lidar_ego_image.unsqueeze(1).numpy()).float().to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_634": {
                "variable": {
                    "value": "lidar_ego_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "lidar_ego_image.unsqueeze(1).numpy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_635": {
                "variable": {
                    "value": "vel_ang",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "vel_ang",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "state[3630:3632]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(vel_ang).unsqueeze(0).float().to(device)",
                            "Call"
                        ],
                        [
                            "state[:, 3630:3632]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(vel_ang).float().to(device)",
                            "Call"
                        ],
                        [
                            "state[:, 3630:3632]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(vel_ang).float().to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_636": {
                "variable": {
                    "value": "goal",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "goal",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "state[3632:3634]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(goal).unsqueeze(0).float().to(device)",
                            "Call"
                        ],
                        [
                            "state[:, 3632:3634]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(goal).float().to(device)",
                            "Call"
                        ],
                        [
                            "state[:, 3632:3634]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(goal).float().to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_638": {
                "variable": {
                    "value": "next_lidar_ego_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "next_lidar_ego_image.unsqueeze(1).numpy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_639": {
                "variable": {
                    "value": "next_vel_ang",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "next_vel_ang",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "next_state[:, 3630:3632]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(next_vel_ang).float().to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_640": {
                "variable": {
                    "value": "next_goal",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "next_goal",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "next_state[:, 3632:3634]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(next_goal).float().to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_642": {
                "variable": {
                    "value": "action",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "action",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(action).float().to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_643": {
                "variable": {
                    "value": "reward",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "reward",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(reward).unsqueeze(1).float().to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_643": {
                "variable": {
                    "value": "reward",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_644": {
                "variable": {
                    "value": "not_done",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "not_done",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(not_done).unsqueeze(1).float().to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_644": {
                "variable": {
                    "value": "not_done",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_16": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_378": {
                "variable": {
                    "value": "init_translation_matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(10, 2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_389": {
                "variable": {
                    "value": "init_scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_390": {
                "variable": {
                    "value": "init_center",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_404": {
                "variable": {
                    "value": "new_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "image[0][n]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_404": {
                "variable": {
                    "value": "new_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_405": {
                "variable": {
                    "value": "lidar_ego_image[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[lidar_ego_image[0][1:10], new_image]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_481": {
                "variable": {
                    "value": "vel_ang",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "vel_ang",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "state[3630:3632]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(vel_ang).unsqueeze(0).float().to(device)",
                            "Call"
                        ],
                        [
                            "state[:, 3630:3632]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(vel_ang).float().to(device)",
                            "Call"
                        ],
                        [
                            "state[:, 3630:3632]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(vel_ang).float().to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_482": {
                "variable": {
                    "value": "goal",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "goal",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "state[3632:3634]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(goal).unsqueeze(0).float().to(device)",
                            "Call"
                        ],
                        [
                            "state[:, 3632:3634]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(goal).float().to(device)",
                            "Call"
                        ],
                        [
                            "state[:, 3632:3634]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(goal).float().to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_661": {
                "variable": {
                    "value": "target_Q",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_Q1",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "clip_grad_norm__674": {
                "parameters": {
                    "value": "self.critic.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "norm_type": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_701": {
                "obj": {
                    "value": "self.critic.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "filename + '_critic'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_702": {
                "obj": {
                    "value": "self.critic_optimizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "filename + '_critic_optimizer'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_704": {
                "obj": {
                    "value": "self.actor.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "filename + '_actor'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_705": {
                "obj": {
                    "value": "self.actor_optimizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "filename + '_actor_optimizer'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv3d_100": {
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_101": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool3d_102": {
                "kernel_size": {
                    "value": "(2, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv3d_105": {
                "in_channels": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_106": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AvgPool3d_107": {
                "kernel_size": {
                    "value": "(2, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv3d_110": {
                "in_channels": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_111": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AvgPool3d_112": {
                "kernel_size": {
                    "value": "(2, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv3d_115": {
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_116": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AvgPool3d_117": {
                "kernel_size": {
                    "value": "(1, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tanh_154": {
                "input": {
                    "value": "self.l3(a)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv3d_165": {
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_166": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool3d_167": {
                "kernel_size": {
                    "value": "(2, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv3d_170": {
                "in_channels": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_171": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AvgPool3d_172": {
                "kernel_size": {
                    "value": "(2, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv3d_175": {
                "in_channels": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_176": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AvgPool3d_177": {
                "kernel_size": {
                    "value": "(2, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv3d_180": {
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_181": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AvgPool3d_182": {
                "kernel_size": {
                    "value": "(1, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv3d_198": {
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_199": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool3d_200": {
                "kernel_size": {
                    "value": "(2, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv3d_203": {
                "in_channels": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_204": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AvgPool3d_205": {
                "kernel_size": {
                    "value": "(2, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv3d_208": {
                "in_channels": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_209": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AvgPool3d_210": {
                "kernel_size": {
                    "value": "(2, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv3d_213": {
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_214": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AvgPool3d_215": {
                "kernel_size": {
                    "value": "(1, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_451": {
                "variable": {
                    "value": "init_translation_matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(10, 2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_462": {
                "variable": {
                    "value": "init_scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_463": {
                "variable": {
                    "value": "init_center",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_476": {
                "variable": {
                    "value": "new_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "image[m][n]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_476": {
                "variable": {
                    "value": "new_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_477": {
                "variable": {
                    "value": "lidar_ego_image[m]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[lidar_ego_image[m][1:10], new_image]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_479": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_531": {
                "variable": {
                    "value": "init_translation_matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(10, 2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_542": {
                "variable": {
                    "value": "init_scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_543": {
                "variable": {
                    "value": "init_center",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_557": {
                "variable": {
                    "value": "new_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "image[m][n]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_557": {
                "variable": {
                    "value": "new_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_558": {
                "variable": {
                    "value": "lidar_ego_image[m]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[lidar_ego_image[m][1:10], new_image]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_596": {
                "variable": {
                    "value": "init_translation_matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(10, 2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_607": {
                "variable": {
                    "value": "init_scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_608": {
                "variable": {
                    "value": "init_center",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_630": {
                "variable": {
                    "value": "new_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "next_image[m][n]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_630": {
                "variable": {
                    "value": "new_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_631": {
                "variable": {
                    "value": "next_lidar_ego_image[m]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[next_lidar_ego_image[m][1:10], new_image]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_649": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mse_loss_668": {
                "input": {
                    "value": "current_Q2",
                    "type": "Variable",
                    "possible_values": []
                },
                "target": {
                    "value": "target_Q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.min(target_Q1, target_Q2)",
                            "Call"
                        ],
                        [
                            "reward + not_done * self.discount * target_Q",
                            "BinOp"
                        ]
                    ]
                }
            },
            "clip_grad_norm__686": {
                "parameters": {
                    "value": "self.actor.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "norm_type": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_709": {
                "f": {
                    "value": "filename + '_critic'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_710": {
                "f": {
                    "value": "filename + '_critic_optimizer'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_713": {
                "f": {
                    "value": "filename + '_actor'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_714": {
                "f": {
                    "value": "filename + '_actor_optimizer'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_391": {
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_464": {
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_544": {
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_609": {
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_like_652": {
                "input": {
                    "value": "action",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(action).float().to(device)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/model_based_version/scripts/replay_buffer_env.py": {
        "torch": {}
    },
    "src/model_based_version/scripts/replay_buffer_model.py": {
        "torch": {}
    },
    "src/model_based_version/scripts/transition_model.py": {
        "torch": {
            "device_23": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "cat_102": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, Variable(torch.zeros(x.size())).to(device))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_103": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out, Variable(torch.zeros(out.size())).to(device))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_228": {
                "variable": {
                    "value": "self.motion_mask_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(1, G_dim, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_236": {
                "variable": {
                    "value": "self.motion_conv_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(1, G_dim, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_240": {
                "variable": {
                    "value": "self.motion_conv_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.MaxPool2d(kernel_size=2, stride=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_245": {
                "variable": {
                    "value": "self.motion_conv_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.MaxPool2d(kernel_size=2, stride=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MaxPool2d_250": {
                "variable": {
                    "value": "self.pool_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_280": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_features * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_features * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "feature_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_281": {
                "variable": {
                    "value": "self.conv_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(num_features, num_features, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "chunk_288": {
                "variable": {
                    "value": "(c, h)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": []
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_291": {
                "variable": {
                    "value": "conv_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(masked_input, h)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "chunk_295": {
                "variable": {
                    "value": "(i, j, f, o)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "conv_output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv(conv_input)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_298": {
                "variable": {
                    "value": "new_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(new_c, new_h)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_306": {
                "variable": {
                    "value": "self.content_conv_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(1, G_dim, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_313": {
                "variable": {
                    "value": "self.content_conv_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.MaxPool2d(kernel_size=2, stride=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_321": {
                "variable": {
                    "value": "self.content_conv_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.MaxPool2d(kernel_size=2, stride=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MaxPool2d_331": {
                "variable": {
                    "value": "self.pool_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_355": {
                "variable": {
                    "value": "self.combine_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(G_dim * 8, G_dim * 4, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_365": {
                "variable": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(motion, content)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_375": {
                "variable": {
                    "value": "self.residual_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(out_dim * 2, out_dim, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_382": {
                "variable": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(motion, content)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_391": {
                "variable": {
                    "value": "self.decoder_unit3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose2d(G_dim * 4, G_dim * 4, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_400": {
                "variable": {
                    "value": "self.decoder_unit2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose2d(G_dim * 2, G_dim * 2, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_407": {
                "variable": {
                    "value": "self.decoder_unit1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose2d(G_dim, G_dim, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "UpsamplingNearest2d_415": {
                "variable": {
                    "value": "self.upsample_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "UpsamplingNearest2d_416": {
                "variable": {
                    "value": "self.upsample_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "UpsamplingNearest2d_417": {
                "variable": {
                    "value": "self.upsample_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_444": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(1, 2, 4, stride=2, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_463": {
                "variable": {
                    "value": "self.l_costmap_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(h * w * 16)",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.fc_features * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_465": {
                "variable": {
                    "value": "self.l_goal_distance",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "int(self.fc_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_466": {
                "variable": {
                    "value": "self.l_goal_direction",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "int(self.fc_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_468": {
                "variable": {
                    "value": "self.l_out_0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.fc_features * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.fc_features * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_469": {
                "variable": {
                    "value": "self.l_out_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.fc_features * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.fc_features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_470": {
                "variable": {
                    "value": "self.l_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.fc_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_472": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_483": {
                "variable": {
                    "value": "costmap_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.l_costmap_out(costmap_out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_486": {
                "variable": {
                    "value": "goal_direction",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[goal_before[:, 1:], goal_after[:, 1:]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "leaky_relu_488": {
                "variable": {
                    "value": "goal_distance_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.l_goal_distance(delta_goal_distance)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_489": {
                "variable": {
                    "value": "goal_direction_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.l_goal_direction(goal_direction)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_491": {
                "variable": {
                    "value": "all_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[costmap_out, goal_distance_out, goal_direction_out]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "L1Loss_503": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "conv2d_519": {
                "variable": {
                    "value": "output_w",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.pool_out(res_out_3)",
                            "Call"
                        ],
                        [
                            "self.pool_out(res_out_3)",
                            "Call"
                        ],
                        [
                            "self.combine_conv(input)",
                            "Call"
                        ],
                        [
                            "self.residual_conv(input)",
                            "Call"
                        ],
                        [
                            "self.dropout(F.leaky_relu(self.l_out_0(all_input)))",
                            "Call"
                        ],
                        [
                            "self.dropout(F.leaky_relu(self.l_out_1(output)))",
                            "Call"
                        ],
                        [
                            "self.l_out(output)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "filter_w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Variable(torch.from_numpy(self.filter_w).float().to(device))",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "(0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "conv2d_520": {
                "variable": {
                    "value": "output_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.pool_out(res_out_3)",
                            "Call"
                        ],
                        [
                            "self.pool_out(res_out_3)",
                            "Call"
                        ],
                        [
                            "self.combine_conv(input)",
                            "Call"
                        ],
                        [
                            "self.residual_conv(input)",
                            "Call"
                        ],
                        [
                            "self.dropout(F.leaky_relu(self.l_out_0(all_input)))",
                            "Call"
                        ],
                        [
                            "self.dropout(F.leaky_relu(self.l_out_1(output)))",
                            "Call"
                        ],
                        [
                            "self.l_out(output)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "filter_h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Variable(torch.from_numpy(self.filter_h).float().to(device))",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "(1, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "conv2d_521": {
                "variable": {
                    "value": "target_w",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "filter_w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Variable(torch.from_numpy(self.filter_w).float().to(device))",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "(0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "conv2d_522": {
                "variable": {
                    "value": "target_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "filter_h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Variable(torch.from_numpy(self.filter_h).float().to(device))",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "(1, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_529": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(G_dim * 4, G_dim * 4, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_536": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(G_dim * 4, G_dim * 4, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_543": {
                "variable": {
                    "value": "self.final_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(G_dim * 4, G_dim * 4, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_550": {
                "variable": {
                    "value": "self.fc_mu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "int(G_dim * 4 * IMAGE_H / 8 * IMAGE_W / 8)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "latent_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_551": {
                "variable": {
                    "value": "self.fc_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "int(G_dim * 4 * IMAGE_H / 8 * IMAGE_W / 8)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "latent_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_553": {
                "variable": {
                    "value": "self.fc_decoder_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "latent_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "int(G_dim * 4 * IMAGE_H / 8 * IMAGE_W / 8)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_556": {
                "variable": {
                    "value": "std",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0.5 * logvar",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rand_like_557": {
                "variable": {
                    "value": "exp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "std",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.exp(0.5 * logvar)",
                            "Call"
                        ]
                    ]
                }
            },
            "flatten_571": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "x * torch.sigmoid(x)",
                            "BinOp"
                        ],
                        [
                            "self.encoder(input)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, start_dim=1)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_646": {
                "variable": {
                    "value": "lidar_ego_image_motion",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "lidar_ego_image_motion",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.zeros((state.shape[0], 10, 80, 160))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(lidar_ego_image_motion)",
                            "Call"
                        ],
                        [
                            "lidar_ego_image_motion.numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_647": {
                "variable": {
                    "value": "init_scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_648": {
                "variable": {
                    "value": "init_center",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_713": {
                "variable": {
                    "value": "motion_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "motion_input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.zeros((state.shape[0], 1, 9, 80, 160))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(motion_input).float().to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_766": {
                "variable": {
                    "value": "delta_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "delta_x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "d_x / MAX_LASER_RANGE * IMAGE_H",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(delta_x).float().to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_767": {
                "variable": {
                    "value": "delta_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "delta_y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "d_y / MAX_LASER_RANGE * IMAGE_H",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(delta_y).float().to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_768": {
                "variable": {
                    "value": "delta_theta",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "delta_theta",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "-d_theta / math.pi * 180",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(delta_theta).float().to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_770": {
                "variable": {
                    "value": "transformation_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[delta_x.unsqueeze(1), delta_y.unsqueeze(1), delta_theta.unsqueeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_772": {
                "variable": {
                    "value": "translation_matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(state.shape[0], 2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_780": {
                "variable": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "state.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_781": {
                "variable": {
                    "value": "center",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "state.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_788": {
                "variable": {
                    "value": "vel_ang",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "vel_ang",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "state[:, 3630:3632]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(vel_ang).float().to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_789": {
                "variable": {
                    "value": "out_vel_ang",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "out_vel_ang",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.concatenate((np.expand_dims(out_vel, axis=1), (np.expand_dims(out_ang, axis=1) / 1.5 + 1.0) / 2.0), axis=1)",
                            "Call"
                        ],
                        [
                            "Vel_Ang_Prediction(vel_ang, action)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(out_vel_ang).float().to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_790": {
                "variable": {
                    "value": "input_goal",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "input_goal",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(input_goal).float().to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_791": {
                "variable": {
                    "value": "output_goal",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "output_goal",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(output_goal).float().to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_792": {
                "variable": {
                    "value": "out_goal",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "final_goal",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.concatenate((np.expand_dims(out_goal_distance, axis=1), np.expand_dims(out_goal_direction, axis=1)), axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_824": {
                "variable": {
                    "value": "self.optimizer_G",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.generator.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr_G",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "StepLR_826": {
                "variable": {
                    "value": "self.scheduler_G",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optimizer_G",
                    "type": "Attribute",
                    "possible_values": []
                },
                "step_size": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "from_numpy_843": {
                "variable": {
                    "value": "reward_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "reward_labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.expand_dims(reward_labels, axis=1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(reward_labels).float().to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_869": {
                "variable": {
                    "value": "lidar_img_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "labels_lidar_ego_image[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_869": {
                "variable": {
                    "value": "lidar_img_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MSELoss_873": {
                "variable": {
                    "value": "mse_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BCELoss_874": {
                "variable": {
                    "value": "bce_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SmoothL1Loss_875": {
                "variable": {
                    "value": "smooth_l1_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_23": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_562": {
                "input": {
                    "value": "-0.5 * torch.sum(1 + logvar - mu ** 2 - logvar.exp(), dim=1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_220": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "x * torch.sigmoid(x)",
                            "BinOp"
                        ],
                        [
                            "self.encoder(input)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, start_dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_229": {
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "G_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_230": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_231": {
                "in_channels": {
                    "value": "G_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "G_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_232": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_233": {
                "in_channels": {
                    "value": "G_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_234": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_237": {
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "G_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_238": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_241": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_242": {
                "in_channels": {
                    "value": "G_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "G_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_243": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_246": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_247": {
                "in_channels": {
                    "value": "G_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "G_dim * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_248": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_282": {
                "in_channels": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_283": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_284": {
                "in_channels": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_285": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tanh_297": {
                "input": {
                    "value": "new_c",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "c * torch.sigmoid(f + self.forget_bias) + torch.sigmoid(i) * torch.tanh(j)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sigmoid_297": {
                "input": {
                    "value": "o",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_307": {
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "G_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_308": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_309": {
                "in_channels": {
                    "value": "G_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "G_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_310": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_314": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_315": {
                "in_channels": {
                    "value": "G_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "G_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_316": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_317": {
                "in_channels": {
                    "value": "G_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "G_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_318": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_322": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_323": {
                "in_channels": {
                    "value": "G_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "G_dim * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_324": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_325": {
                "in_channels": {
                    "value": "G_dim * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "G_dim * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_326": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_327": {
                "in_channels": {
                    "value": "G_dim * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "G_dim * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_328": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_356": {
                "in_channels": {
                    "value": "G_dim * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "G_dim * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_357": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_358": {
                "in_channels": {
                    "value": "G_dim * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "G_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_359": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_360": {
                "in_channels": {
                    "value": "G_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "G_dim * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_361": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_376": {
                "in_channels": {
                    "value": "out_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_377": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_378": {
                "in_channels": {
                    "value": "out_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_392": {
                "in_channels": {
                    "value": "G_dim * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "G_dim * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_393": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_394": {
                "in_channels": {
                    "value": "G_dim * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "G_dim * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_395": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_396": {
                "in_channels": {
                    "value": "G_dim * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "G_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_397": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_401": {
                "in_channels": {
                    "value": "G_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "G_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_402": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_403": {
                "in_channels": {
                    "value": "G_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "G_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_404": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_408": {
                "in_channels": {
                    "value": "G_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "G_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_409": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_410": {
                "in_channels": {
                    "value": "G_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tanh_411": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_445": {
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_446": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_447": {
                "in_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_448": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_449": {
                "in_channels": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_450": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_451": {
                "in_channels": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_452": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "leaky_relu_493": {
                "input": {
                    "value": "self.l_out_0(all_input)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_494": {
                "input": {
                    "value": "self.l_out_1(output)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_516": {
                "ndarray": {
                    "value": "self.filter_w",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_517": {
                "ndarray": {
                    "value": "self.filter_h",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_530": {
                "in_channels": {
                    "value": "G_dim * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "G_dim * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_531": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_532": {
                "in_channels": {
                    "value": "G_dim * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "G_dim * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_533": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_537": {
                "in_channels": {
                    "value": "G_dim * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "G_dim * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_538": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_539": {
                "in_channels": {
                    "value": "G_dim * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "G_dim * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_540": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_544": {
                "in_channels": {
                    "value": "G_dim * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "G_dim * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_545": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_546": {
                "in_channels": {
                    "value": "G_dim * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "G_dim * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_547": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_658": {
                "variable": {
                    "value": "init_translation_matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(10, 2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "from_numpy_678": {
                "variable": {
                    "value": "new_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "new_image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cv2.erode(images[m][n].astype(np.float), np.ones((3, 3), np.uint8), iterations=1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(new_image).unsqueeze(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_678": {
                "variable": {
                    "value": "new_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_679": {
                "variable": {
                    "value": "lidar_ego_image_motion[m]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[lidar_ego_image_motion[m][1:10], new_image]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_grad_value__890": {
                "parameters": {
                    "value": "self.generator.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_value": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_296": {
                "input": {
                    "value": "i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            [
                                0,
                                1,
                                2,
                                3,
                                4,
                                5,
                                6,
                                7,
                                8,
                                9
                            ],
                            "Call"
                        ],
                        [
                            [
                                0,
                                1,
                                2,
                                3,
                                4,
                                5,
                                6,
                                7,
                                8
                            ],
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_296": {
                "input": {
                    "value": "j",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_562": {
                "input": {
                    "value": "1 + logvar - mu ** 2 - logvar.exp()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_714": {
                "ndarray": {
                    "value": "motion_output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.zeros((state.shape[0], 1, 80, 160))",
                            "Call"
                        ],
                        [
                            "motion_input[:, :, -1]",
                            "Subscript"
                        ],
                        [
                            "(torch.from_numpy(motion_output).float().to(device) + 1.0) / 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "from_numpy_730": {
                "ndarray": {
                    "value": "content",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.zeros((state.shape[0], 80, 160))",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_730": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_669": {
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_736": {
                "*size": {
                    "value": "(state.shape[0], 128, 10, 20)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_102": {
                "*size": {
                    "value": "x.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_103": {
                "*size": {
                    "value": "out.size()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "src/model_free_version/scripts/main.py": {
        "torch": {
            "SummaryWriter_45": {
                "variable": {
                    "value": "writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "pkg_path + '/log/'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_47": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "manual_seed_51": {
                "seed": {
                    "value": "666",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_53": {
                "seed": {
                    "value": "666",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_47": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/model_free_version/scripts/policy.py": {
        "torch": {
            "device_15": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "randn_550": {
                "variable": {
                    "value": "test_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[2, 3634]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "randn_551": {
                "variable": {
                    "value": "test_input_action",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_96": {
                "variable": {
                    "value": "self.group1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(1, 4, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_101": {
                "variable": {
                    "value": "self.group2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(4, 8, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_106": {
                "variable": {
                    "value": "self.group3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(8, 16, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_111": {
                "variable": {
                    "value": "self.group4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(16, 32, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_117": {
                "variable": {
                    "value": "self.l_vel_ang",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_118": {
                "variable": {
                    "value": "self.l_goal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_119": {
                "variable": {
                    "value": "self.l_lidar_state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "32 * 1 * 5 * 10",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_121": {
                "variable": {
                    "value": "self.l0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_122": {
                "variable": {
                    "value": "self.l1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256 + 32 + 32",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_123": {
                "variable": {
                    "value": "self.l2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_124": {
                "variable": {
                    "value": "self.l3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "action_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "leaky_relu_132": {
                "variable": {
                    "value": "lidar_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.group1(lidar_state)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_133": {
                "variable": {
                    "value": "lidar_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.group2(lidar_state)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_134": {
                "variable": {
                    "value": "lidar_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.group3(lidar_state)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_135": {
                "variable": {
                    "value": "lidar_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.group4(lidar_state)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_138": {
                "variable": {
                    "value": "lidar_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.l_lidar_state(lidar_state)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_139": {
                "variable": {
                    "value": "lidar_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.l0(lidar_state)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_141": {
                "variable": {
                    "value": "vel_ang_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.l_vel_ang(vel_ang)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_143": {
                "variable": {
                    "value": "goal_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.l_goal(goal)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_146": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[lidar_state, vel_ang_state, goal_state]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "leaky_relu_148": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.l1(a)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_149": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.l2(a)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_161": {
                "variable": {
                    "value": "self.group1_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(1, 4, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_166": {
                "variable": {
                    "value": "self.group2_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(4, 8, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_171": {
                "variable": {
                    "value": "self.group3_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(8, 16, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_176": {
                "variable": {
                    "value": "self.group4_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(16, 32, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_181": {
                "variable": {
                    "value": "self.l_vel_ang_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_182": {
                "variable": {
                    "value": "self.l_goal_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_183": {
                "variable": {
                    "value": "self.l_lidar_state_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "32 * 1 * 5 * 10",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_184": {
                "variable": {
                    "value": "self.l_action_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "action_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_186": {
                "variable": {
                    "value": "self.l1_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_187": {
                "variable": {
                    "value": "self.l2_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256 + 32 + 32 + 32",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_188": {
                "variable": {
                    "value": "self.l3_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_189": {
                "variable": {
                    "value": "self.l4_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_194": {
                "variable": {
                    "value": "self.group1_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(1, 4, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_199": {
                "variable": {
                    "value": "self.group2_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(4, 8, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_204": {
                "variable": {
                    "value": "self.group3_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(8, 16, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_209": {
                "variable": {
                    "value": "self.group4_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(16, 32, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_214": {
                "variable": {
                    "value": "self.l_vel_ang_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_215": {
                "variable": {
                    "value": "self.l_goal_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_216": {
                "variable": {
                    "value": "self.l_lidar_state_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "32 * 1 * 5 * 10",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_217": {
                "variable": {
                    "value": "self.l_action_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "action_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_219": {
                "variable": {
                    "value": "self.l1_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_220": {
                "variable": {
                    "value": "self.l2_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256 + 32 + 32 + 32",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_221": {
                "variable": {
                    "value": "self.l3_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_222": {
                "variable": {
                    "value": "self.l4_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "leaky_relu_230": {
                "variable": {
                    "value": "lidar_state_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.group1_1(lidar_state)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_231": {
                "variable": {
                    "value": "lidar_state_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.group2_1(lidar_state_1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_232": {
                "variable": {
                    "value": "lidar_state_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.group3_1(lidar_state_1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_233": {
                "variable": {
                    "value": "lidar_state_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.group4_1(lidar_state_1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_236": {
                "variable": {
                    "value": "lidar_state_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.l_lidar_state_1(lidar_state_1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_237": {
                "variable": {
                    "value": "lidar_state_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.l1_1(lidar_state_1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_239": {
                "variable": {
                    "value": "vel_ang_state_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.l_vel_ang_1(vel_ang)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_241": {
                "variable": {
                    "value": "goal_state_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.l_goal_1(goal)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_243": {
                "variable": {
                    "value": "action_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.l_action_1(action)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_245": {
                "variable": {
                    "value": "sa1",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[lidar_state_1, vel_ang_state_1, goal_state_1, action_1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "leaky_relu_246": {
                "variable": {
                    "value": "q1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.l2_1(sa1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_247": {
                "variable": {
                    "value": "q1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.l3_1(q1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_251": {
                "variable": {
                    "value": "lidar_state_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.group1_2(lidar_state)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_252": {
                "variable": {
                    "value": "lidar_state_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.group2_2(lidar_state_2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_253": {
                "variable": {
                    "value": "lidar_state_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.group3_2(lidar_state_2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_254": {
                "variable": {
                    "value": "lidar_state_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.group4_2(lidar_state_2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_257": {
                "variable": {
                    "value": "lidar_state_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.l_lidar_state_2(lidar_state_2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_258": {
                "variable": {
                    "value": "lidar_state_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.l1_2(lidar_state_2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_260": {
                "variable": {
                    "value": "vel_ang_state_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.l_vel_ang_2(vel_ang)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_262": {
                "variable": {
                    "value": "goal_state_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.l_goal_2(goal)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_264": {
                "variable": {
                    "value": "action_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.l_action_2(action)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_266": {
                "variable": {
                    "value": "sa2",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[lidar_state_2, vel_ang_state_2, goal_state_2, action_2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "leaky_relu_267": {
                "variable": {
                    "value": "q2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.l2_2(sa2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_268": {
                "variable": {
                    "value": "q2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.l3_2(q2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_278": {
                "variable": {
                    "value": "lidar_state_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.group1_1(lidar_state)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_279": {
                "variable": {
                    "value": "lidar_state_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.group2_1(lidar_state_1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_280": {
                "variable": {
                    "value": "lidar_state_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.group3_1(lidar_state_1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_281": {
                "variable": {
                    "value": "lidar_state_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.group4_1(lidar_state_1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_284": {
                "variable": {
                    "value": "lidar_state_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.l_lidar_state_1(lidar_state_1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_285": {
                "variable": {
                    "value": "lidar_state_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.l1_1(lidar_state_1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_287": {
                "variable": {
                    "value": "vel_ang_state_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.l_vel_ang_1(vel_ang)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_289": {
                "variable": {
                    "value": "goal_state_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.l_goal_1(goal)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_291": {
                "variable": {
                    "value": "action_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.l_action_1(action)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_293": {
                "variable": {
                    "value": "sa1",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[lidar_state_1, vel_ang_state_1, goal_state_1, action_1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "leaky_relu_294": {
                "variable": {
                    "value": "q1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.l2_1(sa1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_295": {
                "variable": {
                    "value": "q1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.l3_1(q1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_317": {
                "variable": {
                    "value": "self.actor_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.actor.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_322": {
                "variable": {
                    "value": "self.critic_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.critic.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "StepLR_324": {
                "variable": {
                    "value": "self.scheduler_actor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.actor_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "step_size": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.99",
                    "type": "float",
                    "possible_values": []
                }
            },
            "StepLR_325": {
                "variable": {
                    "value": "self.scheduler_critic",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.critic_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "step_size": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.99",
                    "type": "float",
                    "possible_values": []
                }
            },
            "from_numpy_368": {
                "variable": {
                    "value": "lidar_ego_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "lidar_ego_image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.zeros((1, 10, 80, 160))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(lidar_ego_image).unsqueeze(1).float().to(device)",
                            "Call"
                        ],
                        [
                            "np.zeros((state.shape[0], 10, 80, 160))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(lidar_ego_image).unsqueeze(1).float().to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_368": {
                "variable": {
                    "value": "lidar_ego_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_369": {
                "variable": {
                    "value": "vel_ang",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "vel_ang",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "state[3630:3632]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(vel_ang).unsqueeze(0).float().to(device)",
                            "Call"
                        ],
                        [
                            "state[:, 3630:3632]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(vel_ang).float().to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_369": {
                "variable": {
                    "value": "vel_ang",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_370": {
                "variable": {
                    "value": "goal",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "goal",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "state[3632:3634]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(goal).unsqueeze(0).float().to(device)",
                            "Call"
                        ],
                        [
                            "state[:, 3632:3634]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(goal).float().to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_370": {
                "variable": {
                    "value": "goal",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_447": {
                "variable": {
                    "value": "lidar_ego_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "lidar_ego_image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.zeros((1, 10, 80, 160))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(lidar_ego_image).unsqueeze(1).float().to(device)",
                            "Call"
                        ],
                        [
                            "np.zeros((state.shape[0], 10, 80, 160))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(lidar_ego_image).unsqueeze(1).float().to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_447": {
                "variable": {
                    "value": "lidar_ego_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_448": {
                "variable": {
                    "value": "vel_ang",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "vel_ang",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "state[3630:3632]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(vel_ang).unsqueeze(0).float().to(device)",
                            "Call"
                        ],
                        [
                            "state[:, 3630:3632]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(vel_ang).float().to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_449": {
                "variable": {
                    "value": "goal",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "goal",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "state[3632:3634]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(goal).unsqueeze(0).float().to(device)",
                            "Call"
                        ],
                        [
                            "state[:, 3632:3634]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(goal).float().to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_451": {
                "variable": {
                    "value": "next_lidar_ego_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "next_lidar_ego_image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.zeros((state.shape[0], 10, 80, 160))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(next_lidar_ego_image).unsqueeze(1).float().to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_451": {
                "variable": {
                    "value": "next_lidar_ego_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_452": {
                "variable": {
                    "value": "next_vel_ang",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "next_vel_ang",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "next_state[:, 3630:3632]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(next_vel_ang).float().to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_453": {
                "variable": {
                    "value": "next_goal",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "next_goal",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "next_state[:, 3632:3634]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(next_goal).float().to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_455": {
                "variable": {
                    "value": "action",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "action",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(action).float().to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_456": {
                "variable": {
                    "value": "reward",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "reward",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(reward).float().to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_457": {
                "variable": {
                    "value": "not_done",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "not_done",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(not_done).float().to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_15": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "min_478": {
                "variable": {
                    "value": "target_Q",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_Q1",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "clip_grad_norm__497": {
                "parameters": {
                    "value": "self.critic.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "norm_type": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_531": {
                "obj": {
                    "value": "self.critic.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "filename + '_critic'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_532": {
                "obj": {
                    "value": "self.critic_optimizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "filename + '_critic_optimizer'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_534": {
                "obj": {
                    "value": "self.actor.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "filename + '_actor'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_535": {
                "obj": {
                    "value": "self.actor_optimizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "filename + '_actor_optimizer'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv3d_97": {
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_98": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool3d_99": {
                "kernel_size": {
                    "value": "(2, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv3d_102": {
                "in_channels": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_103": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AvgPool3d_104": {
                "kernel_size": {
                    "value": "(2, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv3d_107": {
                "in_channels": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_108": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AvgPool3d_109": {
                "kernel_size": {
                    "value": "(2, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv3d_112": {
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_113": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AvgPool3d_114": {
                "kernel_size": {
                    "value": "(1, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tanh_151": {
                "input": {
                    "value": "self.l3(a)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv3d_162": {
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_163": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool3d_164": {
                "kernel_size": {
                    "value": "(2, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv3d_167": {
                "in_channels": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_168": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AvgPool3d_169": {
                "kernel_size": {
                    "value": "(2, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv3d_172": {
                "in_channels": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_173": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AvgPool3d_174": {
                "kernel_size": {
                    "value": "(2, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv3d_177": {
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_178": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AvgPool3d_179": {
                "kernel_size": {
                    "value": "(1, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv3d_195": {
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_196": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool3d_197": {
                "kernel_size": {
                    "value": "(2, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv3d_200": {
                "in_channels": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_201": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AvgPool3d_202": {
                "kernel_size": {
                    "value": "(2, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv3d_205": {
                "in_channels": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_206": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AvgPool3d_207": {
                "kernel_size": {
                    "value": "(2, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv3d_210": {
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_211": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AvgPool3d_212": {
                "kernel_size": {
                    "value": "(1, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "no_grad_462": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mse_loss_490": {
                "input": {
                    "value": "current_Q2",
                    "type": "Variable",
                    "possible_values": []
                },
                "target": {
                    "value": "target_Q",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.min(target_Q1, target_Q2)",
                            "Call"
                        ],
                        [
                            "reward + not_done * self.discount * target_Q",
                            "BinOp"
                        ]
                    ]
                }
            },
            "clip_grad_norm__513": {
                "parameters": {
                    "value": "self.actor.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "norm_type": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_539": {
                "f": {
                    "value": "filename + '_critic'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_540": {
                "f": {
                    "value": "filename + '_critic_optimizer'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_543": {
                "f": {
                    "value": "filename + '_actor'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_544": {
                "f": {
                    "value": "filename + '_actor_optimizer'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_like_466": {
                "input": {
                    "value": "action",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(action).float().to(device)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/model_free_version/scripts/utils.py": {
        "torch": {
            "device_29": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "is_available_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}