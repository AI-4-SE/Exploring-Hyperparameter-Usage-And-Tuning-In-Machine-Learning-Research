{
    "utils.py": {
        "sklearn": {
            "accuracy_score_33": {
                "y_true": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "pred_y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "accuracy_score_35": {
                "y_true": {
                    "value": "gt_label",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "pred_result",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "accuracy_score_30": {
                "y_true": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "pred_y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cosine_similarity_93": {
                "X": {
                    "value": "new_centroid",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.mean(feats[data_idx], axis=0).reshape(1, -1)",
                            "Call"
                        ],
                        [
                            "cs * new_centroid + (1 - cs) * last_centroids[i]",
                            "BinOp"
                        ],
                        [
                            "last_centroids[i]",
                            "Subscript"
                        ],
                        [
                            "np.mean(feats[data_idx], axis=0).reshape(1, -1)",
                            "Call"
                        ],
                        [
                            "last_centroids[i]",
                            "Subscript"
                        ],
                        [
                            "cs * new_centroid + (1 - cs) * last_centroids[i]",
                            "BinOp"
                        ]
                    ]
                },
                "Y": {
                    "value": "last_centroids[i].reshape(1, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cosine_similarity_119": {
                "X": {
                    "value": "new_centroid",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.mean(feats[data_idx], axis=0).reshape(1, -1)",
                            "Call"
                        ],
                        [
                            "cs * new_centroid + (1 - cs) * last_centroids[i]",
                            "BinOp"
                        ],
                        [
                            "last_centroids[i]",
                            "Subscript"
                        ],
                        [
                            "np.mean(feats[data_idx], axis=0).reshape(1, -1)",
                            "Call"
                        ],
                        [
                            "last_centroids[i]",
                            "Subscript"
                        ],
                        [
                            "cs * new_centroid + (1 - cs) * last_centroids[i]",
                            "BinOp"
                        ]
                    ]
                },
                "Y": {
                    "value": "src_centroids[i].reshape(1, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "softmax_87": {
                "variable": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.softmax(probs, dim=1)",
                            "Call"
                        ],
                        [
                            "to_np(probs)",
                            "Call"
                        ],
                        [
                            "F.softmax(probs, dim=1)",
                            "Call"
                        ],
                        [
                            "to_np(probs)",
                            "Call"
                        ],
                        [
                            "np.concatenate(probs, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_111": {
                "variable": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.softmax(probs, dim=1)",
                            "Call"
                        ],
                        [
                            "to_np(probs)",
                            "Call"
                        ],
                        [
                            "F.softmax(probs, dim=1)",
                            "Call"
                        ],
                        [
                            "to_np(probs)",
                            "Call"
                        ],
                        [
                            "np.concatenate(probs, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_13": {
                "obj": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(check_dir, filename)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_58": {
                "ndarray": {
                    "value": "centroids",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.array(centroids).squeeze()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.array(centroids).squeeze()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_79": {
                "ndarray": {
                    "value": "centroids",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.array(centroids).squeeze()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.array(centroids).squeeze()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_101": {
                "ndarray": {
                    "value": "new_centroids",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.array(new_centroids)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.array(new_centroids)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_127": {
                "ndarray": {
                    "value": "new_centroids",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.array(new_centroids)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.array(new_centroids)",
                            "Call"
                        ]
                    ]
                }
            },
            "pairwise_distance_181": {
                "x1": {
                    "value": "x1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x1.reshape(-1, x1.shape[-1])",
                            "Call"
                        ]
                    ]
                },
                "x2": {
                    "value": "x2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x2.reshape(-1, x2.shape[-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_181": {
                "input": {
                    "value": "x2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x2.reshape(-1, x2.shape[-1])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cosine_similarity_179": {
                "x1": {
                    "value": "x1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x1.reshape(-1, x1.shape[-1])",
                            "Call"
                        ]
                    ]
                },
                "x2": {
                    "value": "x2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x2.reshape(-1, x2.shape[-1])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "data/centroid.py": {
        "torch": {
            "nonzero_112": {
                "variable": {
                    "value": "select_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "max_probs.squeeze() >= 0.3",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "squeeze_112": {
                "variable": {
                    "value": "select_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_10": {
                "variable": {
                    "value": "self.src_ctrs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(class_num, dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_11": {
                "variable": {
                    "value": "self.tgt_ctrs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(class_num, dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "mean_43": {
                "variable": {
                    "value": "new_centroid",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feats[data_idx, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_43": {
                "variable": {
                    "value": "new_centroid",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_61": {
                "variable": {
                    "value": "new_centroid",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feats[data_idx, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_61": {
                "variable": {
                    "value": "new_centroid",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "data/dataloader.py": {
        "torch": {
            "DataLoader_53": {
                "variable": {
                    "value": "src_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "src_data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "SVHN('../data', split='train', download=True, transform=transforms.Compose([transforms.Resize(32), transforms.ToTensor(), transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))]))",
                            "Call"
                        ],
                        [
                            "USPS('../data', train=True, download=True, transform=transforms.Compose([transforms.RandomCrop(28, padding=4), transforms.RandomRotation(10), transforms.ToTensor(), transforms.Normalize((0.5,), (0.5,))]))",
                            "Call"
                        ],
                        [
                            "MNIST('../data', train=True, download=True, transform=transforms.Compose([transforms.ToTensor(), transforms.Normalize((0.5,), (0.5,))]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_57": {
                "variable": {
                    "value": "tgt_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "tgt_data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "MNIST('../data', train=True, download=True, transform=transforms.Compose([transforms.Resize(32), transforms.Lambda(lambda x: x.convert('RGB')), transforms.ToTensor(), transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))]))",
                            "Call"
                        ],
                        [
                            "MNIST('../data', train=True, download=True, transform=transforms.Compose([transforms.ToTensor(), transforms.Normalize((0.5,), (0.5,))]))",
                            "Call"
                        ],
                        [
                            "USPS('../data', train=True, download=True, transform=transforms.Compose([transforms.ToTensor(), transforms.Normalize((0.5,), (0.5,))]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "data/usps.py": {
        "torch": {}
    },
    "main.py": {
        "torch": {
            "SGD_28": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BCELoss_84": {
                "variable": {
                    "value": "criterion_bce",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_85": {
                "variable": {
                    "value": "criterion_cel",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_151": {
                "variable": {
                    "value": "criterion_cel",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_17": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_18": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "'cuda:' + str(args.gpu)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_21": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_35": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.resume",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_99": {
                "variable": {
                    "value": "adv_label_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[args.th] * len(data_t)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_112": {
                "input": {
                    "value": "pred_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "model.py": {
        "torch": {
            "Conv2d_10": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LeakyReLU_11": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_12": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_24": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "LeakyReLU_25": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm1d_26": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_74": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "100",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_output",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "MaxPool2d_85": {
                "variable": {
                    "value": "self.pool1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_87": {
                "variable": {
                    "value": "self.pool2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_88": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_105": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "500",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_output",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    }
}