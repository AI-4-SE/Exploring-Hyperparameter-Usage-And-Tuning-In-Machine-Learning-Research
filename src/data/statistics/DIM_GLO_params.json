{
    "new-test_duke.py": {
        "sklearn": {
            "normalize_142": {
                "variable": {
                    "value": "querycls",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "np.array(querycls)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "normalize_156": {
                "variable": {
                    "value": "gallerycls",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "np.array(gallerycls)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "DataLoader_78": {
                "variable": {
                    "value": "queryloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "queryset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MyDataset(root='/home/xbliu/disk/duke/', txt='/home/xbliu/disk/duke/files/query.txt', transform=transform_test)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_83": {
                "variable": {
                    "value": "galleryloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "galleryset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MyDataset(root='/home/xbliu/disk/duke/', txt='/home/xbliu/disk/duke/files/gallery.txt', transform=transform_test)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_124": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "'cuda: ' + str(MY_GPU)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm1d_54": {
                "variable": {
                    "value": "self.pool_bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.resnet_layer.fc.in_features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_55": {
                "variable": {
                    "value": "self.resnet_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(self.resnet_layer.children())[:-2]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_56": {
                "variable": {
                    "value": "self.resnet_layer[-1][0].downsample[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_57": {
                "variable": {
                    "value": "self.resnet_layer[-1][0].conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_58": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "751",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_64": {
                "variable": {
                    "value": "self.globalpooling",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(x.size()[2], x.size()[3])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_126": {
                "f": {
                    "value": "SNAPSHOT",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SNAPSHOT",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_grad_128": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "reid/compute_map.py": {
        "sklearn": {
            "normalize_71": {
                "variable": {
                    "value": "queryfeature",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "np.array(queryfeature)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "normalize_84": {
                "variable": {
                    "value": "galleryfeature",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "np.array(galleryfeature)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "normalize_125": {
                "variable": {
                    "value": "querycls",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "np.array(querycls)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "normalize_136": {
                "variable": {
                    "value": "gallerycls",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "np.array(gallerycls)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "DataLoader_53": {
                "variable": {
                    "value": "queryloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "queryset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MyDataset(root='/home/xbliu/disk/market1501/', txt='/home/xbliu/disk/market1501/query.txt', transform=transform_search)",
                            "Call"
                        ],
                        [
                            "MyDataset(root='/home/xbliu/disk/duke/', txt='/home/xbliu/disk/duke/files/query.txt', transform=transform_search)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_58": {
                "variable": {
                    "value": "galleryloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "galleryset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MyDataset(root='/home/xbliu/disk/market1501/', txt='/home/xbliu/disk/market1501/gallery.txt', transform=transform_search)",
                            "Call"
                        ],
                        [
                            "MyDataset(root='/home/xbliu/disk/duke/', txt='/home/xbliu/disk/duke/files/gallery.txt', transform=transform_search)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_106": {
                "variable": {
                    "value": "queryloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "queryset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MyDataset(root='/home/xbliu/disk/market1501/', txt='/home/xbliu/disk/market1501/query.txt', transform=transform_search)",
                            "Call"
                        ],
                        [
                            "MyDataset(root='/home/xbliu/disk/duke/', txt='/home/xbliu/disk/duke/files/query.txt', transform=transform_search)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_111": {
                "variable": {
                    "value": "galleryloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "galleryset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MyDataset(root='/home/xbliu/disk/market1501/', txt='/home/xbliu/disk/market1501/gallery.txt', transform=transform_search)",
                            "Call"
                        ],
                        [
                            "MyDataset(root='/home/xbliu/disk/duke/', txt='/home/xbliu/disk/duke/files/gallery.txt', transform=transform_search)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_59": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_112": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_68": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(feature, outputs[feature_index[i + 1]])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_81": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(feature, outputs[feature_index[i + 1]])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_122": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(feature, outputs[feature_index[i + 1]])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_133": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(feature, outputs[feature_index[i + 1]])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "reid/compute_memory_bank.py": {
        "sklearn": {},
        "torch": {
            "DataLoader_22": {
                "variable": {
                    "value": "DukeTrainSetLoader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "DukeTrainSet",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MyDataset(root='/home/xbliu/disk/duke/', txt='/home/xbliu/disk/duke/files/train.txt', transform=transform_test)",
                            "Call"
                        ],
                        [
                            "MyDataset(root='/home/xbliu/disk/market1501/', txt='/home/xbliu/disk/market1501/train.txt', transform=transform_test)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_53": {
                "variable": {
                    "value": "DukeTrainSetLoader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "DukeTrainSet",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MyDataset(root='/home/xbliu/disk/duke/', txt='/home/xbliu/disk/duke/files/train.txt', transform=transform_test)",
                            "Call"
                        ],
                        [
                            "MyDataset(root='/home/xbliu/disk/market1501/', txt='/home/xbliu/disk/market1501/train.txt', transform=transform_test)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_36": {
                "variable": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(f, net(inputs)[feature_index].detach())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_37": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(labels, label)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_67": {
                "variable": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(f, net(inputs)[feature_index].detach())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_68": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(labels, label)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "reid/compute_mutual_knn.py": {
        "sklearn": {
            "DBSCAN_23": {
                "variable": {
                    "value": "cluster",
                    "type": "variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tri_mat[:top_num].mean()",
                            "Call"
                        ]
                    ]
                },
                "min_samples": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "metric": {
                    "value": "precomputed",
                    "type": "str",
                    "possible_values": []
                },
                "n_jobs": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "torch": {}
    },
    "reid/DisNet.py": {
        "torch": {
            "Linear_7": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_8": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_15": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "reid/DukeDataProvider.py": {
        "torch": {
            "DataLoader_112": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.set",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "reid/MyDataset.py": {
        "torch": {}
    },
    "reid/MyLoss.py": {
        "torch": {
            "full_10": {
                "variable": {
                    "value": "smoothed_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(N, C)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "0.1 / (C - 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_softmax_13": {
                "variable": {
                    "value": "log_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_23": {
                "variable": {
                    "value": "sim",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(feature, feature.t()) / temperature_param",
                            "BinOp"
                        ],
                        [
                            "torch.exp(sim)",
                            "Call"
                        ],
                        [
                            "torch.mm(batch_feature, memory_feature.t()) / temperature",
                            "BinOp"
                        ],
                        [
                            "torch.exp(sim)",
                            "Call"
                        ],
                        [
                            "torch.mm(batch_feature, memory_feature.t()) / temperature",
                            "BinOp"
                        ],
                        [
                            "torch.exp(sim)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_40": {
                "variable": {
                    "value": "sim",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(feature, feature.t()) / temperature_param",
                            "BinOp"
                        ],
                        [
                            "torch.exp(sim)",
                            "Call"
                        ],
                        [
                            "torch.mm(batch_feature, memory_feature.t()) / temperature",
                            "BinOp"
                        ],
                        [
                            "torch.exp(sim)",
                            "Call"
                        ],
                        [
                            "torch.mm(batch_feature, memory_feature.t()) / temperature",
                            "BinOp"
                        ],
                        [
                            "torch.exp(sim)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_58": {
                "variable": {
                    "value": "sim",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(feature, feature.t()) / temperature_param",
                            "BinOp"
                        ],
                        [
                            "torch.exp(sim)",
                            "Call"
                        ],
                        [
                            "torch.mm(batch_feature, memory_feature.t()) / temperature",
                            "BinOp"
                        ],
                        [
                            "torch.exp(sim)",
                            "Call"
                        ],
                        [
                            "torch.mm(batch_feature, memory_feature.t()) / temperature",
                            "BinOp"
                        ],
                        [
                            "torch.exp(sim)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_26": {
                "variable": {
                    "value": "denominator",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sim[i][mask[i] == 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_44": {
                "variable": {
                    "value": "denominator",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sim[i][mask == 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_61": {
                "variable": {
                    "value": "denominator",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sim[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mm_22": {
                "input": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "feature",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "feature.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_31": {
                "input": {
                    "value": "p + 1e-15",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mm_39": {
                "input": {
                    "value": "batch_feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_feature",
                            "Method Argument"
                        ],
                        [
                            "batch_feature",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "memory_feature.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_49": {
                "input": {
                    "value": "p + 1e-15",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mm_57": {
                "input": {
                    "value": "batch_feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_feature",
                            "Method Argument"
                        ],
                        [
                            "batch_feature",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "memory_feature.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_97": {
                "input": {
                    "value": "p + 1e-15",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unsqueeze_11": {
                "input": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_14": {
                "input": {
                    "value": "log_prob * smoothed_labels",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "reid/MyNet.py": {
        "torch": {
            "Linear_10": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "751",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_12": {
                "variable": {
                    "value": "self.pool_bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_24": {
                "variable": {
                    "value": "self.resnet_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(self.resnet_layer.children())[:-2]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_25": {
                "variable": {
                    "value": "self.resnet_layer[-1][0].downsample[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_26": {
                "variable": {
                    "value": "self.resnet_layer[-1][0].conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AvgPool2d_30": {
                "variable": {
                    "value": "self.globalpooling",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(x.size()[2], x.size()[3])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_8": {
                "f": {
                    "value": "/home/xbliu/resnet50-19c8e357.pth",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "reid/save_images.py": {
        "torch": {}
    },
    "train.py": {
        "torch": {
            "DataLoader_82": {
                "variable": {
                    "value": "MarketLoader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MyDataset(root='/home/xbliu/disk/market1501/', txt='/home/xbliu/disk/market1501/train.txt', transform=transform_train)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "BATCH_SIZE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "int"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataParallel_89": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MyNet()",
                            "Call"
                        ],
                        [
                            "net.to(device)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(net, device_ids=MY_GPU, output_device=device)",
                            "Call"
                        ],
                        [
                            "net.to(device)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "MY_GPU",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[2]",
                            "List"
                        ]
                    ]
                },
                "output_device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MY_GPU[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "DataParallel_92": {
                "variable": {
                    "value": "netD",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "netD",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DisNet().to(device)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(netD, device_ids=MY_GPU, output_device=device)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "MY_GPU",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[2]",
                            "List"
                        ]
                    ]
                },
                "output_device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MY_GPU[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "MSELoss_96": {
                "variable": {
                    "value": "ALoss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_100": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "LR",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.00035",
                            "float"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "0.00025",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_101": {
                "variable": {
                    "value": "optimizerD",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "netD.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "LR",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.00035",
                            "float"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "0.00025",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cat_140": {
                "variable": {
                    "value": "DukeIndex",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(DukeIndex, DukeIndex)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_143": {
                "variable": {
                    "value": "DukeIndex",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(DukeIndex, DukeIndex[:Duke_BATCH_SIZE])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_157": {
                "variable": {
                    "value": "(_, predicted)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "market_cls.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_87": {
                "f": {
                    "value": "WEIGHT",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'snapshot/2020-02-08/2GanImage-cluster_0.4-OnlyCluster-005.pt'",
                            "str"
                        ]
                    ]
                }
            },
            "no_grad_113": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_152": {
                "tensors": {
                    "value": "(DukeImage1, DukeImage2, DukeImage3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_232": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_244": {
                "obj": {
                    "value": "net.to('cpu').module.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "SNAPSHOT + str(epoch + 1).zfill(3) + '.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_like_208": {
                "input": {
                    "value": "D_market",
                    "type": "variable",
                    "possible_values": [
                        [
                            "netD(market_feature_BN)",
                            "Call"
                        ],
                        [
                            "netD(market_feature_BN.detach())",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_208": {
                "input": {
                    "value": "D_duke",
                    "type": "variable",
                    "possible_values": [
                        [
                            "netD(duke_feature_BN)",
                            "Call"
                        ],
                        [
                            "netD(duke_feature_BN.detach())",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_195": {
                "input": {
                    "value": "D_market",
                    "type": "variable",
                    "possible_values": [
                        [
                            "netD(market_feature_BN)",
                            "Call"
                        ],
                        [
                            "netD(market_feature_BN.detach())",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}