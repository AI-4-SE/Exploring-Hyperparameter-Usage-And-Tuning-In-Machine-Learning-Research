{
    "MFF2.py": {
        "torch": {
            "stack_51": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "imread(root)",
                            "Call"
                        ],
                        [
                            "image[:, :, None]",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(image, dim=0)",
                            "Call"
                        ],
                        [
                            "self.fused_image.detach().squeeze(0).permute(1, 2, 0)",
                            "Call"
                        ],
                        [
                            "self.fused_image.detach().squeeze(0).permute(1, 2, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_64": {
                "variable": {
                    "value": "input_pad",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "pad": {
                    "value": "padding_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "compute_padding(kernel.shape[-2:])",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "pad_mode",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'replicate'",
                            "MethodArgument"
                        ],
                        [
                            "'replicate'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "conv2d_65": {
                "input": {
                    "value": "input_pad",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.pad(input, padding_shape, mode=pad_mode)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "kernel",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmin_106": {
                "variable": {
                    "value": "IDM",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "AFM",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "g(input, RFM.expand(-1, 3, -1, -1)).mean(1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_307": {
                "variable": {
                    "value": "ssim_map",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "ssim_map",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(ssim_map, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_320": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "map * a",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_32": {
                "ndarray": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "imread(root)",
                            "Call"
                        ],
                        [
                            "image[:, :, None]",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(image, dim=0)",
                            "Call"
                        ],
                        [
                            "self.fused_image.detach().squeeze(0).permute(1, 2, 0)",
                            "Call"
                        ],
                        [
                            "self.fused_image.detach().squeeze(0).permute(1, 2, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "permute_32": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_41": {
                "ndarray": {
                    "value": "map",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "imread(root)",
                            "Call"
                        ],
                        [
                            "rgb2gray(map)",
                            "Call"
                        ],
                        [
                            "map.to(torch.bool)",
                            "Call"
                        ],
                        [
                            "map.permute(2, 0, 1)[:, None, :, :].repeat(1, self.C, 1, 1)",
                            "Call"
                        ],
                        [
                            "map_generator.gfdf_map(self.input)",
                            "Call"
                        ]
                    ]
                }
            },
            "one_hot_88": {
                "tensor": {
                    "value": "torch.argmax(sigma_sq, dim=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_classes": {
                    "value": "input.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "one_hot_96": {
                "tensor": {
                    "value": "torch.argmax(lap_map.squeeze(1), dim=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_classes": {
                    "value": "input.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "clamp_113": {
                "input": {
                    "value": "FDM.squeeze(0).squeeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_122": {
                "variable": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(kernel_size, kernel_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "from_numpy_145": {
                "variable": {
                    "value": "tmp_image4",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "tmp_image4",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1 - tmp_image3",
                            "BinOp"
                        ],
                        [
                            "tmp_image4.astype(np.float)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(tmp_image4)",
                            "Call"
                        ],
                        [
                            "tmp_image4.to(input_image.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_200": {
                "variable": {
                    "value": "fused_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_217": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[fused_image]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.001",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "from_numpy_39": {
                "ndarray": {
                    "value": "map",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "imread(root)",
                            "Call"
                        ],
                        [
                            "rgb2gray(map)",
                            "Call"
                        ],
                        [
                            "map.to(torch.bool)",
                            "Call"
                        ],
                        [
                            "map.permute(2, 0, 1)[:, None, :, :].repeat(1, self.C, 1, 1)",
                            "Call"
                        ],
                        [
                            "map_generator.gfdf_map(self.input)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_88": {
                "input": {
                    "value": "sigma_sq",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "conv2d(input.pow(2), tmp_kernel, self.pad_mode) - mu_sq",
                            "BinOp"
                        ],
                        [
                            "sigma_sq.squeeze(1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_96": {
                "input": {
                    "value": "lap_map.squeeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Rprop_219": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[fused_image]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.001",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "clamp_262": {
                "variable": {
                    "value": "fused_image.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "fused_image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.mean(self.input, dim=0, keepdim=True)",
                            "Call"
                        ],
                        [
                            "fused_image.to(self.input.device).to(self.input.dtype)",
                            "Call"
                        ],
                        [
                            "fused_image.requires_grad_(True)",
                            "Call"
                        ],
                        [
                            "ini_value",
                            "Name"
                        ],
                        [
                            "ini_value.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "ini_value.permute(2, 0, 1).unsqueeze(0)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_340": {
                "variable": {
                    "value": "map_mode",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "map_mode",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'User Specified'",
                            "Constant"
                        ],
                        [
                            "self.map_mode",
                            "Attribute"
                        ],
                        [
                            "torch.from_numpy(map_mode)",
                            "Call"
                        ],
                        [
                            "map_mode.to(torch.long)",
                            "Call"
                        ],
                        [
                            "torch.stack((map_mode, 1 - map_mode), dim=-1)",
                            "Call"
                        ],
                        [
                            "'lap'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "RMSprop_221": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[fused_image]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.001",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "no_grad_261": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_349": {
                "variable": {
                    "value": "map_mode",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(map_mode, 1 - map_mode)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "AdamW_223": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[fused_image]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.001",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "one_hot_344": {
                "tensor": {
                    "value": "map_mode",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'User Specified'",
                            "Constant"
                        ],
                        [
                            "self.map_mode",
                            "Attribute"
                        ],
                        [
                            "torch.from_numpy(map_mode)",
                            "Call"
                        ],
                        [
                            "map_mode.to(torch.long)",
                            "Call"
                        ],
                        [
                            "torch.stack((map_mode, 1 - map_mode), dim=-1)",
                            "Call"
                        ],
                        [
                            "'lap'",
                            "MethodArgument"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "self.N",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_336": {
                "tensors": {
                    "value": "(map, 1 - map)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "MS_LAP/MFF.py": {
        "torch": {
            "stack_41": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "imread(root)",
                            "Call"
                        ],
                        [
                            "image[:, :, None]",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(image, dim=0)",
                            "Call"
                        ],
                        [
                            "self.fused_image.detach().squeeze(0).permute(1, 2, 0)",
                            "Call"
                        ],
                        [
                            "self.fused_image.detach().squeeze(0).permute(1, 2, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_54": {
                "variable": {
                    "value": "input_pad",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "pad": {
                    "value": "padding_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "compute_padding(kernel.shape[-2:])",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "pad_mode",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'replicate'",
                            "MethodArgument"
                        ],
                        [
                            "'replicate'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "conv2d_55": {
                "input": {
                    "value": "input_pad",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.pad(input, padding_shape, mode=pad_mode)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "kernel",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmin_96": {
                "variable": {
                    "value": "IDM",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "AFM",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "g(input, RFM.expand(-1, 3, -1, -1)).mean(1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_278": {
                "variable": {
                    "value": "ssim_map",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "ssim_map",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(ssim_map, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_31": {
                "ndarray": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "imread(root)",
                            "Call"
                        ],
                        [
                            "image[:, :, None]",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(image, dim=0)",
                            "Call"
                        ],
                        [
                            "self.fused_image.detach().squeeze(0).permute(1, 2, 0)",
                            "Call"
                        ],
                        [
                            "self.fused_image.detach().squeeze(0).permute(1, 2, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "permute_31": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "one_hot_78": {
                "tensor": {
                    "value": "torch.argmax(sigma_sq, dim=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_classes": {
                    "value": "input.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "one_hot_86": {
                "tensor": {
                    "value": "torch.argmax(lap_map.squeeze(1), dim=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_classes": {
                    "value": "input.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "clamp_103": {
                "input": {
                    "value": "FDM.squeeze(0).squeeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_112": {
                "variable": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(kernel_size, kernel_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "from_numpy_135": {
                "variable": {
                    "value": "tmp_image4",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "tmp_image4",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1 - tmp_image3",
                            "BinOp"
                        ],
                        [
                            "tmp_image4.astype(np.float)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(tmp_image4)",
                            "Call"
                        ],
                        [
                            "tmp_image4.to(input_image.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_186": {
                "variable": {
                    "value": "fused_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_203": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[fused_image]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.001",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sum_294": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "map * a",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_78": {
                "input": {
                    "value": "sigma_sq",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "conv2d(input.pow(2), tmp_kernel, self.pad_mode) - mu_sq",
                            "BinOp"
                        ],
                        [
                            "sigma_sq.squeeze(1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_86": {
                "input": {
                    "value": "lap_map.squeeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Rprop_205": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[fused_image]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.001",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "clamp_244": {
                "variable": {
                    "value": "fused_image.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "fused_image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.mean(self.input, dim=0, keepdim=True)",
                            "Call"
                        ],
                        [
                            "fused_image.to(self.input.device).to(self.input.dtype)",
                            "Call"
                        ],
                        [
                            "fused_image.requires_grad_(True)",
                            "Call"
                        ],
                        [
                            "ini_value",
                            "Name"
                        ],
                        [
                            "ini_value.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "ini_value.permute(2, 0, 1).unsqueeze(0)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "RMSprop_207": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[fused_image]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.001",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "no_grad_243": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdamW_209": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[fused_image]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.001",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "one_hot_317": {
                "tensor": {
                    "value": "map_mode",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'User Specified'",
                            "Constant"
                        ],
                        [
                            "self.map_mode",
                            "Attribute"
                        ],
                        [
                            "map_mode.to(torch.long)",
                            "Call"
                        ],
                        [
                            "'lap'",
                            "MethodArgument"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "self.N",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "MS_LAP/test.py": {
        "torch": {
            "stack_16": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x1, x2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_12": {
                "ndarray": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "permute_12": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "Map_Analysis.py": {
        "torch": {
            "is_available_15": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rand_like_25": {
                "variable": {
                    "value": "prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "M",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "load_focus_map('Map_Analysis\\\\label.png').to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_26": {
                "variable": {
                    "value": "M2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "M - 1 * (prob < i / 10)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_27": {
                "variable": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(A, B)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "blocks.py": {
        "torch": {
            "Conv2d_58": {
                "variable": {
                    "value": "self.conv2d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_19": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_22": {
                "negative_slope": {
                    "value": "init",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.2 if init == None else init",
                            "IfExp"
                        ],
                        [
                            "0.25 if init == None else init",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "PReLU_26": {
                "num_parameters": {
                    "value": "num_parameters",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1 if num_parameters == None else num_parameters",
                            "IfExp"
                        ],
                        [
                            "out_channels if act != 'relu' else None",
                            "IfExp"
                        ],
                        [
                            "num_channels if act != 'relu' else None",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "init": {
                    "value": "init",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.2 if init == None else init",
                            "IfExp"
                        ],
                        [
                            "0.25 if init == None else init",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReflectionPad2d_35": {
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(int(1 + dilation * (kernel_size - 1)) // 2) if padding == 'same' else 0",
                            "IfExp"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "'same'",
                            "MethodArgument"
                        ],
                        [
                            "'same'",
                            "MethodArgument"
                        ],
                        [
                            "'same'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReplicationPad2d_37": {
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(int(1 + dilation * (kernel_size - 1)) // 2) if padding == 'same' else 0",
                            "IfExp"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "'same'",
                            "MethodArgument"
                        ],
                        [
                            "'same'",
                            "MethodArgument"
                        ],
                        [
                            "'same'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ZeroPad2d_39": {
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(int(1 + dilation * (kernel_size - 1)) // 2) if padding == 'same' else 0",
                            "IfExp"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "'same'",
                            "MethodArgument"
                        ],
                        [
                            "'same'",
                            "MethodArgument"
                        ],
                        [
                            "'same'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ConstantPad2d_42": {
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(int(1 + dilation * (kernel_size - 1)) // 2) if padding == 'same' else 0",
                            "IfExp"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "'same'",
                            "MethodArgument"
                        ],
                        [
                            "'same'",
                            "MethodArgument"
                        ],
                        [
                            "'same'",
                            "MethodArgument"
                        ]
                    ]
                },
                "value": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0 if value == None else value",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_81": {
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_114": {
                "num_features": {
                    "value": "num_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_119": {
                "num_features": {
                    "value": "num_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "network.py": {
        "torch": {
            "Sequential_17": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[ResBlock(num_feat, 3) for i in range(num_blocks)]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "sigmoid_26": {
                "input": {
                    "value": "self.conv1(torch.cat((a, b), dim=1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_26": {
                "tensors": {
                    "value": "(a, b)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "test.py": {
        "torch": {
            "cat_50": {
                "variable": {
                    "value": "_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(a, b)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_68": {
                "variable": {
                    "value": "_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(a, b)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_23": {
                "f": {
                    "value": "weight/block8_feat128.pth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "Adam_24": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "Constant"
                        ]
                    ]
                }
            },
            "DataLoader_28": {
                "variable": {
                    "value": "loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Dataset('dataset')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "6",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rot90_40": {
                "variable": {
                    "value": "A",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "A",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.rot90(A, temp_int, [-1, -2])",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "temp_int",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(torch.randint(4, [1]))",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "[-1, -2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "rot90_41": {
                "variable": {
                    "value": "B",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "B",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.rot90(B, temp_int, [-1, -2])",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "temp_int",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(torch.randint(4, [1]))",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "[-1, -2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "rot90_42": {
                "variable": {
                    "value": "GT",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "GT",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.rot90(GT, temp_int, [-1, -2])",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "temp_int",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(torch.randint(4, [1]))",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "[-1, -2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "save_61": {
                "obj": {
                    "value": "{'net': net.state_dict(), 'optimizer': optimizer.state_dict(), 'epoch': epoch}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(save_path, 'last_net.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_60": {
                "obj": {
                    "value": "net.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(save_path, 'best_net.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randint_39": {
                "low": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "BCELoss_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils.py": {
        "torch": {}
    }
}