{
    "benchmark/benchmark.py": {
        "torch": {
            "is_available_264": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "current_device_265": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "benchmark/functions/esig_logsignature_forward.py": {
        "torch": {
            "rand_20": {
                "variable": {
                    "value": "obj.path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "obj.size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "benchmark/functions/esig_signature_forward.py": {
        "torch": {
            "rand_20": {
                "variable": {
                    "value": "obj.path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "obj.size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "benchmark/functions/iisignature_logsignature_backward.py": {
        "torch": {
            "rand_20": {
                "variable": {
                    "value": "obj.path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "obj.size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_22": {
                "variable": {
                    "value": "obj.grad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(obj.size[-3], iisignature.logsiglength(obj.size[-1], obj.depth))",
                            "Tuple"
                        ]
                    ]
                }
            }
        }
    },
    "benchmark/functions/iisignature_logsignature_forward.py": {
        "torch": {
            "rand_20": {
                "variable": {
                    "value": "obj.path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "obj.size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "benchmark/functions/iisignature_signature_backward.py": {
        "torch": {
            "rand_20": {
                "variable": {
                    "value": "obj.path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "obj.size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_22": {
                "variable": {
                    "value": "obj.grad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(obj.size[-3], iisignature.siglength(obj.size[-1], obj.depth))",
                            "Tuple"
                        ]
                    ]
                }
            }
        }
    },
    "benchmark/functions/iisignature_signature_forward.py": {
        "torch": {
            "rand_20": {
                "variable": {
                    "value": "obj.path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "obj.size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "benchmark/functions/signatory_logsignature_backward.py": {
        "torch": {
            "rand_20": {
                "variable": {
                    "value": "obj.path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "obj.size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rand_22": {
                "variable": {
                    "value": "obj.grad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(obj.size[-3], signatory.logsignature_channels(obj.size[-1], obj.depth))",
                            "Tuple"
                        ]
                    ]
                }
            }
        }
    },
    "benchmark/functions/signatory_logsignature_backward_gpu.py": {
        "torch": {
            "rand_20": {
                "variable": {
                    "value": "obj.path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "obj.size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "rand_22": {
                "variable": {
                    "value": "obj.grad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(obj.size[-3], signatory.logsignature_channels(obj.size[-1], obj.depth))",
                            "Tuple"
                        ]
                    ]
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "synchronize_28": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "benchmark/functions/signatory_logsignature_backward_no_parallel.py": {
        "torch": {
            "rand_22": {
                "variable": {
                    "value": "obj.path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "obj.size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rand_24": {
                "variable": {
                    "value": "obj.grad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(obj.size[-3], signatory.logsignature_channels(obj.size[-1], obj.depth))",
                            "Tuple"
                        ]
                    ]
                }
            },
            "set_num_threads_20": {
                "int": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "benchmark/functions/signatory_logsignature_forward.py": {
        "torch": {
            "rand_20": {
                "variable": {
                    "value": "obj.path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "obj.size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "benchmark/functions/signatory_logsignature_forward_gpu.py": {
        "torch": {
            "rand_20": {
                "variable": {
                    "value": "obj.path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "obj.size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "synchronize_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "benchmark/functions/signatory_logsignature_forward_no_parallel.py": {
        "torch": {
            "rand_22": {
                "variable": {
                    "value": "obj.path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "obj.size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_num_threads_20": {
                "int": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "benchmark/functions/signatory_signature_backward.py": {
        "torch": {
            "rand_20": {
                "variable": {
                    "value": "obj.path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "obj.size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rand_22": {
                "variable": {
                    "value": "obj.grad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(obj.size[-3], signatory.signature_channels(obj.size[-1], obj.depth))",
                            "Tuple"
                        ]
                    ]
                }
            }
        }
    },
    "benchmark/functions/signatory_signature_backward_gpu.py": {
        "torch": {
            "rand_20": {
                "variable": {
                    "value": "obj.path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "obj.size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "rand_22": {
                "variable": {
                    "value": "obj.grad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(obj.size[-3], signatory.signature_channels(obj.size[-1], obj.depth))",
                            "Tuple"
                        ]
                    ]
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "synchronize_28": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "benchmark/functions/signatory_signature_backward_no_parallel.py": {
        "torch": {
            "rand_22": {
                "variable": {
                    "value": "obj.path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "obj.size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rand_24": {
                "variable": {
                    "value": "obj.grad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(obj.size[-3], signatory.signature_channels(obj.size[-1], obj.depth))",
                            "Tuple"
                        ]
                    ]
                }
            },
            "set_num_threads_20": {
                "int": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "benchmark/functions/signatory_signature_forward.py": {
        "torch": {
            "rand_20": {
                "variable": {
                    "value": "obj.path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "obj.size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "benchmark/functions/signatory_signature_forward_gpu.py": {
        "torch": {
            "rand_20": {
                "variable": {
                    "value": "obj.path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "obj.size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "synchronize_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "benchmark/functions/signatory_signature_forward_no_parallel.py": {
        "torch": {
            "rand_22": {
                "variable": {
                    "value": "obj.path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "obj.size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_num_threads_20": {
                "int": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "benchmark/memory.py": {
        "torch": {
            "device_73": {
                "type": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(device)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "benchmark/time_.py": {
        "torch": {
            "device_51": {
                "type": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(device)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "command.py": {
        "torch": {
            "device_139": {
                "type": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "current_device_114": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_209": {
                "type": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "docs/_static/inversion/generate_images.py": {
        "torch": {
            "linspace_17": {
                "variable": {
                    "value": "time",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "steps": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_18": {
                "variable": {
                    "value": "path",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_18": {
                "tensors": {
                    "value": "[torch.cos(math.pi * time), torch.sin(math.pi * time)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cos_18": {
                "input": {
                    "value": "math.pi * time",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_18": {
                "input": {
                    "value": "math.pi * time",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "examples/example1.py": {
        "torch": {
            "Linear_36": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "sig_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "signatory.signature_channels(channels=in_channels + 1, depth=sig_depth)",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_dimension",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "examples/example2.py": {
        "torch": {
            "Linear_38": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "sig_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "signatory.signature_channels(channels=in_channels + 3, depth=sig_depth)",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_dimension",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "examples/example3.py": {
        "torch": {
            "Linear_51": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "sig_channels2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "signatory.signature_channels(channels=4, depth=sig_depth)",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_dimension",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "setup.py": {
        "torch": {}
    },
    "src/signatory/__init__.py": {
        "torch": {}
    },
    "src/signatory/augment.py": {
        "torch": {
            "ModuleList_144": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "linspace_181": {
                "variable": {
                    "value": "time",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "steps": {
                    "value": "len_truncated",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.size(1) - self.kernel_size + 1",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_193": {
                "tensors": {
                    "value": "pieces",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_146": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "layer_sizes[0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "(layer_sizes,)",
                            "Tuple"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv1d_156": {
                "in_channels": {
                    "value": "last_layer_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "layer_sizes[0]",
                            "Subscript"
                        ],
                        [
                            "augment_channel",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "augment_channel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "layer_sizes[1:]",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "src/signatory/logsignature_module.py": {
        "torch": {}
    },
    "src/signatory/path.py": {
        "torch": {
            "empty_61": {
                "variable": {
                    "value": "path_increments",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "length - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "p.size(-2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "p.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "p.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randperm_552": {
                "variable": {
                    "value": "perm",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "self.size(-3)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "self._device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sub_62": {
                "input": {
                    "value": "p[1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "p[:-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "path_increments[:p.size(0) - 1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "torch.empty(length - 1, p.size(-2), p.size(-1), device=p.device, dtype=p.dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "sub_66": {
                "input": {
                    "value": "piece[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "prev_piece[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "path_increments[next_path_increment]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "torch.empty(length - 1, p.size(-2), p.size(-1), device=p.device, dtype=p.dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "sub_69": {
                "input": {
                    "value": "piece[1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "piece[:-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "path_increments[next_path_increment:next_next_path_increment]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "torch.empty(length - 1, p.size(-2), p.size(-1), device=p.device, dtype=p.dtype)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/signatory/signature_inversion_module.py": {
        "torch": {
            "cat_27": {
                "variable": {
                    "value": "B",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "batch * [torch.eye(channels)]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_64": {
                "variable": {
                    "value": "x_optimal",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "A_matrix",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "get_insertion_matrix(signature[:, :-channels ** depth], insertion_position, depth - 1, channels)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "b_vector.unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_64": {
                "variable": {
                    "value": "x_optimal",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_100": {
                "variable": {
                    "value": "path_derivatives",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch, depth, channels)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_101": {
                "variable": {
                    "value": "path",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch, depth + 1, channels)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "arange_109": {
                "start": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "depth + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_68": {
                "input": {
                    "value": "sign_1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "smodule.extract_signature_term(signature, channels, depth - 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_68": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "eye_27": {
                "n": {
                    "value": "channels",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "src/signatory/signature_module.py": {
        "torch": {
            "zeros_32": {
                "variable": {
                    "value": "basepoint_value",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, channel_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_46": {
                "variable": {
                    "value": "initial_value",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_num_threads_118": {
                "variable": {
                    "value": "threshold",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tensor_37": {
                "variable": {
                    "value": "basepoint_value",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "test/helpers/helpers.py": {
        "torch": {
            "max_37": {
                "variable": {
                    "value": "max_diff",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(diff)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rand_52": {
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(1, 2)",
                            "Tuple"
                        ],
                        [
                            "int(torch.randint(low=1, high=10, size=(1,)))",
                            "Call"
                        ],
                        [
                            "(1, 2)",
                            "Tuple"
                        ],
                        [
                            "(1, 2)",
                            "Tuple"
                        ],
                        [
                            "int(torch.randint(low=1, high=10, size=(1,)))",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "input_stream",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(2,)",
                            "Tuple"
                        ],
                        [
                            "int(torch.randint(low=2, high=10, size=(1,)))",
                            "Call"
                        ],
                        [
                            "(1, 2)",
                            "Tuple"
                        ],
                        [
                            "(2,)",
                            "Tuple"
                        ],
                        [
                            "int(torch.randint(low=2, high=10, size=(1,)))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.double",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "path_grad",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "rand_70": {
                "variable": {
                    "value": "initial_path",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(1, 2)",
                            "Tuple"
                        ],
                        [
                            "int(torch.randint(low=1, high=10, size=(1,)))",
                            "Call"
                        ],
                        [
                            "(1, 2)",
                            "Tuple"
                        ],
                        [
                            "(1, 2)",
                            "Tuple"
                        ],
                        [
                            "int(torch.randint(low=1, high=10, size=(1,)))",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.double",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "rand_59": {
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(1, 2)",
                            "Tuple"
                        ],
                        [
                            "int(torch.randint(low=1, high=10, size=(1,)))",
                            "Call"
                        ],
                        [
                            "(1, 2)",
                            "Tuple"
                        ],
                        [
                            "(1, 2)",
                            "Tuple"
                        ],
                        [
                            "int(torch.randint(low=1, high=10, size=(1,)))",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "input_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(1, 2)",
                            "Tuple"
                        ],
                        [
                            "int(torch.randint(low=1, high=10, size=(1,)))",
                            "Call"
                        ],
                        [
                            "(1, 2)",
                            "Tuple"
                        ],
                        [
                            "(1, 2)",
                            "Tuple"
                        ],
                        [
                            "int(torch.randint(low=1, high=10, size=(1,)))",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.double",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_37": {
                "input": {
                    "value": "diff",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "arg1 - arg2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "rand_61": {
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(1, 2)",
                            "Tuple"
                        ],
                        [
                            "int(torch.randint(low=1, high=10, size=(1,)))",
                            "Call"
                        ],
                        [
                            "(1, 2)",
                            "Tuple"
                        ],
                        [
                            "(1, 2)",
                            "Tuple"
                        ],
                        [
                            "int(torch.randint(low=1, high=10, size=(1,)))",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "input_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(1, 2)",
                            "Tuple"
                        ],
                        [
                            "int(torch.randint(low=1, high=10, size=(1,)))",
                            "Call"
                        ],
                        [
                            "(1, 2)",
                            "Tuple"
                        ],
                        [
                            "(1, 2)",
                            "Tuple"
                        ],
                        [
                            "int(torch.randint(low=1, high=10, size=(1,)))",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.double",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randint_87": {
                "low": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_88": {
                "low": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_89": {
                "low": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_109": {
                "low": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_110": {
                "low": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_111": {
                "low": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "test/helpers/reimplementation.py": {
        "torch": {
            "cat_54": {
                "variable": {
                    "value": "iisignature_path",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "iisignature_path_pieces",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "iisignature_path_pieces_reversed",
                            "Name"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_40": {
                "variable": {
                    "value": "iisignature_basepoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "path.dtype",
                            "Attribute"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "path.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "stack_65": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "results",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flip_65": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_69": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "results",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "test/test_examples.py": {
        "torch": {
            "rand_49": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                }
            }
        }
    },
    "test/test_logsignature.py": {
        "torch": {
            "rand_like_292": {
                "variable": {
                    "value": "grad",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logsignature",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "signatory_logsignature(class_, path, depth, stream, basepoint, inverse, mode)",
                            "Call"
                        ],
                        [
                            "signatory_logsignature(class_, path, depth, stream, basepoint, inverse, mode)",
                            "Call"
                        ],
                        [
                            "signatory_logsignature(class_, path, depth, stream, basepoint, inverse, mode)",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_like_389": {
                "variable": {
                    "value": "cpu_grad",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cpu_logsignature",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "logsignature_instance(cpu_path, basepoint=cpu_basepoint)",
                            "Call"
                        ],
                        [
                            "signatory.logsignature(cpu_path, depth, stream=stream, basepoint=cpu_basepoint, inverse=inverse, mode=mode)",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_90": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_iisignatureLogsignatureFunction.apply(path, depth)",
                            "Call"
                        ],
                        [
                            "torch.index_select(result, -1, _lyndon_indices(path.size(-1), depth).to(path.device))",
                            "Call"
                        ],
                        [
                            "r.iisignature_signature_or_logsignature(fn, path, depth, stream, basepoint, inverse)",
                            "Call"
                        ],
                        [
                            "iisignature_path[:, 1:] - iisignature_path[:, 0].unsqueeze(1)",
                            "BinOp"
                        ],
                        [
                            "result[:, -1]",
                            "Subscript"
                        ],
                        [
                            "-result",
                            "UnaryOp"
                        ],
                        [
                            "torch.zeros(batch_size, depth, dtype=dtype, device=device)",
                            "Call"
                        ],
                        [
                            "torch.zeros(batch_size, stream_length, depth, dtype=dtype, device=device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "index": {
                    "value": "_lyndon_indices(path.size(-1), depth).to(path.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rand_like_338": {
                "variable": {
                    "value": "grad",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logsignature",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "signatory_logsignature(class_, path, depth, stream, basepoint, inverse, mode)",
                            "Call"
                        ],
                        [
                            "signatory_logsignature(class_, path, depth, stream, basepoint, inverse, mode)",
                            "Call"
                        ],
                        [
                            "signatory_logsignature(class_, path, depth, stream, basepoint, inverse, mode)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_53": {
                "variable": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(indices)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_79": {
                "data": {
                    "value": "iisignature.logsig(ctx.path, ctx.prepare, 'x')",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "ctx.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "ctx.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_121": {
                "variable": {
                    "value": "iisignature_path",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.zeros(batch_size, 1, input_channels, dtype=dtype, device=device), path]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_355": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_393": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_max_memory_allocated_394": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_420": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_memory_allocated_421": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_83": {
                "data": {
                    "value": "iisignature.logsigbackprop(grad.cpu(), ctx.path, ctx.prepare, 'x')",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "ctx.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "ctx.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_124": {
                "variable": {
                    "value": "iisignature_path",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[basepoint.unsqueeze(1), path]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_147": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(0, 1, 2, 3)",
                            "Tuple"
                        ]
                    ]
                },
                "out": {
                    "value": "stream_length",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_stream - 1",
                            "BinOp"
                        ],
                        [
                            "input_stream",
                            "Name"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "path.dtype",
                            "Attribute"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "path.device",
                            "Attribute"
                        ],
                        [
                            "h.get_devices()",
                            "Call"
                        ],
                        [
                            "h.get_devices()",
                            "Call"
                        ],
                        [
                            "h.get_devices()",
                            "Call"
                        ],
                        [
                            "h.get_devices()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_149": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(0, 1, 2, 3)",
                            "Tuple"
                        ]
                    ]
                },
                "out": {
                    "value": "depth",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(1, 2, 4, 6)",
                            "Tuple"
                        ],
                        [
                            "(1, 2, 4, 6)",
                            "Tuple"
                        ],
                        [
                            "(1, 2, 4, 6)",
                            "Tuple"
                        ],
                        [
                            "(1, 2, 5)",
                            "Tuple"
                        ],
                        [
                            "(1, 2, 5)",
                            "Tuple"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "path.dtype",
                            "Attribute"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "path.device",
                            "Attribute"
                        ],
                        [
                            "h.get_devices()",
                            "Call"
                        ],
                        [
                            "h.get_devices()",
                            "Call"
                        ],
                        [
                            "h.get_devices()",
                            "Call"
                        ],
                        [
                            "h.get_devices()",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_101": {
                "data": {
                    "value": "direct_iisignature_logsignature",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "iisignature.logsig(path.detach().cpu(), h.iisignature_prepare(path.size(-1), depth))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "path.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "path.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_121": {
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(0, 1, 2, 3)",
                            "Tuple"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "path.dtype",
                            "Attribute"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "path.device",
                            "Attribute"
                        ],
                        [
                            "h.get_devices()",
                            "Call"
                        ],
                        [
                            "h.get_devices()",
                            "Call"
                        ],
                        [
                            "h.get_devices()",
                            "Call"
                        ],
                        [
                            "h.get_devices()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "test/test_path.py": {
        "torch": {
            "randint_84": {
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_94": {
                "variable": {
                    "value": "full_path",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[basepoint.unsqueeze(1), path]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_119": {
                "variable": {
                    "value": "getitem3",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(1, 2)",
                            "Tuple"
                        ],
                        [
                            "random.choice((1, 2, 5))",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(_randint(int(1.5 * batch_size)),)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_120": {
                "variable": {
                    "value": "getitem4",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(1, 2)",
                            "Tuple"
                        ],
                        [
                            "random.choice((1, 2, 5))",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(_randint(int(1.5 * batch_size)),)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_121": {
                "variable": {
                    "value": "getitem5",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(1, 2)",
                            "Tuple"
                        ],
                        [
                            "random.choice((1, 2, 5))",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(_randint(int(1.5 * batch_size)),)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_38": {
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_96": {
                "variable": {
                    "value": "full_path",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.zeros(batch_size, 1, input_channels, device=device, dtype=torch.double), path]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_192": {
                "variable": {
                    "value": "new_path",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(1, 2)",
                            "Tuple"
                        ],
                        [
                            "random.choice((1, 2, 5))",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "length",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.double",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "h.get_devices()",
                            "Call"
                        ],
                        [
                            "random.choice(h.get_devices())",
                            "Call"
                        ],
                        [
                            "h.get_devices()",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "grad",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.rand_like(tensor)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_195": {
                "variable": {
                    "value": "full_path",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[full_path, new_path]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_261": {
                "tensors": {
                    "value": "derived_path_obj.path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "is_available_341": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rand_like_362": {
                "variable": {
                    "value": "grad",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "candidate(start, end)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_385": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_264": {
                "tensors": {
                    "value": "path_obj.path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "randint_327": {
                "low": {
                    "value": "-length",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "high": {
                    "value": "length",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_328": {
                "low": {
                    "value": "-length",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "high": {
                    "value": "length",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "synchronize_342": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_max_memory_allocated_343": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_386": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_memory_allocated_387": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randint_40": {
                "low": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "maxlength",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_96": {
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(1, 2)",
                            "Tuple"
                        ],
                        [
                            "random.choice((1, 2, 5))",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.double",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "h.get_devices()",
                            "Call"
                        ],
                        [
                            "random.choice(h.get_devices())",
                            "Call"
                        ],
                        [
                            "h.get_devices()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "test/test_signature.py": {
        "torch": {
            "rand_like_287": {
                "variable": {
                    "value": "grad",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "signature",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_IisignatureSignatureFunction.apply(path, depth)",
                            "Call"
                        ],
                        [
                            "out",
                            "Name"
                        ],
                        [
                            "signatory.signature_combine(initial, signature, path.size(-1), depth, inverse, scalar_term)",
                            "Call"
                        ],
                        [
                            "signatory_signature(class_, path, depth, stream, basepoint, inverse, initial, scalar_term)",
                            "Call"
                        ],
                        [
                            "signatory_signature(class_, path, depth, stream, basepoint, inverse, initial, scalar_term)",
                            "Call"
                        ],
                        [
                            "signatory_signature(class_, path, depth, stream, basepoint, inverse, initial, scalar_term)",
                            "Call"
                        ],
                        [
                            "signatory_signature(class_, path, depth, stream, basepoint, inverse, initial, scalar_term)",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_like_401": {
                "variable": {
                    "value": "cpu_grad",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cpu_signature",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "signature_instance(cpu_path, basepoint=cpu_basepoint, initial=cpu_initial)",
                            "Call"
                        ],
                        [
                            "signatory.signature(cpu_path, depth, stream=stream, basepoint=cpu_basepoint, inverse=inverse, initial=cpu_initial, scalar_term=scalar_term)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_158": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_num_threads_188": {
                "variable": {
                    "value": "threshold",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rand_like_221": {
                "variable": {
                    "value": "grad",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "signature",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_IisignatureSignatureFunction.apply(path, depth)",
                            "Call"
                        ],
                        [
                            "out",
                            "Name"
                        ],
                        [
                            "signatory.signature_combine(initial, signature, path.size(-1), depth, inverse, scalar_term)",
                            "Call"
                        ],
                        [
                            "signatory_signature(class_, path, depth, stream, basepoint, inverse, initial, scalar_term)",
                            "Call"
                        ],
                        [
                            "signatory_signature(class_, path, depth, stream, basepoint, inverse, initial, scalar_term)",
                            "Call"
                        ],
                        [
                            "signatory_signature(class_, path, depth, stream, basepoint, inverse, initial, scalar_term)",
                            "Call"
                        ],
                        [
                            "signatory_signature(class_, path, depth, stream, basepoint, inverse, initial, scalar_term)",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_like_344": {
                "variable": {
                    "value": "grad",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "signature",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_IisignatureSignatureFunction.apply(path, depth)",
                            "Call"
                        ],
                        [
                            "out",
                            "Name"
                        ],
                        [
                            "signatory.signature_combine(initial, signature, path.size(-1), depth, inverse, scalar_term)",
                            "Call"
                        ],
                        [
                            "signatory_signature(class_, path, depth, stream, basepoint, inverse, initial, scalar_term)",
                            "Call"
                        ],
                        [
                            "signatory_signature(class_, path, depth, stream, basepoint, inverse, initial, scalar_term)",
                            "Call"
                        ],
                        [
                            "signatory_signature(class_, path, depth, stream, basepoint, inverse, initial, scalar_term)",
                            "Call"
                        ],
                        [
                            "signatory_signature(class_, path, depth, stream, basepoint, inverse, initial, scalar_term)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_42": {
                "data": {
                    "value": "iisignature.sig(ctx.path, ctx.depth)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "ctx.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "ctx.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_56": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "signature.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1 + signature.size(1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "signature.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "signature.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_363": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_405": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_max_memory_allocated_406": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_437": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_memory_allocated_438": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_46": {
                "data": {
                    "value": "iisignature.sigbackprop(grad.cpu(), ctx.path, ctx.depth)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "ctx.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "ctx.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "test/test_signature_combine.py": {
        "torch": {
            "cat_102": {
                "variable": {
                    "value": "combined_paths",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "paths",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_like_164": {
                "variable": {
                    "value": "grad",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "combined_signatures",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "signatory.signature_combine(signatures[0], signatures[1], input_channels, depth, inverse=inverse, scalar_term=scalar_term)",
                            "Call"
                        ],
                        [
                            "signatory.multi_signature_combine(signatures, input_channels, depth, inverse=inverse, scalar_term=scalar_term)",
                            "Call"
                        ],
                        [
                            "signatory.signature_combine(signatures[0], signatures[1], input_channels, depth, inverse=inverse, scalar_term=scalar_term)",
                            "Call"
                        ],
                        [
                            "signatory.multi_signature_combine(signatures, input_channels, depth, inverse=inverse, scalar_term=scalar_term)",
                            "Call"
                        ],
                        [
                            "signatory.signature_combine(signatures[0], signatures[1], input_channels, depth, inverse=inverse, scalar_term=scalar_term)",
                            "Call"
                        ],
                        [
                            "signatory.multi_signature_combine(signatures, input_channels, depth, inverse=inverse, scalar_term=scalar_term)",
                            "Call"
                        ],
                        [
                            "signatory.signature_combine(signatures[0], signatures[1], input_channels, depth, inverse=inverse, scalar_term=scalar_term)",
                            "Call"
                        ],
                        [
                            "signatory.multi_signature_combine(signatures, input_channels, depth, inverse=inverse, scalar_term=scalar_term)",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_like_213": {
                "variable": {
                    "value": "grad",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "combined_signatures",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "signatory.signature_combine(signatures[0], signatures[1], input_channels, depth, inverse=inverse, scalar_term=scalar_term)",
                            "Call"
                        ],
                        [
                            "signatory.multi_signature_combine(signatures, input_channels, depth, inverse=inverse, scalar_term=scalar_term)",
                            "Call"
                        ],
                        [
                            "signatory.signature_combine(signatures[0], signatures[1], input_channels, depth, inverse=inverse, scalar_term=scalar_term)",
                            "Call"
                        ],
                        [
                            "signatory.multi_signature_combine(signatures, input_channels, depth, inverse=inverse, scalar_term=scalar_term)",
                            "Call"
                        ],
                        [
                            "signatory.signature_combine(signatures[0], signatures[1], input_channels, depth, inverse=inverse, scalar_term=scalar_term)",
                            "Call"
                        ],
                        [
                            "signatory.multi_signature_combine(signatures, input_channels, depth, inverse=inverse, scalar_term=scalar_term)",
                            "Call"
                        ],
                        [
                            "signatory.signature_combine(signatures[0], signatures[1], input_channels, depth, inverse=inverse, scalar_term=scalar_term)",
                            "Call"
                        ],
                        [
                            "signatory.multi_signature_combine(signatures, input_channels, depth, inverse=inverse, scalar_term=scalar_term)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_45": {
                "data": {
                    "value": "iisignature.sig(ctx.path, ctx.depth)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "ctx.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "ctx.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_59": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "signature.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1 + signature.size(1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "signature.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "signature.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_170": {
                "tensors": {
                    "value": "paths",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_225": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_243": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_max_memory_allocated_244": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rand_like_263": {
                "variable": {
                    "value": "grad",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "combined_signatures",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "signatory.signature_combine(signatures[0], signatures[1], input_channels, depth, inverse=inverse, scalar_term=scalar_term)",
                            "Call"
                        ],
                        [
                            "signatory.multi_signature_combine(signatures, input_channels, depth, inverse=inverse, scalar_term=scalar_term)",
                            "Call"
                        ],
                        [
                            "signatory.signature_combine(signatures[0], signatures[1], input_channels, depth, inverse=inverse, scalar_term=scalar_term)",
                            "Call"
                        ],
                        [
                            "signatory.multi_signature_combine(signatures, input_channels, depth, inverse=inverse, scalar_term=scalar_term)",
                            "Call"
                        ],
                        [
                            "signatory.signature_combine(signatures[0], signatures[1], input_channels, depth, inverse=inverse, scalar_term=scalar_term)",
                            "Call"
                        ],
                        [
                            "signatory.multi_signature_combine(signatures, input_channels, depth, inverse=inverse, scalar_term=scalar_term)",
                            "Call"
                        ],
                        [
                            "signatory.signature_combine(signatures[0], signatures[1], input_channels, depth, inverse=inverse, scalar_term=scalar_term)",
                            "Call"
                        ],
                        [
                            "signatory.multi_signature_combine(signatures, input_channels, depth, inverse=inverse, scalar_term=scalar_term)",
                            "Call"
                        ]
                    ]
                }
            },
            "synchronize_265": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_memory_allocated_266": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_49": {
                "data": {
                    "value": "iisignature.sigbackprop(grad.cpu(), ctx.path, ctx.depth)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "ctx.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "ctx.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_87": {
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(1, 2, 5)",
                            "Tuple"
                        ]
                    ]
                },
                "out": {
                    "value": "input_stream",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.double",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "h.get_devices()",
                            "Call"
                        ],
                        [
                            "h.get_devices()",
                            "Call"
                        ],
                        [
                            "h.get_devices()",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_134": {
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(1, 2, 5)",
                            "Tuple"
                        ]
                    ]
                },
                "out": {
                    "value": "input_stream",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.double",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "h.get_devices()",
                            "Call"
                        ],
                        [
                            "h.get_devices()",
                            "Call"
                        ],
                        [
                            "h.get_devices()",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rand_193": {
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(1, 2, 5)",
                            "Tuple"
                        ]
                    ]
                },
                "out": {
                    "value": "input_stream",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.double",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "h.get_devices()",
                            "Call"
                        ],
                        [
                            "h.get_devices()",
                            "Call"
                        ],
                        [
                            "h.get_devices()",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_247": {
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(1, 2, 5)",
                            "Tuple"
                        ]
                    ]
                },
                "out": {
                    "value": "input_stream",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.double",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "test/test_signature_inversion.py": {
        "torch": {
            "rand_28": {
                "variable": {
                    "value": "path",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, input_stream, input_channels)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "linspace_43": {
                "variable": {
                    "value": "time",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "steps": {
                    "value": "input_stream",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(2, 3, 10)",
                            "Tuple"
                        ],
                        [
                            "10",
                            "Constant"
                        ],
                        [
                            "10",
                            "Constant"
                        ]
                    ]
                }
            },
            "unsqueeze_44": {
                "variable": {
                    "value": "path",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_33": {
                "variable": {
                    "value": "initial_position",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, input_channels)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "allclose_50": {
                "input": {
                    "value": "path[:, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "inverted_path[:, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "atol": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "equal_32": {
                "input": {
                    "value": "inverted_path[:, 0, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.zeros(batch_size, input_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_35": {
                "input": {
                    "value": "inverted_path[:, 0, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "initial_position",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.rand((batch_size, input_channels))",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_16": {
                "variable": {
                    "value": "path",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, input_stream, input_channels)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_32": {
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(1, 2, 5)",
                            "Tuple"
                        ],
                        [
                            "10",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "input_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(1, 2, 6)",
                            "Tuple"
                        ],
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                }
            },
            "stack_44": {
                "tensors": {
                    "value": "[torch.cos(3.14 * time), torch.sin(3.14 * time)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cos_44": {
                "input": {
                    "value": "3.14 * time",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_44": {
                "input": {
                    "value": "3.14 * time",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "test/test_signature_to_logsignature.py": {
        "torch": {
            "rand_like_136": {
                "variable": {
                    "value": "grad",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logsignature",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "signatory_signature_to_logsignature(class_, signature, input_channels, depth, stream, mode, scalar_term=scalar_term)",
                            "Call"
                        ],
                        [
                            "signatory_signature_to_logsignature(class_, signature, input_channels, depth, stream, mode, scalar_term)",
                            "Call"
                        ],
                        [
                            "signatory_signature_to_logsignature(class_, signature, input_channels, depth, stream, mode, scalar_term)",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_like_222": {
                "variable": {
                    "value": "cpu_grad",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cpu_logsignature",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "signature_to_logsignature_instance(cpu_signature)",
                            "Call"
                        ],
                        [
                            "signatory.signature_to_logsignature(cpu_signature, input_channels, depth, stream=stream, mode=mode, scalar_term=scalar_term)",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_like_178": {
                "variable": {
                    "value": "grad",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logsignature",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "signatory_signature_to_logsignature(class_, signature, input_channels, depth, stream, mode, scalar_term=scalar_term)",
                            "Call"
                        ],
                        [
                            "signatory_signature_to_logsignature(class_, signature, input_channels, depth, stream, mode, scalar_term)",
                            "Call"
                        ],
                        [
                            "signatory_signature_to_logsignature(class_, signature, input_channels, depth, stream, mode, scalar_term)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_191": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_226": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_max_memory_allocated_227": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_246": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_memory_allocated_247": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}