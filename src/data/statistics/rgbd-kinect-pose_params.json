{
    "extern/face_expression/face_expression/third_party/face_mesh_mediapipe/benchmark.py": {
        "tensorflow": {
            "Interpreter_24": {
                "variable": {
                    "value": "self.detector_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "model_path": {
                    "value": "detection_model_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'./models/face_detection_front.tflite'",
                            "Constant"
                        ]
                    ]
                }
            },
            "Interpreter_27": {
                "variable": {
                    "value": "self.landmark_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "model_path": {
                    "value": "landmark_model_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'./models/face_landmark.tflite'",
                            "Constant"
                        ]
                    ]
                }
            }
        }
    },
    "extern/face_expression/face_expression/third_party/face_mesh_mediapipe/face_mesh_mediapipe.py": {
        "tensorflow": {
            "Interpreter_20": {
                "variable": {
                    "value": "self.detector_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "model_path": {
                    "value": "detection_model_path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Interpreter_23": {
                "variable": {
                    "value": "self.landmark_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "model_path": {
                    "value": "landmark_model_path",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "extern/face_expression/face_expression/criterion.py": {
        "torch": {
            "mean_14": {
                "input": {
                    "value": "torch.abs(pred - target)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_22": {
                "input": {
                    "value": "(pred - target) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_30": {
                "input": {
                    "value": "torch.sqrt(torch.sum((keypoints_pred - keypoints_target) ** 2, dim=2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_14": {
                "input": {
                    "value": "pred - target",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_30": {
                "input": {
                    "value": "torch.sum((keypoints_pred - keypoints_target) ** 2, dim=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_30": {
                "input": {
                    "value": "(keypoints_pred - keypoints_target) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "extern/face_expression/face_expression/dataset.py": {
        "torch": {}
    },
    "extern/face_expression/face_expression/inferer.py": {
        "torch": {
            "load_34": {
                "variable": {
                    "value": "state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "from_numpy_70": {
                "variable": {
                    "value": "keypoints_normed_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "keypoints_normed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "unsqueeze_70": {
                "variable": {
                    "value": "keypoints_normed_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_72": {
                "variable": {
                    "value": "beta",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "beta",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(beta).unsqueeze(0).type(torch.float32).to(self.device)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "unsqueeze_72": {
                "variable": {
                    "value": "beta",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "extern/face_expression/face_expression/model.py": {
        "torch": {
            "Sequential_20": {
                "variable": {
                    "value": "self.backbone",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*backbone_layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_23": {
                "variable": {
                    "value": "self.final",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hid_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_29": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[keypoints_2d.view(bs, -1), beta]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_55": {
                "variable": {
                    "value": "self.keypoint_backbone",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(keypoint_input_size, 512)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_84": {
                "variable": {
                    "value": "self.mix_backbone",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(2 * emb_size if use_beta else emb_size, 128)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_98": {
                "variable": {
                    "value": "self.expression_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hid_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "expression_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_99": {
                "variable": {
                    "value": "self.jaw_pose_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hid_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "jaw_pose_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_132": {
                "variable": {
                    "value": "self.keypoint_backbone",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(2 * n_keypoints, 32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_140": {
                "variable": {
                    "value": "self.beta_backbone",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(beta_size, 32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_148": {
                "variable": {
                    "value": "self.mix_backbone",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(2 * emb_size, 32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_154": {
                "variable": {
                    "value": "self.expression_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hid_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "expression_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_155": {
                "variable": {
                    "value": "self.jaw_pose_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hid_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "jaw_pose_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_164": {
                "variable": {
                    "value": "emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[keypoints_2d_emb, beta_emb]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_185": {
                "variable": {
                    "value": "self.keypoint_backbone",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(2 * n_keypoints, 512)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_204": {
                "variable": {
                    "value": "self.beta_backbone",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(beta_size, 32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_216": {
                "variable": {
                    "value": "self.mix_backbone",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(2 * emb_size, 128)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_232": {
                "variable": {
                    "value": "self.expression_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hid_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "expression_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_233": {
                "variable": {
                    "value": "self.jaw_pose_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hid_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "jaw_pose_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_241": {
                "variable": {
                    "value": "emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[keypoints_2d_emb, beta_emb]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_72": {
                "variable": {
                    "value": "self.beta_backbone",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(beta_size, 32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_110": {
                "variable": {
                    "value": "emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[keypoints_emb, beta_emb]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_56": {
                "in_features": {
                    "value": "keypoint_input_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3 * n_keypoints if use_keypoints_3d else 2 * n_keypoints",
                            "IfExp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_57": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_58": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_60": {
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_61": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_62": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_64": {
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_65": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_66": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_68": {
                "in_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "emb_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_85": {
                "in_features": {
                    "value": "2 * emb_size if use_beta else emb_size",
                    "type": "IfExp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_86": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_87": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_89": {
                "in_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_90": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_91": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_93": {
                "in_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hid_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_94": {
                "num_features": {
                    "value": "hid_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_95": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_133": {
                "in_features": {
                    "value": "2 * n_keypoints",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_134": {
                "num_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_135": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_137": {
                "in_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "emb_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_141": {
                "in_features": {
                    "value": "beta_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_142": {
                "num_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_143": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_145": {
                "in_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "emb_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_149": {
                "in_features": {
                    "value": "2 * emb_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_150": {
                "num_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_151": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_186": {
                "in_features": {
                    "value": "2 * n_keypoints",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_187": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_188": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_189": {
                "p": {
                    "value": "dropout_p",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_191": {
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_192": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_193": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_194": {
                "p": {
                    "value": "dropout_p",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_196": {
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_197": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_198": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_199": {
                "p": {
                    "value": "dropout_p",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_201": {
                "in_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "emb_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_205": {
                "in_features": {
                    "value": "beta_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_206": {
                "num_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_207": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_209": {
                "in_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_210": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_211": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_213": {
                "in_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "emb_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_217": {
                "in_features": {
                    "value": "2 * emb_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_218": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_219": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_220": {
                "p": {
                    "value": "dropout_p",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_222": {
                "in_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_223": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_224": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_225": {
                "p": {
                    "value": "dropout_p",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_227": {
                "in_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hid_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_228": {
                "num_features": {
                    "value": "hid_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_229": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_73": {
                "in_features": {
                    "value": "beta_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_74": {
                "num_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_75": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_77": {
                "in_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_78": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_79": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_81": {
                "in_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "emb_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_16": {
                "in_features": {
                    "value": "current_in_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "in_features if i == 0 else hid_features",
                            "IfExp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hid_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_17": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "extern/face_expression/face_expression/runner.py": {
        "torch": {
            "set_grad_enabled_122": {
                "mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_200": {
                "variable": {
                    "value": "expression_l1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(output_dict['expression_pred'] - input_dict['expression'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_grad_enabled_384": {
                "mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_469": {
                "variable": {
                    "value": "expression_l1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(output_dict['expression_pred'] - input_dict['expression'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_grad_enabled_125": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_199": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_204": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_264": {
                "obj": {
                    "value": "self.get_state_dict(optimizer)",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(checkpoint_dir, 'checkpoint_{:06}.pth'.format(self.state['epoch']))",
                            "Call"
                        ],
                        [
                            "os.path.join(checkpoint_dir, 'checkpoint_{:06}.pth'.format(self.state['epoch']))",
                            "Call"
                        ]
                    ]
                }
            },
            "set_grad_enabled_387": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_468": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_473": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_533": {
                "obj": {
                    "value": "self.get_state_dict(optimizer)",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(checkpoint_dir, 'checkpoint_{:06}.pth'.format(self.state['epoch']))",
                            "Call"
                        ],
                        [
                            "os.path.join(checkpoint_dir, 'checkpoint_{:06}.pth'.format(self.state['epoch']))",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_200": {
                "input": {
                    "value": "output_dict['expression_pred'] - input_dict['expression']",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_469": {
                "input": {
                    "value": "output_dict['expression_pred'] - input_dict['expression']",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "extern/face_expression/face_expression/smplx_model.py": {
        "torch": {
            "tensor_46": {
                "variable": {
                    "value": "inds_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "inds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "get_shifted_op_joint_ids()",
                            "Call"
                        ],
                        [
                            "np.asarray(inds, dtype=np.int)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "device": {
                    "value": "joints.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_50": {
                "variable": {
                    "value": "j_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[shift_j, torch.ones((b, j_num, 1, 1), dtype=torch.float, requires_grad=False, device=joints.device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_32": {
                "variable": {
                    "value": "j_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[shift_j, torch.ones((n, v_num, 1, 1), dtype=torch.float, requires_grad=False, device=comp_device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_62": {
                "variable": {
                    "value": "v_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[shift_v, torch.ones((n, v_num, 1, 1), dtype=torch.float, requires_grad=False, device=comp_device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_161": {
                "variable": {
                    "value": "self.lmk_faces_idx",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "lmk_faces_idx",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "smpl_dict['lmk_faces_idx']",
                            "Subscript"
                        ],
                        [
                            "self.lmk_faces_idx.unsqueeze(dim=0).expand(bs, -1).contiguous()",
                            "Call"
                        ],
                        [
                            "torch.cat([lmk_faces_idx, dyn_lmk_faces_idx], 1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "comp_device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_163": {
                "variable": {
                    "value": "self.lmk_bary_coords",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "lmk_bary_coords",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "smpl_dict['lmk_bary_coords']",
                            "Subscript"
                        ],
                        [
                            "self.lmk_bary_coords.unsqueeze(dim=0).repeat(bs, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([lmk_bary_coords.expand(bs, -1, -1), dyn_lmk_bary_coords], 1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "comp_device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_165": {
                "variable": {
                    "value": "self.dynamic_lmk_faces_idx",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "dynamic_lmk_faces_idx",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "smpl_dict['dynamic_lmk_faces_idx']",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "comp_device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_168": {
                "variable": {
                    "value": "self.dynamic_lmk_bary_coords",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "dynamic_lmk_bary_coords",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "smpl_dict['dynamic_lmk_bary_coords']",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "comp_device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_173": {
                "variable": {
                    "value": "curr_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "NECK_IDX",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "12",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "comp_device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "stack_179": {
                "variable": {
                    "value": "self.neck_kin_chain",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "self.neck_kin_chain",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_234": {
                "variable": {
                    "value": "full_pose",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[root_orient, pose_body, pose_jaw, pose_eye, pose_hand]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_237": {
                "variable": {
                    "value": "shape_components",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[betas, expression]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_238": {
                "variable": {
                    "value": "shapedirs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.shapedirs, self.exprdirs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_260": {
                "variable": {
                    "value": "lmk_faces_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[lmk_faces_idx, dyn_lmk_faces_idx]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_262": {
                "variable": {
                    "value": "lmk_bary_coords",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[lmk_bary_coords.expand(bs, -1, -1), dyn_lmk_bary_coords]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_273": {
                "variable": {
                    "value": "joints",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[joints, landmarks]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_52": {
                "input": {
                    "value": "j_h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat([shift_j, torch.ones((n, v_num, 1, 1), dtype=torch.float, requires_grad=False, device=comp_device)], dim=2)",
                            "Call"
                        ],
                        [
                            "j_h.reshape(n, v_num, 1, 4)",
                            "Call"
                        ],
                        [
                            "torch.cat([shift_j, torch.ones((b, j_num, 1, 1), dtype=torch.float, requires_grad=False, device=joints.device)], dim=2)",
                            "Call"
                        ],
                        [
                            "j_h.reshape(b, j_num, 1, 4)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "A[:, inds_t, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reshape_52": {
                "input": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "joints.shape[0]",
                            "Subscript"
                        ],
                        [
                            "pose_hand.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "j_num",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inds.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tensor_192": {
                "variable": {
                    "value": "self.left_hand_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "smpl_dict['hands_meanl']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "comp_device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_194": {
                "variable": {
                    "value": "self.right_hand_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "smpl_dict['hands_meanr']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "comp_device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_196": {
                "variable": {
                    "value": "self.left_hand_components",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "smpl_dict['hands_componentsl'][:num_pca_comps]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "comp_device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_198": {
                "variable": {
                    "value": "self.right_hand_components",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "smpl_dict['hands_componentsr'][:num_pca_comps]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "comp_device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_229": {
                "variable": {
                    "value": "pose_hand",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[left_hand_pose, right_hand_pose]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_34": {
                "input": {
                    "value": "j_h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat([shift_j, torch.ones((n, v_num, 1, 1), dtype=torch.float, requires_grad=False, device=comp_device)], dim=2)",
                            "Call"
                        ],
                        [
                            "j_h.reshape(n, v_num, 1, 4)",
                            "Call"
                        ],
                        [
                            "torch.cat([shift_j, torch.ones((b, j_num, 1, 1), dtype=torch.float, requires_grad=False, device=joints.device)], dim=2)",
                            "Call"
                        ],
                        [
                            "j_h.reshape(b, j_num, 1, 4)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "body.A[:, kinect_smpl[:, 2], :, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reshape_34": {
                "input": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "joints_output.shape[0]",
                            "Subscript"
                        ],
                        [
                            "verts_output.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "v_num",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "kinect_smpl.shape[0]",
                            "Subscript"
                        ],
                        [
                            "kinect_smplvert.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ones_50": {
                "*size": {
                    "value": "(b, j_num, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "device": {
                    "value": "joints.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_65": {
                "input": {
                    "value": "v_h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat([shift_v, torch.ones((n, v_num, 1, 1), dtype=torch.float, requires_grad=False, device=comp_device)], dim=2)",
                            "Call"
                        ],
                        [
                            "v_h.reshape(n, v_num, 1, 4)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "body.A[:, kinect_smplvert[:, 2], :, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reshape_65": {
                "input": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "joints_output.shape[0]",
                            "Subscript"
                        ],
                        [
                            "verts_output.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "v_num",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "kinect_smpl.shape[0]",
                            "Subscript"
                        ],
                        [
                            "kinect_smplvert.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tensor_120": {
                "data": {
                    "value": "v_template",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.repeat(smpl_dict['v_template'][np.newaxis], 1, axis=0)",
                            "Call"
                        ],
                        [
                            "np.repeat(v_template[np.newaxis], 1, axis=0)",
                            "Call"
                        ],
                        [
                            "self.v_template",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_122": {
                "data": {
                    "value": "smpl_dict['f'].astype(np.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_133": {
                "data": {
                    "value": "shapedirs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "smpl_dict['shapedirs'][:, :, :num_betas]",
                            "Subscript"
                        ],
                        [
                            "torch.cat([self.shapedirs, self.exprdirs], dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_137": {
                "data": {
                    "value": "exprdirs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "smpl_dict['shapedirs'][:, :, begin_shape_id:begin_shape_id + num_expressions]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_140": {
                "data": {
                    "value": "smpl_dict['J_regressor']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_152": {
                "data": {
                    "value": "kintree_table",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "smpl_dict['kintree_table'].astype(np.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "comp_device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_157": {
                "data": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "smpl_dict['weights']",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ones_32": {
                "*size": {
                    "value": "(n, v_num, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "device": {
                    "value": "comp_device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ones_63": {
                "*size": {
                    "value": "(n, v_num, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "device": {
                    "value": "comp_device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_146": {
                "data": {
                    "value": "posedirs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "smpl_dict['posedirs']",
                            "Subscript"
                        ],
                        [
                            "posedirs.reshape([posedirs.shape[0] * 3, -1]).T",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "einsum_225": {
                "equation": {
                    "value": "bi,ij->bj",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[left_hand_pose, self.left_hand_components]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "einsum_227": {
                "equation": {
                    "value": "bi,ij->bj",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[right_hand_pose, self.right_hand_components]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "extern/face_expression/face_expression/utils/angle_representation.py": {
        "torch": {
            "normalize_19": {
                "variable": {
                    "value": "b1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x[:, :, 0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "normalize_20": {
                "variable": {
                    "value": "b2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a2 - torch.einsum('bi,bi->b', b1, a2).unsqueeze(-1) * b1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cross_21": {
                "variable": {
                    "value": "b3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "b1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.normalize(a1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "b2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.normalize(a2 - torch.einsum('bi,bi->b', b1, a2).unsqueeze(-1) * b1)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_22": {
                "tensors": {
                    "value": "(b1, b2, b3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_158": {
                "variable": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "rot6d_to_rotmat(d)",
                            "Call"
                        ],
                        [
                            "d.reshape(*dst_shape)",
                            "Call"
                        ],
                        [
                            "convert_impl(d, src_rep, dst_rep)",
                            "Call"
                        ],
                        [
                            "rep_reshape_backward(d, cache)",
                            "Call"
                        ],
                        [
                            "torch.tensor(d, dtype=torch.float32, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "convert(d, src_rep, dst_rep, flatten=flatten)",
                            "Call"
                        ],
                        [
                            "d.numpy()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "einsum_20": {
                "equation": {
                    "value": "bi,bi->b",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "b1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.normalize(a1)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_20": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "extern/face_expression/face_expression/utils/common.py": {
        "torch": {
            "from_numpy_24": {
                "variable": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(d)",
                            "Call"
                        ],
                        [
                            "d.to(device)",
                            "Call"
                        ],
                        [
                            "d.type(dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_tensor_26": {
                "obj": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(d)",
                            "Call"
                        ],
                        [
                            "d.to(device)",
                            "Call"
                        ],
                        [
                            "d.type(dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_num_threads_151": {
                "int": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_152": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "manual_seed_all_153": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "DistributedSampler_14": {
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "RandomSampler_17": {
                "data_source": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "SequentialSampler_19": {
                "data_source": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "is_tensor_161": {
                "obj": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "extern/face_expression/face_expression/utils/distributed.py": {
        "torch": {
            "cat_91": {
                "variable": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(tensor, padding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_118": {
                "variable": {
                    "value": "losses",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "losses",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(losses, 0)",
                            "Call"
                        ],
                        [
                            "losses / world_size",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_10": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_13": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_20": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_23": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_48": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_110": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "extern/face_expression/face_expression/utils/logger.py": {
        "torch": {}
    },
    "extern/face_expression/face_expression/utils/misc.py": {
        "torch": {
            "zeros_19": {
                "variable": {
                    "value": "eye_pose",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "expression.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_20": {
                "variable": {
                    "value": "body_pose",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "expression.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "63",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_21": {
                "variable": {
                    "value": "hand_pose",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "expression.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_39": {
                "variable": {
                    "value": "keypoints_3d_homo",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "keypoints_3d",
                    "type": "Variable",
                    "possible_values": []
                },
                "pad": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "bmm_41": {
                "variable": {
                    "value": "keypoints_2d_homo_proj",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "keypoints_3d_homo",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.pad(keypoints_3d, pad=[0, 1], mode='constant', value=0.0)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "projection_matrix.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_64": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dataset_cls(**data_config.dataset.args)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "dataloader_args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "dataloader_args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "utils.common.get_data_sampler(dataset, shuffle=dataloader_args.shuffle, is_distributed=False)",
                    "type": "Call",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "dataloader_args.drop_last",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "extern/face_expression/face_expression/utils/vis.py": {
        "torch": {}
    },
    "extern/face_expression/scripts/vis_azure_people_with_inferer.py": {
        "torch": {}
    },
    "extern/face_expression/train.py": {
        "torch": {}
    },
    "extern/patched_smplx/examples/demo.py": {
        "torch": {
            "randn_36": {
                "variable": {
                    "value": "betas",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1, 10]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_37": {
                "variable": {
                    "value": "expression",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1, 10]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "extern/patched_smplx/patched_smplx/body_models.py": {
        "torch": {
            "no_grad_301": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_364": {
                "variable": {
                    "value": "full_pose",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[global_orient, body_pose]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_550": {
                "variable": {
                    "value": "pose_mean_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "pose_mean",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.create_mean_pose(data_struct, flat_hand_mean=flat_hand_mean)",
                            "Call"
                        ],
                        [
                            "torch.cat([global_orient_mean, body_pose_mean, self.left_hand_mean, self.right_hand_mean], dim=0)",
                            "Call"
                        ],
                        [
                            "np.concatenate([global_orient_mean, body_pose_mean, jaw_pose_mean, leye_pose_mean, reye_pose_mean, self.left_hand_mean, self.right_hand_mean], axis=0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "MethodArgument"
                        ],
                        [
                            "torch.float32",
                            "MethodArgument"
                        ],
                        [
                            "torch.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_556": {
                "variable": {
                    "value": "global_orient_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[3]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_557": {
                "variable": {
                    "value": "body_pose_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[self.NUM_BODY_JOINTS * 3]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_560": {
                "variable": {
                    "value": "pose_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[global_orient_mean, body_pose_mean, self.left_hand_mean, self.right_hand_mean]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_600": {
                "variable": {
                    "value": "full_pose",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[global_orient, body_pose, left_hand_pose, right_hand_pose]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_797": {
                "variable": {
                    "value": "global_orient_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[3]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_798": {
                "variable": {
                    "value": "body_pose_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[self.NUM_BODY_JOINTS * 3]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_800": {
                "variable": {
                    "value": "jaw_pose_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[3]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_801": {
                "variable": {
                    "value": "leye_pose_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[3]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_802": {
                "variable": {
                    "value": "reye_pose_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[3]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_903": {
                "variable": {
                    "value": "full_pose",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[global_orient, body_pose, jaw_pose, leye_pose, reye_pose, left_hand_pose, right_hand_pose]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_918": {
                "variable": {
                    "value": "shape_components",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[betas, expression]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_949": {
                "variable": {
                    "value": "joints",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[joints, landmarks]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_238": {
                "variable": {
                    "value": "global_orient",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "default_global_orient",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros([batch_size, 3], dtype=dtype)",
                            "Call"
                        ],
                        [
                            "global_orient.clone().detach()",
                            "Call"
                        ],
                        [
                            "torch.tensor(global_orient, dtype=dtype)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_530": {
                "variable": {
                    "value": "left_hand_pose_param",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "default_lhand_pose",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros([batch_size, hand_pose_dim], dtype=dtype)",
                            "Call"
                        ],
                        [
                            "torch.tensor(left_hand_pose, dtype=dtype)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_542": {
                "variable": {
                    "value": "right_hand_pose_param",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "default_rhand_pose",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros([batch_size, hand_pose_dim], dtype=dtype)",
                            "Call"
                        ],
                        [
                            "torch.tensor(right_hand_pose, dtype=dtype)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "einsum_595": {
                "variable": {
                    "value": "left_hand_pose",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bi,ij->bj",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[left_hand_pose, self.left_hand_components]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "einsum_597": {
                "variable": {
                    "value": "right_hand_pose",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bi,ij->bj",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[right_hand_pose, self.right_hand_components]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_737": {
                "variable": {
                    "value": "dynamic_lmk_faces_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "dynamic_lmk_faces_idx",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "data_struct.dynamic_lmk_faces_idx",
                            "Attribute"
                        ],
                        [
                            "torch.tensor(dynamic_lmk_faces_idx, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_744": {
                "variable": {
                    "value": "dynamic_lmk_bary_coords",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "dynamic_lmk_bary_coords",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "data_struct.dynamic_lmk_bary_coords",
                            "Attribute"
                        ],
                        [
                            "torch.tensor(dynamic_lmk_bary_coords, dtype=dtype)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "MethodArgument"
                        ],
                        [
                            "torch.float32",
                            "MethodArgument"
                        ],
                        [
                            "torch.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_750": {
                "variable": {
                    "value": "curr_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.NECK_IDX",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_762": {
                "variable": {
                    "value": "jaw_pose_param",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "default_jaw_pose",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros([batch_size, 3], dtype=dtype)",
                            "Call"
                        ],
                        [
                            "torch.tensor(jaw_pose, dtype=dtype)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_771": {
                "variable": {
                    "value": "leye_pose_param",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "default_leye_pose",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros([batch_size, 3], dtype=dtype)",
                            "Call"
                        ],
                        [
                            "torch.tensor(leye_pose, dtype=dtype)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_780": {
                "variable": {
                    "value": "reye_pose_param",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "default_reye_pose",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros([batch_size, 3], dtype=dtype)",
                            "Call"
                        ],
                        [
                            "torch.tensor(reye_pose, dtype=dtype)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_790": {
                "variable": {
                    "value": "expression_param",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "default_expression",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros([batch_size, self.NUM_EXPR_COEFFS], dtype=dtype)",
                            "Call"
                        ],
                        [
                            "torch.tensor(expression, dtype=dtype)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "einsum_898": {
                "variable": {
                    "value": "left_hand_pose",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bi,ij->bj",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[left_hand_pose, self.left_hand_components]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "einsum_900": {
                "variable": {
                    "value": "right_hand_pose",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bi,ij->bj",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[right_hand_pose, self.right_hand_components]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_936": {
                "variable": {
                    "value": "lmk_faces_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[lmk_faces_idx, dyn_lmk_faces_idx]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_938": {
                "variable": {
                    "value": "lmk_bary_coords",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[lmk_bary_coords.expand(batch_size, -1, -1), dyn_lmk_bary_coords]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_212": {
                "variable": {
                    "value": "default_betas",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[batch_size, self.NUM_BETAS]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "MethodArgument"
                        ],
                        [
                            "torch.float32",
                            "MethodArgument"
                        ],
                        [
                            "torch.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_229": {
                "variable": {
                    "value": "default_global_orient",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[batch_size, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "MethodArgument"
                        ],
                        [
                            "torch.float32",
                            "MethodArgument"
                        ],
                        [
                            "torch.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_244": {
                "variable": {
                    "value": "default_body_pose",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[batch_size, self.NUM_BODY_JOINTS * 3]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "MethodArgument"
                        ],
                        [
                            "torch.float32",
                            "MethodArgument"
                        ],
                        [
                            "torch.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_258": {
                "variable": {
                    "value": "default_transl",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[batch_size, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "MethodArgument"
                        ],
                        [
                            "torch.float32",
                            "MethodArgument"
                        ],
                        [
                            "torch.float32",
                            "MethodArgument"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_262": {
                "variable": {
                    "value": "default_transl",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "transl",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.transl",
                            "Attribute"
                        ],
                        [
                            "self.transl",
                            "Attribute"
                        ],
                        [
                            "self.transl",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "MethodArgument"
                        ],
                        [
                            "torch.float32",
                            "MethodArgument"
                        ],
                        [
                            "torch.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_305": {
                "variable": {
                    "value": "param[:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "params_dict[param_name]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_525": {
                "variable": {
                    "value": "default_lhand_pose",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[batch_size, hand_pose_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "MethodArgument"
                        ],
                        [
                            "torch.float32",
                            "MethodArgument"
                        ],
                        [
                            "torch.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_528": {
                "variable": {
                    "value": "default_lhand_pose",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "left_hand_pose",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "left_hand_pose if left_hand_pose is not None else self.left_hand_pose",
                            "IfExp"
                        ],
                        [
                            "torch.einsum('bi,ij->bj', [left_hand_pose, self.left_hand_components])",
                            "Call"
                        ],
                        [
                            "left_hand_pose if left_hand_pose is not None else self.left_hand_pose",
                            "IfExp"
                        ],
                        [
                            "torch.einsum('bi,ij->bj', [left_hand_pose, self.left_hand_components])",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "MethodArgument"
                        ],
                        [
                            "torch.float32",
                            "MethodArgument"
                        ],
                        [
                            "torch.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_537": {
                "variable": {
                    "value": "default_rhand_pose",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[batch_size, hand_pose_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "MethodArgument"
                        ],
                        [
                            "torch.float32",
                            "MethodArgument"
                        ],
                        [
                            "torch.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_540": {
                "variable": {
                    "value": "default_rhand_pose",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "right_hand_pose",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "right_hand_pose if right_hand_pose is not None else self.right_hand_pose",
                            "IfExp"
                        ],
                        [
                            "torch.einsum('bi,ij->bj', [right_hand_pose, self.right_hand_components])",
                            "Call"
                        ],
                        [
                            "right_hand_pose if right_hand_pose is not None else self.right_hand_pose",
                            "IfExp"
                        ],
                        [
                            "torch.einsum('bi,ij->bj', [right_hand_pose, self.right_hand_components])",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "MethodArgument"
                        ],
                        [
                            "torch.float32",
                            "MethodArgument"
                        ],
                        [
                            "torch.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_729": {
                "data": {
                    "value": "lmk_faces_idx",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "data_struct.lmk_faces_idx",
                            "Attribute"
                        ],
                        [
                            "self.lmk_faces_idx.unsqueeze(dim=0).expand(batch_size, -1).contiguous()",
                            "Call"
                        ],
                        [
                            "torch.cat([lmk_faces_idx, dyn_lmk_faces_idx], 1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_732": {
                "data": {
                    "value": "lmk_bary_coords",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "data_struct.lmk_bary_coords",
                            "Attribute"
                        ],
                        [
                            "self.lmk_bary_coords.unsqueeze(dim=0).repeat(self.batch_size, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([lmk_bary_coords.expand(batch_size, -1, -1), dyn_lmk_bary_coords], 1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "MethodArgument"
                        ],
                        [
                            "torch.float32",
                            "MethodArgument"
                        ],
                        [
                            "torch.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_759": {
                "variable": {
                    "value": "default_jaw_pose",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[batch_size, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "MethodArgument"
                        ],
                        [
                            "torch.float32",
                            "MethodArgument"
                        ],
                        [
                            "torch.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_761": {
                "variable": {
                    "value": "default_jaw_pose",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "jaw_pose",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "jaw_pose if jaw_pose is not None else self.jaw_pose",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "MethodArgument"
                        ],
                        [
                            "torch.float32",
                            "MethodArgument"
                        ],
                        [
                            "torch.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_768": {
                "variable": {
                    "value": "default_leye_pose",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[batch_size, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "MethodArgument"
                        ],
                        [
                            "torch.float32",
                            "MethodArgument"
                        ],
                        [
                            "torch.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_770": {
                "variable": {
                    "value": "default_leye_pose",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "leye_pose",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "leye_pose if leye_pose is not None else self.leye_pose",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "MethodArgument"
                        ],
                        [
                            "torch.float32",
                            "MethodArgument"
                        ],
                        [
                            "torch.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_777": {
                "variable": {
                    "value": "default_reye_pose",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[batch_size, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "MethodArgument"
                        ],
                        [
                            "torch.float32",
                            "MethodArgument"
                        ],
                        [
                            "torch.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_779": {
                "variable": {
                    "value": "default_reye_pose",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "reye_pose",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "reye_pose if reye_pose is not None else self.reye_pose",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "MethodArgument"
                        ],
                        [
                            "torch.float32",
                            "MethodArgument"
                        ],
                        [
                            "torch.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_786": {
                "variable": {
                    "value": "default_expression",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[batch_size, self.NUM_EXPR_COEFFS]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "MethodArgument"
                        ],
                        [
                            "torch.float32",
                            "MethodArgument"
                        ],
                        [
                            "torch.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_789": {
                "variable": {
                    "value": "default_expression",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "expression",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "expression if expression is not None else self.expression",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "MethodArgument"
                        ],
                        [
                            "torch.float32",
                            "MethodArgument"
                        ],
                        [
                            "torch.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_218": {
                "variable": {
                    "value": "default_betas",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "betas",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "betas if betas is not None else self.betas",
                            "IfExp"
                        ],
                        [
                            "betas.expand(num_repeats, -1)",
                            "Call"
                        ],
                        [
                            "betas if betas is not None else self.betas",
                            "IfExp"
                        ],
                        [
                            "betas if betas is not None else self.betas",
                            "IfExp"
                        ],
                        [
                            "betas.expand(scale, -1)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "MethodArgument"
                        ],
                        [
                            "torch.float32",
                            "MethodArgument"
                        ],
                        [
                            "torch.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Parameter_221": {
                "data": {
                    "value": "default_betas",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros([batch_size, self.NUM_BETAS], dtype=dtype)",
                            "Call"
                        ],
                        [
                            "betas.clone().detach()",
                            "Call"
                        ],
                        [
                            "torch.tensor(betas, dtype=dtype)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_235": {
                "variable": {
                    "value": "default_global_orient",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "global_orient",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "nn.Parameter(default_global_orient, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "global_orient if global_orient is not None else self.global_orient",
                            "IfExp"
                        ],
                        [
                            "global_orient if global_orient is not None else self.global_orient",
                            "IfExp"
                        ],
                        [
                            "global_orient if global_orient is not None else self.global_orient",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "MethodArgument"
                        ],
                        [
                            "torch.float32",
                            "MethodArgument"
                        ],
                        [
                            "torch.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_250": {
                "variable": {
                    "value": "default_body_pose",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "body_pose",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "body_pose if body_pose is not None else self.body_pose",
                            "IfExp"
                        ],
                        [
                            "body_pose if body_pose is not None else self.body_pose",
                            "IfExp"
                        ],
                        [
                            "body_pose if body_pose is not None else self.body_pose",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "MethodArgument"
                        ],
                        [
                            "torch.float32",
                            "MethodArgument"
                        ],
                        [
                            "torch.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Parameter_254": {
                "data": {
                    "value": "default_body_pose",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros([batch_size, self.NUM_BODY_JOINTS * 3], dtype=dtype)",
                            "Call"
                        ],
                        [
                            "body_pose.clone().detach()",
                            "Call"
                        ],
                        [
                            "torch.tensor(body_pose, dtype=dtype)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_265": {
                "data": {
                    "value": "default_transl",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros([batch_size, 3], dtype=dtype, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "torch.tensor(transl, dtype=dtype)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_501": {
                "data": {
                    "value": "left_hand_components",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "data_struct.hands_componentsl[:num_pca_comps]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "MethodArgument"
                        ],
                        [
                            "torch.float32",
                            "MethodArgument"
                        ],
                        [
                            "torch.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_504": {
                "data": {
                    "value": "right_hand_components",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "data_struct.hands_componentsr[:num_pca_comps]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "MethodArgument"
                        ],
                        [
                            "torch.float32",
                            "MethodArgument"
                        ],
                        [
                            "torch.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "stack_755": {
                "tensors": {
                    "value": "neck_kin_chain",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "extern/patched_smplx/patched_smplx/lbs.py": {
        "torch": {
            "eye_49": {
                "variable": {
                    "value": "rel_rot_mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "vertices.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "MethodArgument"
                        ],
                        [
                            "torch.float32",
                            "MethodArgument"
                        ],
                        [
                            "torch.float32",
                            "MethodArgument"
                        ],
                        [
                            "torch.float32",
                            "MethodArgument"
                        ],
                        [
                            "torch.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reshape_49": {
                "variable": {
                    "value": "rel_rot_mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_54": {
                "variable": {
                    "value": "neck_cam_loc_len",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "neck_cam_loc",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "-torch.bmm(torch.transpose(rel_rot_mat, 1, 2), neck_joint_loc.reshape(-1, 3, 1)).reshape(-1, 3)",
                            "UnaryOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_54": {
                "variable": {
                    "value": "neck_cam_loc_len",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "round_61": {
                "variable": {
                    "value": "y_rot_angle",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.clamp(y_ang * 180.0 / np.pi, max=39)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_73": {
                "variable": {
                    "value": "dyn_lmk_faces_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dynamic_lmk_faces_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "y_rot_angle",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.round(torch.clamp(y_ang * 180.0 / np.pi, max=39)).to(dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "neg_mask * neg_vals + (1 - neg_mask) * y_rot_angle",
                            "BinOp"
                        ],
                        [
                            "torch.round(torch.clamp(-rot_mat_to_euler(rel_rot_mat) * 180.0 / np.pi, max=39)).to(dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "neg_mask * neg_vals + (1 - neg_mask) * y_rot_angle",
                            "BinOp"
                        ]
                    ]
                }
            },
            "index_select_75": {
                "variable": {
                    "value": "dyn_lmk_b_coords",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dynamic_lmk_b_coords",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "y_rot_angle",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.round(torch.clamp(y_ang * 180.0 / np.pi, max=39)).to(dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "neg_mask * neg_vals + (1 - neg_mask) * y_rot_angle",
                            "BinOp"
                        ],
                        [
                            "torch.round(torch.clamp(-rot_mat_to_euler(rel_rot_mat) * 180.0 / np.pi, max=39)).to(dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "neg_mask * neg_vals + (1 - neg_mask) * y_rot_angle",
                            "BinOp"
                        ]
                    ]
                }
            },
            "eye_132": {
                "variable": {
                    "value": "rel_rot_mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "vertices.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "MethodArgument"
                        ],
                        [
                            "torch.float32",
                            "MethodArgument"
                        ],
                        [
                            "torch.float32",
                            "MethodArgument"
                        ],
                        [
                            "torch.float32",
                            "MethodArgument"
                        ],
                        [
                            "torch.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reshape_132": {
                "variable": {
                    "value": "rel_rot_mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "round_137": {
                "variable": {
                    "value": "y_rot_angle",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.clamp(-rot_mat_to_euler(rel_rot_mat) * 180.0 / np.pi, max=39)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_148": {
                "variable": {
                    "value": "dyn_lmk_faces_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dynamic_lmk_faces_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "y_rot_angle",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.round(torch.clamp(y_ang * 180.0 / np.pi, max=39)).to(dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "neg_mask * neg_vals + (1 - neg_mask) * y_rot_angle",
                            "BinOp"
                        ],
                        [
                            "torch.round(torch.clamp(-rot_mat_to_euler(rel_rot_mat) * 180.0 / np.pi, max=39)).to(dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "neg_mask * neg_vals + (1 - neg_mask) * y_rot_angle",
                            "BinOp"
                        ]
                    ]
                }
            },
            "index_select_150": {
                "variable": {
                    "value": "dyn_lmk_b_coords",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dynamic_lmk_b_coords",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "y_rot_angle",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.round(torch.clamp(y_ang * 180.0 / np.pi, max=39)).to(dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "neg_mask * neg_vals + (1 - neg_mask) * y_rot_angle",
                            "BinOp"
                        ],
                        [
                            "torch.round(torch.clamp(-rot_mat_to_euler(rel_rot_mat) * 180.0 / np.pi, max=39)).to(dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "neg_mask * neg_vals + (1 - neg_mask) * y_rot_angle",
                            "BinOp"
                        ]
                    ]
                }
            },
            "index_select_182": {
                "variable": {
                    "value": "lmk_faces",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "faces",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "lmk_faces_idx.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "einsum_191": {
                "variable": {
                    "value": "landmarks",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "blfi,blf->bli",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[lmk_vertices, lmk_bary_coords]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "eye_250": {
                "variable": {
                    "value": "ident",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "MethodArgument"
                        ],
                        [
                            "torch.float32",
                            "MethodArgument"
                        ],
                        [
                            "torch.float32",
                            "MethodArgument"
                        ],
                        [
                            "torch.float32",
                            "MethodArgument"
                        ],
                        [
                            "torch.float32",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "vertices.device",
                            "Attribute"
                        ],
                        [
                            "betas.device",
                            "Attribute"
                        ],
                        [
                            "rot_vecs.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "matmul_278": {
                "variable": {
                    "value": "T",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "lbs_weights.unsqueeze(dim=0).expand([batch_size, -1, -1])",
                            "Call"
                        ],
                        [
                            "np.tile(lbs_weights.reshape(1, n_v, n_j), (batch_size, 1, 1))",
                            "Call"
                        ],
                        [
                            "np.tile(lbs_weights.reshape(1, n_v, n_j), (batch_size, 1, 1))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "A.view(batch_size, num_joints, 16)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_281": {
                "variable": {
                    "value": "homogen_coord",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[batch_size, v_posed.shape[1], 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "MethodArgument"
                        ],
                        [
                            "torch.float32",
                            "MethodArgument"
                        ],
                        [
                            "torch.float32",
                            "MethodArgument"
                        ],
                        [
                            "torch.float32",
                            "MethodArgument"
                        ],
                        [
                            "torch.float32",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "vertices.device",
                            "Attribute"
                        ],
                        [
                            "betas.device",
                            "Attribute"
                        ],
                        [
                            "rot_vecs.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cat_283": {
                "variable": {
                    "value": "v_posed_homo",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[v_posed, homogen_coord]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_284": {
                "variable": {
                    "value": "v_homo",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "T",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.matmul(W, A.view(batch_size, num_joints, 16)).view(batch_size, -1, 4, 4)",
                            "Call"
                        ],
                        [
                            "np.zeros((b, 4, 4), dtype=R.dtype)",
                            "Call"
                        ],
                        [
                            "np.matmul(W, A.reshape(batch_size, num_joints, 16)).reshape((batch_size, -1, 4, 4))",
                            "Call"
                        ],
                        [
                            "np.matmul(W, A.reshape(batch_size, num_joints, 16)).reshape((batch_size, -1, 4, 4))",
                            "Call"
                        ],
                        [
                            "np.matmul(W, A.reshape(batch_size, num_joints, 16)).reshape((batch_size, -1, 4, 4))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.unsqueeze(v_posed_homo, dim=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "einsum_351": {
                "variable": {
                    "value": "blend_shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bl,mkl->bmk",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[betas, shape_disps]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "norm_398": {
                "variable": {
                    "value": "angle",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rot_vecs + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "unsqueeze_401": {
                "variable": {
                    "value": "cos",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cos(angle)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_402": {
                "variable": {
                    "value": "sin",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sin(angle)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_405": {
                "variable": {
                    "value": "(rx, ry, rz)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "rot_dir",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "rot_vecs / angle",
                            "BinOp"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_406": {
                "variable": {
                    "value": "K",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "MethodArgument"
                        ],
                        [
                            "torch.float32",
                            "MethodArgument"
                        ],
                        [
                            "torch.float32",
                            "MethodArgument"
                        ],
                        [
                            "torch.float32",
                            "MethodArgument"
                        ],
                        [
                            "torch.float32",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "vertices.device",
                            "Attribute"
                        ],
                        [
                            "betas.device",
                            "Attribute"
                        ],
                        [
                            "rot_vecs.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_408": {
                "variable": {
                    "value": "zeros",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "MethodArgument"
                        ],
                        [
                            "torch.float32",
                            "MethodArgument"
                        ],
                        [
                            "torch.float32",
                            "MethodArgument"
                        ],
                        [
                            "torch.float32",
                            "MethodArgument"
                        ],
                        [
                            "torch.float32",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "vertices.device",
                            "Attribute"
                        ],
                        [
                            "betas.device",
                            "Attribute"
                        ],
                        [
                            "rot_vecs.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cat_409": {
                "variable": {
                    "value": "K",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[zeros, -rz, ry, rz, zeros, -rx, -ry, rx, zeros]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_412": {
                "variable": {
                    "value": "ident",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "MethodArgument"
                        ],
                        [
                            "torch.float32",
                            "MethodArgument"
                        ],
                        [
                            "torch.float32",
                            "MethodArgument"
                        ],
                        [
                            "torch.float32",
                            "MethodArgument"
                        ],
                        [
                            "torch.float32",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "vertices.device",
                            "Attribute"
                        ],
                        [
                            "betas.device",
                            "Attribute"
                        ],
                        [
                            "rot_vecs.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "unsqueeze_412": {
                "variable": {
                    "value": "ident",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_503": {
                "variable": {
                    "value": "joints",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "joints",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(joints, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_523": {
                "variable": {
                    "value": "transforms",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "transform_chain",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[transforms_mat[:, 0]]",
                            "List"
                        ],
                        [
                            "np.zeros((b, parents.shape[0], 4, 4), dtype=rot_mats.dtype)",
                            "Call"
                        ],
                        [
                            "np.copy(transforms_mat)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_533": {
                "variable": {
                    "value": "joints_homogen",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "joints",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(joints, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "[0, 0, 0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "index_select_39": {
                "variable": {
                    "value": "aa_pose",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pose.view(batch_size, -1, 3)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "neck_kin_chain",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "index_select_44": {
                "variable": {
                    "value": "rot_mats",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pose.view(batch_size, -1, 3, 3)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "neck_kin_chain",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "bmm_52": {
                "variable": {
                    "value": "rel_rot_mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rot_mats[:, idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mat2": {
                    "value": "rel_rot_mat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.eye(3, device=vertices.device, dtype=dtype).reshape(1, 3, 3).repeat(b, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(rot_mats[:, idx], rel_rot_mat)",
                            "Call"
                        ],
                        [
                            "torch.eye(3, device=vertices.device, dtype=dtype).reshape(1, 3, 3).repeat(b, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(rot_mats[:, idx], rel_rot_mat)",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_122": {
                "variable": {
                    "value": "aa_pose",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pose.view(batch_size, -1, 3)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "neck_kin_chain",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "index_select_127": {
                "variable": {
                    "value": "rot_mats",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pose.view(batch_size, -1, 3, 3)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "neck_kin_chain",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "bmm_135": {
                "variable": {
                    "value": "rel_rot_mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rot_mats[:, idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mat2": {
                    "value": "rel_rot_mat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.eye(3, device=vertices.device, dtype=dtype).reshape(1, 3, 3).repeat(b, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(rot_mats[:, idx], rel_rot_mat)",
                            "Call"
                        ],
                        [
                            "torch.eye(3, device=vertices.device, dtype=dtype).reshape(1, 3, 3).repeat(b, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(rot_mats[:, idx], rel_rot_mat)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_257": {
                "variable": {
                    "value": "pose_offsets",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pose_feature",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(rot_mats[:, 1:, :, :] - ident).view([batch_size, -1])",
                            "Call"
                        ],
                        [
                            "pose[:, 1:].view(batch_size, -1, 3, 3) - ident",
                            "BinOp"
                        ],
                        [
                            "(rot_mats[:, 1:, :, :] - np.tile(np.eye(3).reshape(1, 1, 3, 3), (batch_size, n_j - 1, 1, 1))).reshape((batch_size, -1))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "posedirs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "posedirs[:, inds]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "matmul_263": {
                "variable": {
                    "value": "pose_offsets",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pose_feature.view(batch_size, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "posedirs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "posedirs[:, inds]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "einsum_308": {
                "equation": {
                    "value": "bik,ji->bjk",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[vertices, J_regressor]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_459": {
                "tensors": {
                    "value": "[F.pad(R, [0, 0, 0, 1]), F.pad(t, [0, 0, 0, 1], value=1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_519": {
                "variable": {
                    "value": "curr_res",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "transform_chain[parents[i]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "transforms_mat[:, i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "bmm_53": {
                "input": {
                    "value": "torch.transpose(rel_rot_mat, 1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "neck_joint_loc.reshape(-1, 3, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_53": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "atan2_56": {
                "input": {
                    "value": "neck_cam_dir[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "neck_cam_dir[:, 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "arange_185": {
                "start": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "vertices.shape[0]",
                            "Subscript"
                        ],
                        [
                            "vertices.shape[0]",
                            "Subscript"
                        ],
                        [
                            "max(betas.shape[0], pose.shape[0])",
                            "Call"
                        ],
                        [
                            "rot_vecs.shape[0]",
                            "Subscript"
                        ],
                        [
                            "pose_body.shape[0]",
                            "Subscript"
                        ],
                        [
                            "betas.shape[0]",
                            "Subscript"
                        ],
                        [
                            "pose.shape[0]",
                            "Subscript"
                        ],
                        [
                            "pose.shape[0]",
                            "Subscript"
                        ],
                        [
                            "pose.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "vertices.device",
                            "Attribute"
                        ],
                        [
                            "betas.device",
                            "Attribute"
                        ],
                        [
                            "rot_vecs.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "unsqueeze_284": {
                "input": {
                    "value": "v_posed_homo",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat([v_posed, homogen_coord], dim=2)",
                            "Call"
                        ],
                        [
                            "np.concatenate([v_posed, homogen_coord], axis=2)",
                            "Call"
                        ],
                        [
                            "np.concatenate([v_posed, homogen_coord], axis=2)",
                            "Call"
                        ],
                        [
                            "np.concatenate([v_posed, homogen_coord], axis=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cos_401": {
                "input": {
                    "value": "angle",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.norm(rot_vecs + 1e-08, dim=1, keepdim=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "sin_402": {
                "input": {
                    "value": "angle",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.norm(rot_vecs + 1e-08, dim=1, keepdim=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_535": {
                "input": {
                    "value": "torch.matmul(transforms, joints_homogen)",
                    "type": "Call",
                    "possible_values": []
                },
                "pad": {
                    "value": "[3, 0, 0, 0, 0, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "bmm_413": {
                "input": {
                    "value": "K",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros((batch_size, 3, 3), dtype=dtype, device=device)",
                            "Call"
                        ],
                        [
                            "torch.cat([zeros, -rz, ry, rz, zeros, -rx, -ry, rx, zeros], dim=1).view((batch_size, 3, 3))",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "K",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros((batch_size, 3, 3), dtype=dtype, device=device)",
                            "Call"
                        ],
                        [
                            "torch.cat([zeros, -rz, ry, rz, zeros, -rx, -ry, rx, zeros], dim=1).view((batch_size, 3, 3))",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_459": {
                "input": {
                    "value": "R",
                    "type": "Variable",
                    "possible_values": []
                },
                "pad": {
                    "value": "[0, 0, 0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_460": {
                "input": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": []
                },
                "pad": {
                    "value": "[0, 0, 0, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_536": {
                "input": {
                    "value": "transforms",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.stack(transform_chain, dim=1)",
                            "Call"
                        ],
                        [
                            "transform_chain",
                            "Name"
                        ],
                        [
                            "transform_chain",
                            "Name"
                        ]
                    ]
                },
                "other": {
                    "value": "joints_homogen",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.pad(joints, [0, 0, 0, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_62": {
                "input": {
                    "value": "y_ang * 180.0 / np.pi",
                    "type": "BinOp",
                    "possible_values": []
                },
                "max": {
                    "value": "39",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_138": {
                "input": {
                    "value": "-rot_mat_to_euler(rel_rot_mat) * 180.0 / np.pi",
                    "type": "BinOp",
                    "possible_values": []
                },
                "max": {
                    "value": "39",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_53": {
                "input": {
                    "value": "rel_rot_mat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.eye(3, device=vertices.device, dtype=dtype).reshape(1, 3, 3).repeat(b, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(rot_mats[:, idx], rel_rot_mat)",
                            "Call"
                        ],
                        [
                            "torch.eye(3, device=vertices.device, dtype=dtype).reshape(1, 3, 3).repeat(b, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(rot_mats[:, idx], rel_rot_mat)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "extern/patched_smplx/patched_smplx/utils.py": {
        "torch": {
            "sqrt_46": {
                "variable": {
                    "value": "sy",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rot_mats[:, 0, 0] * rot_mats[:, 0, 0] + rot_mats[:, 1, 0] * rot_mats[:, 1, 0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "atan2_48": {
                "input": {
                    "value": "-rot_mats[:, 2, 0]",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "other": {
                    "value": "sy",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sqrt(rot_mats[:, 0, 0] * rot_mats[:, 0, 0] + rot_mats[:, 1, 0] * rot_mats[:, 1, 0])",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_27": {
                "data": {
                    "value": "array",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "array.todense()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "MethodArgument"
                        ],
                        [
                            "np.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "extern/patched_smplx/patched_smplx/vertex_joint_selector.py": {
        "torch": {
            "index_select_74": {
                "variable": {
                    "value": "extra_joints",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vertices",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "self.extra_joints_idxs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_75": {
                "variable": {
                    "value": "joints",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[joints, extra_joints]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "extern/patched_smplx/test_diff.py": {
        "torch": {
            "tensor_91": {
                "variable": {
                    "value": "betas_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "betas",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.zeros((batch_size, num_betas))",
                            "Call"
                        ],
                        [
                            "np.zeros((batch_size, num_betas))",
                            "Call"
                        ],
                        [
                            "np.zeros((batch_size, num_betas))",
                            "Call"
                        ],
                        [
                            "np.zeros((batch_size, num_betas))",
                            "Call"
                        ],
                        [
                            "np.zeros((batch_size, num_betas))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_92": {
                "variable": {
                    "value": "global_orient",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "pose[:, :3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_93": {
                "variable": {
                    "value": "body_pose",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "pose[:, 3:3 * (SMPLX.NUM_BODY_JOINTS + 1)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_94": {
                "variable": {
                    "value": "lh_pose",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "pose[:, 3 * (SMPLX.NUM_BODY_JOINTS + 1):3 * (SMPLX.NUM_BODY_JOINTS + SMPLX.NUM_HAND_JOINTS + 1)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_97": {
                "variable": {
                    "value": "rh_pose",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "pose[:, 3 * (SMPLX.NUM_BODY_JOINTS + SMPLX.NUM_HAND_JOINTS + 1):3 * (SMPLX.NUM_BODY_JOINTS + 2 * SMPLX.NUM_HAND_JOINTS + 1)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_213": {
                "variable": {
                    "value": "betas_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "betas",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.zeros((batch_size, num_betas))",
                            "Call"
                        ],
                        [
                            "np.zeros((batch_size, num_betas))",
                            "Call"
                        ],
                        [
                            "np.zeros((batch_size, num_betas))",
                            "Call"
                        ],
                        [
                            "np.zeros((batch_size, num_betas))",
                            "Call"
                        ],
                        [
                            "np.zeros((batch_size, num_betas))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_214": {
                "variable": {
                    "value": "global_orient",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "pose[:, :3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_215": {
                "variable": {
                    "value": "body_pose",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "pose[:, 3:3 * (SMPLX.NUM_BODY_JOINTS + 1)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_216": {
                "variable": {
                    "value": "lh_pose",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "pose[:, 3 * (SMPLX.NUM_BODY_JOINTS + 1):3 * (SMPLX.NUM_BODY_JOINTS + SMPLX.NUM_HAND_JOINTS + 1)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_217": {
                "variable": {
                    "value": "rh_pose",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "pose[:, 3 * (SMPLX.NUM_BODY_JOINTS + SMPLX.NUM_HAND_JOINTS + 1):3 * (SMPLX.NUM_BODY_JOINTS + 2 * SMPLX.NUM_HAND_JOINTS + 1)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_388": {
                "variable": {
                    "value": "betas_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "betas",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.zeros((batch_size, num_betas))",
                            "Call"
                        ],
                        [
                            "np.zeros((batch_size, num_betas))",
                            "Call"
                        ],
                        [
                            "np.zeros((batch_size, num_betas))",
                            "Call"
                        ],
                        [
                            "np.zeros((batch_size, num_betas))",
                            "Call"
                        ],
                        [
                            "np.zeros((batch_size, num_betas))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_389": {
                "variable": {
                    "value": "global_orient",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "pose[:, :3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_390": {
                "variable": {
                    "value": "body_pose",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "pose[:, 3:3 * (SMPLX.NUM_BODY_JOINTS + 1)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_391": {
                "variable": {
                    "value": "lh_pose",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "pose[:, 3 * (SMPLX.NUM_BODY_JOINTS + 1):3 * (SMPLX.NUM_BODY_JOINTS + SMPLX.NUM_HAND_JOINTS + 1)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_392": {
                "variable": {
                    "value": "rh_pose",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "pose[:, 3 * (SMPLX.NUM_BODY_JOINTS + SMPLX.NUM_HAND_JOINTS + 1):3 * (SMPLX.NUM_BODY_JOINTS + 2 * SMPLX.NUM_HAND_JOINTS + 1)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_547": {
                "variable": {
                    "value": "betas_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "betas",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.zeros((batch_size, num_betas))",
                            "Call"
                        ],
                        [
                            "np.zeros((batch_size, num_betas))",
                            "Call"
                        ],
                        [
                            "np.zeros((batch_size, num_betas))",
                            "Call"
                        ],
                        [
                            "np.zeros((batch_size, num_betas))",
                            "Call"
                        ],
                        [
                            "np.zeros((batch_size, num_betas))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_548": {
                "variable": {
                    "value": "global_orient",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "pose[:, :3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_549": {
                "variable": {
                    "value": "body_pose",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "pose[:, 3:3 * (SMPLX.NUM_BODY_JOINTS + 1)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_550": {
                "variable": {
                    "value": "lh_pose",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "pose[:, 3 * (SMPLX.NUM_BODY_JOINTS + 1):3 * (SMPLX.NUM_BODY_JOINTS + SMPLX.NUM_HAND_JOINTS + 1)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_551": {
                "variable": {
                    "value": "rh_pose",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "pose[:, 3 * (SMPLX.NUM_BODY_JOINTS + SMPLX.NUM_HAND_JOINTS + 1):3 * (SMPLX.NUM_BODY_JOINTS + 2 * SMPLX.NUM_HAND_JOINTS + 1)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_752": {
                "variable": {
                    "value": "betas_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "betas",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.zeros((batch_size, num_betas))",
                            "Call"
                        ],
                        [
                            "np.zeros((batch_size, num_betas))",
                            "Call"
                        ],
                        [
                            "np.zeros((batch_size, num_betas))",
                            "Call"
                        ],
                        [
                            "np.zeros((batch_size, num_betas))",
                            "Call"
                        ],
                        [
                            "np.zeros((batch_size, num_betas))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_753": {
                "variable": {
                    "value": "global_orient",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "pose[:, :3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_754": {
                "variable": {
                    "value": "body_pose",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "pose[:, 3:3 * (SMPLX.NUM_BODY_JOINTS + 1)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_755": {
                "variable": {
                    "value": "lh_pose",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "pose[:, 3 * (SMPLX.NUM_BODY_JOINTS + 1):3 * (SMPLX.NUM_BODY_JOINTS + SMPLX.NUM_HAND_JOINTS + 1)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_756": {
                "variable": {
                    "value": "rh_pose",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "pose[:, 3 * (SMPLX.NUM_BODY_JOINTS + SMPLX.NUM_HAND_JOINTS + 1):3 * (SMPLX.NUM_BODY_JOINTS + 2 * SMPLX.NUM_HAND_JOINTS + 1)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_920": {
                "variable": {
                    "value": "betas_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "betas",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.zeros((batch_size, num_betas))",
                            "Call"
                        ],
                        [
                            "np.zeros((batch_size, num_betas))",
                            "Call"
                        ],
                        [
                            "np.zeros((batch_size, num_betas))",
                            "Call"
                        ],
                        [
                            "np.zeros((batch_size, num_betas))",
                            "Call"
                        ],
                        [
                            "np.zeros((batch_size, num_betas))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_921": {
                "variable": {
                    "value": "global_orient",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "pose[:, :3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_922": {
                "variable": {
                    "value": "body_pose",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "pose[:, 3:3 * (SMPLX.NUM_BODY_JOINTS + 1)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_923": {
                "variable": {
                    "value": "lh_pose",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "pose[:, 3 * (SMPLX.NUM_BODY_JOINTS + 1):3 * (SMPLX.NUM_BODY_JOINTS + SMPLX.NUM_HAND_JOINTS + 1)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_924": {
                "variable": {
                    "value": "rh_pose",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "pose[:, 3 * (SMPLX.NUM_BODY_JOINTS + SMPLX.NUM_HAND_JOINTS + 1):3 * (SMPLX.NUM_BODY_JOINTS + 2 * SMPLX.NUM_HAND_JOINTS + 1)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "extern/smplx_kinect/smplx_kinect/common/angle_representation.py": {
        "torch": {
            "normalize_25": {
                "variable": {
                    "value": "b1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x[:, :, 0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "normalize_26": {
                "variable": {
                    "value": "b2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a2 - torch.einsum('bi,bi->b', b1, a2).unsqueeze(-1) * b1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cross_27": {
                "variable": {
                    "value": "b3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "b1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.normalize(a1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "b2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.normalize(a2 - torch.einsum('bi,bi->b', b1, a2).unsqueeze(-1) * b1)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_28": {
                "tensors": {
                    "value": "(b1, b2, b3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_164": {
                "variable": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "rot6d_to_rotmat(d)",
                            "Call"
                        ],
                        [
                            "d.reshape(*dst_shape)",
                            "Call"
                        ],
                        [
                            "convert_impl(d, src_rep, dst_rep)",
                            "Call"
                        ],
                        [
                            "rep_reshape_backward(d, cache)",
                            "Call"
                        ],
                        [
                            "torch.tensor(d, dtype=torch.float32, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "convert(d, src_rep, dst_rep, multiple=multiple)",
                            "Call"
                        ],
                        [
                            "d.numpy()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "einsum_26": {
                "equation": {
                    "value": "bi,bi->b",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "b1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.normalize(a1)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_26": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "extern/smplx_kinect/smplx_kinect/common/avakhitov_utils.py": {
        "torch": {
            "norm_149": {
                "variable": {
                    "value": "angle",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rot_vecs + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "unsqueeze_152": {
                "variable": {
                    "value": "cos",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cos(angle)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_153": {
                "variable": {
                    "value": "sin",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sin(angle)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_156": {
                "variable": {
                    "value": "(rx, ry, rz)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "rot_dir",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "rot_vecs / angle",
                            "BinOp"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_157": {
                "variable": {
                    "value": "K",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "rot_vecs.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_159": {
                "variable": {
                    "value": "zeros",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "rot_vecs.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cat_160": {
                "variable": {
                    "value": "K",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[zeros, -rz, ry, rz, zeros, -rx, -ry, rx, zeros]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_163": {
                "variable": {
                    "value": "ident",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "rot_vecs.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "unsqueeze_163": {
                "variable": {
                    "value": "ident",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_50": {
                "variable": {
                    "value": "pose_body_vp",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "poses[:, 0:32]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cos_152": {
                "input": {
                    "value": "angle",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.norm(rot_vecs + 1e-08, dim=1, keepdim=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "sin_153": {
                "input": {
                    "value": "angle",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.norm(rot_vecs + 1e-08, dim=1, keepdim=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_164": {
                "input": {
                    "value": "K",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros((batch_size, 3, 3), dtype=dtype, device=device)",
                            "Call"
                        ],
                        [
                            "torch.cat([zeros, -rz, ry, rz, zeros, -rx, -ry, rx, zeros], dim=1).view((batch_size, 3, 3))",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "K",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros((batch_size, 3, 3), dtype=dtype, device=device)",
                            "Call"
                        ],
                        [
                            "torch.cat([zeros, -rz, ry, rz, zeros, -rx, -ry, rx, zeros], dim=1).view((batch_size, 3, 3))",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_117": {
                "variable": {
                    "value": "pose_body_vp",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "loaded[:, 0:32]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "extern/smplx_kinect/smplx_kinect/common/body_models.py": {
        "torch": {
            "tensor_9": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "einsum_132": {
                "variable": {
                    "value": "hand_pose",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bi,ij->bj",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[pca, hand_components]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "device_110": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "extern/smplx_kinect/smplx_kinect/common/concater.py": {
        "torch": {
            "cat_60": {
                "tensors": {
                    "value": "ds",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "ax",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "features_axis_is_np(is_np, is_seq=is_seq)",
                            "Call"
                        ],
                        [
                            "features_axis(ds[0], is_seq=is_seq)",
                            "Call"
                        ],
                        [
                            "features_axis(d, is_seq=is_seq)",
                            "Call"
                        ]
                    ]
                }
            },
            "narrow_77": {
                "input": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "ax",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "features_axis_is_np(is_np, is_seq=is_seq)",
                            "Call"
                        ],
                        [
                            "features_axis(ds[0], is_seq=is_seq)",
                            "Call"
                        ],
                        [
                            "features_axis(d, is_seq=is_seq)",
                            "Call"
                        ]
                    ]
                },
                "start": {
                    "value": "slc.start",
                    "type": "Attribute",
                    "possible_values": []
                },
                "length": {
                    "value": "slc.stop - slc.start",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "extern/smplx_kinect/smplx_kinect/common/exp_bm_wrapper.py": {
        "torch": {
            "cross_24": {
                "variable": {
                    "value": "rot_axis",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "a / torch.norm(a, dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "torch.index_select(A.squeeze(0), 0, torch.LongTensor(self.bodyparts))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "b / torch.norm(b, dim=1, keepdim=True)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tensor_44": {
                "variable": {
                    "value": "betas",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "betas",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(betas)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_157": {
                "variable": {
                    "value": "bones",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "bones",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(bones)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "from_numpy_159": {
                "variable": {
                    "value": "kinect_bones",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "kinect_joints[bones[:, 0]] - kinect_joints[bones[:, 1]]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "bmm_162": {
                "variable": {
                    "value": "kinect_bones",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kinect_bones.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "a_inv[bones[:, 0]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "squeeze_162": {
                "variable": {
                    "value": "kinect_bones",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_164": {
                "variable": {
                    "value": "init_kinect_bone",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "init_kinect_joints[bones[:, 0]] - init_kinect_joints[bones[:, 1]]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "bmm_167": {
                "variable": {
                    "value": "init_kinect_bone",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "init_kinect_bone.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "a_inv[bones[:, 0]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "squeeze_167": {
                "variable": {
                    "value": "init_kinect_bone",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_18": {
                "data": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.float32",
                            "Attribute"
                        ],
                        [
                            "torch.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "index_select_251": {
                "variable": {
                    "value": "init_A_select",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "init_A",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "init_A.clone().detach().cpu()[0, :, :3, :3]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "torch.LongTensor(self.bodyparts)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_252": {
                "variable": {
                    "value": "init_A_select_inv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "init_A_select",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.index_select(init_A, 0, torch.LongTensor(self.bodyparts))",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dim1": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_255": {
                "variable": {
                    "value": "init_dirs",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "init_dirs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "init_kinect_joints[self.bones[:, 1]] - init_kinect_joints[self.bones[:, 0]]",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(init_dirs, dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_259": {
                "variable": {
                    "value": "target_dirs",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "target_dirs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "target_kinect_joints[self.bones[:, 1]] - target_kinect_joints[self.bones[:, 0]]",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(target_dirs, dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "index_select_272": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "A.squeeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "torch.LongTensor(self.bodyparts)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "inverse_273": {
                "variable": {
                    "value": "a_inv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a[:, :3, :3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "norm_22": {
                "input": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "a / torch.norm(a, dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "torch.index_select(A.squeeze(0), 0, torch.LongTensor(self.bodyparts))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "norm_23": {
                "input": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "b / torch.norm(b, dim=1, keepdim=True)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_26": {
                "input": {
                    "value": "a * b",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "norm_29": {
                "input": {
                    "value": "a_ort",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "a - a_proj",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "norm_30": {
                "input": {
                    "value": "a_proj",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "b * torch.sum(a * b, dim=1, keepdim=True)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_33": {
                "input": {
                    "value": "a * b",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_35": {
                "input": {
                    "value": "rot_axis",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cross(a, b)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "bmm_256": {
                "input": {
                    "value": "init_A_select_inv[self.bones[:, 0]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mat2": {
                    "value": "init_dirs.unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_260": {
                "input": {
                    "value": "init_A_select_inv[self.bones[:, 0]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mat2": {
                    "value": "target_dirs.unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "extern/smplx_kinect/smplx_kinect/common/smplx_vis.py": {
        "torch": {
            "device_103": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_135": {
                "variable": {
                    "value": "R",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "cv2.Rodrigues(np.array(rvec, dtype=np.float32))[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_139": {
                "variable": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, -t_up, self.z]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "extern/smplx_kinect/smplx_kinect/exp/net/config2net.py": {
        "torch": {
            "load_45": {
                "variable": {
                    "value": "loaded",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args['load_params_fp']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "extern/smplx_kinect/smplx_kinect/exp/net/model.py": {
        "torch": {
            "Sequential_15": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "GRU_43": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                },
                "num_layers": {
                    "value": "num_layers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_49": {
                "variable": {
                    "value": "self.h0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(self.rnn.num_layers, 1, hidden_size).normal_(std=0.01)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleDict_61": {
                "variable": {
                    "value": "self.heads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.heads",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_56": {
                "variable": {
                    "value": "layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size if self.mlp is None else mlp_layers[-1]",
                    "type": "IfExp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "head_len",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_49": {
                "*size": {
                    "value": "self.rnn.num_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_10": {
                "in_features": {
                    "value": "hiddens[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hiddens[i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_27": {
                "in_features": {
                    "value": "hiddens[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "head_len",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "extern/smplx_optimization/smplx_optimization/pykinect/mymath.py": {
        "torch": {
            "cross_9": {
                "variable": {
                    "value": "rot_axis",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "a / torch.norm(a, dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "a / np.linalg.norm(a)",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "b / torch.norm(b, dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "b / np.linalg.norm(b)",
                            "BinOp"
                        ],
                        [
                            "points.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "matmul_93": {
                "variable": {
                    "value": "points_K",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "K.reshape(b, 1, 3, 3).repeat(1, n, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "points.reshape(b, n, 3, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "norm_7": {
                "input": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "a / torch.norm(a, dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "a / np.linalg.norm(a)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "norm_8": {
                "input": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "b / torch.norm(b, dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "b / np.linalg.norm(b)",
                            "BinOp"
                        ],
                        [
                            "points.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_11": {
                "input": {
                    "value": "a * b",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "norm_14": {
                "input": {
                    "value": "a_ort",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "a - a_proj",
                            "BinOp"
                        ],
                        [
                            "a - a_proj",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "norm_15": {
                "input": {
                    "value": "a_proj",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "b * torch.sum(a * b, dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "b * a.dot(b)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_18": {
                "input": {
                    "value": "a * b",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_20": {
                "input": {
                    "value": "rot_axis",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cross(a, b)",
                            "Call"
                        ],
                        [
                            "np.cross(a, b)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "extern/smplx_optimization/smplx_optimization/pykinect/smplx_model.py": {
        "torch": {
            "tensor_35": {
                "variable": {
                    "value": "inds_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "inds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "get_shifted_op_joint_ids()",
                            "Call"
                        ],
                        [
                            "np.asarray(inds, dtype=np.int)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "device": {
                    "value": "joints.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_39": {
                "variable": {
                    "value": "j_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[shift_j, torch.ones((b, j_num, 1, 1), dtype=torch.float, requires_grad=False, device=joints.device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_20": {
                "variable": {
                    "value": "j_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[shift_j, torch.ones((n, v_num, 1, 1), dtype=torch.float, requires_grad=False, device=comp_device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_51": {
                "variable": {
                    "value": "v_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[shift_v, torch.ones((n, v_num, 1, 1), dtype=torch.float, requires_grad=False, device=comp_device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_117": {
                "variable": {
                    "value": "v_template",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "v_template",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.repeat(smpl_dict['v_template'][np.newaxis], 1, axis=0)",
                            "Call"
                        ],
                        [
                            "np.repeat(v_template[np.newaxis], 1, axis=0)",
                            "Call"
                        ],
                        [
                            "np.concatenate([v_template, s2v[:, :, 10].reshape(1, -1, 3)], axis=1)",
                            "Call"
                        ],
                        [
                            "torch.tensor(v_template, dtype=dtype, device=comp_device)",
                            "Call"
                        ],
                        [
                            "torch.cat([v_template, v_add.reshape(1, -1, 3)], dim=1)",
                            "Call"
                        ],
                        [
                            "self.v_template",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "MethodArgument"
                        ],
                        [
                            "torch.float32",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "comp_device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_187": {
                "variable": {
                    "value": "self.lmk_faces_idx",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "lmk_faces_idx",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "smpl_dict['lmk_faces_idx']",
                            "Subscript"
                        ],
                        [
                            "self.lmk_faces_idx.unsqueeze(dim=0).expand(bs, -1).contiguous()",
                            "Call"
                        ],
                        [
                            "torch.cat([lmk_faces_idx, dyn_lmk_faces_idx], 1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "comp_device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_189": {
                "variable": {
                    "value": "self.lmk_bary_coords",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "lmk_bary_coords",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "smpl_dict['lmk_bary_coords']",
                            "Subscript"
                        ],
                        [
                            "self.lmk_bary_coords.unsqueeze(dim=0).repeat(bs, 1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([lmk_bary_coords.expand(bs, -1, -1), dyn_lmk_bary_coords], 1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "comp_device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_191": {
                "variable": {
                    "value": "self.dynamic_lmk_faces_idx",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "dynamic_lmk_faces_idx",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "smpl_dict['dynamic_lmk_faces_idx']",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "comp_device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_194": {
                "variable": {
                    "value": "self.dynamic_lmk_bary_coords",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "dynamic_lmk_bary_coords",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "smpl_dict['dynamic_lmk_bary_coords']",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "MethodArgument"
                        ],
                        [
                            "torch.float32",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "comp_device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_199": {
                "variable": {
                    "value": "curr_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "NECK_IDX",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "12",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "comp_device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "stack_205": {
                "variable": {
                    "value": "self.neck_kin_chain",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "self.neck_kin_chain",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_335": {
                "variable": {
                    "value": "shape_components",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[betas, self.fe_scale * expression]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_336": {
                "variable": {
                    "value": "shapedirs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.shapedirs, self.exprdirs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_361": {
                "variable": {
                    "value": "lmk_faces_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[lmk_faces_idx, dyn_lmk_faces_idx]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_363": {
                "variable": {
                    "value": "lmk_bary_coords",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[lmk_bary_coords.expand(bs, -1, -1), dyn_lmk_bary_coords]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_374": {
                "variable": {
                    "value": "joints",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[joints, landmarks]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_417": {
                "variable": {
                    "value": "res.kj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[res.kjj, res.kjv]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_418": {
                "variable": {
                    "value": "res.kj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[res.kj, res.Jtr[:, self.face_smplx[:, 1]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_41": {
                "input": {
                    "value": "j_h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat([shift_j, torch.ones((n, v_num, 1, 1), dtype=torch.float, requires_grad=False, device=comp_device)], dim=2)",
                            "Call"
                        ],
                        [
                            "j_h.reshape(n, v_num, 1, 4)",
                            "Call"
                        ],
                        [
                            "torch.cat([shift_j, torch.ones((b, j_num, 1, 1), dtype=torch.float, requires_grad=False, device=joints.device)], dim=2)",
                            "Call"
                        ],
                        [
                            "j_h.reshape(b, j_num, 1, 4)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "A[:, inds_t, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reshape_41": {
                "input": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "joints.shape[0]",
                            "Subscript"
                        ],
                        [
                            "pose_hand.shape[0]",
                            "Subscript"
                        ],
                        [
                            "pose_hand.shape[0]",
                            "Subscript"
                        ],
                        [
                            "full_pose.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "j_num",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inds.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_120": {
                "variable": {
                    "value": "v_template",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[v_template, v_add.reshape(1, -1, 3)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_218": {
                "variable": {
                    "value": "self.left_hand_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "smpl_dict['hands_meanl']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "comp_device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_220": {
                "variable": {
                    "value": "self.right_hand_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "smpl_dict['hands_meanr']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "comp_device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_222": {
                "variable": {
                    "value": "self.left_hand_components",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "smpl_dict['hands_componentsl'][:num_hand_pca]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "comp_device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_224": {
                "variable": {
                    "value": "self.right_hand_components",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "smpl_dict['hands_componentsr'][:num_hand_pca]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "comp_device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_307": {
                "variable": {
                    "value": "pose_hand",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[left_hand_pose, right_hand_pose]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_324": {
                "variable": {
                    "value": "full_pose",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[root_orient.reshape(-1, 1, 3, 3), pose_body.reshape(b, -1, 3, 3), pose_jaw.reshape(-1, 1, 3, 3), pose_eye.reshape(-1, 2, 3, 3), pose_hand]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_331": {
                "variable": {
                    "value": "full_pose",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[root_orient, pose_body, pose_jaw, pose_eye, pose_hand]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_22": {
                "input": {
                    "value": "j_h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat([shift_j, torch.ones((n, v_num, 1, 1), dtype=torch.float, requires_grad=False, device=comp_device)], dim=2)",
                            "Call"
                        ],
                        [
                            "j_h.reshape(n, v_num, 1, 4)",
                            "Call"
                        ],
                        [
                            "torch.cat([shift_j, torch.ones((b, j_num, 1, 1), dtype=torch.float, requires_grad=False, device=joints.device)], dim=2)",
                            "Call"
                        ],
                        [
                            "j_h.reshape(b, j_num, 1, 4)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "body.A[:, kinect_smpl[:, 2], :, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reshape_22": {
                "input": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "joints_output.shape[0]",
                            "Subscript"
                        ],
                        [
                            "verts_output.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "v_num",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "kinect_smpl.shape[0]",
                            "Subscript"
                        ],
                        [
                            "kinect_smplvert.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ones_39": {
                "*size": {
                    "value": "(b, j_num, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "device": {
                    "value": "joints.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_54": {
                "input": {
                    "value": "v_h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat([shift_v, torch.ones((n, v_num, 1, 1), dtype=torch.float, requires_grad=False, device=comp_device)], dim=2)",
                            "Call"
                        ],
                        [
                            "v_h.reshape(n, v_num, 1, 4)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "body.A[:, kinect_smplvert[:, 2], :, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reshape_54": {
                "input": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "joints_output.shape[0]",
                            "Subscript"
                        ],
                        [
                            "verts_output.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "v_num",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "kinect_smpl.shape[0]",
                            "Subscript"
                        ],
                        [
                            "kinect_smplvert.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tensor_124": {
                "data": {
                    "value": "smpl_dict['f'].astype(np.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_143": {
                "data": {
                    "value": "shapedirs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "smpl_dict['shapedirs'][:, :, :num_betas]",
                            "Subscript"
                        ],
                        [
                            "np.concatenate([shapedirs, np.zeros((n_add, 3, 10))])",
                            "Call"
                        ],
                        [
                            "np.concatenate([shapedirs, s2v[:, :, 0:10]])",
                            "Call"
                        ],
                        [
                            "torch.cat([self.shapedirs, self.exprdirs], dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "MethodArgument"
                        ],
                        [
                            "torch.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_151": {
                "data": {
                    "value": "exprdirs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "smpl_dict['shapedirs'][:, :, begin_shape_id:begin_shape_id + num_expressions]",
                            "Subscript"
                        ],
                        [
                            "np.concatenate([exprdirs, np.zeros((n_add, 3, 10))])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "MethodArgument"
                        ],
                        [
                            "torch.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_157": {
                "data": {
                    "value": "J_regressor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "smpl_dict['J_regressor']",
                            "Subscript"
                        ],
                        [
                            "np.concatenate([J_regressor, np.zeros((J_regressor.shape[0], n_add))], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "MethodArgument"
                        ],
                        [
                            "torch.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_171": {
                "data": {
                    "value": "kintree_table",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "smpl_dict['kintree_table'].astype(np.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "comp_device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_183": {
                "data": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "smpl_dict['weights']",
                            "Subscript"
                        ],
                        [
                            "np.concatenate([weights, w_add])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "MethodArgument"
                        ],
                        [
                            "torch.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_249": {
                "data": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "MethodArgument"
                        ],
                        [
                            "torch.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ones_20": {
                "*size": {
                    "value": "(n, v_num, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "device": {
                    "value": "comp_device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ones_52": {
                "*size": {
                    "value": "(n, v_num, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "device": {
                    "value": "comp_device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_165": {
                "data": {
                    "value": "posedirs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "smpl_dict['posedirs']",
                            "Subscript"
                        ],
                        [
                            "posedirs.reshape([posedirs.shape[0] * 3, -1]).T",
                            "Attribute"
                        ],
                        [
                            "np.concatenate([posedirs, np.zeros((posedirs.shape[0], n_add * 3))], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "MethodArgument"
                        ],
                        [
                            "torch.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "einsum_300": {
                "equation": {
                    "value": "bi,ij->bj",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[left_hand_pose, self.left_hand_components]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "einsum_302": {
                "equation": {
                    "value": "bi,ij->bj",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[right_hand_pose, self.right_hand_components]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "src/blocks/aggregate.py": {
        "torch": {
            "device_158": {
                "variable": {
                    "value": "self.smplx_device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "self.filterer_config['device']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_190": {
                "variable": {
                    "value": "vertices",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "smplx_output.vertices[0].contiguous()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_161": {
                "variable": {
                    "value": "self.visualize_device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "self.vis_config['device']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "src/blocks/body_pose.py": {
        "torch": {
            "device_24": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "self.processor_config['device']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "src/body_pose/inferer.py": {
        "torch": {
            "bmm_199": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "residual",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "net_out_body_pose",
                            "Name"
                        ],
                        [
                            "residual.reshape(shape)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "pose_init",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "net_input_batch.name2data('pose_init')",
                            "Call"
                        ],
                        [
                            "pose_init.reshape(shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_178": {
                "data": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_181": {
                "tensors": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/body_pose/kinect_bm.py": {
        "torch": {
            "matmul_46": {
                "variable": {
                    "value": "T",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "lbs_weights[-32:].unsqueeze(dim=0).expand([batch_size, -1, -1])",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "A.view(batch_size, num_joints, 16)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_49": {
                "variable": {
                    "value": "homogen_coord",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[batch_size, v_posed.shape[1], 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "MethodArgument"
                        ],
                        [
                            "torch.float32",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "matmul_53": {
                "variable": {
                    "value": "v_homo",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "T",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.matmul(W, A.view(batch_size, num_joints, 16)).view(batch_size, -1, 4, 4)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.unsqueeze(v_posed_homo, dim=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_7": {
                "data": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.float32",
                            "MethodArgument"
                        ],
                        [
                            "torch.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "einsum_23": {
                "equation": {
                    "value": "bik,ji->bjk",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[vertices, J_regressor]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_67": {
                "variable": {
                    "value": "shape_components",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.betas, self.bm.fe_scale * expression]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_69": {
                "variable": {
                    "value": "shapedirs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.bm.shapedirs, self.bm.exprdirs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_79": {
                "variable": {
                    "value": "self.pose_hand",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[left_hand_pose, right_hand_pose]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_86": {
                "variable": {
                    "value": "full_pose",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[global_rot, pose_body, self.pose_jaw, self.pose_eye, self.pose_hand]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_52": {
                "tensors": {
                    "value": "[v_posed, homogen_coord]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_53": {
                "input": {
                    "value": "v_posed_homo",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat([v_posed, homogen_coord], dim=2)[:, -32:]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "src/metrics.py": {
        "torch": {
            "device_40": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "self.processor_config['device']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "src/server.py": {
        "torch": {}
    },
    "src/util/glumpy_vis.py": {
        "torch": {
            "cat_103": {
                "variable": {
                    "value": "self.state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(state, state[:, :, [0]])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flip_105": {
                "variable": {
                    "value": "self.state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dims": {
                    "value": "(0,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "synchronize_87": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_170": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_184": {
                "*size": {
                    "value": "(self.h, self.w, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "torch.device('cuda:0')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_184": {
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    }
}