{
    "dissect_resnet152.py": {
        "torch": {}
    },
    "netdissect/__main__.py": {
        "torch": {
            "is_available_166": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "netdissect/aceoptimize.py": {
        "torch": {
            "zeros_487": {
                "variable": {
                    "value": "p_mask",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(pbatch), 1) + feature_shape",
                    "possible_values": []
                }
            },
            "zeros_515": {
                "variable": {
                    "value": "c_mask",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(cbatch), 1) + feature_shape",
                    "possible_values": []
                }
            },
            "zeros_568": {
                "variable": {
                    "value": "ablation",
                    "possible_values": []
                },
                "*size": {
                    "value": "high_replacement.shape",
                    "possible_values": []
                }
            },
            "Adam_572": {
                "variable": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "[ablation]",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.01",
                    "possible_values": []
                }
            },
            "zeros_202": {
                "variable": {
                    "value": "weighted_feature_sum",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_units",
                    "possible_values": [
                        [
                            "model.feature_shape[args.layer][1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_220": {
                "variable": {
                    "value": "object_presence_at_feature",
                    "possible_values": []
                },
                "tensors": {
                    "value": "object_presence_scores",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "sort_223": {
                "variable": {
                    "value": "(best_presence_scores, best_presence_images)",
                    "possible_values": []
                },
                "input": {
                    "value": "-object_presence_at_image",
                    "possible_values": []
                }
            },
            "bincount_231": {
                "variable": {
                    "value": "corpus.object_location_popularity",
                    "possible_values": []
                },
                "input": {
                    "value": "corpus.object_present_location",
                    "possible_values": []
                },
                "minlength": {
                    "value": "num_locations",
                    "possible_values": [
                        [
                            "numpy.prod(feature_shape).item()",
                            "Call"
                        ],
                        [
                            "numpy.prod(feature_shape).item()",
                            "Call"
                        ],
                        [
                            "numpy.prod(feature_shape).item()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_365": {
                "variable": {
                    "value": "object_scores",
                    "possible_values": []
                },
                "tensors": {
                    "value": "object_scores",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(object_scores)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_366": {
                "variable": {
                    "value": "candidate_scores",
                    "possible_values": []
                },
                "tensors": {
                    "value": "candidate_scores",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(candidate_scores)",
                            "Call"
                        ],
                        [
                            "candidate_scores * (object_scores == 0).float()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sort_371": {
                "variable": {
                    "value": "(best_candidate_scores, best_candidate_images)",
                    "possible_values": []
                },
                "input": {
                    "value": "-candidate_score_at_image",
                    "possible_values": []
                }
            },
            "bincount_384": {
                "variable": {
                    "value": "corpus.candidate_location_popularity",
                    "possible_values": []
                },
                "input": {
                    "value": "corpus.candidate_location",
                    "possible_values": []
                },
                "minlength": {
                    "value": "num_locations",
                    "possible_values": [
                        [
                            "numpy.prod(feature_shape).item()",
                            "Call"
                        ],
                        [
                            "numpy.prod(feature_shape).item()",
                            "Call"
                        ],
                        [
                            "numpy.prod(feature_shape).item()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_478": {
                "variable": {
                    "value": "d",
                    "possible_values": []
                },
                "input": {
                    "value": "ablation",
                    "possible_values": [
                        [
                            "d",
                            "Name"
                        ],
                        [
                            "torch.zeros(high_replacement.shape).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "randperm_708": {
                "variable": {
                    "value": "candidate_shuffle",
                    "possible_values": []
                },
                "n": {
                    "value": "len(corpus.candidate_sample)",
                    "possible_values": []
                }
            },
            "is_available_66": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_201": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_214": {
                "variable": {
                    "value": "score",
                    "possible_values": []
                },
                "input": {
                    "value": "mask.float()",
                    "possible_values": []
                },
                "output_size": {
                    "value": "feature_shape",
                    "possible_values": [
                        [
                            "model.feature_shape[args.layer][2:]",
                            "Subscript"
                        ],
                        [
                            "model.feature_shape[args.layer][2:]",
                            "Subscript"
                        ],
                        [
                            "model.feature_shape[args.layer][2:]",
                            "Subscript"
                        ],
                        [
                            "model.feature_shape[layer][2:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "no_grad_249": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_276": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_310": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "zeros_328": {
                "variable": {
                    "value": "batch_scores",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(zbatch),) + feature_shape",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_335": {
                "variable": {
                    "value": "object_score",
                    "possible_values": []
                },
                "input": {
                    "value": "mask.float()",
                    "possible_values": []
                },
                "output_size": {
                    "value": "feature_shape",
                    "possible_values": [
                        [
                            "model.feature_shape[args.layer][2:]",
                            "Subscript"
                        ],
                        [
                            "model.feature_shape[args.layer][2:]",
                            "Subscript"
                        ],
                        [
                            "model.feature_shape[args.layer][2:]",
                            "Subscript"
                        ],
                        [
                            "model.feature_shape[layer][2:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_339": {
                "variable": {
                    "value": "edit_mask",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, 1) + feature_shape",
                    "possible_values": []
                }
            },
            "no_grad_399": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "tensor_463": {
                "data": {
                    "value": "rrec.score",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_501": {
                "input": {
                    "value": "erase_effect[:, None, :, :]",
                    "possible_values": []
                },
                "output_size": {
                    "value": "feature_shape",
                    "possible_values": [
                        [
                            "model.feature_shape[args.layer][2:]",
                            "Subscript"
                        ],
                        [
                            "model.feature_shape[args.layer][2:]",
                            "Subscript"
                        ],
                        [
                            "model.feature_shape[args.layer][2:]",
                            "Subscript"
                        ],
                        [
                            "model.feature_shape[layer][2:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "adaptive_avg_pool2d_527": {
                "input": {
                    "value": "add_effect[:, None, :, :]",
                    "possible_values": []
                },
                "output_size": {
                    "value": "feature_shape",
                    "possible_values": [
                        [
                            "model.feature_shape[args.layer][2:]",
                            "Subscript"
                        ],
                        [
                            "model.feature_shape[args.layer][2:]",
                            "Subscript"
                        ],
                        [
                            "model.feature_shape[args.layer][2:]",
                            "Subscript"
                        ],
                        [
                            "model.feature_shape[layer][2:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "save_743": {
                "obj": {
                    "value": "dict(ablation=ablation, optimizer=optimizer.state_dict(), avg_loss=avg_loss, **extra)",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(snapdir, 'epoch-%d.pth' % epoch)",
                    "possible_values": []
                }
            },
            "DataLoader_205": {
                "dataset": {
                    "value": "TensorDataset(full_sample)",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.inference_batch_size",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "10",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "sort_225": {
                "input": {
                    "value": "best_presence_images[:args.train_size + args.eval_size]",
                    "possible_values": []
                }
            },
            "DataLoader_252": {
                "dataset": {
                    "value": "TensorDataset(corpus.object_present_sample, corpus.object_present_location)",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.inference_batch_size",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "10",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "DataLoader_279": {
                "dataset": {
                    "value": "TensorDataset(full_sample)",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.inference_batch_size",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "10",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "DataLoader_324": {
                "dataset": {
                    "value": "TensorDataset(second_sample)",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.inference_batch_size",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "10",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "sort_373": {
                "input": {
                    "value": "best_candidate_images[:args.train_size + args.eval_size]",
                    "possible_values": []
                }
            },
            "zeros_420": {
                "variable": {
                    "value": "feature_mask",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(zbatch), 1) + feature_shape",
                    "possible_values": []
                }
            },
            "adaptive_max_pool2d_423": {
                "variable": {
                    "value": "feature_mask",
                    "possible_values": []
                },
                "*args": {
                    "value": "feature_mask.float()",
                    "possible_values": []
                }
            },
            "topk_479": {
                "input": {
                    "value": "ablation.view(-1)",
                    "possible_values": []
                },
                "k": {
                    "value": "discrete_units",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "no_grad_625": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "load_672": {
                "variable": {
                    "value": "data",
                    "possible_values": []
                },
                "f": {
                    "value": "snapfile",
                    "possible_values": [
                        [
                            "os.path.join(snapdir, 'epoch-%d.pth' % epoch)",
                            "Call"
                        ],
                        [
                            "os.path.join(snapdir, 'epoch-%d.pth' % start_epoch)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_681": {
                "obj": {
                    "value": "dict(ablation=ablation, optimizer=optimizer.state_dict(), avg_loss=avg_loss, **extra)",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(snapdir, 'epoch-%d.pth' % epoch)",
                    "possible_values": []
                }
            },
            "load_691": {
                "variable": {
                    "value": "data",
                    "possible_values": []
                },
                "f": {
                    "value": "snapfile",
                    "possible_values": [
                        [
                            "os.path.join(snapdir, 'epoch-%d.pth' % epoch)",
                            "Call"
                        ],
                        [
                            "os.path.join(snapdir, 'epoch-%d.pth' % start_epoch)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_702": {
                "obj": {
                    "value": "dict(ablation=ablation, optimizer=optimizer.state_dict(), avg_loss=avg_loss, **extra)",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(snapdir, 'epoch-%d.pth' % epoch)",
                    "possible_values": []
                }
            },
            "TensorDataset_205": {
                "*tensors": {
                    "value": "full_sample",
                    "possible_values": []
                }
            },
            "TensorDataset_252": {
                "*tensors": {
                    "value": "corpus.object_present_sample",
                    "possible_values": []
                }
            },
            "TensorDataset_279": {
                "*tensors": {
                    "value": "full_sample",
                    "possible_values": []
                }
            },
            "TensorDataset_324": {
                "*tensors": {
                    "value": "second_sample",
                    "possible_values": []
                }
            },
            "DataLoader_413": {
                "dataset": {
                    "value": "TensorDataset(group_sample, group_location, group_indices)",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.inference_batch_size",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "10",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "arange_507": {
                "start": {
                    "value": "len(erase_downsampled)",
                    "possible_values": []
                }
            },
            "arange_533": {
                "start": {
                    "value": "len(add_downsampled)",
                    "possible_values": []
                }
            },
            "DataLoader_629": {
                "dataset": {
                    "value": "TensorDataset(corpus.eval_present_sample, corpus.eval_present_location, corpus.eval_candidate_sample, corpus.eval_candidate_location)",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.inference_batch_size",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "10",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "DataLoader_711": {
                "dataset": {
                    "value": "TensorDataset(corpus.object_present_sample, corpus.object_present_location, corpus.candidate_sample[candidate_shuffle], corpus.candidate_location[candidate_shuffle])",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "10",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "no_grad_728": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "from_numpy_139": {
                "ndarray": {
                    "value": "v",
                    "possible_values": []
                }
            },
            "TensorDataset_413": {
                "*tensors": {
                    "value": "group_sample",
                    "possible_values": []
                }
            },
            "TensorDataset_629": {
                "*tensors": {
                    "value": "corpus.eval_present_sample",
                    "possible_values": []
                }
            },
            "no_grad_673": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_692": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "TensorDataset_711": {
                "*tensors": {
                    "value": "corpus.object_present_sample",
                    "possible_values": []
                }
            },
            "no_grad_736": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "arange_264": {
                "start": {
                    "value": "feat.shape[0]",
                    "possible_values": []
                }
            }
        }
    },
    "netdissect/acesummarize.py": {
        "torch": {
            "load_39": {
                "f": {
                    "value": "os.path.join(snapshots, 'epoch-%d.pth' % i)",
                    "possible_values": []
                }
            }
        }
    },
    "netdissect/broden.py": {
        "torch": {
            "BrodenDataset_8": {
                "base_class_0": {
                    "value": "torch.utils.data.Dataset",
                    "possible_values": []
                },
                "self.directory": {
                    "value": "directory",
                    "possible_values": [
                        [
                            "'dataset/broden'",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.resolution": {
                    "value": "resolution",
                    "possible_values": [
                        [
                            "384",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.loader": {
                    "value": "default_loader",
                    "possible_values": []
                },
                "self.transform": {
                    "value": "transform",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.transform_segment": {
                    "value": "transform_segment",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.include_bincount": {
                    "value": "include_bincount",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.max_segment_depth": {
                    "value": "max_segment_depth",
                    "possible_values": [
                        [
                            "6",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.categories": {
                    "value": "categories",
                    "possible_values": [
                        [
                            "set([c for c in categories if c in self.category_info])",
                            "Call"
                        ],
                        [
                            "list(self.category_info.keys())",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_223": {
                "variable": {
                    "value": "result",
                    "possible_values": []
                },
                "*size": {
                    "value": "*(seg.shape[0], num_labels) + seg.shape[2:]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "possible_values": [
                        [
                            "torch.uint8",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "seg.device",
                    "possible_values": []
                }
            },
            "DataLoader_263": {
                "variable": {
                    "value": "loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "bds",
                    "possible_values": [
                        [
                            "BrodenDataset('dataset/broden', resolution=384, transform=transforms.Compose([transforms.Resize(224), transforms.ToTensor()]), transform_segment=transforms.Compose([ScaleSegmentation(224, 224)]), include_bincount=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "100",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "24",
                    "possible_values": []
                }
            }
        }
    },
    "netdissect/dissection.py": {
        "torch": {
            "DataLoader_538": {
                "variable": {
                    "value": "segloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ],
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "num_workers",
                    "possible_values": [
                        [
                            "24",
                            "MethodArgument"
                        ],
                        [
                            "24",
                            "MethodArgument"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "device.type == 'cuda'",
                    "possible_values": []
                },
                "sampler": {
                    "value": "needed_sample",
                    "possible_values": [
                        [
                            "FixedSubsetSampler(sorted(needed_images.keys()))",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_686": {
                "variable": {
                    "value": "arr",
                    "possible_values": []
                },
                "size": {
                    "value": "(2, 2) + ic.shape",
                    "possible_values": []
                },
                "dtype": {
                    "value": "ic.dtype",
                    "possible_values": []
                },
                "device": {
                    "value": "ic.device",
                    "possible_values": []
                }
            },
            "zeros_813": {
                "variable": {
                    "value": "labelcat",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_labels",
                    "possible_values": []
                },
                "out": {
                    "value": "num_categories",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "labels.device",
                            "Attribute"
                        ],
                        [
                            "data.device",
                            "Attribute"
                        ],
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_822": {
                "variable": {
                    "value": "label_counts",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_labels",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "labels.device",
                            "Attribute"
                        ],
                        [
                            "data.device",
                            "Attribute"
                        ],
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_823": {
                "variable": {
                    "value": "total_counts",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_categories",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "labels.device",
                            "Attribute"
                        ],
                        [
                            "data.device",
                            "Attribute"
                        ],
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_920": {
                "variable": {
                    "value": "labelcat",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_labels",
                    "possible_values": []
                },
                "out": {
                    "value": "num_categories",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "labels.device",
                            "Attribute"
                        ],
                        [
                            "data.device",
                            "Attribute"
                        ],
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_927": {
                "variable": {
                    "value": "label_counts",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_labels",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "labels.device",
                            "Attribute"
                        ],
                        [
                            "data.device",
                            "Attribute"
                        ],
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "logspace_1046": {
                "variable": {
                    "value": "fracs",
                    "possible_values": []
                },
                "start": {
                    "value": "-3",
                    "possible_values": []
                },
                "end": {
                    "value": "0",
                    "possible_values": []
                },
                "steps": {
                    "value": "100",
                    "possible_values": []
                }
            },
            "logspace_1106": {
                "variable": {
                    "value": "fracs",
                    "possible_values": []
                },
                "start": {
                    "value": "-3",
                    "possible_values": []
                },
                "end": {
                    "value": "0",
                    "possible_values": []
                },
                "steps": {
                    "value": "100",
                    "possible_values": []
                }
            },
            "zeros_1360": {
                "variable": {
                    "value": "result",
                    "possible_values": []
                },
                "*size": {
                    "value": "outshape",
                    "possible_values": [
                        [
                            "(labels.shape[0], chans) + labels.shape[2:]",
                            "BinOp"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "labels.device",
                            "Attribute"
                        ],
                        [
                            "data.device",
                            "Attribute"
                        ],
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "possible_values": [
                        [
                            "numpy.dtype(dtype)",
                            "Call"
                        ],
                        [
                            "torch.float",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "torch.float",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "DataLoader_97": {
                "variable": {
                    "value": "segloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ],
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "num_workers",
                    "possible_values": [
                        [
                            "24",
                            "MethodArgument"
                        ],
                        [
                            "24",
                            "MethodArgument"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "device.type == 'cuda'",
                    "possible_values": []
                }
            },
            "empty_1115": {
                "variable": {
                    "value": "arr",
                    "possible_values": []
                },
                "size": {
                    "value": "(2, 2) + isects.shape",
                    "possible_values": []
                },
                "dtype": {
                    "value": "isects.dtype",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "labels.device",
                            "Attribute"
                        ],
                        [
                            "data.device",
                            "Attribute"
                        ],
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_1627": {
                "variable": {
                    "value": "seg",
                    "possible_values": []
                },
                "*size": {
                    "value": "im.shape[0]",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "ones_1628": {
                "variable": {
                    "value": "bc",
                    "possible_values": []
                },
                "*size": {
                    "value": "im.shape[0]",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "no_grad_84": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "DataLoader_112": {
                "variable": {
                    "value": "segloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "possible_values": [
                        [
                            "dataset",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "possible_values": [
                        [
                            "24",
                            "MethodArgument"
                        ],
                        [
                            "24",
                            "MethodArgument"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "device.type == 'cuda'",
                    "possible_values": []
                }
            },
            "DataLoader_131": {
                "variable": {
                    "value": "segloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ],
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "num_workers",
                    "possible_values": [
                        [
                            "24",
                            "MethodArgument"
                        ],
                        [
                            "24",
                            "MethodArgument"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "device.type == 'cuda'",
                    "possible_values": []
                }
            },
            "DataLoader_143": {
                "variable": {
                    "value": "segloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "possible_values": [
                        [
                            "dataset",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "possible_values": [
                        [
                            "24",
                            "MethodArgument"
                        ],
                        [
                            "24",
                            "MethodArgument"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "device.type == 'cuda'",
                    "possible_values": []
                }
            },
            "DataLoader_150": {
                "variable": {
                    "value": "segloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "possible_values": [
                        [
                            "24",
                            "MethodArgument"
                        ],
                        [
                            "24",
                            "MethodArgument"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "device.type == 'cuda'",
                    "possible_values": []
                }
            },
            "DataLoader_160": {
                "variable": {
                    "value": "segloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "seg_batch_size",
                    "possible_values": [
                        [
                            "5",
                            "MethodArgument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "num_workers",
                    "possible_values": [
                        [
                            "24",
                            "MethodArgument"
                        ],
                        [
                            "24",
                            "MethodArgument"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "device.type == 'cuda'",
                    "possible_values": []
                }
            },
            "isnan_695": {
                "input": {
                    "value": "iqr",
                    "possible_values": [
                        [
                            "mi / je",
                            "BinOp"
                        ],
                        [
                            "mi / je",
                            "BinOp"
                        ],
                        [
                            "mutual_information(arr) / joint_entropy(arr)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "from_numpy_791": {
                "variable": {
                    "value": "iou_scores[layer]",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "data['iou_scores']",
                    "possible_values": []
                }
            },
            "from_numpy_792": {
                "variable": {
                    "value": "iqr_scores[layer]",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "data['iqr_scores']",
                    "possible_values": []
                }
            },
            "from_numpy_793": {
                "variable": {
                    "value": "total_counts",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "data['total_counts']",
                    "possible_values": []
                }
            },
            "from_numpy_794": {
                "variable": {
                    "value": "label_counts",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "data['label_counts']",
                    "possible_values": []
                }
            },
            "from_numpy_795": {
                "variable": {
                    "value": "category_activation_counts[layer]",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "data['category_activation_counts']",
                    "possible_values": []
                }
            },
            "from_numpy_797": {
                "variable": {
                    "value": "intersection_counts[layer]",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "data['intersection_counts']",
                    "possible_values": []
                }
            },
            "grid_sample_848": {
                "variable": {
                    "value": "upsampled",
                    "possible_values": []
                },
                "input": {
                    "value": "value",
                    "possible_values": [
                        [
                            "features[key]",
                            "Subscript"
                        ],
                        [
                            "value.permute((0,) + tuple(range(2, len(value.shape))) + (1,)).contiguous().view(-1, value.shape[1])",
                            "Call"
                        ],
                        [
                            "features[layer]",
                            "Subscript"
                        ],
                        [
                            "value.permute((0,) + tuple(range(2, len(value.shape))) + (1,)).contiguous().view(-1, value.shape[1])",
                            "Call"
                        ]
                    ]
                },
                "grid": {
                    "value": "upsample_grids[key]",
                    "possible_values": []
                },
                "padding_mode": {
                    "value": "border",
                    "possible_values": []
                }
            },
            "grid_sample_976": {
                "variable": {
                    "value": "upsampled",
                    "possible_values": []
                },
                "input": {
                    "value": "value",
                    "possible_values": [
                        [
                            "features[key]",
                            "Subscript"
                        ],
                        [
                            "value.permute((0,) + tuple(range(2, len(value.shape))) + (1,)).contiguous().view(-1, value.shape[1])",
                            "Call"
                        ],
                        [
                            "features[layer]",
                            "Subscript"
                        ],
                        [
                            "value.permute((0,) + tuple(range(2, len(value.shape))) + (1,)).contiguous().view(-1, value.shape[1])",
                            "Call"
                        ]
                    ]
                },
                "grid": {
                    "value": "upsample_grids[layer]",
                    "possible_values": []
                },
                "padding_mode": {
                    "value": "border",
                    "possible_values": []
                }
            },
            "from_numpy_1080": {
                "variable": {
                    "value": "max_iqr[layer]",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "data['max_iqr']",
                    "possible_values": []
                }
            },
            "from_numpy_1081": {
                "variable": {
                    "value": "max_iqr_level[layer]",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "data['max_iqr_level']",
                    "possible_values": []
                }
            },
            "from_numpy_1082": {
                "variable": {
                    "value": "max_iqr_quantile[layer]",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "data['max_iqr_quantile']",
                    "possible_values": []
                }
            },
            "from_numpy_1083": {
                "variable": {
                    "value": "max_iqr_iou[layer]",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "data['max_iqr_iou']",
                    "possible_values": []
                }
            },
            "from_numpy_1084": {
                "variable": {
                    "value": "max_iqr_agreement[layer]",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "data['max_iqr_agreement']",
                    "possible_values": []
                }
            },
            "isnan_1199": {
                "input": {
                    "value": "iqr",
                    "possible_values": [
                        [
                            "mi / je",
                            "BinOp"
                        ],
                        [
                            "mi / je",
                            "BinOp"
                        ],
                        [
                            "mutual_information(arr) / joint_entropy(arr)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "grid_sample_1333": {
                "variable": {
                    "value": "upsampled",
                    "possible_values": []
                },
                "input": {
                    "value": "value",
                    "possible_values": [
                        [
                            "features[key]",
                            "Subscript"
                        ],
                        [
                            "value.permute((0,) + tuple(range(2, len(value.shape))) + (1,)).contiguous().view(-1, value.shape[1])",
                            "Call"
                        ],
                        [
                            "features[layer]",
                            "Subscript"
                        ],
                        [
                            "value.permute((0,) + tuple(range(2, len(value.shape))) + (1,)).contiguous().view(-1, value.shape[1])",
                            "Call"
                        ]
                    ]
                },
                "grid": {
                    "value": "upsample_grids[key].expand((value.shape[0],) + upsample_grids[key].shape[1:])",
                    "possible_values": []
                },
                "padding_mode": {
                    "value": "border",
                    "possible_values": []
                }
            },
            "from_numpy_1374": {
                "ndarray": {
                    "value": "data",
                    "possible_values": [
                        [
                            "numpy.load(filename, allow_pickle=True)",
                            "Call"
                        ],
                        [
                            "numpy.load(filename, allow_pickle=True)",
                            "Call"
                        ],
                        [
                            "numpy.load(filepath, allow_pickle=True)",
                            "Call"
                        ],
                        [
                            "numpy.load(filepath, allow_pickle=True)",
                            "Call"
                        ],
                        [
                            "numpy.load(filepath, allow_pickle=True)",
                            "Call"
                        ],
                        [
                            "numpy.load(filepath, allow_pickle=True)",
                            "Call"
                        ],
                        [
                            "numpy.load(filepath, allow_pickle=True)",
                            "Call"
                        ],
                        [
                            "numpy.load(filepath, allow_pickle=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_1712": {
                "variable": {
                    "value": "index",
                    "possible_values": []
                },
                "start": {
                    "value": "z_batch.shape[0]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "labels.device",
                            "Attribute"
                        ],
                        [
                            "data.device",
                            "Attribute"
                        ],
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "from_numpy_815": {
                "ndarray": {
                    "value": "numpy.array(label_category, dtype='int64')",
                    "possible_values": []
                }
            },
            "from_numpy_922": {
                "ndarray": {
                    "value": "numpy.array(label_category, dtype='int64')",
                    "possible_values": []
                }
            },
            "isnan_1129": {
                "input": {
                    "value": "iqr",
                    "possible_values": [
                        [
                            "mi / je",
                            "BinOp"
                        ],
                        [
                            "mi / je",
                            "BinOp"
                        ],
                        [
                            "mutual_information(arr) / joint_entropy(arr)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "isnan_1161": {
                "input": {
                    "value": "matching_iou",
                    "possible_values": [
                        [
                            "isects[torch.arange(isects.shape[0])[:, None], torch.arange(isects.shape[1])[None, :], level_bucket] / unions[torch.arange(unions.shape[0])[:, None], torch.arange(unions.shape[1])[None, :], level_bucket]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "svd_1248": {
                "variable": {
                    "value": "(U, S, V)",
                    "possible_values": []
                },
                "input": {
                    "value": "C.double()",
                    "possible_values": []
                }
            },
            "conv2d_1258": {
                "input": {
                    "value": "x - mean[None, :, None, None]",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight[:, :, None, None]",
                    "possible_values": []
                }
            },
            "device_711": {
                "type": {
                    "value": "cpu",
                    "possible_values": []
                }
            },
            "device_716": {
                "type": {
                    "value": "cpu",
                    "possible_values": []
                }
            },
            "device_751": {
                "type": {
                    "value": "cpu",
                    "possible_values": []
                }
            },
            "device_752": {
                "type": {
                    "value": "cpu",
                    "possible_values": []
                }
            },
            "zeros_864": {
                "variable": {
                    "value": "intersection_counts[key]",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_labels",
                    "possible_values": []
                },
                "out": {
                    "value": "amask.shape[1]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "labels.device",
                            "Attribute"
                        ],
                        [
                            "data.device",
                            "Attribute"
                        ],
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "isnan_1183": {
                "input": {
                    "value": "term",
                    "possible_values": [
                        [
                            "joint * (joint / ind).log()",
                            "BinOp"
                        ],
                        [
                            "joint * joint.log()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "isnan_1193": {
                "input": {
                    "value": "term",
                    "possible_values": [
                        [
                            "joint * (joint / ind).log()",
                            "BinOp"
                        ],
                        [
                            "joint * joint.log()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "linear_1262": {
                "input": {
                    "value": "x - mean",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "possible_values": [
                        [
                            "V.t()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_1382": {
                "ndarray": {
                    "value": "data",
                    "possible_values": [
                        [
                            "numpy.load(filename, allow_pickle=True)",
                            "Call"
                        ],
                        [
                            "numpy.load(filename, allow_pickle=True)",
                            "Call"
                        ],
                        [
                            "numpy.load(filepath, allow_pickle=True)",
                            "Call"
                        ],
                        [
                            "numpy.load(filepath, allow_pickle=True)",
                            "Call"
                        ],
                        [
                            "numpy.load(filepath, allow_pickle=True)",
                            "Call"
                        ],
                        [
                            "numpy.load(filepath, allow_pickle=True)",
                            "Call"
                        ],
                        [
                            "numpy.load(filepath, allow_pickle=True)",
                            "Call"
                        ],
                        [
                            "numpy.load(filepath, allow_pickle=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_1454": {
                "tensors": {
                    "value": "(tx[None, :].expand(target_shape), ty[:, None].expand(target_shape))",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "arange_1056": {
                "start": {
                    "value": "levels.shape[0]",
                    "possible_values": []
                }
            },
            "arange_1450": {
                "start": {
                    "value": "ts",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "possible_values": [
                        [
                            "numpy.dtype(dtype)",
                            "Call"
                        ],
                        [
                            "torch.float",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "torch.float",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "labels.device",
                            "Attribute"
                        ],
                        [
                            "data.device",
                            "Attribute"
                        ],
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "from_numpy_1603": {
                "ndarray": {
                    "value": "mean",
                    "possible_values": [
                        [
                            "layercov.mean()",
                            "Call"
                        ],
                        [
                            "numpy.array(mean)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_1604": {
                "ndarray": {
                    "value": "stdev",
                    "possible_values": [
                        [
                            "numpy.array(stdev)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_257": {
                "start": {
                    "value": "lscore.shape[1]",
                    "possible_values": []
                }
            },
            "arange_258": {
                "start": {
                    "value": "lscore.shape[1]",
                    "possible_values": []
                }
            },
            "arange_262": {
                "start": {
                    "value": "qscore.shape[1]",
                    "possible_values": []
                }
            },
            "arange_1154": {
                "start": {
                    "value": "isects.shape[0]",
                    "possible_values": []
                }
            },
            "arange_1155": {
                "start": {
                    "value": "isects.shape[1]",
                    "possible_values": []
                }
            },
            "arange_1158": {
                "start": {
                    "value": "unions.shape[0]",
                    "possible_values": []
                }
            },
            "arange_1159": {
                "start": {
                    "value": "unions.shape[1]",
                    "possible_values": []
                }
            },
            "from_numpy_1280": {
                "ndarray": {
                    "value": "d",
                    "possible_values": []
                }
            },
            "arange_1145": {
                "start": {
                    "value": "levels.shape[0]",
                    "possible_values": []
                }
            },
            "arange_1148": {
                "start": {
                    "value": "agreement.shape[0]",
                    "possible_values": []
                }
            },
            "arange_1149": {
                "start": {
                    "value": "agreement.shape[1]",
                    "possible_values": []
                }
            },
            "arange_122": {
                "start": {
                    "value": "max_iqr[layer].shape[1]",
                    "possible_values": []
                }
            }
        }
    },
    "netdissect/evalablate.py": {
        "torch": {
            "TensorDataset_113": {
                "variable": {
                    "value": "dataset",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "raw_sample",
                    "possible_values": []
                }
            },
            "DataLoader_125": {
                "variable": {
                    "value": "segloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "possible_values": [
                        [
                            "TensorDataset(raw_sample)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "10",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "device.type == 'cuda'",
                    "possible_values": []
                }
            },
            "zeros_185": {
                "variable": {
                    "value": "total_scores",
                    "possible_values": []
                },
                "*size": {
                    "value": "repeats + 1",
                    "possible_values": []
                }
            },
            "zeros_203": {
                "variable": {
                    "value": "inter_chan",
                    "possible_values": []
                },
                "*size": {
                    "value": "repeats",
                    "possible_values": [
                        [
                            "len(ordering)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "location_count",
                    "possible_values": [
                        [
                            "len(interventions_needed)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "feature_units",
                    "possible_values": [
                        [
                            "model.feature_shape[layer][1]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_209": {
                "variable": {
                    "value": "scores",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(inter_z)",
                    "possible_values": []
                }
            },
            "is_available_86": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "zeros_214": {
                "variable": {
                    "value": "imask",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(ibz),) + feature_shape",
                    "possible_values": []
                },
                "device": {
                    "value": "ibz.device",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_192": {
                "input": {
                    "value": "mask.float()[:, None, :, :]",
                    "possible_values": []
                },
                "output_size": {
                    "value": "feature_shape",
                    "possible_values": [
                        [
                            "model.feature_shape[layer][2:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "adaptive_avg_pool2d_222": {
                "input": {
                    "value": "mask.float()[:, None, :, :]",
                    "possible_values": []
                },
                "output_size": {
                    "value": "feature_shape",
                    "possible_values": [
                        [
                            "model.feature_shape[layer][2:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "arange_215": {
                "start": {
                    "value": "len(ibz)",
                    "possible_values": []
                }
            },
            "arange_225": {
                "start": {
                    "value": "len(ibz)",
                    "possible_values": []
                }
            }
        }
    },
    "netdissect/frechet_distance.py": {
        "torch": {}
    },
    "netdissect/fsd.py": {
        "torch": {
            "DataLoader_68": {
                "variable": {
                    "value": "loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "possible_values": [
                        [
                            "parallelfolder.ParallelImageFolders([directory], transform=transforms.Compose([transforms.Resize(256), transforms.CenterCrop(256), transforms.ToTensor(), transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))]))",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "FixedRandomSubsetSampler(dataset, end=size, seed=1)",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "10",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "zeros_76": {
                "variable": {
                    "value": "batch_result",
                    "possible_values": []
                },
                "*size": {
                    "value": "loader.batch_size",
                    "possible_values": []
                },
                "out": {
                    "value": "NUM_OBJECTS",
                    "possible_values": [
                        [
                            "336",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "possible_values": []
                }
            },
            "DataLoader_94": {
                "variable": {
                    "value": "loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "possible_values": [
                        [
                            "parallelfolder.ParallelImageFolders([directory], transform=transforms.Compose([transforms.Resize(256), transforms.CenterCrop(256), transforms.ToTensor(), transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))]))",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "FixedRandomSubsetSampler(dataset, end=size)",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "10",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "zeros_100": {
                "variable": {
                    "value": "batch_result",
                    "possible_values": []
                },
                "*size": {
                    "value": "loader.batch_size",
                    "possible_values": []
                },
                "out": {
                    "value": "NUM_OBJECTS",
                    "possible_values": [
                        [
                            "336",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "possible_values": []
                }
            },
            "DataLoader_119": {
                "variable": {
                    "value": "loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "zds",
                    "possible_values": [
                        [
                            "zdataset.z_dataset_for_model(model, size)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "10",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "zeros_123": {
                "variable": {
                    "value": "batch_result",
                    "possible_values": []
                },
                "*size": {
                    "value": "loader.batch_size",
                    "possible_values": []
                },
                "out": {
                    "value": "NUM_OBJECTS",
                    "possible_values": [
                        [
                            "336",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "possible_values": []
                }
            },
            "no_grad_78": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_102": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_125": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "netdissect/fullablate.py": {
        "torch": {
            "TensorDataset_127": {
                "variable": {
                    "value": "dataset",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "raw_sample",
                    "possible_values": []
                }
            },
            "DataLoader_139": {
                "variable": {
                    "value": "segloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "possible_values": [
                        [
                            "TensorDataset(raw_sample)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "10",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "device.type == 'cuda'",
                    "possible_values": []
                }
            },
            "zeros_198": {
                "variable": {
                    "value": "total_scores",
                    "possible_values": []
                },
                "*size": {
                    "value": "repeats + 1",
                    "possible_values": []
                }
            },
            "is_available_88": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_201": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "zeros_207": {
                "variable": {
                    "value": "ablation",
                    "possible_values": []
                },
                "*size": {
                    "value": "feature_units",
                    "possible_values": [
                        [
                            "model.feature_shape[layer][1]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(model.parameters()).device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "tensor_208": {
                "variable": {
                    "value": "ablation[ordering[:num_units]]",
                    "possible_values": []
                },
                "data": {
                    "value": "values[:num_units]",
                    "possible_values": []
                }
            }
        }
    },
    "netdissect/imgviz.py": {
        "torch": {
            "zeros_like_144": {
                "variable": {
                    "value": "out",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "possible_values": [
                        [
                            "activations",
                            "Name"
                        ],
                        [
                            "activations[unit]",
                            "Subscript"
                        ],
                        [
                            "upsampler(a[None, None, ...], mode=mode)[0, 0].cpu()",
                            "Call"
                        ],
                        [
                            "activations",
                            "Name"
                        ],
                        [
                            "activations[unit]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tensor_78": {
                "data": {
                    "value": "[255.0, 255.0, 0]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "border.dtype",
                    "possible_values": []
                },
                "device": {
                    "value": "border.device",
                    "possible_values": []
                }
            },
            "interpolate_106": {
                "input": {
                    "value": "renormalizer(imagedata).float()[None, ...]",
                    "possible_values": []
                },
                "size": {
                    "value": "self.size",
                    "possible_values": []
                }
            }
        }
    },
    "netdissect/modelconfig.py": {
        "torch": {
            "zeros_133": {
                "variable": {
                    "value": "dry_run",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_shape",
                    "possible_values": [
                        [
                            "(1, 3) + tuple(imgsize)",
                            "BinOp"
                        ],
                        [
                            "(1, first_layer.in_channels, 1, 1)",
                            "Tuple"
                        ],
                        [
                            "(1, first_layer.in_features)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "load_49": {
                "variable": {
                    "value": "data",
                    "possible_values": []
                },
                "f": {
                    "value": "args.pthfile",
                    "possible_values": []
                }
            },
            "no_grad_134": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "netdissect/nethook.py": {
        "torch": {
            "InstrumentedModel_11": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.model": {
                    "value": "model",
                    "possible_values": [
                        [
                            "self.model",
                            "Attribute"
                        ]
                    ]
                }
            },
            "from_numpy_289": {
                "variable": {
                    "value": "v",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "numpy.array(v)",
                    "possible_values": []
                }
            },
            "Sequential_333": {
                "*args": {
                    "value": "OrderedDict(included_children)",
                    "possible_values": []
                }
            }
        }
    },
    "netdissect/parallelfolder.py": {
        "torch": {
            "ParallelImageFolders_18": {
                "base_class_0": {
                    "value": "torch.utils.data.Dataset",
                    "possible_values": []
                },
                "self.image_roots": {
                    "value": "image_roots",
                    "possible_values": [
                        [
                            "[os.path.expanduser(d) for d in image_roots]",
                            "ListComp"
                        ]
                    ]
                },
                "self.transforms": {
                    "value": "transform",
                    "possible_values": [
                        [
                            "[transform for _ in image_roots]",
                            "ListComp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.stacker": {
                    "value": "stacker",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.loader": {
                    "value": "loader",
                    "possible_values": [
                        [
                            "default_loader",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "netdissect/proggan.py": {
        "torch": {
            "ProgressiveGenerator_36": {
                "base_class_0": {
                    "value": "torch.nn.Sequential",
                    "possible_values": []
                }
            },
            "PixelNormLayer_100": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                }
            },
            "DoubleResolutionLayer_107": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                }
            },
            "WScaleLayer_112": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Parameter_116": {
                    "variable": {
                        "value": "self.b",
                        "possible_values": []
                    },
                    "data": {
                        "value": "torch.randn(size)",
                        "possible_values": []
                    }
                },
                "self.size": {
                    "value": "size",
                    "possible_values": []
                }
            },
            "NormConvBlock_125": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Conv2d_129": {
                    "variable": {
                        "value": "self.conv",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "in_channels",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "out_channels",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "kernel_size",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "1",
                        "possible_values": []
                    },
                    "padding": {
                        "value": "padding",
                        "possible_values": []
                    },
                    "bias": {
                        "value": "False",
                        "possible_values": []
                    }
                },
                "LeakyReLU_133": {
                    "variable": {
                        "value": "self.relu",
                        "possible_values": []
                    },
                    "inplace": {
                        "value": "True",
                        "possible_values": []
                    },
                    "negative_slope": {
                        "value": "0.2",
                        "possible_values": []
                    }
                }
            },
            "NormUpscaleConvBlock_141": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Conv2d_146": {
                    "variable": {
                        "value": "self.conv",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "in_channels",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "out_channels",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "kernel_size",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "1",
                        "possible_values": []
                    },
                    "padding": {
                        "value": "padding",
                        "possible_values": []
                    },
                    "bias": {
                        "value": "False",
                        "possible_values": []
                    }
                },
                "LeakyReLU_150": {
                    "variable": {
                        "value": "self.relu",
                        "possible_values": []
                    },
                    "inplace": {
                        "value": "True",
                        "possible_values": []
                    },
                    "negative_slope": {
                        "value": "0.2",
                        "possible_values": []
                    }
                }
            },
            "OutputConvBlock_159": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Conv2d_163": {
                    "variable": {
                        "value": "self.conv",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "in_channels",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "3",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "1",
                        "possible_values": []
                    },
                    "padding": {
                        "value": "0",
                        "possible_values": []
                    },
                    "bias": {
                        "value": "False",
                        "possible_values": []
                    }
                }
            },
            "interpolate_109": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "x.view(x.shape[0], x.shape[1], 1, 1)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, scale_factor=2, mode='nearest')",
                            "Call"
                        ],
                        [
                            "x * self.scale + self.b.view(1, -1, 1, 1).expand(x_size[0], self.size, x_size[2], x_size[3])",
                            "BinOp"
                        ],
                        [
                            "self.norm(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.relu(self.wscale(x))",
                            "Call"
                        ],
                        [
                            "self.norm(x)",
                            "Call"
                        ],
                        [
                            "self.up(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.relu(self.wscale(x))",
                            "Call"
                        ],
                        [
                            "self.norm(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.wscale(x)",
                            "Call"
                        ],
                        [
                            "self.clamp(x)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "possible_values": []
                }
            },
            "load_19": {
                "f": {
                    "value": "filename",
                    "possible_values": []
                }
            },
            "from_numpy_223": {
                "ndarray": {
                    "value": "data.eval()",
                    "possible_values": []
                }
            },
            "sqrt_105": {
                "input": {
                    "value": "torch.mean(x ** 2, dim=1, keepdim=True) + 1e-08",
                    "possible_values": []
                }
            },
            "randn_116": {
                "*size": {
                    "value": "size",
                    "possible_values": []
                }
            },
            "Hardtanh_166": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "mean_105": {
                "input": {
                    "value": "x ** 2",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            }
        }
    },
    "netdissect/renormalize.py": {
        "torch": {
            "from_numpy_74": {
                "variable": {
                    "value": "self.mul",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "numpy.array(oldscale) / numpy.array(newscale)",
                    "possible_values": []
                }
            },
            "from_numpy_76": {
                "variable": {
                    "value": "self.add",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "(numpy.array(oldoffset) - numpy.array(newoffset)) / numpy.array(newscale)",
                    "possible_values": []
                }
            }
        }
    },
    "netdissect/runningstats.py": {
        "torch": {
            "bernoulli_979": {
                "variable": {
                    "value": "bits",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.zeros(vec.shape[0], dtype=torch.uint8, device=vec.device)",
                    "possible_values": []
                },
                "generator": {
                    "value": "p",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "is_available_1002": {
                "variable": {
                    "value": "test_cuda",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "max_1034": {
                "variable": {
                    "value": "minerr",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(qc.minmax().cpu()[:, 0] - torch.arange(qc.depth, dtype=torch.float) * amount)",
                    "possible_values": []
                }
            },
            "max_1036": {
                "variable": {
                    "value": "maxerr",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(qc.minmax().cpu()[:, -1] + 1 - (torch.arange(qc.depth, dtype=torch.float) + 1) * amount)",
                    "possible_values": []
                }
            },
            "max_1039": {
                "variable": {
                    "value": "interr",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(qc.integrate(lambda x: x * x).cpu() - actual_sum) / actual_sum",
                    "possible_values": []
                }
            },
            "max_1042": {
                "variable": {
                    "value": "medianerr",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(qc.median() - alldata.median(0)[0]) / alldata.median(0)[0]",
                    "possible_values": []
                }
            },
            "max_1045": {
                "variable": {
                    "value": "meanerr",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(qc.mean() - alldata.mean(0)) / alldata.mean(0)",
                    "possible_values": []
                }
            },
            "max_1048": {
                "variable": {
                    "value": "varerr",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(qc.variance() - alldata.var(0)) / alldata.var(0)",
                    "possible_values": []
                }
            },
            "from_numpy_115": {
                "variable": {
                    "value": "self.top_data",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "dic['top_data']",
                    "possible_values": []
                }
            },
            "from_numpy_116": {
                "variable": {
                    "value": "self.top_index",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "dic['top_index']",
                    "possible_values": []
                }
            },
            "zeros_175": {
                "variable": {
                    "value": "self.extremes",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.depth",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "possible_values": []
                }
            },
            "from_numpy_307": {
                "variable": {
                    "value": "self.extremes",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "dic['extremes']",
                    "possible_values": []
                }
            },
            "zeros_382": {
                "variable": {
                    "value": "summary",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.depth",
                    "possible_values": []
                },
                "out": {
                    "value": "size",
                    "possible_values": [
                        [
                            "data.shape[0]",
                            "Subscript"
                        ],
                        [
                            "sum(self.firstfree) + 2",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.dtype",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "possible_values": []
                }
            },
            "zeros_413": {
                "variable": {
                    "value": "result",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.depth",
                    "possible_values": []
                },
                "out": {
                    "value": "quantiles.numel()",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "possible_values": []
                }
            },
            "zeros_like_458": {
                "variable": {
                    "value": "result",
                    "possible_values": []
                },
                "input": {
                    "value": "data",
                    "possible_values": [
                        [
                            "numpy.arange(float(amount))",
                            "Call"
                        ],
                        [
                            "data / 2",
                            "BinOp"
                        ],
                        [
                            "self.data[index][:, 0:self.firstfree[index]]",
                            "Subscript"
                        ],
                        [
                            "data.sort()[0]",
                            "Subscript"
                        ],
                        [
                            "self.data[index][:, :amount]",
                            "Subscript"
                        ],
                        [
                            "data.sort()[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_534": {
                "variable": {
                    "value": "result",
                    "possible_values": []
                },
                "size": {
                    "value": "(len(conditions), self.first_rq.depth, len(quantiles))",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.first_rq.dtype",
                    "possible_values": []
                },
                "device": {
                    "value": "self.first_rq.device",
                    "possible_values": []
                }
            },
            "zeros_545": {
                "variable": {
                    "value": "result",
                    "possible_values": []
                },
                "size": {
                    "value": "(len(conditions), values.shape[0], values.shape[1])",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "possible_values": []
                },
                "device": {
                    "value": "self.first_rq.device",
                    "possible_values": []
                }
            },
            "from_numpy_665": {
                "variable": {
                    "value": "self._mean",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "dic['mean']",
                    "possible_values": []
                }
            },
            "from_numpy_666": {
                "variable": {
                    "value": "self.v_cmom2",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "dic['cmom2']",
                    "possible_values": []
                }
            },
            "from_numpy_825": {
                "variable": {
                    "value": "self.cmom2",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "dic['cmom2']",
                    "possible_values": []
                }
            },
            "from_numpy_907": {
                "variable": {
                    "value": "self._mean",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "dic['mean']",
                    "possible_values": []
                }
            },
            "from_numpy_908": {
                "variable": {
                    "value": "self.cmom2",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "dic['cmom2']",
                    "possible_values": []
                }
            },
            "from_numpy_964": {
                "variable": {
                    "value": "self._bincount",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "dic['bincount']",
                    "possible_values": []
                }
            },
            "device_1011": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "possible_values": []
                }
            },
            "zeros_45": {
                "variable": {
                    "value": "self.top_data",
                    "possible_values": []
                },
                "*size": {
                    "value": "feature_size",
                    "possible_values": [
                        [
                            "int(numpy.prod(self.data_shape))",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "data.new()",
                    "possible_values": []
                }
            },
            "t_230": {
                "variable": {
                    "value": "self.data[0][:, ff:ff + copycount]",
                    "possible_values": []
                },
                "input": {
                    "value": "incoming[index:index + copycount, :]",
                    "possible_values": []
                }
            },
            "sort_395": {
                "variable": {
                    "value": "(summary, order)",
                    "possible_values": []
                },
                "input": {
                    "value": "summary",
                    "possible_values": [
                        [
                            "torch.zeros(self.depth, size, dtype=self.dtype, device=self.device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "tensor_401": {
                "variable": {
                    "value": "quantiles",
                    "possible_values": []
                },
                "data": {
                    "value": "quantiles",
                    "possible_values": [
                        [
                            "1000",
                            "Constant"
                        ],
                        [
                            "torch.tensor(quantiles)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_420": {
                "variable": {
                    "value": "result[d]",
                    "possible_values": []
                },
                "data": {
                    "value": "numpy.interp(nq, ncw[d], nsm[d])",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "possible_values": []
                }
            },
            "sum_429": {
                "variable": {
                    "value": "term",
                    "possible_values": []
                },
                "input": {
                    "value": "fun(self.data[level][:, :ff]) * 2.0 ** level",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "sum_457": {
                "input": {
                    "value": "weights",
                    "possible_values": [
                        [
                            "torch.FloatTensor(size)",
                            "Call"
                        ],
                        [
                            "weights[order.view(-1).cpu()].view(order.shape)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "tensor_464": {
                "variable": {
                    "value": "normed",
                    "possible_values": []
                },
                "data": {
                    "value": "numpy.interp(ndata[d], nsm[d], ncw[d])",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "possible_values": []
                },
                "device": {
                    "value": "data.device",
                    "possible_values": []
                }
            },
            "zeros_979": {
                "*size": {
                    "value": "vec.shape[0]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "possible_values": []
                },
                "device": {
                    "value": "vec.device",
                    "possible_values": []
                }
            },
            "max_1031": {
                "input": {
                    "value": "torch.abs(ro - gt) / amount",
                    "possible_values": []
                }
            },
            "abs_1034": {
                "input": {
                    "value": "qc.minmax().cpu()[:, 0] - torch.arange(qc.depth, dtype=torch.float) * amount",
                    "possible_values": []
                }
            },
            "abs_1036": {
                "input": {
                    "value": "qc.minmax().cpu()[:, -1] + 1 - (torch.arange(qc.depth, dtype=torch.float) + 1) * amount",
                    "possible_values": []
                }
            },
            "from_numpy_118": {
                "ndarray": {
                    "value": "dic['linear_index']",
                    "possible_values": []
                }
            },
            "zeros_173": {
                "*size": {
                    "value": "self.depth",
                    "possible_values": []
                },
                "out": {
                    "value": "self.resolution",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "possible_values": []
                }
            },
            "min_264": {
                "input": {
                    "value": "torch.stack([self.extremes[:, 0], minr])",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "max_266": {
                "input": {
                    "value": "torch.stack([self.extremes[:, -1], maxr])",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "full_404": {
                "size": {
                    "value": "(self.depth,) + qshape",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "torch.nan",
                    "possible_values": []
                }
            },
            "cumsum_406": {
                "input": {
                    "value": "weights",
                    "possible_values": [
                        [
                            "torch.FloatTensor(size)",
                            "Call"
                        ],
                        [
                            "weights[order.view(-1).cpu()].view(order.shape)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "sum_412": {
                "input": {
                    "value": "weights",
                    "possible_values": [
                        [
                            "torch.FloatTensor(size)",
                            "Call"
                        ],
                        [
                            "weights[order.view(-1).cpu()].view(order.shape)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "linspace_445": {
                "start": {
                    "value": "0.0",
                    "possible_values": []
                },
                "end": {
                    "value": "1.0",
                    "possible_values": []
                },
                "steps": {
                    "value": "count",
                    "possible_values": [
                        [
                            "1001",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cumsum_456": {
                "input": {
                    "value": "weights",
                    "possible_values": [
                        [
                            "torch.FloatTensor(size)",
                            "Call"
                        ],
                        [
                            "weights[order.view(-1).cpu()].view(order.shape)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "isnan_801": {
                "input": {
                    "value": "cor",
                    "possible_values": [
                        [
                            "rstdev[0][:, None] * covariance * rstdev[1][None, :]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "from_numpy_822": {
                "ndarray": {
                    "value": "dic[k]",
                    "possible_values": []
                }
            },
            "from_numpy_823": {
                "ndarray": {
                    "value": "dic[k]",
                    "possible_values": []
                }
            },
            "linspace_1029": {
                "start": {
                    "value": "0",
                    "possible_values": []
                },
                "end": {
                    "value": "amount",
                    "possible_values": [
                        [
                            "args.test_size",
                            "Attribute"
                        ],
                        [
                            "self.firstfree[index]",
                            "Subscript"
                        ]
                    ]
                },
                "steps": {
                    "value": "quantiles + 1",
                    "possible_values": []
                }
            },
            "abs_1039": {
                "input": {
                    "value": "qc.integrate(lambda x: x * x).cpu() - actual_sum",
                    "possible_values": []
                }
            },
            "min_260": {
                "input": {
                    "value": "incoming",
                    "possible_values": [
                        [
                            "incoming[index:]",
                            "Subscript"
                        ],
                        [
                            "sample_portion(incoming, self.samplerate)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "max_261": {
                "input": {
                    "value": "incoming",
                    "possible_values": [
                        [
                            "incoming[index:]",
                            "Subscript"
                        ],
                        [
                            "sample_portion(incoming, self.samplerate)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "stack_265": {
                "tensors": {
                    "value": "[self.extremes[:, 0], minr]",
                    "possible_values": []
                }
            },
            "stack_267": {
                "tensors": {
                    "value": "[self.extremes[:, -1], maxr]",
                    "possible_values": []
                }
            },
            "from_numpy_304": {
                "ndarray": {
                    "value": "buf",
                    "possible_values": [
                        [
                            "numpy.zeros((d.shape[1], s), dtype=d.dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_335": {
                "*size": {
                    "value": "self.depth",
                    "possible_values": []
                },
                "out": {
                    "value": "cap",
                    "possible_values": [
                        [
                            "self._next_capacity()",
                            "Call"
                        ],
                        [
                            "int(math.ceil(self.resolution * 0.67 ** len(self.data)))",
                            "Call"
                        ],
                        [
                            "-8 * (-cap // 8)",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.dtype",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "possible_values": []
                }
            },
            "arange_1030": {
                "start": {
                    "value": "qc.depth",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "possible_values": []
                }
            },
            "abs_1031": {
                "input": {
                    "value": "ro - gt",
                    "possible_values": []
                }
            },
            "arange_48": {
                "start": {
                    "value": "feature_size",
                    "possible_values": [
                        [
                            "int(numpy.prod(self.data_shape))",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "self.top_index.new()",
                    "possible_values": []
                }
            },
            "arange_1035": {
                "start": {
                    "value": "qc.depth",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "possible_values": []
                }
            },
            "abs_1042": {
                "input": {
                    "value": "qc.median() - alldata.median(0)[0]",
                    "possible_values": []
                }
            },
            "abs_1046": {
                "input": {
                    "value": "qc.mean() - alldata.mean(0)",
                    "possible_values": []
                }
            },
            "abs_1049": {
                "input": {
                    "value": "qc.variance() - alldata.var(0)",
                    "possible_values": []
                }
            },
            "arange_1037": {
                "start": {
                    "value": "qc.depth",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "possible_values": []
                }
            },
            "ones_1051": {
                "*size": {
                    "value": "x.shape[-1]",
                    "possible_values": []
                }
            }
        }
    },
    "netdissect/sampler.py": {
        "torch": {
            "FixedSubsetSampler_19": {
                "base_class_0": {
                    "value": "torch.utils.data.Sampler",
                    "possible_values": []
                },
                "self.samples": {
                    "value": "samples",
                    "possible_values": []
                }
            }
        }
    },
    "netdissect/segdata.py": {
        "torch": {
            "zeros_60": {
                "variable": {
                    "value": "segout",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(self.categories)",
                    "possible_values": []
                },
                "out": {
                    "value": "segin.shape[0]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "possible_values": []
                }
            },
            "from_numpy_63": {
                "ndarray": {
                    "value": "segin[:, :, field.index]",
                    "possible_values": []
                }
            }
        }
    },
    "netdissect/segmenter.py": {
        "torch": {
            "bincount_600": {
                "variable": {
                    "value": "bc",
                    "possible_values": []
                },
                "input": {
                    "value": "seg.view(-1)",
                    "possible_values": []
                }
            },
            "zeros_67": {
                "variable": {
                    "value": "pred",
                    "possible_values": []
                },
                "*size": {
                    "value": "(tensor_images.shape[0], 1, tensor_images.shape[2] // downsample, tensor_images.shape[3] // downsample)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                },
                "device": {
                    "value": "tensor_images.device",
                    "possible_values": []
                }
            },
            "zeros_73": {
                "variable": {
                    "value": "mask",
                    "possible_values": []
                },
                "*size": {
                    "value": "(tensor_images.shape[0], 1, tensor_images.shape[2] // downsample, tensor_images.shape[3] // downsample)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "possible_values": []
                },
                "device": {
                    "value": "tensor_images.device",
                    "possible_values": []
                }
            },
            "flip_181": {
                "variable": {
                    "value": "tensor_images",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor_images",
                    "possible_values": [
                        [
                            "(tensor_images + 1) / 2 * 255",
                            "BinOp"
                        ],
                        [
                            "torch.flip(tensor_images, (1,))",
                            "Call"
                        ],
                        [
                            "tensor_images - torch.tensor([102.9801, 115.9465, 122.7717]).to(dtype=tensor_images.dtype, device=tensor_images.device)[None, :, None, None]",
                            "BinOp"
                        ],
                        [
                            "torch.flip(tensor_images, (1,))",
                            "Call"
                        ],
                        [
                            "((tensor_images + 1) / 2).sub_(self.imagemean[None, :, None, None].to(tensor_images.device)).div_(self.imagestd[None, :, None, None].to(tensor_images.device))",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "(1,)",
                    "possible_values": []
                }
            },
            "zeros_225": {
                "variable": {
                    "value": "segs",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(tensor_images)",
                    "possible_values": []
                },
                "out": {
                    "value": "3 + piece_channels",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                },
                "layout": {
                    "value": "seg_shape[1]",
                    "possible_values": []
                },
                "device": {
                    "value": "tensor_images.device",
                    "possible_values": []
                }
            },
            "max_228": {
                "variable": {
                    "value": "(_, segs[:, 0])",
                    "possible_values": []
                },
                "input": {
                    "value": "pred['object']",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "max_230": {
                "variable": {
                    "value": "(_, segs[:, 1])",
                    "possible_values": []
                },
                "input": {
                    "value": "pred['material']",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "tensor_346": {
                "variable": {
                    "value": "self.imagemean",
                    "possible_values": []
                },
                "data": {
                    "value": "segmodel.meta.imageformat.mean",
                    "possible_values": []
                }
            },
            "tensor_347": {
                "variable": {
                    "value": "self.imagestd",
                    "possible_values": []
                },
                "data": {
                    "value": "segmodel.meta.imageformat.stdev",
                    "possible_values": []
                }
            },
            "zeros_411": {
                "variable": {
                    "value": "segs",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(tensor_images)",
                    "possible_values": []
                },
                "out": {
                    "value": "len(self.category_rules)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                },
                "layout": {
                    "value": "pred.shape[2]",
                    "possible_values": []
                },
                "device": {
                    "value": "pred.device",
                    "possible_values": []
                }
            },
            "zeros_448": {
                "variable": {
                    "value": "pred",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(tensor_images)",
                    "possible_values": []
                },
                "out": {
                    "value": "self.num_underlying_classes",
                    "possible_values": []
                },
                "dtype": {
                    "value": "seg_shape[0]",
                    "possible_values": []
                },
                "layout": {
                    "value": "seg_shape[1]",
                    "possible_values": []
                }
            },
            "from_numpy_513": {
                "variable": {
                    "value": "labeled",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "labeled",
                    "possible_values": [
                        [
                            "torch.from_numpy(labeled).to(segmentation_batch.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_56": {
                "*size": {
                    "value": "(tensor_images.shape[0], 1, tensor_images.shape[2] // downsample, tensor_images.shape[3] // downsample)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                },
                "device": {
                    "value": "tensor_images.device",
                    "possible_values": []
                }
            },
            "max_408": {
                "variable": {
                    "value": "(_, segs)",
                    "possible_values": []
                },
                "input": {
                    "value": "pred[:, catindex]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "flip_438": {
                "variable": {
                    "value": "tensor_images",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor_images",
                    "possible_values": [
                        [
                            "(tensor_images + 1) / 2 * 255",
                            "BinOp"
                        ],
                        [
                            "torch.flip(tensor_images, (1,))",
                            "Call"
                        ],
                        [
                            "tensor_images - torch.tensor([102.9801, 115.9465, 122.7717]).to(dtype=tensor_images.dtype, device=tensor_images.device)[None, :, None, None]",
                            "BinOp"
                        ],
                        [
                            "torch.flip(tensor_images, (1,))",
                            "Call"
                        ],
                        [
                            "((tensor_images + 1) / 2).sub_(self.imagemean[None, :, None, None].to(tensor_images.device)).div_(self.imagestd[None, :, None, None].to(tensor_images.device))",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "(1,)",
                    "possible_values": []
                }
            },
            "empty_like_458": {
                "variable": {
                    "value": "softmax_pred",
                    "possible_values": []
                },
                "input": {
                    "value": "raw_pred",
                    "possible_values": [
                        [
                            "self.segmodel(dict(img_data=resized), segSize=seg_shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "NLLLoss_565": {
                "ignore_index": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "tensor_182": {
                "data": {
                    "value": "[102.9801, 115.9465, 122.7717]",
                    "possible_values": []
                }
            },
            "zeros_188": {
                "*size": {
                    "value": "len(tensor_images)",
                    "possible_values": []
                },
                "out": {
                    "value": "len(self.segmodel.labeldata[category])",
                    "possible_values": []
                },
                "dtype": {
                    "value": "seg_shape[0]",
                    "possible_values": []
                },
                "layout": {
                    "value": "seg_shape[1]",
                    "possible_values": []
                }
            },
            "zeros_192": {
                "*size": {
                    "value": "len(tensor_images)",
                    "possible_values": []
                },
                "out": {
                    "value": "len(partindex)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "seg_shape[0]",
                    "possible_values": []
                },
                "layout": {
                    "value": "seg_shape[1]",
                    "possible_values": []
                }
            },
            "max_286": {
                "variable": {
                    "value": "mask",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "possible_values": [
                        [
                            "torch.zeros((tensor_images.shape[0], 1, tensor_images.shape[2] // downsample, tensor_images.shape[3] // downsample), dtype=torch.uint8, device=tensor_images.device)",
                            "Call"
                        ],
                        [
                            "segs[:, 0] == object_index",
                            "Compare"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "pred['object'].max(dim=1)[1] == classnum",
                            "Compare"
                        ],
                        [
                            "mask2",
                            "Name"
                        ],
                        [
                            "torch.max(mask, mask2)",
                            "Call"
                        ],
                        [
                            "segs[:, 3:] <= self.num_object_classes",
                            "Compare"
                        ],
                        [
                            "(seg == classnum).max(1)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tensor_377": {
                "data": {
                    "value": "[self.labelmap.get(segmodel.meta.labels[ind].name, 0) for ind in catindex]",
                    "possible_values": []
                }
            },
            "softmax_460": {
                "variable": {
                    "value": "softmax_pred[:, catindex]",
                    "possible_values": []
                },
                "input": {
                    "value": "raw_pred[:, catindex]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "tensor_137": {
                "data": {
                    "value": "numeric_part_list",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "AdaptiveAvgPool2d_200": {
                "output_size": {
                    "value": "size",
                    "possible_values": [
                        [
                            "sizes",
                            "Name"
                        ],
                        [
                            "sizes",
                            "Name"
                        ]
                    ]
                }
            },
            "max_238": {
                "input": {
                    "value": "part_pred[i]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_455": {
                "output_size": {
                    "value": "size",
                    "possible_values": [
                        [
                            "sizes",
                            "Name"
                        ],
                        [
                            "sizes",
                            "Name"
                        ]
                    ]
                }
            },
            "from_numpy_596": {
                "ndarray": {
                    "value": "numpy.asarray(testim)",
                    "possible_values": []
                }
            },
            "permute_596": {
                "input": {
                    "value": "2",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "possible_values": []
                }
            }
        }
    },
    "netdissect/segmodel/models.py": {
        "torch": {
            "SegmentationModuleBase_11": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                }
            },
            "Resnet_180": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                }
            },
            "ResnetDilated_218": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                }
            },
            "C1BilinearDeepSup_282": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.use_softmax": {
                    "value": "use_softmax",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.inference": {
                    "value": "inference",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "Conv2d_292": {
                    "variable": {
                        "value": "self.conv_last",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "fc_dim // 4",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "num_class",
                        "possible_values": [
                            [
                                "150",
                                "MethodArgument"
                            ],
                            [
                                "150",
                                "MethodArgument"
                            ],
                            [
                                "150",
                                "MethodArgument"
                            ],
                            [
                                "150",
                                "MethodArgument"
                            ],
                            [
                                "150",
                                "MethodArgument"
                            ],
                            [
                                "150",
                                "MethodArgument"
                            ]
                        ]
                    },
                    "kernel_size": {
                        "value": "1",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "1",
                        "possible_values": []
                    },
                    "padding": {
                        "value": "0",
                        "possible_values": []
                    }
                },
                "Conv2d_293": {
                    "variable": {
                        "value": "self.conv_last_deepsup",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "fc_dim // 4",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "num_class",
                        "possible_values": [
                            [
                                "150",
                                "MethodArgument"
                            ],
                            [
                                "150",
                                "MethodArgument"
                            ],
                            [
                                "150",
                                "MethodArgument"
                            ],
                            [
                                "150",
                                "MethodArgument"
                            ],
                            [
                                "150",
                                "MethodArgument"
                            ],
                            [
                                "150",
                                "MethodArgument"
                            ]
                        ]
                    },
                    "kernel_size": {
                        "value": "1",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "1",
                        "possible_values": []
                    },
                    "padding": {
                        "value": "0",
                        "possible_values": []
                    }
                }
            },
            "C1Bilinear_320": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.use_softmax": {
                    "value": "use_softmax",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.inference": {
                    "value": "inference",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "Conv2d_329": {
                    "variable": {
                        "value": "self.conv_last",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "fc_dim // 4",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "num_class",
                        "possible_values": [
                            [
                                "150",
                                "MethodArgument"
                            ],
                            [
                                "150",
                                "MethodArgument"
                            ],
                            [
                                "150",
                                "MethodArgument"
                            ],
                            [
                                "150",
                                "MethodArgument"
                            ],
                            [
                                "150",
                                "MethodArgument"
                            ],
                            [
                                "150",
                                "MethodArgument"
                            ]
                        ]
                    },
                    "kernel_size": {
                        "value": "1",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "1",
                        "possible_values": []
                    },
                    "padding": {
                        "value": "0",
                        "possible_values": []
                    }
                }
            },
            "PPMBilinear_348": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.use_softmax": {
                    "value": "use_softmax",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.inference": {
                    "value": "inference",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "ModuleList_363": {
                    "variable": {
                        "value": "self.ppm",
                        "possible_values": []
                    },
                    "modules": {
                        "value": "self.ppm",
                        "possible_values": []
                    }
                },
                "Sequential_365": {
                    "variable": {
                        "value": "self.conv_last",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "nn.Conv2d(fc_dim + len(pool_scales) * 512, 512, kernel_size=3, padding=1, bias=False)",
                        "possible_values": []
                    }
                }
            },
            "PPMBilinearDeepsup_399": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.use_softmax": {
                    "value": "use_softmax",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.inference": {
                    "value": "inference",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "ModuleList_414": {
                    "variable": {
                        "value": "self.ppm",
                        "possible_values": []
                    },
                    "modules": {
                        "value": "self.ppm",
                        "possible_values": []
                    }
                },
                "Sequential_417": {
                    "variable": {
                        "value": "self.conv_last",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "nn.Conv2d(fc_dim + len(pool_scales) * 512, 512, kernel_size=3, padding=1, bias=False)",
                        "possible_values": []
                    }
                },
                "Conv2d_425": {
                    "variable": {
                        "value": "self.conv_last_deepsup",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "fc_dim // 4",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "num_class",
                        "possible_values": [
                            [
                                "150",
                                "MethodArgument"
                            ],
                            [
                                "150",
                                "MethodArgument"
                            ],
                            [
                                "150",
                                "MethodArgument"
                            ],
                            [
                                "150",
                                "MethodArgument"
                            ],
                            [
                                "150",
                                "MethodArgument"
                            ],
                            [
                                "150",
                                "MethodArgument"
                            ]
                        ]
                    },
                    "kernel_size": {
                        "value": "1",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "1",
                        "possible_values": []
                    },
                    "padding": {
                        "value": "0",
                        "possible_values": []
                    }
                },
                "Dropout2d_426": {
                    "variable": {
                        "value": "self.dropout_deepsup",
                        "possible_values": []
                    },
                    "p": {
                        "value": "0.1",
                        "possible_values": []
                    }
                }
            },
            "UPerNet_462": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.use_softmax": {
                    "value": "use_softmax",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.inference": {
                    "value": "inference",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "ModuleList_481": {
                    "variable": {
                        "value": "self.ppm_pooling",
                        "possible_values": []
                    },
                    "modules": {
                        "value": "self.ppm_pooling",
                        "possible_values": []
                    }
                },
                "ModuleList_482": {
                    "variable": {
                        "value": "self.ppm_conv",
                        "possible_values": []
                    },
                    "modules": {
                        "value": "self.ppm_conv",
                        "possible_values": []
                    }
                },
                "ModuleList_493": {
                    "variable": {
                        "value": "self.fpn_in",
                        "possible_values": []
                    },
                    "modules": {
                        "value": "self.fpn_in",
                        "possible_values": []
                    }
                },
                "ModuleList_500": {
                    "variable": {
                        "value": "self.fpn_out",
                        "possible_values": []
                    },
                    "modules": {
                        "value": "self.fpn_out",
                        "possible_values": []
                    }
                },
                "Sequential_502": {
                    "variable": {
                        "value": "self.conv_last",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "conv3x3_bn_relu(len(fpn_inplanes) * fpn_dim, fpn_dim, 1)",
                        "possible_values": []
                    }
                }
            },
            "max_16": {
                "variable": {
                    "value": "(_, preds)",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "possible_values": [
                        [
                            "self.decoder(self.encoder(feed_dict['img_data'], return_feature_maps=True), segSize=segSize)",
                            "Call"
                        ],
                        [
                            "self.decoder(self.encoder(feed_dict['img_data'], return_feature_maps=True))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "sum_18": {
                "variable": {
                    "value": "acc_sum",
                    "possible_values": []
                },
                "input": {
                    "value": "valid * (preds == label).long()",
                    "possible_values": []
                }
            },
            "sum_19": {
                "variable": {
                    "value": "pixel_sum",
                    "possible_values": []
                },
                "input": {
                    "value": "valid",
                    "possible_values": [
                        [
                            "(label >= 0).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_53": {
                "in_channels": {
                    "value": "in_planes",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "has_bias",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_58": {
                "*args": {
                    "value": "conv3x3(in_planes, out_planes, stride)",
                    "possible_values": []
                }
            },
            "log_softmax_313": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.cbr(conv5)",
                            "Call"
                        ],
                        [
                            "self.conv_last(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.cbr(conv5)",
                            "Call"
                        ],
                        [
                            "self.conv_last(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(fusion_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "log_softmax_314": {
                "variable": {
                    "value": "_",
                    "possible_values": []
                },
                "input": {
                    "value": "_",
                    "possible_values": [
                        [
                            "self.cbr_deepsup(conv4)",
                            "Call"
                        ],
                        [
                            "self.conv_last_deepsup(_)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(_, dim=1)",
                            "Call"
                        ],
                        [
                            "self.cbr_deepsup(conv4)",
                            "Call"
                        ],
                        [
                            "self.dropout_deepsup(_)",
                            "Call"
                        ],
                        [
                            "self.conv_last_deepsup(_)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(_, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_384": {
                "variable": {
                    "value": "ppm_out",
                    "possible_values": []
                },
                "tensors": {
                    "value": "ppm_out",
                    "possible_values": [
                        [
                            "[conv5]",
                            "List"
                        ],
                        [
                            "torch.cat(ppm_out, 1)",
                            "Call"
                        ],
                        [
                            "[conv5]",
                            "List"
                        ],
                        [
                            "torch.cat(ppm_out, 1)",
                            "Call"
                        ],
                        [
                            "[conv5]",
                            "List"
                        ],
                        [
                            "torch.cat(ppm_out, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_438": {
                "variable": {
                    "value": "ppm_out",
                    "possible_values": []
                },
                "tensors": {
                    "value": "ppm_out",
                    "possible_values": [
                        [
                            "[conv5]",
                            "List"
                        ],
                        [
                            "torch.cat(ppm_out, 1)",
                            "Call"
                        ],
                        [
                            "[conv5]",
                            "List"
                        ],
                        [
                            "torch.cat(ppm_out, 1)",
                            "Call"
                        ],
                        [
                            "[conv5]",
                            "List"
                        ],
                        [
                            "torch.cat(ppm_out, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "log_softmax_455": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.cbr(conv5)",
                            "Call"
                        ],
                        [
                            "self.conv_last(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.cbr(conv5)",
                            "Call"
                        ],
                        [
                            "self.conv_last(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(fusion_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "log_softmax_456": {
                "variable": {
                    "value": "_",
                    "possible_values": []
                },
                "input": {
                    "value": "_",
                    "possible_values": [
                        [
                            "self.cbr_deepsup(conv4)",
                            "Call"
                        ],
                        [
                            "self.conv_last_deepsup(_)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(_, dim=1)",
                            "Call"
                        ],
                        [
                            "self.cbr_deepsup(conv4)",
                            "Call"
                        ],
                        [
                            "self.dropout_deepsup(_)",
                            "Call"
                        ],
                        [
                            "self.conv_last_deepsup(_)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(_, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_517": {
                "variable": {
                    "value": "ppm_out",
                    "possible_values": []
                },
                "tensors": {
                    "value": "ppm_out",
                    "possible_values": [
                        [
                            "[conv5]",
                            "List"
                        ],
                        [
                            "torch.cat(ppm_out, 1)",
                            "Call"
                        ],
                        [
                            "[conv5]",
                            "List"
                        ],
                        [
                            "torch.cat(ppm_out, 1)",
                            "Call"
                        ],
                        [
                            "[conv5]",
                            "List"
                        ],
                        [
                            "torch.cat(ppm_out, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_539": {
                "variable": {
                    "value": "fusion_out",
                    "possible_values": []
                },
                "tensors": {
                    "value": "fusion_list",
                    "possible_values": [
                        [
                            "[fpn_feature_list[0]]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "log_softmax_549": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.cbr(conv5)",
                            "Call"
                        ],
                        [
                            "self.conv_last(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.cbr(conv5)",
                            "Call"
                        ],
                        [
                            "self.conv_last(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(fusion_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "ReLU_61": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "interpolate_302": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.cbr(conv5)",
                            "Call"
                        ],
                        [
                            "self.conv_last(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.cbr(conv5)",
                            "Call"
                        ],
                        [
                            "self.conv_last(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(fusion_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "segSize",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "interpolate_337": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.cbr(conv5)",
                            "Call"
                        ],
                        [
                            "self.conv_last(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.cbr(conv5)",
                            "Call"
                        ],
                        [
                            "self.conv_last(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(fusion_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "segSize",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "log_softmax_342": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.cbr(conv5)",
                            "Call"
                        ],
                        [
                            "self.conv_last(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.cbr(conv5)",
                            "Call"
                        ],
                        [
                            "self.conv_last(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(fusion_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "interpolate_389": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.cbr(conv5)",
                            "Call"
                        ],
                        [
                            "self.conv_last(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.cbr(conv5)",
                            "Call"
                        ],
                        [
                            "self.conv_last(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(fusion_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "segSize",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "log_softmax_394": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.cbr(conv5)",
                            "Call"
                        ],
                        [
                            "self.conv_last(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.cbr(conv5)",
                            "Call"
                        ],
                        [
                            "self.conv_last(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(fusion_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "interpolate_443": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.cbr(conv5)",
                            "Call"
                        ],
                        [
                            "self.conv_last(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.cbr(conv5)",
                            "Call"
                        ],
                        [
                            "self.conv_last(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(fusion_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "segSize",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "interpolate_525": {
                "variable": {
                    "value": "f",
                    "possible_values": []
                },
                "input": {
                    "value": "f",
                    "possible_values": [
                        [
                            "self.ppm_last_conv(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(f, size=conv_x.size()[2:], mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "conv_x + f",
                            "BinOp"
                        ]
                    ]
                },
                "size": {
                    "value": "conv_x.size()[2:]",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "interpolate_543": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.cbr(conv5)",
                            "Call"
                        ],
                        [
                            "self.conv_last(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.cbr(conv5)",
                            "Call"
                        ],
                        [
                            "self.conv_last(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(fusion_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "segSize",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "softmax_305": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.cbr(conv5)",
                            "Call"
                        ],
                        [
                            "self.conv_last(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.cbr(conv5)",
                            "Call"
                        ],
                        [
                            "self.conv_last(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(fusion_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "softmax_340": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.cbr(conv5)",
                            "Call"
                        ],
                        [
                            "self.conv_last(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.cbr(conv5)",
                            "Call"
                        ],
                        [
                            "self.conv_last(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(fusion_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_366": {
                "in_channels": {
                    "value": "fc_dim + len(pool_scales) * 512",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "ReLU_369": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Dropout2d_370": {
                "p": {
                    "value": "0.1",
                    "possible_values": []
                }
            },
            "Conv2d_371": {
                "in_channels": {
                    "value": "512",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_class",
                    "possible_values": [
                        [
                            "150",
                            "MethodArgument"
                        ],
                        [
                            "150",
                            "MethodArgument"
                        ],
                        [
                            "150",
                            "MethodArgument"
                        ],
                        [
                            "150",
                            "MethodArgument"
                        ],
                        [
                            "150",
                            "MethodArgument"
                        ],
                        [
                            "150",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "softmax_392": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.cbr(conv5)",
                            "Call"
                        ],
                        [
                            "self.conv_last(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.cbr(conv5)",
                            "Call"
                        ],
                        [
                            "self.conv_last(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(fusion_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_418": {
                "in_channels": {
                    "value": "fc_dim + len(pool_scales) * 512",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "ReLU_421": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Dropout2d_422": {
                "p": {
                    "value": "0.1",
                    "possible_values": []
                }
            },
            "Conv2d_423": {
                "in_channels": {
                    "value": "512",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_class",
                    "possible_values": [
                        [
                            "150",
                            "MethodArgument"
                        ],
                        [
                            "150",
                            "MethodArgument"
                        ],
                        [
                            "150",
                            "MethodArgument"
                        ],
                        [
                            "150",
                            "MethodArgument"
                        ],
                        [
                            "150",
                            "MethodArgument"
                        ],
                        [
                            "150",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "softmax_446": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.cbr(conv5)",
                            "Call"
                        ],
                        [
                            "self.conv_last(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.cbr(conv5)",
                            "Call"
                        ],
                        [
                            "self.conv_last(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(fusion_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_504": {
                "in_channels": {
                    "value": "fpn_dim",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_class",
                    "possible_values": [
                        [
                            "150",
                            "MethodArgument"
                        ],
                        [
                            "150",
                            "MethodArgument"
                        ],
                        [
                            "150",
                            "MethodArgument"
                        ],
                        [
                            "150",
                            "MethodArgument"
                        ],
                        [
                            "150",
                            "MethodArgument"
                        ],
                        [
                            "150",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "softmax_546": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.cbr(conv5)",
                            "Call"
                        ],
                        [
                            "self.conv_last(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.cbr(conv5)",
                            "Call"
                        ],
                        [
                            "self.conv_last(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(fusion_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "load_125": {
                "f": {
                    "value": "weights",
                    "possible_values": [
                        [
                            "''",
                            "MethodArgument"
                        ],
                        [
                            "''",
                            "MethodArgument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "possible_values": []
                }
            },
            "load_176": {
                "f": {
                    "value": "weights",
                    "possible_values": [
                        [
                            "''",
                            "MethodArgument"
                        ],
                        [
                            "''",
                            "MethodArgument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "possible_values": []
                }
            },
            "Sequential_357": {
                "*args": {
                    "value": "nn.AdaptiveAvgPool2d(scale)",
                    "possible_values": []
                }
            },
            "interpolate_380": {
                "input": {
                    "value": "pool_scale(conv5)",
                    "possible_values": []
                },
                "size": {
                    "value": "(input_size[2], input_size[3])",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "Sequential_408": {
                "*args": {
                    "value": "nn.AdaptiveAvgPool2d(scale)",
                    "possible_values": []
                }
            },
            "interpolate_434": {
                "input": {
                    "value": "pool_scale(conv5)",
                    "possible_values": []
                },
                "size": {
                    "value": "(input_size[2], input_size[3])",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_475": {
                "output_size": {
                    "value": "scale",
                    "possible_values": [
                        [
                            "pool_scales",
                            "Name"
                        ],
                        [
                            "pool_scales",
                            "Name"
                        ],
                        [
                            "pool_scales",
                            "Name"
                        ]
                    ]
                }
            },
            "Sequential_476": {
                "*args": {
                    "value": "nn.Conv2d(fc_dim, 512, kernel_size=1, bias=False)",
                    "possible_values": []
                }
            },
            "Sequential_488": {
                "*args": {
                    "value": "nn.Conv2d(fpn_inplane, fpn_dim, kernel_size=1, bias=False)",
                    "possible_values": []
                }
            },
            "Sequential_497": {
                "*args": {
                    "value": "conv3x3_bn_relu(fpn_dim, fpn_dim, 1)",
                    "possible_values": []
                }
            },
            "interpolate_535": {
                "input": {
                    "value": "fpn_feature_list[i]",
                    "possible_values": []
                },
                "size": {
                    "value": "output_size",
                    "possible_values": [
                        [
                            "fpn_feature_list[0].size()[2:]",
                            "Subscript"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_358": {
                "output_size": {
                    "value": "scale",
                    "possible_values": [
                        [
                            "pool_scales",
                            "Name"
                        ],
                        [
                            "pool_scales",
                            "Name"
                        ],
                        [
                            "pool_scales",
                            "Name"
                        ]
                    ]
                }
            },
            "Conv2d_359": {
                "in_channels": {
                    "value": "fc_dim",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "2048",
                            "MethodArgument"
                        ],
                        [
                            "2048",
                            "MethodArgument"
                        ],
                        [
                            "4096",
                            "MethodArgument"
                        ],
                        [
                            "4096",
                            "MethodArgument"
                        ],
                        [
                            "4096",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "512",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "ReLU_361": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_409": {
                "output_size": {
                    "value": "scale",
                    "possible_values": [
                        [
                            "pool_scales",
                            "Name"
                        ],
                        [
                            "pool_scales",
                            "Name"
                        ],
                        [
                            "pool_scales",
                            "Name"
                        ]
                    ]
                }
            },
            "Conv2d_410": {
                "in_channels": {
                    "value": "fc_dim",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "2048",
                            "MethodArgument"
                        ],
                        [
                            "2048",
                            "MethodArgument"
                        ],
                        [
                            "4096",
                            "MethodArgument"
                        ],
                        [
                            "4096",
                            "MethodArgument"
                        ],
                        [
                            "4096",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "512",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "ReLU_412": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Conv2d_477": {
                "in_channels": {
                    "value": "fc_dim",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "2048",
                            "MethodArgument"
                        ],
                        [
                            "2048",
                            "MethodArgument"
                        ],
                        [
                            "4096",
                            "MethodArgument"
                        ],
                        [
                            "4096",
                            "MethodArgument"
                        ],
                        [
                            "4096",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "512",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "ReLU_479": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Conv2d_489": {
                "in_channels": {
                    "value": "fpn_inplane",
                    "possible_values": [
                        [
                            "fpn_inplanes[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "fpn_dim",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "ReLU_491": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            }
        }
    },
    "netdissect/segmodel/resnet.py": {
        "torch": {
            "BasicBlock_32": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "ReLU_39": {
                    "variable": {
                        "value": "self.relu",
                        "possible_values": []
                    },
                    "inplace": {
                        "value": "True",
                        "possible_values": []
                    }
                },
                "self.downsample": {
                    "value": "downsample",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "nn.Sequential(nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False), SynchronizedBatchNorm2d(planes * block.expansion))",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Bottleneck_64": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Conv2d_69": {
                    "variable": {
                        "value": "self.conv1",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "inplanes",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "planes",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "1",
                        "possible_values": []
                    },
                    "bias": {
                        "value": "False",
                        "possible_values": []
                    }
                },
                "Conv2d_71": {
                    "variable": {
                        "value": "self.conv2",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "planes",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "planes",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "3",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "stride",
                        "possible_values": [
                            [
                                "1",
                                "MethodArgument"
                            ],
                            [
                                "1",
                                "MethodArgument"
                            ],
                            [
                                "1",
                                "MethodArgument"
                            ],
                            [
                                "1",
                                "MethodArgument"
                            ]
                        ]
                    },
                    "padding": {
                        "value": "1",
                        "possible_values": []
                    },
                    "bias": {
                        "value": "False",
                        "possible_values": []
                    }
                },
                "Conv2d_74": {
                    "variable": {
                        "value": "self.conv3",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "planes",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "planes * 4",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "1",
                        "possible_values": []
                    },
                    "bias": {
                        "value": "False",
                        "possible_values": []
                    }
                },
                "ReLU_76": {
                    "variable": {
                        "value": "self.relu",
                        "possible_values": []
                    },
                    "inplace": {
                        "value": "True",
                        "possible_values": []
                    }
                },
                "self.downsample": {
                    "value": "downsample",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "nn.Sequential(nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False), SynchronizedBatchNorm2d(planes * block.expansion))",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ResNet_103": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "ReLU_110": {
                    "variable": {
                        "value": "self.relu1",
                        "possible_values": []
                    },
                    "inplace": {
                        "value": "True",
                        "possible_values": []
                    }
                },
                "ReLU_113": {
                    "variable": {
                        "value": "self.relu2",
                        "possible_values": []
                    },
                    "inplace": {
                        "value": "True",
                        "possible_values": []
                    }
                },
                "ReLU_116": {
                    "variable": {
                        "value": "self.relu3",
                        "possible_values": []
                    },
                    "inplace": {
                        "value": "True",
                        "possible_values": []
                    }
                },
                "MaxPool2d_117": {
                    "variable": {
                        "value": "self.maxpool",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "3",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "2",
                        "possible_values": []
                    },
                    "padding": {
                        "value": "1",
                        "possible_values": []
                    }
                },
                "AvgPool2d_123": {
                    "variable": {
                        "value": "self.avgpool",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "7",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "1",
                        "possible_values": []
                    }
                },
                "Linear_124": {
                    "variable": {
                        "value": "self.fc",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "512 * block.expansion",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "num_classes",
                        "possible_values": [
                            [
                                "1000",
                                "MethodArgument"
                            ]
                        ]
                    }
                }
            },
            "Conv2d_28": {
                "in_channels": {
                    "value": "in_planes",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "load_235": {
                "f": {
                    "value": "cached_file",
                    "possible_values": [
                        [
                            "os.path.join(model_dir, filename)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "map_location",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_137": {
                "variable": {
                    "value": "downsample",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "possible_values": []
                }
            },
            "Sequential_149": {
                "*args": {
                    "value": "*layers",
                    "possible_values": []
                }
            },
            "Conv2d_138": {
                "in_channels": {
                    "value": "self.inplanes",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            }
        }
    },
    "netdissect/segmodel/resnext.py": {
        "torch": {
            "GroupBottleneck_31": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Conv2d_36": {
                    "variable": {
                        "value": "self.conv1",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "inplanes",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "planes",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "1",
                        "possible_values": []
                    },
                    "bias": {
                        "value": "False",
                        "possible_values": []
                    }
                },
                "Conv2d_38": {
                    "variable": {
                        "value": "self.conv2",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "planes",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "planes",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "3",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "stride",
                        "possible_values": [
                            [
                                "1",
                                "MethodArgument"
                            ],
                            [
                                "1",
                                "MethodArgument"
                            ],
                            [
                                "1",
                                "MethodArgument"
                            ]
                        ]
                    },
                    "padding": {
                        "value": "1",
                        "possible_values": []
                    },
                    "groups": {
                        "value": "groups",
                        "possible_values": [
                            [
                                "1",
                                "MethodArgument"
                            ],
                            [
                                "32",
                                "MethodArgument"
                            ],
                            [
                                "1",
                                "MethodArgument"
                            ]
                        ]
                    },
                    "bias": {
                        "value": "False",
                        "possible_values": []
                    }
                },
                "Conv2d_41": {
                    "variable": {
                        "value": "self.conv3",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "planes",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "planes * 2",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "1",
                        "possible_values": []
                    },
                    "bias": {
                        "value": "False",
                        "possible_values": []
                    }
                },
                "ReLU_43": {
                    "variable": {
                        "value": "self.relu",
                        "possible_values": []
                    },
                    "inplace": {
                        "value": "True",
                        "possible_values": []
                    }
                },
                "self.downsample": {
                    "value": "downsample",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "nn.Sequential(nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False), SynchronizedBatchNorm2d(planes * block.expansion))",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ResNeXt_70": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "ReLU_77": {
                    "variable": {
                        "value": "self.relu1",
                        "possible_values": []
                    },
                    "inplace": {
                        "value": "True",
                        "possible_values": []
                    }
                },
                "ReLU_80": {
                    "variable": {
                        "value": "self.relu2",
                        "possible_values": []
                    },
                    "inplace": {
                        "value": "True",
                        "possible_values": []
                    }
                },
                "ReLU_83": {
                    "variable": {
                        "value": "self.relu3",
                        "possible_values": []
                    },
                    "inplace": {
                        "value": "True",
                        "possible_values": []
                    }
                },
                "MaxPool2d_84": {
                    "variable": {
                        "value": "self.maxpool",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "3",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "2",
                        "possible_values": []
                    },
                    "padding": {
                        "value": "1",
                        "possible_values": []
                    }
                },
                "AvgPool2d_90": {
                    "variable": {
                        "value": "self.avgpool",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "7",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "1",
                        "possible_values": []
                    }
                },
                "Linear_91": {
                    "variable": {
                        "value": "self.fc",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "1024 * block.expansion",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "num_classes",
                        "possible_values": [
                            [
                                "1000",
                                "MethodArgument"
                            ]
                        ]
                    }
                }
            },
            "Conv2d_27": {
                "in_channels": {
                    "value": "in_planes",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "load_182": {
                "f": {
                    "value": "cached_file",
                    "possible_values": [
                        [
                            "os.path.join(model_dir, filename)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "map_location",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_104": {
                "variable": {
                    "value": "downsample",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "possible_values": []
                }
            },
            "Sequential_116": {
                "*args": {
                    "value": "*layers",
                    "possible_values": []
                }
            },
            "Conv2d_105": {
                "in_channels": {
                    "value": "self.inplanes",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            }
        }
    },
    "netdissect/segviz.py": {
        "torch": {
            "bincount_12": {
                "variable": {
                    "value": "bc",
                    "possible_values": []
                },
                "input": {
                    "value": "seg.view(-1)",
                    "possible_values": []
                }
            }
        }
    },
    "netdissect/serverstate.py": {
        "torch": {
            "is_available_21": {
                "variable": {
                    "value": "self.use_cuda",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "tensor_121": {
                "variable": {
                    "value": "z_tensor",
                    "possible_values": []
                },
                "data": {
                    "value": "zs",
                    "possible_values": [
                        [
                            "self.get_zs_for_ids(ids)",
                            "Call"
                        ],
                        [
                            "self.get_zs_for_ids(ids)",
                            "Call"
                        ],
                        [
                            "self.get_zs_for_ids(ids)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_153": {
                "variable": {
                    "value": "z_tensor",
                    "possible_values": []
                },
                "data": {
                    "value": "zs",
                    "possible_values": [
                        [
                            "self.get_zs_for_ids(ids)",
                            "Call"
                        ],
                        [
                            "self.get_zs_for_ids(ids)",
                            "Call"
                        ],
                        [
                            "self.get_zs_for_ids(ids)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_167": {
                "variable": {
                    "value": "z_tensor",
                    "possible_values": []
                },
                "data": {
                    "value": "zs",
                    "possible_values": [
                        [
                            "self.get_zs_for_ids(ids)",
                            "Call"
                        ],
                        [
                            "self.get_zs_for_ids(ids)",
                            "Call"
                        ],
                        [
                            "self.get_zs_for_ids(ids)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_448": {
                "variable": {
                    "value": "mask",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mask_to_numpy(mask)",
                    "possible_values": []
                }
            },
            "DataLoader_261": {
                "variable": {
                    "value": "test_loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "TensorDataset(z_batch)",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "possible_values": [
                        [
                            "10",
                            "Constant"
                        ],
                        [
                            "10",
                            "Constant"
                        ],
                        [
                            "10",
                            "Constant"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "cuda == self.device.type and z_batch.device.type == cpu",
                    "possible_values": []
                }
            },
            "zeros_265": {
                "variable": {
                    "value": "result_img",
                    "possible_values": []
                },
                "*size": {
                    "value": "*(len(z_batch), 3) + self.model.output_shape[2:]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "possible_values": []
                }
            },
            "DataLoader_291": {
                "variable": {
                    "value": "test_loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "TensorDataset(z_batch[:, :, None, None], masks)",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "possible_values": [
                        [
                            "10",
                            "Constant"
                        ],
                        [
                            "10",
                            "Constant"
                        ],
                        [
                            "10",
                            "Constant"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "cuda == self.device.type and z_batch.device.type == cpu",
                    "possible_values": []
                }
            },
            "DataLoader_351": {
                "variable": {
                    "value": "test_loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "TensorDataset(z_batch[:, :, None, None])",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "possible_values": [
                        [
                            "10",
                            "Constant"
                        ],
                        [
                            "10",
                            "Constant"
                        ],
                        [
                            "10",
                            "Constant"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "cuda == self.device.type and z_batch.device.type == cpu",
                    "possible_values": []
                }
            },
            "from_numpy_92": {
                "ndarray": {
                    "value": "numpy.array(quantiles)",
                    "possible_values": []
                }
            },
            "tensor_105": {
                "variable": {
                    "value": "needed_z_tensor",
                    "possible_values": []
                },
                "data": {
                    "value": "zs[unfinished]",
                    "possible_values": []
                }
            },
            "device_203": {
                "type": {
                    "value": "cpu",
                    "possible_values": []
                }
            },
            "no_grad_258": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_282": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ones_286": {
                "variable": {
                    "value": "masks",
                    "possible_values": []
                },
                "*size": {
                    "value": "z_batch.size(0)",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "possible_values": []
                },
                "dtype": {
                    "value": "z_batch.dtype",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "possible_values": []
                },
                "device": {
                    "value": "z_batch.device",
                    "possible_values": []
                }
            },
            "no_grad_348": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "zeros_462": {
                "variable": {
                    "value": "channels[layer]",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "possible_values": []
                },
                "out": {
                    "value": "*layer_shapes[layer][1:]",
                    "possible_values": []
                }
            },
            "TensorDataset_261": {
                "*tensors": {
                    "value": "z_batch",
                    "possible_values": []
                }
            },
            "TensorDataset_292": {
                "*tensors": {
                    "value": "z_batch[:, :, None, None]",
                    "possible_values": []
                }
            },
            "adaptive_max_pool2d_308": {
                "variable": {
                    "value": "resized_max",
                    "possible_values": []
                },
                "*args": {
                    "value": "batch_m",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_320": {
                "variable": {
                    "value": "resized_mean",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_m",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(feature.shape[2], feature.shape[3])",
                    "possible_values": []
                }
            },
            "TensorDataset_352": {
                "*tensors": {
                    "value": "z_batch[:, :, None, None]",
                    "possible_values": []
                }
            },
            "device_29": {
                "type": {
                    "value": "cuda",
                    "possible_values": []
                }
            },
            "device_30": {
                "type": {
                    "value": "cpu",
                    "possible_values": []
                }
            },
            "stack_154": {
                "tensors": {
                    "value": "[torch.from_numpy(mask_to_numpy(mask)) for mask in masks]",
                    "possible_values": []
                }
            },
            "device_224": {
                "type": {
                    "value": "cpu",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_469": {
                "input": {
                    "value": "mask[None, None, ...]",
                    "possible_values": []
                },
                "output_size": {
                    "value": "layer_shape",
                    "possible_values": [
                        [
                            "layer_shapes[layer][2:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "adaptive_max_pool2d_472": {
                "*args": {
                    "value": "mask[None, None, ...]",
                    "possible_values": []
                }
            },
            "max_317": {
                "input": {
                    "value": "feature_stat[layer]['max']",
                    "possible_values": []
                },
                "out": {
                    "value": "feature_stat[layer]['max']",
                    "possible_values": [
                        [
                            "defaultdict(dict)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_155": {
                "ndarray": {
                    "value": "mask_to_numpy(mask)",
                    "possible_values": []
                }
            }
        }
    },
    "netdissect/statedict.py": {
        "torch": {
            "from_numpy_58": {
                "variable": {
                    "value": "val",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "val",
                    "possible_values": [
                        [
                            "self.data[key]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(val)",
                            "Call"
                        ],
                        [
                            "example_type(val)",
                            "Call"
                        ],
                        [
                            "val.to(dtype=example.dtype, device=example.device)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "netdissect/tally.py": {
        "torch": {
            "zeros_237": {
                "variable": {
                    "value": "scores",
                    "possible_values": []
                },
                "*size": {
                    "value": "(units, max(condmv.keys()) + 1)",
                    "possible_values": []
                }
            },
            "zeros_306": {
                "variable": {
                    "value": "scores",
                    "possible_values": []
                },
                "*size": {
                    "value": "(units, max(condq.keys()) + 1) + cutoff.shape",
                    "possible_values": []
                }
            },
            "stack_253": {
                "variable": {
                    "value": "arr",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[isect, pred - isect, truth - isect, 1 - union]",
                    "possible_values": []
                }
            },
            "tensor_303": {
                "variable": {
                    "value": "cutoff",
                    "possible_values": []
                },
                "data": {
                    "value": "cutoff",
                    "possible_values": [
                        [
                            "torch.tensor(cutoff)",
                            "Call"
                        ],
                        [
                            "0.99",
                            "MethodArgument"
                        ],
                        [
                            "0.95",
                            "MethodArgument"
                        ],
                        [
                            "0.95",
                            "MethodArgument"
                        ],
                        [
                            "0.95",
                            "MethodArgument"
                        ],
                        [
                            "0.95",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "stack_322": {
                "variable": {
                    "value": "arr",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[isect, pred - isect, truth - isect, 1 - union]",
                    "possible_values": []
                }
            },
            "TensorDataset_369": {
                "variable": {
                    "value": "dataset",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "dataset",
                    "possible_values": []
                }
            },
            "DataLoader_372": {
                "dataset": {
                    "value": "dataset",
                    "possible_values": [
                        [
                            "torch.utils.data.TensorDataset(dataset)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "sampler.FixedSubsetSampler(list(range(sample_size))) if sample_size else None",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "no_grad_34": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_58": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_81": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_145": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_167": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_191": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_218": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "cat_223": {
                "tensors": {
                    "value": "result",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "isnan_354": {
                "input": {
                    "value": "iqr",
                    "possible_values": [
                        [
                            "mutual_information(arr) / joint_entropy(arr)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "isnan_338": {
                "input": {
                    "value": "term",
                    "possible_values": [
                        [
                            "joint * (joint / ind).log()",
                            "BinOp"
                        ],
                        [
                            "joint * joint.log()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "isnan_348": {
                "input": {
                    "value": "term",
                    "possible_values": [
                        [
                            "joint * (joint / ind).log()",
                            "BinOp"
                        ],
                        [
                            "joint * joint.log()",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "netdissect/tool/allunitsample.py": {
        "torch": {
            "unique_112": {
                "variable": {
                    "value": "all_indices",
                    "possible_values": []
                },
                "input": {
                    "value": "indices.view(-1)",
                    "possible_values": []
                },
                "sorted": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "load_43": {
                "variable": {
                    "value": "data",
                    "possible_values": []
                },
                "f": {
                    "value": "args.pthfile",
                    "possible_values": []
                }
            },
            "DataLoader_91": {
                "variable": {
                    "value": "z_loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "TensorDataset(z_universe)",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "50",
                            "MethodArgument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "2",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "DataLoader_124": {
                "variable": {
                    "value": "z_loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "TensorDataset(z_sample)",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "50",
                            "MethodArgument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "2",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "no_grad_89": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_122": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "TensorDataset_91": {
                "*tensors": {
                    "value": "z_universe",
                    "possible_values": []
                }
            },
            "TensorDataset_124": {
                "*tensors": {
                    "value": "z_sample",
                    "possible_values": []
                }
            }
        }
    },
    "netdissect/tool/ganseg.py": {
        "torch": {
            "DataLoader_62": {
                "variable": {
                    "value": "z_loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "z_dataset",
                    "possible_values": [
                        [
                            "z_dataset_for_model(model, size=args.size)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "possible_values": [
                        [
                            "10",
                            "Constant"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "2",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "no_grad_60": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "netdissect/tool/makesample.py": {
        "torch": {
            "load_46": {
                "variable": {
                    "value": "data",
                    "possible_values": []
                },
                "f": {
                    "value": "args.pthfile",
                    "possible_values": []
                }
            },
            "arange_75": {
                "variable": {
                    "value": "indexes",
                    "possible_values": []
                },
                "start": {
                    "value": "args.size",
                    "possible_values": []
                }
            },
            "zeros_92": {
                "variable": {
                    "value": "model.ablation[args.layer]",
                    "possible_values": []
                },
                "*size": {
                    "value": "dims",
                    "possible_values": [
                        [
                            "max(2, max(args.ablate_units) + 1)",
                            "Call"
                        ],
                        [
                            "max(2, max(ablated_units) + 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_111": {
                "variable": {
                    "value": "z_loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "TensorDataset(z_universe)",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ],
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "2",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "cat_124": {
                "variable": {
                    "value": "scores",
                    "possible_values": []
                },
                "tensors": {
                    "value": "scores",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(scores, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "DataLoader_135": {
                "variable": {
                    "value": "z_loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "TensorDataset(z_sample)",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ],
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "2",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "no_grad_109": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_133": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "zeros_141": {
                "variable": {
                    "value": "mask",
                    "possible_values": []
                },
                "*size": {
                    "value": "dims",
                    "possible_values": [
                        [
                            "max(2, max(args.ablate_units) + 1)",
                            "Call"
                        ],
                        [
                            "max(2, max(ablated_units) + 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "TensorDataset_111": {
                "*tensors": {
                    "value": "z_universe",
                    "possible_values": []
                }
            },
            "TensorDataset_135": {
                "*tensors": {
                    "value": "z_sample",
                    "possible_values": []
                }
            }
        }
    },
    "netdissect/upsample.py": {
        "torch": {
            "grid_sample_34": {
                "input": {
                    "value": "data",
                    "possible_values": []
                },
                "grid": {
                    "value": "batch_grid",
                    "possible_values": [
                        [
                            "grid",
                            "Name"
                        ],
                        [
                            "grid.expand((data.shape[0],) + grid.shape[1:])",
                            "Call"
                        ],
                        [
                            "batch_grid.to(data.device)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "mode",
                    "possible_values": [
                        [
                            "'bilinear'",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding_mode": {
                    "value": "padding_mode",
                    "possible_values": [
                        [
                            "'zeros'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "stack_139": {
                "tensors": {
                    "value": "(tx[None, :].expand(target_shape), ty[:, None].expand(target_shape))",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "arange_135": {
                "start": {
                    "value": "ts",
                    "possible_values": [
                        [
                            "getattr(source, 'transforms', None)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "possible_values": [
                        [
                            "torch.float",
                            "MethodArgument"
                        ],
                        [
                            "torch.float",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "netdissect/upsegmodel/models.py": {
        "torch": {
            "SegmentationModuleBase_12": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                }
            },
            "Resnet_213": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                }
            },
            "UPerNet_252": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.use_softmax": {
                    "value": "use_softmax",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "ModuleList_273": {
                    "variable": {
                        "value": "self.ppm_pooling",
                        "possible_values": []
                    },
                    "modules": {
                        "value": "self.ppm_pooling",
                        "possible_values": []
                    }
                },
                "ModuleList_274": {
                    "variable": {
                        "value": "self.ppm_conv",
                        "possible_values": []
                    },
                    "modules": {
                        "value": "self.ppm_conv",
                        "possible_values": []
                    }
                },
                "ModuleList_285": {
                    "variable": {
                        "value": "self.fpn_in",
                        "possible_values": []
                    },
                    "modules": {
                        "value": "self.fpn_in",
                        "possible_values": []
                    }
                },
                "ModuleList_292": {
                    "variable": {
                        "value": "self.fpn_out",
                        "possible_values": []
                    },
                    "modules": {
                        "value": "self.fpn_out",
                        "possible_values": []
                    }
                },
                "Sequential_301": {
                    "variable": {
                        "value": "self.scene_head",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "conv3x3_bn_relu(fpn_dim, fpn_dim, 1)",
                        "possible_values": []
                    }
                },
                "Sequential_308": {
                    "variable": {
                        "value": "self.object_head",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "conv3x3_bn_relu(fpn_dim, fpn_dim, 1)",
                        "possible_values": []
                    }
                },
                "Sequential_314": {
                    "variable": {
                        "value": "self.part_head",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "conv3x3_bn_relu(fpn_dim, fpn_dim, 1)",
                        "possible_values": []
                    }
                },
                "Sequential_320": {
                    "variable": {
                        "value": "self.material_head",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "conv3x3_bn_relu(fpn_dim, fpn_dim, 1)",
                        "possible_values": []
                    }
                }
            },
            "max_18": {
                "variable": {
                    "value": "(_, preds)",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "possible_values": [
                        [
                            "self.decoder(self.encoder(feed_dict['img'], return_feature_maps=True), output_switch=output_switch, seg_size=seg_size)",
                            "Call"
                        ],
                        [
                            "self.decoder(self.encoder(feed_dict['img'], return_feature_maps=True), output_switch=output_switch)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "sum_20": {
                "variable": {
                    "value": "acc_sum",
                    "possible_values": []
                },
                "input": {
                    "value": "valid * (preds == label).long()",
                    "possible_values": []
                }
            },
            "sum_21": {
                "variable": {
                    "value": "pixel_sum",
                    "possible_values": []
                },
                "input": {
                    "value": "valid",
                    "possible_values": [
                        [
                            "(label != ignore_index).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "max_28": {
                "variable": {
                    "value": "(_, pred)",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_part",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "sum_30": {
                "variable": {
                    "value": "acc_sum",
                    "possible_values": []
                },
                "input": {
                    "value": "acc_sum.view(acc_sum.size(0), -1)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "sum_31": {
                "variable": {
                    "value": "acc_sum",
                    "possible_values": []
                },
                "input": {
                    "value": "acc_sum * valid",
                    "possible_values": []
                }
            },
            "sum_32": {
                "variable": {
                    "value": "pixel_sum",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_object.view(mask_object.size(0), -1)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "sum_33": {
                "variable": {
                    "value": "pixel_sum",
                    "possible_values": []
                },
                "input": {
                    "value": "pixel_sum * valid",
                    "possible_values": []
                }
            },
            "nll_loss_39": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_part",
                    "possible_values": []
                },
                "target": {
                    "value": "gt_seg_part * mask_object.long()",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "possible_values": []
                }
            },
            "sum_41": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "input": {
                    "value": "loss.view(loss.size(0), -1)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "sum_42": {
                "variable": {
                    "value": "nr_pixel",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_object.view(mask_object.shape[0], -1)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "ModuleDict_53": {
                "variable": {
                    "value": "self.crit_dict",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "NLLLoss_60": {
                "variable": {
                    "value": "self.crit_dict[object]",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "NLLLoss_61": {
                "variable": {
                    "value": "self.crit_dict[material]",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "NLLLoss_62": {
                "variable": {
                    "value": "self.crit_dict[scene]",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "Conv2d_138": {
                "in_channels": {
                    "value": "in_planes",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "has_bias",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_143": {
                "*args": {
                    "value": "conv3x3(in_planes, out_planes, stride)",
                    "possible_values": []
                }
            },
            "cat_335": {
                "variable": {
                    "value": "roi",
                    "possible_values": []
                },
                "tensors": {
                    "value": "roi",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(roi, dim=0).type_as(conv5)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "cat_342": {
                "variable": {
                    "value": "ppm_out",
                    "possible_values": []
                },
                "tensors": {
                    "value": "ppm_out",
                    "possible_values": [
                        [
                            "[conv5]",
                            "List"
                        ],
                        [
                            "[conv5]",
                            "List"
                        ],
                        [
                            "torch.cat(ppm_out, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "ReLU_146": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "softmax_385": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "output_dict['scene']",
                            "Subscript"
                        ],
                        [
                            "x.squeeze(3).squeeze(2)",
                            "Call"
                        ],
                        [
                            "F.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "output_dict[k]",
                            "Subscript"
                        ],
                        [
                            "F.interpolate(x, size=seg_size, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "F.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "output_dict['part']",
                            "Subscript"
                        ],
                        [
                            "F.interpolate(x, size=seg_size, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "output_dict[k]",
                            "Subscript"
                        ],
                        [
                            "F.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "x.squeeze(3).squeeze(2)",
                            "Call"
                        ],
                        [
                            "output_dict['part'][:, head:head + n_part]",
                            "Subscript"
                        ],
                        [
                            "F.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_fusion(fusion_out)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "interpolate_397": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "output_dict['scene']",
                            "Subscript"
                        ],
                        [
                            "x.squeeze(3).squeeze(2)",
                            "Call"
                        ],
                        [
                            "F.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "output_dict[k]",
                            "Subscript"
                        ],
                        [
                            "F.interpolate(x, size=seg_size, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "F.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "output_dict['part']",
                            "Subscript"
                        ],
                        [
                            "F.interpolate(x, size=seg_size, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "output_dict[k]",
                            "Subscript"
                        ],
                        [
                            "F.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "x.squeeze(3).squeeze(2)",
                            "Call"
                        ],
                        [
                            "output_dict['part'][:, head:head + n_part]",
                            "Subscript"
                        ],
                        [
                            "F.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_fusion(fusion_out)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "seg_size",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "clamp_44": {
                "input": {
                    "value": "sum_pixel",
                    "possible_values": [
                        [
                            "(nr_pixel * valid).sum()",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_303": {
                "output_size": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_304": {
                "in_channels": {
                    "value": "fpn_dim",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.nr_scene_class",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Conv2d_310": {
                "in_channels": {
                    "value": "fpn_dim",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.nr_object_class",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Conv2d_316": {
                "in_channels": {
                    "value": "fpn_dim",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.nr_part_class",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Conv2d_322": {
                "in_channels": {
                    "value": "fpn_dim",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.nr_material_class",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "interpolate_354": {
                "variable": {
                    "value": "f",
                    "possible_values": []
                },
                "input": {
                    "value": "f",
                    "possible_values": [
                        [
                            "self.ppm_last_conv(ppm_out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(f, size=conv_x.size()[2:], mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "conv_x + f",
                            "BinOp"
                        ]
                    ]
                },
                "size": {
                    "value": "conv_x.size()[2:]",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "cat_373": {
                "variable": {
                    "value": "fusion_out",
                    "possible_values": []
                },
                "tensors": {
                    "value": "fusion_list",
                    "possible_values": [
                        [
                            "[fpn_feature_list[0]]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "interpolate_391": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "output_dict['scene']",
                            "Subscript"
                        ],
                        [
                            "x.squeeze(3).squeeze(2)",
                            "Call"
                        ],
                        [
                            "F.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "output_dict[k]",
                            "Subscript"
                        ],
                        [
                            "F.interpolate(x, size=seg_size, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "F.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "output_dict['part']",
                            "Subscript"
                        ],
                        [
                            "F.interpolate(x, size=seg_size, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "output_dict[k]",
                            "Subscript"
                        ],
                        [
                            "F.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "x.squeeze(3).squeeze(2)",
                            "Call"
                        ],
                        [
                            "output_dict['part'][:, head:head + n_part]",
                            "Subscript"
                        ],
                        [
                            "F.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_fusion(fusion_out)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "seg_size",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "softmax_392": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "output_dict['scene']",
                            "Subscript"
                        ],
                        [
                            "x.squeeze(3).squeeze(2)",
                            "Call"
                        ],
                        [
                            "F.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "output_dict[k]",
                            "Subscript"
                        ],
                        [
                            "F.interpolate(x, size=seg_size, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "F.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "output_dict['part']",
                            "Subscript"
                        ],
                        [
                            "F.interpolate(x, size=seg_size, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "output_dict[k]",
                            "Subscript"
                        ],
                        [
                            "F.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "x.squeeze(3).squeeze(2)",
                            "Call"
                        ],
                        [
                            "output_dict['part'][:, head:head + n_part]",
                            "Subscript"
                        ],
                        [
                            "F.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_fusion(fusion_out)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "interpolate_401": {
                "variable": {
                    "value": "_x",
                    "possible_values": []
                },
                "input": {
                    "value": "x[:, head:head + n_part]",
                    "possible_values": []
                },
                "size": {
                    "value": "seg_size",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "softmax_402": {
                "variable": {
                    "value": "_x",
                    "possible_values": []
                },
                "input": {
                    "value": "_x",
                    "possible_values": [
                        [
                            "F.interpolate(x[:, head:head + n_part], size=seg_size, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "F.softmax(_x, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "log_softmax_413": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "output_dict['scene']",
                            "Subscript"
                        ],
                        [
                            "x.squeeze(3).squeeze(2)",
                            "Call"
                        ],
                        [
                            "F.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "output_dict[k]",
                            "Subscript"
                        ],
                        [
                            "F.interpolate(x, size=seg_size, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "F.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "output_dict['part']",
                            "Subscript"
                        ],
                        [
                            "F.interpolate(x, size=seg_size, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "output_dict[k]",
                            "Subscript"
                        ],
                        [
                            "F.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "x.squeeze(3).squeeze(2)",
                            "Call"
                        ],
                        [
                            "output_dict['part'][:, head:head + n_part]",
                            "Subscript"
                        ],
                        [
                            "F.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_fusion(fusion_out)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "load_184": {
                "f": {
                    "value": "weights",
                    "possible_values": [
                        [
                            "''",
                            "MethodArgument"
                        ],
                        [
                            "''",
                            "MethodArgument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "possible_values": []
                }
            },
            "load_209": {
                "f": {
                    "value": "weights",
                    "possible_values": [
                        [
                            "''",
                            "MethodArgument"
                        ],
                        [
                            "''",
                            "MethodArgument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "possible_values": []
                }
            },
            "Sequential_268": {
                "*args": {
                    "value": "nn.Conv2d(fc_dim, 512, kernel_size=1, bias=False)",
                    "possible_values": []
                }
            },
            "Sequential_280": {
                "*args": {
                    "value": "nn.Conv2d(fpn_inplane, fpn_dim, kernel_size=1, bias=False)",
                    "possible_values": []
                }
            },
            "Sequential_289": {
                "*args": {
                    "value": "conv3x3_bn_relu(fpn_dim, fpn_dim, 1)",
                    "possible_values": []
                }
            },
            "log_softmax_422": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "output_dict['scene']",
                            "Subscript"
                        ],
                        [
                            "x.squeeze(3).squeeze(2)",
                            "Call"
                        ],
                        [
                            "F.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "output_dict[k]",
                            "Subscript"
                        ],
                        [
                            "F.interpolate(x, size=seg_size, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "F.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "output_dict['part']",
                            "Subscript"
                        ],
                        [
                            "F.interpolate(x, size=seg_size, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "output_dict[k]",
                            "Subscript"
                        ],
                        [
                            "F.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "x.squeeze(3).squeeze(2)",
                            "Call"
                        ],
                        [
                            "output_dict['part'][:, head:head + n_part]",
                            "Subscript"
                        ],
                        [
                            "F.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_fusion(fusion_out)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_269": {
                "in_channels": {
                    "value": "fc_dim",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "4096",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "512",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "ReLU_271": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Conv2d_281": {
                "in_channels": {
                    "value": "fpn_inplane",
                    "possible_values": [
                        [
                            "fpn_inplanes[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "fpn_dim",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "ReLU_283": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "interpolate_338": {
                "input": {
                    "value": "pool_scale(conv5, roi.detach())",
                    "possible_values": []
                },
                "size": {
                    "value": "(input_size[2], input_size[3])",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "interpolate_369": {
                "input": {
                    "value": "fpn_feature_list[i]",
                    "possible_values": []
                },
                "size": {
                    "value": "output_size",
                    "possible_values": [
                        [
                            "fpn_feature_list[0].size()[2:]",
                            "Subscript"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "possible_values": []
                }
            }
        }
    },
    "netdissect/upsegmodel/prroi_pool/build.py": {
        "torch": {
            "is_available_23": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "netdissect/upsegmodel/prroi_pool/functional.py": {
        "torch": {
            "PrRoIPool2DFunction_30": {
                "base_class_0": {
                    "value": "torch.autograd.Function",
                    "possible_values": []
                }
            }
        }
    },
    "netdissect/upsegmodel/prroi_pool/prroi_pool.py": {
        "torch": {
            "PrRoIPool2D_19": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                }
            }
        }
    },
    "netdissect/upsegmodel/prroi_pool/test_prroi_pooling2d.py": {
        "torch": {
            "rand_23": {
                "variable": {
                    "value": "features",
                    "possible_values": []
                },
                "*size": {
                    "value": "(4, 16, 24, 32)",
                    "possible_values": []
                }
            },
            "tensor_24": {
                "variable": {
                    "value": "rois",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 0, 0, 14, 14], [1, 14, 14, 28, 28]]",
                    "possible_values": []
                }
            },
            "avg_pool2d_30": {
                "variable": {
                    "value": "out_gold",
                    "possible_values": []
                },
                "input": {
                    "value": "features",
                    "possible_values": [
                        [
                            "torch.rand((4, 16, 24, 32)).cuda()",
                            "Call"
                        ],
                        [
                            "torch.rand((4, 2, 24, 32)).cuda()",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "rand_40": {
                "variable": {
                    "value": "features",
                    "possible_values": []
                },
                "*size": {
                    "value": "(4, 2, 24, 32)",
                    "possible_values": []
                }
            },
            "tensor_41": {
                "variable": {
                    "value": "rois",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 0, 0, 4, 4], [1, 14, 14, 18, 18]]",
                    "possible_values": []
                }
            },
            "stack_32": {
                "tensors": {
                    "value": "(out_gold[0, :, :7, :7], out_gold[1, :, 7:14, 7:14])",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            }
        }
    },
    "netdissect/upsegmodel/resnet.py": {
        "torch": {
            "BasicBlock_32": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "ReLU_39": {
                    "variable": {
                        "value": "self.relu",
                        "possible_values": []
                    },
                    "inplace": {
                        "value": "True",
                        "possible_values": []
                    }
                },
                "self.downsample": {
                    "value": "downsample",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "nn.Sequential(nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False), SynchronizedBatchNorm2d(planes * block.expansion))",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Bottleneck_64": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Conv2d_69": {
                    "variable": {
                        "value": "self.conv1",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "inplanes",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "planes",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "1",
                        "possible_values": []
                    },
                    "bias": {
                        "value": "False",
                        "possible_values": []
                    }
                },
                "Conv2d_71": {
                    "variable": {
                        "value": "self.conv2",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "planes",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "planes",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "3",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "stride",
                        "possible_values": [
                            [
                                "1",
                                "MethodArgument"
                            ],
                            [
                                "1",
                                "MethodArgument"
                            ],
                            [
                                "1",
                                "MethodArgument"
                            ],
                            [
                                "1",
                                "MethodArgument"
                            ]
                        ]
                    },
                    "padding": {
                        "value": "1",
                        "possible_values": []
                    },
                    "bias": {
                        "value": "False",
                        "possible_values": []
                    }
                },
                "Conv2d_74": {
                    "variable": {
                        "value": "self.conv3",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "planes",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "planes * 4",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "1",
                        "possible_values": []
                    },
                    "bias": {
                        "value": "False",
                        "possible_values": []
                    }
                },
                "ReLU_76": {
                    "variable": {
                        "value": "self.relu",
                        "possible_values": []
                    },
                    "inplace": {
                        "value": "True",
                        "possible_values": []
                    }
                },
                "self.downsample": {
                    "value": "downsample",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "nn.Sequential(nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False), SynchronizedBatchNorm2d(planes * block.expansion))",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ResNet_103": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "ReLU_110": {
                    "variable": {
                        "value": "self.relu1",
                        "possible_values": []
                    },
                    "inplace": {
                        "value": "True",
                        "possible_values": []
                    }
                },
                "ReLU_113": {
                    "variable": {
                        "value": "self.relu2",
                        "possible_values": []
                    },
                    "inplace": {
                        "value": "True",
                        "possible_values": []
                    }
                },
                "ReLU_116": {
                    "variable": {
                        "value": "self.relu3",
                        "possible_values": []
                    },
                    "inplace": {
                        "value": "True",
                        "possible_values": []
                    }
                },
                "MaxPool2d_117": {
                    "variable": {
                        "value": "self.maxpool",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "3",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "2",
                        "possible_values": []
                    },
                    "padding": {
                        "value": "1",
                        "possible_values": []
                    }
                },
                "AvgPool2d_123": {
                    "variable": {
                        "value": "self.avgpool",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "7",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "1",
                        "possible_values": []
                    }
                },
                "Linear_124": {
                    "variable": {
                        "value": "self.fc",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "512 * block.expansion",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "num_classes",
                        "possible_values": [
                            [
                                "1000",
                                "MethodArgument"
                            ]
                        ]
                    }
                }
            },
            "Conv2d_28": {
                "in_channels": {
                    "value": "in_planes",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "load_235": {
                "f": {
                    "value": "cached_file",
                    "possible_values": [
                        [
                            "os.path.join(model_dir, filename)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "map_location",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_137": {
                "variable": {
                    "value": "downsample",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "possible_values": []
                }
            },
            "Sequential_149": {
                "*args": {
                    "value": "*layers",
                    "possible_values": []
                }
            },
            "Conv2d_138": {
                "in_channels": {
                    "value": "self.inplanes",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            }
        }
    },
    "netdissect/upsegmodel/resnext.py": {
        "torch": {
            "GroupBottleneck_32": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Conv2d_37": {
                    "variable": {
                        "value": "self.conv1",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "inplanes",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "planes",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "1",
                        "possible_values": []
                    },
                    "bias": {
                        "value": "False",
                        "possible_values": []
                    }
                },
                "Conv2d_39": {
                    "variable": {
                        "value": "self.conv2",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "planes",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "planes",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "3",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "stride",
                        "possible_values": [
                            [
                                "1",
                                "MethodArgument"
                            ],
                            [
                                "1",
                                "MethodArgument"
                            ],
                            [
                                "1",
                                "MethodArgument"
                            ]
                        ]
                    },
                    "padding": {
                        "value": "1",
                        "possible_values": []
                    },
                    "groups": {
                        "value": "groups",
                        "possible_values": [
                            [
                                "1",
                                "MethodArgument"
                            ],
                            [
                                "32",
                                "MethodArgument"
                            ],
                            [
                                "1",
                                "MethodArgument"
                            ]
                        ]
                    },
                    "bias": {
                        "value": "False",
                        "possible_values": []
                    }
                },
                "Conv2d_42": {
                    "variable": {
                        "value": "self.conv3",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "planes",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "planes * 2",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "1",
                        "possible_values": []
                    },
                    "bias": {
                        "value": "False",
                        "possible_values": []
                    }
                },
                "ReLU_44": {
                    "variable": {
                        "value": "self.relu",
                        "possible_values": []
                    },
                    "inplace": {
                        "value": "True",
                        "possible_values": []
                    }
                },
                "self.downsample": {
                    "value": "downsample",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "nn.Sequential(nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False), SynchronizedBatchNorm2d(planes * block.expansion))",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ResNeXt_71": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "ReLU_78": {
                    "variable": {
                        "value": "self.relu1",
                        "possible_values": []
                    },
                    "inplace": {
                        "value": "True",
                        "possible_values": []
                    }
                },
                "ReLU_81": {
                    "variable": {
                        "value": "self.relu2",
                        "possible_values": []
                    },
                    "inplace": {
                        "value": "True",
                        "possible_values": []
                    }
                },
                "ReLU_84": {
                    "variable": {
                        "value": "self.relu3",
                        "possible_values": []
                    },
                    "inplace": {
                        "value": "True",
                        "possible_values": []
                    }
                },
                "MaxPool2d_85": {
                    "variable": {
                        "value": "self.maxpool",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "3",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "2",
                        "possible_values": []
                    },
                    "padding": {
                        "value": "1",
                        "possible_values": []
                    }
                },
                "AvgPool2d_91": {
                    "variable": {
                        "value": "self.avgpool",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "7",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "1",
                        "possible_values": []
                    }
                },
                "Linear_92": {
                    "variable": {
                        "value": "self.fc",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "1024 * block.expansion",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "num_classes",
                        "possible_values": [
                            [
                                "1000",
                                "MethodArgument"
                            ]
                        ]
                    }
                }
            },
            "Conv2d_28": {
                "in_channels": {
                    "value": "in_planes",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "load_183": {
                "f": {
                    "value": "cached_file",
                    "possible_values": [
                        [
                            "os.path.join(model_dir, filename)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "map_location",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_105": {
                "variable": {
                    "value": "downsample",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "possible_values": []
                }
            },
            "Sequential_117": {
                "*args": {
                    "value": "*layers",
                    "possible_values": []
                }
            },
            "Conv2d_106": {
                "in_channels": {
                    "value": "self.inplanes",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            }
        }
    },
    "netdissect/zdataset.py": {
        "torch": {
            "from_numpy_35": {
                "variable": {
                    "value": "result",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "rng.standard_normal(size * depth).reshape(size, depth)",
                    "possible_values": []
                }
            },
            "TensorDataset_5": {
                "*tensors": {
                    "value": "z_sample_for_model(model, size, seed)",
                    "possible_values": []
                }
            }
        }
    }
}