{
    "seg_trainer.py": {
        "sklearn": {
            "confusion_matrix_213": {
                "variable": {
                    "value": "cm",
                    "type": "Name",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.argmax(batch_y, axis=3)",
                            "Call"
                        ],
                        [
                            "y_true.flatten()",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.argmax(y_pred, axis=3)",
                            "Call"
                        ],
                        [
                            "y_pred.flatten()",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "self.labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "get_collection_48": {
                "variable": {
                    "value": "update_ops",
                    "type": "Name",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_85": {
                "variable": {
                    "value": "global_step",
                    "type": "Name",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "merge_all_99": {
                "variable": {
                    "value": "self.summary_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_102": {
                "variable": {
                    "value": "self.avg_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_105": {
                "variable": {
                    "value": "self.avg_dice",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_108": {
                "variable": {
                    "value": "self.avg_acc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "merge_all_111": {
                "variable": {
                    "value": "self.summary_op_avg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "key": {
                    "value": "average_eval",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "global_variables_initializer_113": {
                "variable": {
                    "value": "init",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Coordinator_413": {
                "variable": {
                    "value": "coord",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "start_queue_runners_414": {
                "variable": {
                    "value": "threads",
                    "type": "Name",
                    "possible_values": []
                },
                "sess": {
                    "value": "sess",
                    "type": "Name",
                    "possible_values": []
                },
                "coord": {
                    "value": "coord",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ]
                    ]
                }
            },
            "FileWriter_422": {
                "variable": {
                    "value": "self.train_writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "output_path + '/train'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "graph": {
                    "value": "sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FileWriter_423": {
                "variable": {
                    "value": "self.val_writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "output_path + '/val'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "scalar_87": {
                "name": {
                    "value": "loss",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "self.net.cost",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_88": {
                "name": {
                    "value": "dice",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "self.net.dice",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_89": {
                "name": {
                    "value": "accuracy",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "self.net.accuracy1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "image_90": {
                "name": {
                    "value": "images",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "self.net.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_outputs": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "scalar_97": {
                "name": {
                    "value": "learning_rate",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "self.learning_rate_node",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_103": {
                "name": {
                    "value": "avg_loss",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "self.avg_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collections": {
                    "value": "['average_eval']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "scalar_106": {
                "name": {
                    "value": "avg_dice",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "self.avg_dice",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collections": {
                    "value": "['average_eval']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "scalar_109": {
                "name": {
                    "value": "avg_acc",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "self.avg_acc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collections": {
                    "value": "['average_eval']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_checkpoint_state_418": {
                "variable": {
                    "value": "ckpt",
                    "type": "Name",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "output_path",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "control_dependencies_49": {
                "control_inputs": {
                    "value": "update_ops",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.UPDATE_OPS)",
                            "Call"
                        ]
                    ]
                }
            },
            "exponential_decay_56": {
                "variable": {
                    "value": "self.learning_rate_node",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.opt_kwargs.pop('learning_rate', 0.2)",
                            "Call"
                        ],
                        [
                            "self.opt_kwargs.pop('learning_rate', 0.2)",
                            "Call"
                        ]
                    ]
                },
                "global_step": {
                    "value": "global_step",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.Variable(0, name='global_step')",
                            "Call"
                        ]
                    ]
                },
                "decay_steps": {
                    "value": "decay_step",
                    "type": "Name",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                },
                "decay_rate": {
                    "value": "decay_rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.opt_kwargs.pop('decay_rate', 0.95)",
                            "Call"
                        ],
                        [
                            "self.opt_kwargs.pop('decay_rate', 0.95)",
                            "Call"
                        ]
                    ]
                },
                "staircase": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MomentumOptimizer_62": {
                "variable": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate_node",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "momentum",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.opt_kwargs.pop('momentum', 0.2)",
                            "Call"
                        ]
                    ]
                }
            },
            "write_graph_410": {
                "graph_or_graph_def": {
                    "value": "sess.graph_def",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "output_path",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "graph.pb",
                    "type": "Constant",
                    "possible_values": []
                },
                "as_text": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exponential_decay_69": {
                "variable": {
                    "value": "self.learning_rate_node",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.opt_kwargs.pop('learning_rate', 0.2)",
                            "Call"
                        ],
                        [
                            "self.opt_kwargs.pop('learning_rate', 0.2)",
                            "Call"
                        ]
                    ]
                },
                "global_step": {
                    "value": "global_step",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.Variable(0, name='global_step')",
                            "Call"
                        ]
                    ]
                },
                "decay_steps": {
                    "value": "decay_step",
                    "type": "Name",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                },
                "decay_rate": {
                    "value": "decay_rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.opt_kwargs.pop('decay_rate', 0.95)",
                            "Call"
                        ],
                        [
                            "self.opt_kwargs.pop('decay_rate', 0.95)",
                            "Call"
                        ]
                    ]
                },
                "staircase": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdamOptimizer_76": {
                "variable": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate_node",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "data_provider.py": {
        "tensorflow": {
            "TFRecordWriter_170": {
                "variable": {
                    "value": "writer",
                    "type": "Name",
                    "possible_values": []
                },
                "path": {
                    "value": "filename",
                    "type": "Name",
                    "possible_values": [
                        [
                            "out_file_name + '.tfrecords'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "string_input_producer_262": {
                "variable": {
                    "value": "filename_queue",
                    "type": "Name",
                    "possible_values": []
                },
                "string_tensor": {
                    "value": "[records_file]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TFRecordReader_263": {
                "variable": {
                    "value": "reader",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "parse_single_example_265": {
                "variable": {
                    "value": "features",
                    "type": "Name",
                    "possible_values": []
                },
                "serialized": {
                    "value": "serialized_example",
                    "type": "Name",
                    "possible_values": []
                },
                "features": {
                    "value": "{'data/slice': tf.FixedLenFeature([], tf.string), 'data/seg': tf.FixedLenFeature([], tf.string), 'data/edges': tf.FixedLenFeature([], tf.string), 'data/dist': tf.FixedLenFeature([], tf.string)}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "decode_raw_274": {
                "variable": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": []
                },
                "input_bytes": {
                    "value": "features['data/slice']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_type": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "decode_raw_275": {
                "variable": {
                    "value": "seg",
                    "type": "Name",
                    "possible_values": []
                },
                "input_bytes": {
                    "value": "features['data/seg']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_type": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "decode_raw_276": {
                "variable": {
                    "value": "edge",
                    "type": "Name",
                    "possible_values": []
                },
                "input_bytes": {
                    "value": "features['data/edges']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_type": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "decode_raw_277": {
                "variable": {
                    "value": "dist",
                    "type": "Name",
                    "possible_values": []
                },
                "input_bytes": {
                    "value": "features['data/dist']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_type": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_282": {
                "variable": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.decode_raw(features['data/slice'], tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, shape=[IMAGE_HEIGHT, IMAGE_WIDTH, channels])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[IMAGE_HEIGHT, IMAGE_WIDTH, channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_283": {
                "variable": {
                    "value": "seg",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "seg",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.decode_raw(features['data/seg'], tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(seg, shape=[IMAGE_HEIGHT, IMAGE_WIDTH, channels])",
                            "Call"
                        ],
                        [
                            "tf.cast(seg, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(seg, squeeze_dims=[2])",
                            "Call"
                        ],
                        [
                            "tf.one_hot(seg, depth=num_classes)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[IMAGE_HEIGHT, IMAGE_WIDTH, channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_284": {
                "variable": {
                    "value": "edge",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "edge",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.decode_raw(features['data/edges'], tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(edge, shape=[IMAGE_HEIGHT, IMAGE_WIDTH, channels])",
                            "Call"
                        ],
                        [
                            "tf.cast(edge, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(edge, squeeze_dims=[2])",
                            "Call"
                        ],
                        [
                            "tf.one_hot(edge, depth=2)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[IMAGE_HEIGHT, IMAGE_WIDTH, channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_285": {
                "variable": {
                    "value": "dist",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "dist",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dist.astype(np.float32)",
                            "Call"
                        ],
                        [
                            "resize(dist, output_shape=(IMAGE_dim1, IMAGE_dim2), order=1, mode='constant', anti_aliasing=False, preserve_range=True)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(dist, axis=-1)",
                            "Call"
                        ],
                        [
                            "dist.astype(np.float32)",
                            "Call"
                        ],
                        [
                            "dist.tostring()",
                            "Call"
                        ],
                        [
                            "tf.decode_raw(features['data/dist'], tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(dist, shape=[IMAGE_HEIGHT, IMAGE_WIDTH, channels])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[IMAGE_HEIGHT, IMAGE_WIDTH, channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_294": {
                "variable": {
                    "value": "seg",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "seg",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.decode_raw(features['data/seg'], tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(seg, shape=[IMAGE_HEIGHT, IMAGE_WIDTH, channels])",
                            "Call"
                        ],
                        [
                            "tf.cast(seg, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(seg, squeeze_dims=[2])",
                            "Call"
                        ],
                        [
                            "tf.one_hot(seg, depth=num_classes)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_295": {
                "variable": {
                    "value": "seg",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "seg",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.decode_raw(features['data/seg'], tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(seg, shape=[IMAGE_HEIGHT, IMAGE_WIDTH, channels])",
                            "Call"
                        ],
                        [
                            "tf.cast(seg, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(seg, squeeze_dims=[2])",
                            "Call"
                        ],
                        [
                            "tf.one_hot(seg, depth=num_classes)",
                            "Call"
                        ]
                    ]
                },
                "squeeze_dims": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "one_hot_296": {
                "variable": {
                    "value": "seg",
                    "type": "Name",
                    "possible_values": []
                },
                "indices": {
                    "value": "seg",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.decode_raw(features['data/seg'], tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(seg, shape=[IMAGE_HEIGHT, IMAGE_WIDTH, channels])",
                            "Call"
                        ],
                        [
                            "tf.cast(seg, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(seg, squeeze_dims=[2])",
                            "Call"
                        ],
                        [
                            "tf.one_hot(seg, depth=num_classes)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "21",
                            "MethodArgument"
                        ],
                        [
                            "21",
                            "MethodArgument"
                        ],
                        [
                            "21",
                            "MethodArgument"
                        ],
                        [
                            "21",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cast_298": {
                "variable": {
                    "value": "edge",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "edge",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.decode_raw(features['data/edges'], tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(edge, shape=[IMAGE_HEIGHT, IMAGE_WIDTH, channels])",
                            "Call"
                        ],
                        [
                            "tf.cast(edge, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(edge, squeeze_dims=[2])",
                            "Call"
                        ],
                        [
                            "tf.one_hot(edge, depth=2)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_299": {
                "variable": {
                    "value": "edge",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "edge",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.decode_raw(features['data/edges'], tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(edge, shape=[IMAGE_HEIGHT, IMAGE_WIDTH, channels])",
                            "Call"
                        ],
                        [
                            "tf.cast(edge, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(edge, squeeze_dims=[2])",
                            "Call"
                        ],
                        [
                            "tf.one_hot(edge, depth=2)",
                            "Call"
                        ]
                    ]
                },
                "squeeze_dims": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "one_hot_300": {
                "variable": {
                    "value": "edge",
                    "type": "Name",
                    "possible_values": []
                },
                "indices": {
                    "value": "edge",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.decode_raw(features['data/edges'], tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(edge, shape=[IMAGE_HEIGHT, IMAGE_WIDTH, channels])",
                            "Call"
                        ],
                        [
                            "tf.cast(edge, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(edge, squeeze_dims=[2])",
                            "Call"
                        ],
                        [
                            "tf.one_hot(edge, depth=2)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Feature_14": {
                "int64_list": {
                    "value": "tf.train.Int64List(value=[value])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_18": {
                "bytes_list": {
                    "value": "tf.train.BytesList(value=[value])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shuffle_batch_306": {
                "variable": {
                    "value": "(images, segs, edges, dists)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[image, seg, edge, dist]",
                    "type": "List",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                },
                "capacity": {
                    "value": "capacity_train",
                    "type": "Name",
                    "possible_values": [
                        [
                            "20 * batch_size",
                            "BinOp"
                        ]
                    ]
                },
                "min_after_dequeue": {
                    "value": "min_after_dequeue_train",
                    "type": "Name",
                    "possible_values": [
                        [
                            "10 * batch_size",
                            "BinOp"
                        ]
                    ]
                },
                "num_threads": {
                    "value": "num_threads_train",
                    "type": "Name",
                    "possible_values": [
                        [
                            "6",
                            "Constant"
                        ]
                    ]
                }
            },
            "batch_315": {
                "variable": {
                    "value": "(images, segs, edges, dists)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[image, seg, edge, dist]",
                    "type": "List",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                },
                "num_threads": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Int64List_14": {
                "value": {
                    "value": "[value]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "BytesList_18": {
                "value": {
                    "value": "[value]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Example_245": {
                "variable": {
                    "value": "example",
                    "type": "Name",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.train.Features(feature={'data/slice': _bytes_feature(vol_slice), 'data/seg': _bytes_feature(seg_slice), 'data/edges': _bytes_feature(edges), 'data/dist': _bytes_feature(dist)})",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "FixedLenFeature_268": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_269": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_270": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_271": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Features_245": {
                "feature": {
                    "value": "{'data/slice': _bytes_feature(vol_slice), 'data/seg': _bytes_feature(seg_slice), 'data/edges': _bytes_feature(edges), 'data/dist': _bytes_feature(dist)}",
                    "type": "Dict",
                    "possible_values": []
                }
            }
        }
    },
    "inference.py": {
        "tensorflow": {
            "ConfigProto_91": {
                "variable": {
                    "value": "config",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_93": {
                "variable": {
                    "value": "sess",
                    "type": "Name",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_104": {
                "variable": {
                    "value": "init",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_87": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "train_val.py": {
        "tensorflow": {
            "ConfigProto_44": {
                "variable": {
                    "value": "config",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_46": {
                "variable": {
                    "value": "sess",
                    "type": "Name",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "Graph_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "unet.py": {
        "tensorflow": {
            "conv2d_25": {
                "variable": {
                    "value": "conv1",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "filters": {
                    "value": "num_filters",
                    "type": "Name",
                    "possible_values": [
                        [
                            "root_filters",
                            "Name"
                        ],
                        [
                            "2 * num_filters",
                            "BinOp"
                        ],
                        [
                            "2 * num_filters",
                            "BinOp"
                        ],
                        [
                            "2 * num_filters",
                            "BinOp"
                        ],
                        [
                            "2 * num_filters",
                            "BinOp"
                        ],
                        [
                            "int(num_filters / 2)",
                            "Call"
                        ],
                        [
                            "int(num_filters / 2)",
                            "Call"
                        ],
                        [
                            "int(num_filters / 2)",
                            "Call"
                        ],
                        [
                            "int(num_filters / 2)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "conv1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "batch_normalization_26": {
                "variable": {
                    "value": "bn1",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "conv1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(x, num_filters, (3, 3), padding='same', name='conv1')",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "bn1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_28": {
                "variable": {
                    "value": "relu1",
                    "type": "Name",
                    "possible_values": []
                },
                "features": {
                    "value": "bn1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.batch_normalization(conv1, training=is_training, name='bn1')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "relu1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv2d_29": {
                "variable": {
                    "value": "conv2",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "relu1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.relu(bn1, name='relu1')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "num_filters",
                    "type": "Name",
                    "possible_values": [
                        [
                            "root_filters",
                            "Name"
                        ],
                        [
                            "2 * num_filters",
                            "BinOp"
                        ],
                        [
                            "2 * num_filters",
                            "BinOp"
                        ],
                        [
                            "2 * num_filters",
                            "BinOp"
                        ],
                        [
                            "2 * num_filters",
                            "BinOp"
                        ],
                        [
                            "int(num_filters / 2)",
                            "Call"
                        ],
                        [
                            "int(num_filters / 2)",
                            "Call"
                        ],
                        [
                            "int(num_filters / 2)",
                            "Call"
                        ],
                        [
                            "int(num_filters / 2)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "conv2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "batch_normalization_30": {
                "variable": {
                    "value": "bn2",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "conv2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(relu1, num_filters, (3, 3), padding='same', name='conv2')",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "bn2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_31": {
                "variable": {
                    "value": "relu2",
                    "type": "Name",
                    "possible_values": []
                },
                "features": {
                    "value": "bn2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.batch_normalization(conv2, training=is_training, name='bn2')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "relu2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_pooling2d_36": {
                "variable": {
                    "value": "pool1",
                    "type": "Name",
                    "possible_values": []
                },
                "inputs": {
                    "value": "relu2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.relu(bn2, name='relu2')",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "maxpool1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv2d_45": {
                "variable": {
                    "value": "conv3",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "pool1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.max_pooling2d(relu2, pool_size=(2, 2), strides=(2, 2), padding='same', name='maxpool1')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "num_filters",
                    "type": "Name",
                    "possible_values": [
                        [
                            "root_filters",
                            "Name"
                        ],
                        [
                            "2 * num_filters",
                            "BinOp"
                        ],
                        [
                            "2 * num_filters",
                            "BinOp"
                        ],
                        [
                            "2 * num_filters",
                            "BinOp"
                        ],
                        [
                            "2 * num_filters",
                            "BinOp"
                        ],
                        [
                            "int(num_filters / 2)",
                            "Call"
                        ],
                        [
                            "int(num_filters / 2)",
                            "Call"
                        ],
                        [
                            "int(num_filters / 2)",
                            "Call"
                        ],
                        [
                            "int(num_filters / 2)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "conv3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "batch_normalization_46": {
                "variable": {
                    "value": "bn3",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "conv3",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(pool1, num_filters, (3, 3), padding='same', name='conv3')",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "bn3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_47": {
                "variable": {
                    "value": "relu3",
                    "type": "Name",
                    "possible_values": []
                },
                "features": {
                    "value": "bn3",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.batch_normalization(conv3, training=is_training, name='bn3')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "relu3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv2d_48": {
                "variable": {
                    "value": "conv4",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "relu3",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.relu(bn3, name='relu3')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "num_filters",
                    "type": "Name",
                    "possible_values": [
                        [
                            "root_filters",
                            "Name"
                        ],
                        [
                            "2 * num_filters",
                            "BinOp"
                        ],
                        [
                            "2 * num_filters",
                            "BinOp"
                        ],
                        [
                            "2 * num_filters",
                            "BinOp"
                        ],
                        [
                            "2 * num_filters",
                            "BinOp"
                        ],
                        [
                            "int(num_filters / 2)",
                            "Call"
                        ],
                        [
                            "int(num_filters / 2)",
                            "Call"
                        ],
                        [
                            "int(num_filters / 2)",
                            "Call"
                        ],
                        [
                            "int(num_filters / 2)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "conv4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "batch_normalization_49": {
                "variable": {
                    "value": "bn4",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "conv4",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(relu3, num_filters, (3, 3), padding='same', name='conv4')",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "bn4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_50": {
                "variable": {
                    "value": "relu4",
                    "type": "Name",
                    "possible_values": []
                },
                "features": {
                    "value": "bn4",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.batch_normalization(conv4, training=is_training, name='bn4')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "relu4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_pooling2d_54": {
                "variable": {
                    "value": "pool2",
                    "type": "Name",
                    "possible_values": []
                },
                "inputs": {
                    "value": "relu4",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.relu(bn4, name='relu4')",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "maxpool2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv2d_63": {
                "variable": {
                    "value": "conv5",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "pool2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.max_pooling2d(relu4, pool_size=(2, 2), strides=(2, 2), padding='same', name='maxpool2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "num_filters",
                    "type": "Name",
                    "possible_values": [
                        [
                            "root_filters",
                            "Name"
                        ],
                        [
                            "2 * num_filters",
                            "BinOp"
                        ],
                        [
                            "2 * num_filters",
                            "BinOp"
                        ],
                        [
                            "2 * num_filters",
                            "BinOp"
                        ],
                        [
                            "2 * num_filters",
                            "BinOp"
                        ],
                        [
                            "int(num_filters / 2)",
                            "Call"
                        ],
                        [
                            "int(num_filters / 2)",
                            "Call"
                        ],
                        [
                            "int(num_filters / 2)",
                            "Call"
                        ],
                        [
                            "int(num_filters / 2)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "conv5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "batch_normalization_64": {
                "variable": {
                    "value": "bn5",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "conv5",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(pool2, num_filters, (3, 3), padding='same', name='conv5')",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "bn5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_65": {
                "variable": {
                    "value": "relu5",
                    "type": "Name",
                    "possible_values": []
                },
                "features": {
                    "value": "bn5",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.batch_normalization(conv5, training=is_training, name='bn5')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "relu5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv2d_66": {
                "variable": {
                    "value": "conv6",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "relu5",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.relu(bn5, name='relu5')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "num_filters",
                    "type": "Name",
                    "possible_values": [
                        [
                            "root_filters",
                            "Name"
                        ],
                        [
                            "2 * num_filters",
                            "BinOp"
                        ],
                        [
                            "2 * num_filters",
                            "BinOp"
                        ],
                        [
                            "2 * num_filters",
                            "BinOp"
                        ],
                        [
                            "2 * num_filters",
                            "BinOp"
                        ],
                        [
                            "int(num_filters / 2)",
                            "Call"
                        ],
                        [
                            "int(num_filters / 2)",
                            "Call"
                        ],
                        [
                            "int(num_filters / 2)",
                            "Call"
                        ],
                        [
                            "int(num_filters / 2)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "conv6",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "batch_normalization_67": {
                "variable": {
                    "value": "bn6",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "conv6",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(relu5, num_filters, (3, 3), padding='same', name='conv6')",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "bn6",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_68": {
                "variable": {
                    "value": "relu6",
                    "type": "Name",
                    "possible_values": []
                },
                "features": {
                    "value": "bn6",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.batch_normalization(conv6, training=is_training, name='bn6')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "relu6",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_pooling2d_72": {
                "variable": {
                    "value": "pool3",
                    "type": "Name",
                    "possible_values": []
                },
                "inputs": {
                    "value": "relu6",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.relu(bn6, name='relu6')",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "maxpool3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv2d_81": {
                "variable": {
                    "value": "conv7",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "pool3",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.max_pooling2d(relu6, pool_size=(2, 2), strides=(2, 2), padding='same', name='maxpool3')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "num_filters",
                    "type": "Name",
                    "possible_values": [
                        [
                            "root_filters",
                            "Name"
                        ],
                        [
                            "2 * num_filters",
                            "BinOp"
                        ],
                        [
                            "2 * num_filters",
                            "BinOp"
                        ],
                        [
                            "2 * num_filters",
                            "BinOp"
                        ],
                        [
                            "2 * num_filters",
                            "BinOp"
                        ],
                        [
                            "int(num_filters / 2)",
                            "Call"
                        ],
                        [
                            "int(num_filters / 2)",
                            "Call"
                        ],
                        [
                            "int(num_filters / 2)",
                            "Call"
                        ],
                        [
                            "int(num_filters / 2)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "conv7",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "batch_normalization_82": {
                "variable": {
                    "value": "bn7",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "conv7",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(pool3, num_filters, (3, 3), padding='same', name='conv7')",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "bn7",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_83": {
                "variable": {
                    "value": "relu7",
                    "type": "Name",
                    "possible_values": []
                },
                "features": {
                    "value": "bn7",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.batch_normalization(conv7, training=is_training, name='bn7')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "relu7",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv2d_84": {
                "variable": {
                    "value": "conv8",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "relu7",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.relu(bn7, name='relu7')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "num_filters",
                    "type": "Name",
                    "possible_values": [
                        [
                            "root_filters",
                            "Name"
                        ],
                        [
                            "2 * num_filters",
                            "BinOp"
                        ],
                        [
                            "2 * num_filters",
                            "BinOp"
                        ],
                        [
                            "2 * num_filters",
                            "BinOp"
                        ],
                        [
                            "2 * num_filters",
                            "BinOp"
                        ],
                        [
                            "int(num_filters / 2)",
                            "Call"
                        ],
                        [
                            "int(num_filters / 2)",
                            "Call"
                        ],
                        [
                            "int(num_filters / 2)",
                            "Call"
                        ],
                        [
                            "int(num_filters / 2)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "conv8",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "batch_normalization_85": {
                "variable": {
                    "value": "bn8",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "conv8",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(relu7, num_filters, (3, 3), padding='same', name='conv8')",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "bn8",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_86": {
                "variable": {
                    "value": "relu8",
                    "type": "Name",
                    "possible_values": []
                },
                "features": {
                    "value": "bn8",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.batch_normalization(conv8, training=is_training, name='bn8')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "relu8",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_pooling2d_89": {
                "variable": {
                    "value": "pool4",
                    "type": "Name",
                    "possible_values": []
                },
                "inputs": {
                    "value": "relu8",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.relu(bn8, name='relu8')",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "maxpool4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv2d_98": {
                "variable": {
                    "value": "conv9",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "pool4",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.max_pooling2d(relu8, pool_size=(2, 2), strides=(2, 2), padding='same', name='maxpool4')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "num_filters",
                    "type": "Name",
                    "possible_values": [
                        [
                            "root_filters",
                            "Name"
                        ],
                        [
                            "2 * num_filters",
                            "BinOp"
                        ],
                        [
                            "2 * num_filters",
                            "BinOp"
                        ],
                        [
                            "2 * num_filters",
                            "BinOp"
                        ],
                        [
                            "2 * num_filters",
                            "BinOp"
                        ],
                        [
                            "int(num_filters / 2)",
                            "Call"
                        ],
                        [
                            "int(num_filters / 2)",
                            "Call"
                        ],
                        [
                            "int(num_filters / 2)",
                            "Call"
                        ],
                        [
                            "int(num_filters / 2)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "conv9",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "batch_normalization_99": {
                "variable": {
                    "value": "bn9",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "conv9",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(pool4, num_filters, (3, 3), padding='same', name='conv9')",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "bn9",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_100": {
                "variable": {
                    "value": "relu9",
                    "type": "Name",
                    "possible_values": []
                },
                "features": {
                    "value": "bn9",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.batch_normalization(conv9, training=is_training, name='bn9')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "relu9",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv2d_101": {
                "variable": {
                    "value": "conv10",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "relu9",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.relu(bn9, name='relu9')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "num_filters",
                    "type": "Name",
                    "possible_values": [
                        [
                            "root_filters",
                            "Name"
                        ],
                        [
                            "2 * num_filters",
                            "BinOp"
                        ],
                        [
                            "2 * num_filters",
                            "BinOp"
                        ],
                        [
                            "2 * num_filters",
                            "BinOp"
                        ],
                        [
                            "2 * num_filters",
                            "BinOp"
                        ],
                        [
                            "int(num_filters / 2)",
                            "Call"
                        ],
                        [
                            "int(num_filters / 2)",
                            "Call"
                        ],
                        [
                            "int(num_filters / 2)",
                            "Call"
                        ],
                        [
                            "int(num_filters / 2)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "conv10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "batch_normalization_102": {
                "variable": {
                    "value": "bn10",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "conv10",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(relu9, num_filters, (3, 3), padding='same', name='conv10')",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "bn10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_103": {
                "variable": {
                    "value": "relu10",
                    "type": "Name",
                    "possible_values": []
                },
                "features": {
                    "value": "bn10",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.batch_normalization(conv10, training=is_training, name='bn10')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "relu10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv2d_transpose_113": {
                "variable": {
                    "value": "upconv1",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "relu10",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.relu(bn10, name='relu10')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "num_filters",
                    "type": "Name",
                    "possible_values": [
                        [
                            "root_filters",
                            "Name"
                        ],
                        [
                            "2 * num_filters",
                            "BinOp"
                        ],
                        [
                            "2 * num_filters",
                            "BinOp"
                        ],
                        [
                            "2 * num_filters",
                            "BinOp"
                        ],
                        [
                            "2 * num_filters",
                            "BinOp"
                        ],
                        [
                            "int(num_filters / 2)",
                            "Call"
                        ],
                        [
                            "int(num_filters / 2)",
                            "Call"
                        ],
                        [
                            "int(num_filters / 2)",
                            "Call"
                        ],
                        [
                            "int(num_filters / 2)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "upconv1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv2d_121": {
                "variable": {
                    "value": "conv11",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "concat1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "crop_and_concat([relu8, upconv1], name='concat1')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "num_filters",
                    "type": "Name",
                    "possible_values": [
                        [
                            "root_filters",
                            "Name"
                        ],
                        [
                            "2 * num_filters",
                            "BinOp"
                        ],
                        [
                            "2 * num_filters",
                            "BinOp"
                        ],
                        [
                            "2 * num_filters",
                            "BinOp"
                        ],
                        [
                            "2 * num_filters",
                            "BinOp"
                        ],
                        [
                            "int(num_filters / 2)",
                            "Call"
                        ],
                        [
                            "int(num_filters / 2)",
                            "Call"
                        ],
                        [
                            "int(num_filters / 2)",
                            "Call"
                        ],
                        [
                            "int(num_filters / 2)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "conv11",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "batch_normalization_122": {
                "variable": {
                    "value": "bn11",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "conv11",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(concat1, num_filters, (3, 3), padding='same', name='conv11')",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "bn11",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_123": {
                "variable": {
                    "value": "relu11",
                    "type": "Name",
                    "possible_values": []
                },
                "features": {
                    "value": "bn11",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.batch_normalization(conv11, training=is_training, name='bn11')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "relu11",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv2d_124": {
                "variable": {
                    "value": "conv12",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "relu11",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.relu(bn11, name='relu11')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "num_filters",
                    "type": "Name",
                    "possible_values": [
                        [
                            "root_filters",
                            "Name"
                        ],
                        [
                            "2 * num_filters",
                            "BinOp"
                        ],
                        [
                            "2 * num_filters",
                            "BinOp"
                        ],
                        [
                            "2 * num_filters",
                            "BinOp"
                        ],
                        [
                            "2 * num_filters",
                            "BinOp"
                        ],
                        [
                            "int(num_filters / 2)",
                            "Call"
                        ],
                        [
                            "int(num_filters / 2)",
                            "Call"
                        ],
                        [
                            "int(num_filters / 2)",
                            "Call"
                        ],
                        [
                            "int(num_filters / 2)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "conv12",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "batch_normalization_125": {
                "variable": {
                    "value": "bn12",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "conv12",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(relu11, num_filters, (3, 3), padding='same', name='conv12')",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "bn12",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_126": {
                "variable": {
                    "value": "relu12",
                    "type": "Name",
                    "possible_values": []
                },
                "features": {
                    "value": "bn12",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.batch_normalization(conv12, training=is_training, name='bn12')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "relu12",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv2d_transpose_136": {
                "variable": {
                    "value": "upconv2",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "relu12",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.relu(bn12, name='relu12')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "num_filters",
                    "type": "Name",
                    "possible_values": [
                        [
                            "root_filters",
                            "Name"
                        ],
                        [
                            "2 * num_filters",
                            "BinOp"
                        ],
                        [
                            "2 * num_filters",
                            "BinOp"
                        ],
                        [
                            "2 * num_filters",
                            "BinOp"
                        ],
                        [
                            "2 * num_filters",
                            "BinOp"
                        ],
                        [
                            "int(num_filters / 2)",
                            "Call"
                        ],
                        [
                            "int(num_filters / 2)",
                            "Call"
                        ],
                        [
                            "int(num_filters / 2)",
                            "Call"
                        ],
                        [
                            "int(num_filters / 2)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "upconv2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv2d_143": {
                "variable": {
                    "value": "conv13",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "concat2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "crop_and_concat([relu6, upconv2], name='concat2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "num_filters",
                    "type": "Name",
                    "possible_values": [
                        [
                            "root_filters",
                            "Name"
                        ],
                        [
                            "2 * num_filters",
                            "BinOp"
                        ],
                        [
                            "2 * num_filters",
                            "BinOp"
                        ],
                        [
                            "2 * num_filters",
                            "BinOp"
                        ],
                        [
                            "2 * num_filters",
                            "BinOp"
                        ],
                        [
                            "int(num_filters / 2)",
                            "Call"
                        ],
                        [
                            "int(num_filters / 2)",
                            "Call"
                        ],
                        [
                            "int(num_filters / 2)",
                            "Call"
                        ],
                        [
                            "int(num_filters / 2)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "conv13",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "batch_normalization_144": {
                "variable": {
                    "value": "bn13",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "conv13",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(concat2, num_filters, (3, 3), padding='same', name='conv13')",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "bn13",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_145": {
                "variable": {
                    "value": "relu13",
                    "type": "Name",
                    "possible_values": []
                },
                "features": {
                    "value": "bn13",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.batch_normalization(conv13, training=is_training, name='bn13')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "relu13",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv2d_146": {
                "variable": {
                    "value": "conv14",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "relu13",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.relu(bn13, name='relu13')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "num_filters",
                    "type": "Name",
                    "possible_values": [
                        [
                            "root_filters",
                            "Name"
                        ],
                        [
                            "2 * num_filters",
                            "BinOp"
                        ],
                        [
                            "2 * num_filters",
                            "BinOp"
                        ],
                        [
                            "2 * num_filters",
                            "BinOp"
                        ],
                        [
                            "2 * num_filters",
                            "BinOp"
                        ],
                        [
                            "int(num_filters / 2)",
                            "Call"
                        ],
                        [
                            "int(num_filters / 2)",
                            "Call"
                        ],
                        [
                            "int(num_filters / 2)",
                            "Call"
                        ],
                        [
                            "int(num_filters / 2)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "conv14",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "batch_normalization_147": {
                "variable": {
                    "value": "bn14",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "conv14",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(relu13, num_filters, (3, 3), padding='same', name='conv14')",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "bn14",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_148": {
                "variable": {
                    "value": "relu14",
                    "type": "Name",
                    "possible_values": []
                },
                "features": {
                    "value": "bn14",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.batch_normalization(conv14, training=is_training, name='bn14')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "relu14",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv2d_transpose_158": {
                "variable": {
                    "value": "upconv3",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "relu14",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.relu(bn14, name='relu14')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "num_filters",
                    "type": "Name",
                    "possible_values": [
                        [
                            "root_filters",
                            "Name"
                        ],
                        [
                            "2 * num_filters",
                            "BinOp"
                        ],
                        [
                            "2 * num_filters",
                            "BinOp"
                        ],
                        [
                            "2 * num_filters",
                            "BinOp"
                        ],
                        [
                            "2 * num_filters",
                            "BinOp"
                        ],
                        [
                            "int(num_filters / 2)",
                            "Call"
                        ],
                        [
                            "int(num_filters / 2)",
                            "Call"
                        ],
                        [
                            "int(num_filters / 2)",
                            "Call"
                        ],
                        [
                            "int(num_filters / 2)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "upconv3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv2d_165": {
                "variable": {
                    "value": "conv15",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "concat3",
                    "type": "Name",
                    "possible_values": [
                        [
                            "crop_and_concat([relu4, upconv3], name='concat3')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "num_filters",
                    "type": "Name",
                    "possible_values": [
                        [
                            "root_filters",
                            "Name"
                        ],
                        [
                            "2 * num_filters",
                            "BinOp"
                        ],
                        [
                            "2 * num_filters",
                            "BinOp"
                        ],
                        [
                            "2 * num_filters",
                            "BinOp"
                        ],
                        [
                            "2 * num_filters",
                            "BinOp"
                        ],
                        [
                            "int(num_filters / 2)",
                            "Call"
                        ],
                        [
                            "int(num_filters / 2)",
                            "Call"
                        ],
                        [
                            "int(num_filters / 2)",
                            "Call"
                        ],
                        [
                            "int(num_filters / 2)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "conv15",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "batch_normalization_166": {
                "variable": {
                    "value": "bn15",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "conv15",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(concat3, num_filters, (3, 3), padding='same', name='conv15')",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "bn15",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_167": {
                "variable": {
                    "value": "relu15",
                    "type": "Name",
                    "possible_values": []
                },
                "features": {
                    "value": "bn15",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.batch_normalization(conv15, training=is_training, name='bn15')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "relu15",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv2d_168": {
                "variable": {
                    "value": "conv16",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "relu15",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.relu(bn15, name='relu15')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "num_filters",
                    "type": "Name",
                    "possible_values": [
                        [
                            "root_filters",
                            "Name"
                        ],
                        [
                            "2 * num_filters",
                            "BinOp"
                        ],
                        [
                            "2 * num_filters",
                            "BinOp"
                        ],
                        [
                            "2 * num_filters",
                            "BinOp"
                        ],
                        [
                            "2 * num_filters",
                            "BinOp"
                        ],
                        [
                            "int(num_filters / 2)",
                            "Call"
                        ],
                        [
                            "int(num_filters / 2)",
                            "Call"
                        ],
                        [
                            "int(num_filters / 2)",
                            "Call"
                        ],
                        [
                            "int(num_filters / 2)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "conv16",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "batch_normalization_169": {
                "variable": {
                    "value": "bn16",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "conv16",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(relu15, num_filters, (3, 3), padding='same', name='conv16')",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "bn16",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_170": {
                "variable": {
                    "value": "relu16",
                    "type": "Name",
                    "possible_values": []
                },
                "features": {
                    "value": "bn16",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.batch_normalization(conv16, training=is_training, name='bn16')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "relu16",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv2d_transpose_179": {
                "variable": {
                    "value": "upconv4",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "relu16",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.relu(bn16, name='relu16')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "num_filters",
                    "type": "Name",
                    "possible_values": [
                        [
                            "root_filters",
                            "Name"
                        ],
                        [
                            "2 * num_filters",
                            "BinOp"
                        ],
                        [
                            "2 * num_filters",
                            "BinOp"
                        ],
                        [
                            "2 * num_filters",
                            "BinOp"
                        ],
                        [
                            "2 * num_filters",
                            "BinOp"
                        ],
                        [
                            "int(num_filters / 2)",
                            "Call"
                        ],
                        [
                            "int(num_filters / 2)",
                            "Call"
                        ],
                        [
                            "int(num_filters / 2)",
                            "Call"
                        ],
                        [
                            "int(num_filters / 2)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "upconv4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv2d_186": {
                "variable": {
                    "value": "conv17",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "concat4",
                    "type": "Name",
                    "possible_values": [
                        [
                            "crop_and_concat([relu2, upconv4], name='concat4')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "num_filters",
                    "type": "Name",
                    "possible_values": [
                        [
                            "root_filters",
                            "Name"
                        ],
                        [
                            "2 * num_filters",
                            "BinOp"
                        ],
                        [
                            "2 * num_filters",
                            "BinOp"
                        ],
                        [
                            "2 * num_filters",
                            "BinOp"
                        ],
                        [
                            "2 * num_filters",
                            "BinOp"
                        ],
                        [
                            "int(num_filters / 2)",
                            "Call"
                        ],
                        [
                            "int(num_filters / 2)",
                            "Call"
                        ],
                        [
                            "int(num_filters / 2)",
                            "Call"
                        ],
                        [
                            "int(num_filters / 2)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "conv17",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "batch_normalization_187": {
                "variable": {
                    "value": "bn17",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "conv17",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(concat4, num_filters, (3, 3), padding='same', name='conv17')",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "bn17",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_188": {
                "variable": {
                    "value": "relu17",
                    "type": "Name",
                    "possible_values": []
                },
                "features": {
                    "value": "bn17",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.batch_normalization(conv17, training=is_training, name='bn17')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "relu17",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv2d_189": {
                "variable": {
                    "value": "conv18",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "relu17",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.relu(bn17, name='relu17')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "num_filters",
                    "type": "Name",
                    "possible_values": [
                        [
                            "root_filters",
                            "Name"
                        ],
                        [
                            "2 * num_filters",
                            "BinOp"
                        ],
                        [
                            "2 * num_filters",
                            "BinOp"
                        ],
                        [
                            "2 * num_filters",
                            "BinOp"
                        ],
                        [
                            "2 * num_filters",
                            "BinOp"
                        ],
                        [
                            "int(num_filters / 2)",
                            "Call"
                        ],
                        [
                            "int(num_filters / 2)",
                            "Call"
                        ],
                        [
                            "int(num_filters / 2)",
                            "Call"
                        ],
                        [
                            "int(num_filters / 2)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "conv18",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "batch_normalization_190": {
                "variable": {
                    "value": "bn18",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "conv18",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(relu17, num_filters, (3, 3), padding='same', name='conv18')",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "bn18",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_191": {
                "variable": {
                    "value": "relu18",
                    "type": "Name",
                    "possible_values": []
                },
                "features": {
                    "value": "bn18",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.batch_normalization(conv18, training=is_training, name='bn18')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "relu18",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv2d_198": {
                "variable": {
                    "value": "seg_map",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "relu18",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.relu(bn18, name='relu18')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "out_map",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_297": {
                "variable": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, IMAGE_H, IMAGE_W, channels]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "x",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_298": {
                "variable": {
                    "value": "self.y1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, IMAGE_H, IMAGE_W, n_class]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "y1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_299": {
                "variable": {
                    "value": "self.y2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, IMAGE_H, IMAGE_W, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "y2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_300": {
                "variable": {
                    "value": "self.y3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, IMAGE_H, IMAGE_W, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "y3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_301": {
                "variable": {
                    "value": "self.is_training",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "is_training",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_314": {
                "variable": {
                    "value": "self.predicter1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.logits1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_326": {
                "variable": {
                    "value": "self.correct_pred1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(self.predicter1, 3)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(self.y1, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_327": {
                "variable": {
                    "value": "self.accuracy1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(self.correct_pred1, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Saver_392": {
                "variable": {
                    "value": "saver",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_405": {
                "variable": {
                    "value": "saver",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_24": {
                "name_or_scope": {
                    "value": "Encoder1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_44": {
                "name_or_scope": {
                    "value": "Encoder2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_62": {
                "name_or_scope": {
                    "value": "Encoder3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_80": {
                "name_or_scope": {
                    "value": "Encoder4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_97": {
                "name_or_scope": {
                    "value": "BottleNeck",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_111": {
                "name_or_scope": {
                    "value": "Decoder1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_134": {
                "name_or_scope": {
                    "value": "Decoder2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_156": {
                "name_or_scope": {
                    "value": "Decoder4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_178": {
                "name_or_scope": {
                    "value": "SegBranch",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv2d_208": {
                "variable": {
                    "value": "conv17_2",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "concat4",
                    "type": "Name",
                    "possible_values": [
                        [
                            "crop_and_concat([relu2, upconv4], name='concat4')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "num_filters",
                    "type": "Name",
                    "possible_values": [
                        [
                            "root_filters",
                            "Name"
                        ],
                        [
                            "2 * num_filters",
                            "BinOp"
                        ],
                        [
                            "2 * num_filters",
                            "BinOp"
                        ],
                        [
                            "2 * num_filters",
                            "BinOp"
                        ],
                        [
                            "2 * num_filters",
                            "BinOp"
                        ],
                        [
                            "int(num_filters / 2)",
                            "Call"
                        ],
                        [
                            "int(num_filters / 2)",
                            "Call"
                        ],
                        [
                            "int(num_filters / 2)",
                            "Call"
                        ],
                        [
                            "int(num_filters / 2)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "conv17_2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "batch_normalization_209": {
                "variable": {
                    "value": "bn17_2",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "conv17_2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(concat4, num_filters, (3, 3), padding='same', name='conv17_2')",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "bn17_2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_210": {
                "variable": {
                    "value": "relu17_2",
                    "type": "Name",
                    "possible_values": []
                },
                "features": {
                    "value": "bn17_2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.batch_normalization(conv17_2, training=is_training, name='bn17_2')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "relu17_2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv2d_211": {
                "variable": {
                    "value": "conv18_2",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "relu17_2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.relu(bn17_2, name='relu17_2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "num_filters",
                    "type": "Name",
                    "possible_values": [
                        [
                            "root_filters",
                            "Name"
                        ],
                        [
                            "2 * num_filters",
                            "BinOp"
                        ],
                        [
                            "2 * num_filters",
                            "BinOp"
                        ],
                        [
                            "2 * num_filters",
                            "BinOp"
                        ],
                        [
                            "2 * num_filters",
                            "BinOp"
                        ],
                        [
                            "int(num_filters / 2)",
                            "Call"
                        ],
                        [
                            "int(num_filters / 2)",
                            "Call"
                        ],
                        [
                            "int(num_filters / 2)",
                            "Call"
                        ],
                        [
                            "int(num_filters / 2)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "conv18_2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "batch_normalization_212": {
                "variable": {
                    "value": "bn18_2",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "conv18_2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(relu17_2, num_filters, (3, 3), padding='same', name='conv18_2')",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "conv18_2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_213": {
                "variable": {
                    "value": "relu18_2",
                    "type": "Name",
                    "possible_values": []
                },
                "features": {
                    "value": "bn18_2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.batch_normalization(conv18_2, training=is_training, name='conv18_2')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "relu18_2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv2d_220": {
                "variable": {
                    "value": "edges_map",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "relu18_2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.relu(bn18_2, name='relu18_2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "edges_map",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv2d_229": {
                "variable": {
                    "value": "conv17_3",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "concat4",
                    "type": "Name",
                    "possible_values": [
                        [
                            "crop_and_concat([relu2, upconv4], name='concat4')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "num_filters",
                    "type": "Name",
                    "possible_values": [
                        [
                            "root_filters",
                            "Name"
                        ],
                        [
                            "2 * num_filters",
                            "BinOp"
                        ],
                        [
                            "2 * num_filters",
                            "BinOp"
                        ],
                        [
                            "2 * num_filters",
                            "BinOp"
                        ],
                        [
                            "2 * num_filters",
                            "BinOp"
                        ],
                        [
                            "int(num_filters / 2)",
                            "Call"
                        ],
                        [
                            "int(num_filters / 2)",
                            "Call"
                        ],
                        [
                            "int(num_filters / 2)",
                            "Call"
                        ],
                        [
                            "int(num_filters / 2)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "conv17_3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "batch_normalization_230": {
                "variable": {
                    "value": "bn17_3",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "conv17_3",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(concat4, num_filters, (3, 3), padding='same', name='conv17_3')",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "bn17_3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_231": {
                "variable": {
                    "value": "relu17_3",
                    "type": "Name",
                    "possible_values": []
                },
                "features": {
                    "value": "bn17_3",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.batch_normalization(conv17_3, training=is_training, name='bn17_3')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "relu17_3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv2d_232": {
                "variable": {
                    "value": "conv18_3",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "relu17_3",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.relu(bn17_3, name='relu17_3')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "num_filters",
                    "type": "Name",
                    "possible_values": [
                        [
                            "root_filters",
                            "Name"
                        ],
                        [
                            "2 * num_filters",
                            "BinOp"
                        ],
                        [
                            "2 * num_filters",
                            "BinOp"
                        ],
                        [
                            "2 * num_filters",
                            "BinOp"
                        ],
                        [
                            "2 * num_filters",
                            "BinOp"
                        ],
                        [
                            "int(num_filters / 2)",
                            "Call"
                        ],
                        [
                            "int(num_filters / 2)",
                            "Call"
                        ],
                        [
                            "int(num_filters / 2)",
                            "Call"
                        ],
                        [
                            "int(num_filters / 2)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "conv18_3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "batch_normalization_233": {
                "variable": {
                    "value": "bn18_3",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "conv18_3",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(relu17_3, num_filters, (3, 3), padding='same', name='conv18_3')",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "conv18_3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_234": {
                "variable": {
                    "value": "relu18_3",
                    "type": "Name",
                    "possible_values": []
                },
                "features": {
                    "value": "bn18_3",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.batch_normalization(conv18_3, training=is_training, name='conv18_3')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "relu18_3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv2d_241": {
                "variable": {
                    "value": "dist_map",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "relu18_3",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.relu(bn18_3, name='relu18_3')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "dist_map",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_316": {
                "variable": {
                    "value": "self.predicter2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.logits2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_317": {
                "variable": {
                    "value": "self.correct_pred2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(self.predicter2, 3)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(self.y2, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_318": {
                "variable": {
                    "value": "self.accuracy2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(self.correct_pred2, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_322": {
                "variable": {
                    "value": "self.predicter3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.logits3",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_squared_error_323": {
                "variable": {
                    "value": "self.error",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_true": {
                    "value": "self.predicter3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "self.y3",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_squared_error_354": {
                "variable": {
                    "value": "loss3",
                    "type": "Name",
                    "possible_values": []
                },
                "y_true": {
                    "value": "self.y3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "self.logits3",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_206": {
                "name_or_scope": {
                    "value": "EdgesBranch",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_227": {
                "name_or_scope": {
                    "value": "DistanceTransformBranch",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "name_scope_248": {
                "name": {
                    "value": "summaries",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "name_scope_311": {
                "name": {
                    "value": "dice",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "argmax_326": {
                "input": {
                    "value": "self.y1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_327": {
                "x": {
                    "value": "self.correct_pred1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_338": {
                "name": {
                    "value": "cost",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_341": {
                "variable": {
                    "value": "class_weights",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "np.array(class_weights, dtype=np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "image_250": {
                "name": {
                    "value": "'summary_conv_%02d_01' % i",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "get_image_summary(c1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "image_251": {
                "name": {
                    "value": "'summary_conv_%02d_02' % i",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "get_image_summary(c2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "image_254": {
                "name": {
                    "value": "'summary_pool_{}'.format(k)",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "get_image_summary(pools[k])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "image_257": {
                "name": {
                    "value": "'summary_deconv_concat_{}'.format(k)",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "get_image_summary(deconv[k])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "histogram_260": {
                "name": {
                    "value": "'dw_convolution_{}/activations'.format(k)",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "dw_h_convs[k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "histogram_263": {
                "name": {
                    "value": "'up_convolution_{}/activations'.format(k)",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "up_h_convs[k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "argmax_317": {
                "input": {
                    "value": "self.y2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_318": {
                "x": {
                    "value": "self.correct_pred2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "utils/data_augmentation.py": {
        "tensorflow": {
            "concat_19": {
                "variable": {
                    "value": "combined",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[slice, seg, edges, dist]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "random_crop_21": {
                "variable": {
                    "value": "combined",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "combined",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([slice, seg, edges, dist], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.random_crop(combined, size=[height, width, int(channels + 3)])",
                            "Call"
                        ],
                        [
                            "tf.concat([slice, seg, edges, dist], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(combined, new_height, new_width)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[height, width, int(channels + 3)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_36": {
                "variable": {
                    "value": "pi",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "math.pi",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_37": {
                "variable": {
                    "value": "factor",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "180.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ceil_52": {
                "variable": {
                    "value": "new_height",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "factor * tf.cast(height, tf.float32)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_53": {
                "variable": {
                    "value": "new_height",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "new_height",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.ceil(factor * tf.cast(height, tf.float32))",
                            "Call"
                        ],
                        [
                            "tf.cast(new_height, tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ceil_56": {
                "variable": {
                    "value": "new_width",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "factor * tf.cast(width, tf.float32)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_57": {
                "variable": {
                    "value": "new_width",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "new_width",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.ceil(factor * tf.cast(width, tf.float32))",
                            "Call"
                        ],
                        [
                            "tf.cast(new_width, tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_59": {
                "variable": {
                    "value": "combined",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[slice, seg, edges, dist]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "saturate_cast_74": {
                "variable": {
                    "value": "slice",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "slice",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.image.resize_images(slice, [height_new, width_new])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.gather(combined, 0, axis=2), axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.gather(combined, [0, 1, 2], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.contrib.image.rotate(slice, angle * pi / factor, interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.gather(combined, 0, axis=2), axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.gather(combined, [0, 1, 2], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(slice, size=[height, width])",
                            "Call"
                        ],
                        [
                            "tf.saturate_cast(slice, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "less_94": {
                "variable": {
                    "value": "coin",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.random_uniform((), 0.0, 1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cond_95": {
                "variable": {
                    "value": "(slice, seg, edges, dist)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "pred": {
                    "value": "coin",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.less(tf.random_uniform((), 0.0, 1.0), 0.5)",
                            "Call"
                        ],
                        [
                            "tf.less(tf.random_uniform((), 0.0, 1.0), 0.5)",
                            "Call"
                        ],
                        [
                            "tf.less(tf.random_uniform((), 0.0, 1.0), 0.5)",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : random_crop_multitask(slice, seg, edges, dist, height, width, channels)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : original_multitask(slice, seg, edges, dist)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "less_98": {
                "variable": {
                    "value": "coin",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.random_uniform((), 0.0, 1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cond_100": {
                "variable": {
                    "value": "(slice, seg, edges, dist)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "pred": {
                    "value": "coin",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.less(tf.random_uniform((), 0.0, 1.0), 0.5)",
                            "Call"
                        ],
                        [
                            "tf.less(tf.random_uniform((), 0.0, 1.0), 0.5)",
                            "Call"
                        ],
                        [
                            "tf.less(tf.random_uniform((), 0.0, 1.0), 0.5)",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : random_rotation_multitask(slice, seg, edges, dist, channels)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : original_multitask(slice, seg, edges, dist)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "less_102": {
                "variable": {
                    "value": "coin",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.random_uniform((), 0.0, 1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cond_105": {
                "variable": {
                    "value": "(slice, seg, edges, dist)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "pred": {
                    "value": "coin",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.less(tf.random_uniform((), 0.0, 1.0), 0.5)",
                            "Call"
                        ],
                        [
                            "tf.less(tf.random_uniform((), 0.0, 1.0), 0.5)",
                            "Call"
                        ],
                        [
                            "tf.less(tf.random_uniform((), 0.0, 1.0), 0.5)",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : random_zoom_multitask(slice, seg, edges, dist, height, width, channels)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : original_multitask(slice, seg, edges, dist)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "expand_dims_23": {
                "variable": {
                    "value": "slice",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.gather(combined, 0, axis=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_24": {
                "variable": {
                    "value": "seg",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.gather(combined, 1, axis=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_25": {
                "variable": {
                    "value": "edges",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.gather(combined, 2, axis=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_26": {
                "variable": {
                    "value": "dist",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.gather(combined, 3, axis=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_28": {
                "variable": {
                    "value": "slice",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "combined",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([slice, seg, edges, dist], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.random_crop(combined, size=[height, width, int(channels + 3)])",
                            "Call"
                        ],
                        [
                            "tf.concat([slice, seg, edges, dist], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(combined, new_height, new_width)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "[0, 1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_29": {
                "variable": {
                    "value": "seg",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.gather(combined, 4, axis=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_30": {
                "variable": {
                    "value": "edges",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.gather(combined, 5, axis=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_31": {
                "variable": {
                    "value": "dist",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.gather(combined, 6, axis=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_63": {
                "variable": {
                    "value": "slice",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.gather(combined, 0, axis=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_64": {
                "variable": {
                    "value": "seg",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.gather(combined, 1, axis=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_65": {
                "variable": {
                    "value": "edges",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.gather(combined, 2, axis=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_66": {
                "variable": {
                    "value": "dist",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.gather(combined, 3, axis=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_68": {
                "variable": {
                    "value": "slice",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "combined",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([slice, seg, edges, dist], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.random_crop(combined, size=[height, width, int(channels + 3)])",
                            "Call"
                        ],
                        [
                            "tf.concat([slice, seg, edges, dist], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(combined, new_height, new_width)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "[0, 1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_69": {
                "variable": {
                    "value": "seg",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.gather(combined, 4, axis=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_70": {
                "variable": {
                    "value": "edges",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.gather(combined, 5, axis=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_71": {
                "variable": {
                    "value": "dist",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.gather(combined, 6, axis=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cast_9": {
                "x": {
                    "value": "tf.ceil(tf.cast(height, tf.float32) * tf.constant(15.0) / tf.constant(100.0))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_11": {
                "x": {
                    "value": "tf.ceil(tf.cast(width, tf.float32) * tf.constant(15.0) / tf.constant(100.0))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ceil_10": {
                "x": {
                    "value": "tf.cast(height, tf.float32) * tf.constant(15.0) / tf.constant(100.0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ceil_12": {
                "x": {
                    "value": "tf.cast(width, tf.float32) * tf.constant(15.0) / tf.constant(100.0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gather_23": {
                "params": {
                    "value": "combined",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([slice, seg, edges, dist], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.random_crop(combined, size=[height, width, int(channels + 3)])",
                            "Call"
                        ],
                        [
                            "tf.concat([slice, seg, edges, dist], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(combined, new_height, new_width)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gather_24": {
                "params": {
                    "value": "combined",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([slice, seg, edges, dist], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.random_crop(combined, size=[height, width, int(channels + 3)])",
                            "Call"
                        ],
                        [
                            "tf.concat([slice, seg, edges, dist], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(combined, new_height, new_width)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gather_25": {
                "params": {
                    "value": "combined",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([slice, seg, edges, dist], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.random_crop(combined, size=[height, width, int(channels + 3)])",
                            "Call"
                        ],
                        [
                            "tf.concat([slice, seg, edges, dist], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(combined, new_height, new_width)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gather_26": {
                "params": {
                    "value": "combined",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([slice, seg, edges, dist], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.random_crop(combined, size=[height, width, int(channels + 3)])",
                            "Call"
                        ],
                        [
                            "tf.concat([slice, seg, edges, dist], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(combined, new_height, new_width)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gather_29": {
                "params": {
                    "value": "combined",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([slice, seg, edges, dist], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.random_crop(combined, size=[height, width, int(channels + 3)])",
                            "Call"
                        ],
                        [
                            "tf.concat([slice, seg, edges, dist], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(combined, new_height, new_width)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gather_30": {
                "params": {
                    "value": "combined",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([slice, seg, edges, dist], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.random_crop(combined, size=[height, width, int(channels + 3)])",
                            "Call"
                        ],
                        [
                            "tf.concat([slice, seg, edges, dist], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(combined, new_height, new_width)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gather_31": {
                "params": {
                    "value": "combined",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([slice, seg, edges, dist], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.random_crop(combined, size=[height, width, int(channels + 3)])",
                            "Call"
                        ],
                        [
                            "tf.concat([slice, seg, edges, dist], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(combined, new_height, new_width)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "6",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_52": {
                "x": {
                    "value": "height",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_56": {
                "x": {
                    "value": "width",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_63": {
                "params": {
                    "value": "combined",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([slice, seg, edges, dist], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.random_crop(combined, size=[height, width, int(channels + 3)])",
                            "Call"
                        ],
                        [
                            "tf.concat([slice, seg, edges, dist], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(combined, new_height, new_width)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gather_64": {
                "params": {
                    "value": "combined",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([slice, seg, edges, dist], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.random_crop(combined, size=[height, width, int(channels + 3)])",
                            "Call"
                        ],
                        [
                            "tf.concat([slice, seg, edges, dist], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(combined, new_height, new_width)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gather_65": {
                "params": {
                    "value": "combined",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([slice, seg, edges, dist], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.random_crop(combined, size=[height, width, int(channels + 3)])",
                            "Call"
                        ],
                        [
                            "tf.concat([slice, seg, edges, dist], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(combined, new_height, new_width)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gather_66": {
                "params": {
                    "value": "combined",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([slice, seg, edges, dist], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.random_crop(combined, size=[height, width, int(channels + 3)])",
                            "Call"
                        ],
                        [
                            "tf.concat([slice, seg, edges, dist], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(combined, new_height, new_width)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gather_69": {
                "params": {
                    "value": "combined",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([slice, seg, edges, dist], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.random_crop(combined, size=[height, width, int(channels + 3)])",
                            "Call"
                        ],
                        [
                            "tf.concat([slice, seg, edges, dist], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(combined, new_height, new_width)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gather_70": {
                "params": {
                    "value": "combined",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([slice, seg, edges, dist], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.random_crop(combined, size=[height, width, int(channels + 3)])",
                            "Call"
                        ],
                        [
                            "tf.concat([slice, seg, edges, dist], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(combined, new_height, new_width)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gather_71": {
                "params": {
                    "value": "combined",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([slice, seg, edges, dist], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.random_crop(combined, size=[height, width, int(channels + 3)])",
                            "Call"
                        ],
                        [
                            "tf.concat([slice, seg, edges, dist], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(combined, new_height, new_width)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "6",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_10": {
                "value": {
                    "value": "15.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_12": {
                "value": {
                    "value": "15.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_10": {
                "x": {
                    "value": "height",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_12": {
                "x": {
                    "value": "width",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "utils/evaluation_metrics.py": {
        "tensorflow": {
            "softmax_10": {
                "variable": {
                    "value": "pred",
                    "type": "Name",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "equal_11": {
                "variable": {
                    "value": "correct_pred",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(pred, 3)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(y_true, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_12": {
                "variable": {
                    "value": "accuracy",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(correct_pred, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_27": {
                "variable": {
                    "value": "prediction",
                    "type": "Name",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "reduce_sum_30": {
                "variable": {
                    "value": "intersection",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "gt * prediction",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_34": {
                "input_tensor": {
                    "value": "dice",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2.0 * intersection / (union + smooth)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "argmax_11": {
                "input": {
                    "value": "y_true",
                    "type": "Name",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_12": {
                "x": {
                    "value": "correct_pred",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.equal(tf.argmax(pred, 3), tf.argmax(y_true, 3))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_31": {
                "input_tensor": {
                    "value": "gt",
                    "type": "Name",
                    "possible_values": [
                        [
                            "gt[:, :, :, 1:]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "utils/losses.py": {
        "tensorflow": {
            "reshape_20": {
                "variable": {
                    "value": "flat_logits",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_21": {
                "variable": {
                    "value": "flat_labels",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "gt",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_22": {
                "variable": {
                    "value": "intersection",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "flat_logits * flat_labels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_39": {
                "variable": {
                    "value": "flat_logits",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, n_class]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_40": {
                "variable": {
                    "value": "flat_labels",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "gt",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, n_class]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_v2_42": {
                "variable": {
                    "value": "loss_map",
                    "type": "Name",
                    "possible_values": []
                },
                "logits": {
                    "value": "flat_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(logits, [-1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(logits, [-1, n_class])",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "flat_labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(gt, [-1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(gt, [-1, n_class])",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_48": {
                "variable": {
                    "value": "weight_map",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "flat_labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(gt, [-1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(gt, [-1, n_class])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "class_weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "a_is_sparse": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_49": {
                "variable": {
                    "value": "weight_map",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "weight_map",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(flat_labels, class_weights, a_is_sparse=True)",
                            "Call"
                        ],
                        [
                            "tf.reshape(weight_map, [-1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "multiply_51": {
                "variable": {
                    "value": "weighted_loss",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "loss_map",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.softmax_cross_entropy_with_logits_v2(logits=flat_logits, labels=flat_labels)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "weight_map",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(flat_labels, class_weights, a_is_sparse=True)",
                            "Call"
                        ],
                        [
                            "tf.reshape(weight_map, [-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_52": {
                "variable": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "weighted_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.multiply(loss_map, weight_map)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_54": {
                "variable": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss_map",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.softmax_cross_entropy_with_logits_v2(logits=flat_logits, labels=flat_labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_23": {
                "input_tensor": {
                    "value": "flat_labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(gt, [-1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(gt, [-1, n_class])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_26": {
                "input_tensor": {
                    "value": "dice",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2.0 * intersection / (union + smooth)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "utils/netutils.py": {
        "tensorflow": {
            "slice_45": {
                "variable": {
                    "value": "V",
                    "type": "Name",
                    "possible_values": []
                },
                "input_": {
                    "value": "img",
                    "type": "Name",
                    "possible_values": []
                },
                "begin": {
                    "value": "(0, 0, 0, idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "size": {
                    "value": "(1, -1, -1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_52": {
                "variable": {
                    "value": "V",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "V",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.slice(img, (0, 0, 0, idx), (1, -1, -1, 1))",
                            "Call"
                        ],
                        [
                            "V * 255",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(V, tf.stack((img_w, img_h, 1)))",
                            "Call"
                        ],
                        [
                            "tf.transpose(V, (2, 0, 1))",
                            "Call"
                        ],
                        [
                            "tf.reshape(V, tf.stack((-1, img_w, img_h, 1)))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.stack((img_w, img_h, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_53": {
                "variable": {
                    "value": "V",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "V",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.slice(img, (0, 0, 0, idx), (1, -1, -1, 1))",
                            "Call"
                        ],
                        [
                            "V * 255",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(V, tf.stack((img_w, img_h, 1)))",
                            "Call"
                        ],
                        [
                            "tf.transpose(V, (2, 0, 1))",
                            "Call"
                        ],
                        [
                            "tf.reshape(V, tf.stack((-1, img_w, img_h, 1)))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "(2, 0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_54": {
                "variable": {
                    "value": "V",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "V",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.slice(img, (0, 0, 0, idx), (1, -1, -1, 1))",
                            "Call"
                        ],
                        [
                            "V * 255",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(V, tf.stack((img_w, img_h, 1)))",
                            "Call"
                        ],
                        [
                            "tf.transpose(V, (2, 0, 1))",
                            "Call"
                        ],
                        [
                            "tf.reshape(V, tf.stack((-1, img_w, img_h, 1)))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.stack((-1, img_w, img_h, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_38": {
                "values": {
                    "value": "tensor_to_concat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'concat'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reduce_min_46": {
                "input_tensor": {
                    "value": "V",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.slice(img, (0, 0, 0, idx), (1, -1, -1, 1))",
                            "Call"
                        ],
                        [
                            "V * 255",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(V, tf.stack((img_w, img_h, 1)))",
                            "Call"
                        ],
                        [
                            "tf.transpose(V, (2, 0, 1))",
                            "Call"
                        ],
                        [
                            "tf.reshape(V, tf.stack((-1, img_w, img_h, 1)))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_max_47": {
                "input_tensor": {
                    "value": "V",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.slice(img, (0, 0, 0, idx), (1, -1, -1, 1))",
                            "Call"
                        ],
                        [
                            "V * 255",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(V, tf.stack((img_w, img_h, 1)))",
                            "Call"
                        ],
                        [
                            "tf.transpose(V, (2, 0, 1))",
                            "Call"
                        ],
                        [
                            "tf.reshape(V, tf.stack((-1, img_w, img_h, 1)))",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_50": {
                "input": {
                    "value": "img",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "shape_51": {
                "input": {
                    "value": "img",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "stack_52": {
                "values": {
                    "value": "(img_w, img_h, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "stack_54": {
                "values": {
                    "value": "(-1, img_w, img_h, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "slice_37": {
                "input_": {
                    "value": "x[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "begin": {
                    "value": "offsets",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[0, abs(h_shape - aux_shape[1]) // 2, abs(w_shape - aux_shape[2]) // 2, 0]",
                            "List"
                        ]
                    ]
                },
                "size": {
                    "value": "size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[aux_shape[0], h_shape, w_shape, aux_shape[3]]",
                            "List"
                        ]
                    ]
                }
            }
        }
    }
}