{
    "nndet/evaluator/case.py": {
        "sklearn": {}
    },
    "nndet/evaluator/detection/froc.py": {
        "sklearn": {
            "roc_curve_233": {
                "variable": {
                    "value": "(fpr, tpr, thresholds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "dt_matches",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.concatenate([r['dtMatches'] for r in results], axis=1)",
                            "Call"
                        ],
                        [
                            "dt_matches[np.logical_not(dt_ignores)].reshape(old_shape)",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "dt_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.concatenate([r['dtScores'] for r in results])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "nndet/io/datamodule/base.py": {
        "sklearn": {
            "KFold_121": {
                "variable": {
                    "value": "kfold",
                    "type": "variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "random_state": {
                    "value": "12345",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "nndet/io/prepare.py": {
        "sklearn": {
            "train_test_split_148": {
                "variable": {
                    "value": "(train_ids, test_ids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "case_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "test_size",
                    "type": "variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "random_state",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "nndet/utils/analysis.py": {
        "sklearn": {
            "confusion_matrix_212": {
                "variable": {
                    "value": "cm",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "np.concatenate(all_target)",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "np.concatenate(all_pred)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        },
        "torch": {}
    },
    "projects/Task019_ADAM/scripts/split.py": {
        "sklearn": {
            "GroupKFold_28": {
                "variable": {
                    "value": "kfold",
                    "type": "variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "nndet/arch/abstract.py": {
        "torch": {}
    },
    "nndet/arch/blocks/basic.py": {
        "torch": {
            "Sequential_105": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*_convs",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_274": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*_convs",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_146": {
                "*args": {
                    "value": "conv(in_channels=in_channels, out_channels=out_channels, kernel_size=kernel_size, stride=stride, padding=padding, **kwargs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_173": {
                "*args": {
                    "value": "conv(in_channels=in_channels, out_channels=out_channels, kernel_size=kernel_size, stride=stride, padding=padding, **kwargs)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "nndet/arch/blocks/res.py": {
        "torch": {
            "ReLU_63": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_154": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_68": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nd_pool('Avg', dim=conv.dim, kernel_size=stride, stride=stride)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_160": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nd_pool('Avg', dim=conv.dim, kernel_size=stride, stride=stride)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "nndet/arch/blocks/se.py": {
        "torch": {
            "Sequential_45": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nd_conv(dim, in_channels, in_channels // reduction, kernel_size=1, stride=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_48": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sigmoid_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "nndet/arch/conv.py": {
        "torch": {}
    },
    "nndet/arch/decoder/base.py": {
        "torch": {
            "ModuleDict_96": {
                "variable": {
                    "value": "self.lateral",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "{f'P{level}': self.get_lateral(conv, level) for level in range(self.num_level)}",
                    "type": "DictComp",
                    "possible_values": []
                }
            },
            "ModuleDict_99": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "{f'P{level}': self.get_conv(conv, level, 'out') for level in range(self.num_level)}",
                    "type": "DictComp",
                    "possible_values": []
                }
            },
            "ModuleDict_102": {
                "variable": {
                    "value": "self.up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "{f'P{level}': self.get_up(conv, level) for level in range(1, self.num_level)}",
                    "type": "DictComp",
                    "possible_values": []
                }
            },
            "ModuleDict_496": {
                "variable": {
                    "value": "self.down",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "{f'N{level}': self.get_down(conv, level) for level in range(self.num_level - 1)}",
                    "type": "DictComp",
                    "possible_values": []
                }
            },
            "ModuleDict_499": {
                "variable": {
                    "value": "self.pa_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "{f'N{level}': self.get_conv(conv, level, 'pa_out') for level in range(self.num_level)}",
                    "type": "DictComp",
                    "possible_values": []
                }
            },
            "Sequential_231": {
                "*args": {
                    "value": "*[conv(_in_channels[i], self.out_channels[level], kernel_size=1, padding=0, stride=1, **self._get_kwargs('lateral')) for i in range(num)]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_260": {
                "*args": {
                    "value": "*[conv(self.out_channels[level], self.out_channels[level], kernel_size=self.conv_kernels[level], padding=self.conv_paddings[level], stride=1, **self._get_kwargs(name)) for i in range(self.conv_settings[name]['num'])]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Upsample_293": {
                "variable": {
                    "value": "up",
                    "type": "variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "self.upsampling_mode",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "self.strides[level - 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ModuleDict_387": {
                "variable": {
                    "value": "self.fusion_bottom_up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "{f'P{level}': self.get_conv(conv, level, 'fusion') for level in range(self.num_level - 1)}",
                    "type": "DictComp",
                    "possible_values": []
                }
            },
            "ModuleDict_493": {
                "variable": {
                    "value": "self.fusion_top_down",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "{f'N{level}': self.get_conv(conv, level, 'fusion') for level in range(1, self.num_level)}",
                    "type": "DictComp",
                    "possible_values": []
                }
            },
            "Sequential_303": {
                "variable": {
                    "value": "up",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "up",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "nndet/arch/encoder/abstract.py": {
        "torch": {}
    },
    "nndet/arch/encoder/modular.py": {
        "torch": {
            "ModuleList_108": {
                "variable": {
                    "value": "self.stages",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "stages",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "nndet/arch/heads/classifier.py": {
        "torch": {
            "Sequential_120": {
                "variable": {
                    "value": "_conv_internal",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sigmoid_292": {
                "variable": {
                    "value": "self.logits_convert_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Softmax_352": {
                "variable": {
                    "value": "self.logits_convert_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_427": {
                "variable": {
                    "value": "self.logits_convert_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "nndet/arch/heads/comb.py": {
        "torch": {
            "cat_107": {
                "variable": {
                    "value": "box_deltas",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "offsets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_107": {
                "variable": {
                    "value": "box_deltas",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "sdim * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_108": {
                "variable": {
                    "value": "box_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flatten_108": {
                "variable": {
                    "value": "box_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "start_dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_218": {
                "variable": {
                    "value": "sampled_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sampled_pos_inds, sampled_neg_inds]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_220": {
                "variable": {
                    "value": "target_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "target_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(target_labels, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(target_labels, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(target_labels, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(target_labels, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(target_labels, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_329": {
                "variable": {
                    "value": "target_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "target_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(target_labels, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(target_labels, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(target_labels, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(target_labels, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(target_labels, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_330": {
                "variable": {
                    "value": "batch_anchors",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "anchors",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_332": {
                "variable": {
                    "value": "target_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "matched_gt_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_390": {
                "variable": {
                    "value": "target_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "target_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(target_labels, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(target_labels, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(target_labels, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(target_labels, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(target_labels, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_391": {
                "variable": {
                    "value": "batch_anchors",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "anchors",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_444": {
                "variable": {
                    "value": "sampled_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sampled_pos_inds, sampled_neg_inds]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_446": {
                "variable": {
                    "value": "target_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "target_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(target_labels, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(target_labels, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(target_labels, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(target_labels, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(target_labels, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_447": {
                "variable": {
                    "value": "batch_anchors",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "anchors",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_502": {
                "variable": {
                    "value": "sampled_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sampled_pos_inds, sampled_neg_inds]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_503": {
                "variable": {
                    "value": "target_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "target_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(target_labels, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(target_labels, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(target_labels, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(target_labels, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(target_labels, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_223": {
                "variable": {
                    "value": "batch_matched_gt_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "matched_gt_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_224": {
                "variable": {
                    "value": "batch_anchors",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "anchors",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_388": {
                "variable": {
                    "value": "sampled_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sampled_pos_inds, sampled_neg_inds]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_510": {
                "variable": {
                    "value": "batch_matched_gt_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "matched_gt_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_511": {
                "variable": {
                    "value": "batch_anchors",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "anchors",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_222": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "where_269": {
                "condition": {
                    "value": "torch.cat(sampled_pos_inds, dim=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_270": {
                "condition": {
                    "value": "torch.cat(sampled_neg_inds, dim=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_334": {
                "condition": {
                    "value": "target_labels >= 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "where_335": {
                "condition": {
                    "value": "target_labels >= 1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "no_grad_385": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_395": {
                "tensors": {
                    "value": "matched_gt_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_456": {
                "condition": {
                    "value": "target_labels >= 1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "cat_458": {
                "tensors": {
                    "value": "matched_gt_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_508": {
                "condition": {
                    "value": "target_labels >= 1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "no_grad_509": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_269": {
                "tensors": {
                    "value": "sampled_pos_inds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.select_indices(target_labels, box_logits)",
                            "Call"
                        ],
                        [
                            "self.fg_bg_sampler(target_labels, boxes_max_fg_probs)",
                            "Call"
                        ],
                        [
                            "torch.where(torch.cat(sampled_pos_inds, dim=0))[0]",
                            "Subscript"
                        ],
                        [
                            "torch.where(target_labels >= 1)[0]",
                            "Subscript"
                        ],
                        [
                            "self.select_indices(target_labels, box_logits)",
                            "Call"
                        ],
                        [
                            "self.select_indices(target_labels, box_logits)",
                            "Call"
                        ],
                        [
                            "self.select_indices(target_labels, box_logits)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_270": {
                "tensors": {
                    "value": "sampled_neg_inds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.select_indices(target_labels, box_logits)",
                            "Call"
                        ],
                        [
                            "self.fg_bg_sampler(target_labels, boxes_max_fg_probs)",
                            "Call"
                        ],
                        [
                            "torch.where(torch.cat(sampled_neg_inds, dim=0))[0]",
                            "Subscript"
                        ],
                        [
                            "self.select_indices(target_labels, box_logits)",
                            "Call"
                        ],
                        [
                            "self.select_indices(target_labels, box_logits)",
                            "Call"
                        ],
                        [
                            "self.select_indices(target_labels, box_logits)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "nndet/arch/heads/regressor.py": {
        "torch": {
            "Sequential_106": {
                "variable": {
                    "value": "_conv_internal",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_151": {
                "modules": {
                    "value": "[Scale() for _ in range(self.num_levels)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            }
        }
    },
    "nndet/arch/heads/segmenter.py": {
        "torch": {
            "CrossEntropyLoss_116": {
                "variable": {
                    "value": "self.ce_loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Softmax_118": {
                "variable": {
                    "value": "self.logits_convert_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_148": {
                "variable": {
                    "value": "_intermediate",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Softmax_112": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "nndet/arch/initializer.py": {
        "torch": {}
    },
    "nndet/arch/layers/interpolation.py": {
        "torch": {
            "interpolate_178": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "self.size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "self.scale_factor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "self.mode",
                    "type": "Attribute",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "self.align_corners",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "interpolate_67": {
                "input": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "target.unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "target.unsqueeze(dim=1)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tuple(target.shape)[2:]",
                            "Subscript"
                        ]
                    ]
                },
                "mode": {
                    "value": "self.mode",
                    "type": "Attribute",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "self.align_corners",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "interpolate_132": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds",
                            "variable"
                        ]
                    ]
                },
                "size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tuple(target.shape)[2:]",
                            "Subscript"
                        ]
                    ]
                },
                "mode": {
                    "value": "self.mode",
                    "type": "Attribute",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "self.align_corners",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "nndet/arch/layers/norm.py": {
        "torch": {}
    },
    "nndet/arch/layers/scale.py": {
        "torch": {
            "Parameter_30": {
                "variable": {
                    "value": "self.scale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(scale, dtype=torch.float)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_30": {
                "data": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "nndet/core/boxes/anchors.py": {
        "torch": {
            "cat_93": {
                "variable": {
                    "value": "anchors_with_stride",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "anchors_with_stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[anchors]",
                            "List"
                        ],
                        [
                            "torch.cat(anchors_with_stride, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "as_tensor_207": {
                "variable": {
                    "value": "scales",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "scales",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(scales, dtype=dtype, device=device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "base_anchors.dtype",
                            "Attribute"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "base_anchors.device",
                            "Attribute"
                        ],
                        [
                            "image_list.device",
                            "Attribute"
                        ],
                        [
                            "base_anchors.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "as_tensor_208": {
                "variable": {
                    "value": "aspect_ratios",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "aspect_ratios",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(aspect_ratios,) * len(sizes)",
                            "BinOp"
                        ],
                        [
                            "torch.as_tensor(aspect_ratios, dtype=dtype, device=device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "base_anchors.dtype",
                            "Attribute"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "base_anchors.device",
                            "Attribute"
                        ],
                        [
                            "image_list.device",
                            "Attribute"
                        ],
                        [
                            "base_anchors.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "sqrt_209": {
                "variable": {
                    "value": "h_ratios",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "aspect_ratios",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(aspect_ratios,) * len(sizes)",
                            "BinOp"
                        ],
                        [
                            "torch.as_tensor(aspect_ratios, dtype=dtype, device=device)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_356": {
                "variable": {
                    "value": "zanchors",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.as_tensor([-z, z], dtype=dtype, device=device).repeat(base_anchors_2d.shape[0], 1) for z in zsizes]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_359": {
                "variable": {
                    "value": "base_anchors_3d",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[base_anchors_2d.repeat(len(zsizes), 1), (zanchors / 2.0).round()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_484": {
                "variable": {
                    "value": "anchors",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[-all_sizes[:, 0], -all_sizes[:, 1], all_sizes[:, 0], all_sizes[:, 1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_571": {
                "variable": {
                    "value": "anchors",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[-all_sizes[:, 0], -all_sizes[:, 1], all_sizes[:, 0], all_sizes[:, 1], -all_sizes[:, 2], all_sizes[:, 2]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "meshgrid_175": {
                "variable": {
                    "value": "(shift_y, shift_x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "shifts_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(0, size1, dtype=torch.float, device=device) * stride1",
                            "BinOp"
                        ],
                        [
                            "torch.arange(0, size1, dtype=dtype, device=device) * stride1",
                            "BinOp"
                        ]
                    ]
                },
                "indexing": {
                    "value": "shifts_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(0, size0, dtype=torch.float, device=device) * stride0",
                            "BinOp"
                        ],
                        [
                            "torch.arange(0, size0, dtype=dtype, device=device) * stride0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "stack_178": {
                "variable": {
                    "value": "shifts",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(shift_x, shift_y, shift_x, shift_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "meshgrid_390": {
                "variable": {
                    "value": "(shift_x, shift_y, shift_z)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "shifts_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(0, size0, dtype=torch.float, device=device) * stride0",
                            "BinOp"
                        ],
                        [
                            "torch.arange(0, size0, dtype=dtype, device=device) * stride0",
                            "BinOp"
                        ]
                    ]
                },
                "indexing": {
                    "value": "shifts_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(0, size1, dtype=torch.float, device=device) * stride1",
                            "BinOp"
                        ],
                        [
                            "torch.arange(0, size1, dtype=dtype, device=device) * stride1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "stack_394": {
                "variable": {
                    "value": "shifts",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(shift_x, shift_y, shift_x, shift_y, shift_z, shift_z)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_215": {
                "tensors": {
                    "value": "[-ws, -hs, ws, hs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_263": {
                "tensors": {
                    "value": "anchors_per_image",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_482": {
                "data": {
                    "value": "list(product(width, height))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "base_anchors.dtype",
                            "Attribute"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "base_anchors.device",
                            "Attribute"
                        ],
                        [
                            "image_list.device",
                            "Attribute"
                        ],
                        [
                            "base_anchors.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "tensor_569": {
                "data": {
                    "value": "list(product(width, height, depth))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "base_anchors.dtype",
                            "Attribute"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "base_anchors.device",
                            "Attribute"
                        ],
                        [
                            "image_list.device",
                            "Attribute"
                        ],
                        [
                            "base_anchors.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "arange_172": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "size0",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "base_anchors.device",
                            "Attribute"
                        ],
                        [
                            "image_list.device",
                            "Attribute"
                        ],
                        [
                            "base_anchors.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "arange_173": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "size1",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "base_anchors.device",
                            "Attribute"
                        ],
                        [
                            "image_list.device",
                            "Attribute"
                        ],
                        [
                            "base_anchors.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "as_tensor_357": {
                "data": {
                    "value": "[-z, z]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "base_anchors.dtype",
                            "Attribute"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "base_anchors.device",
                            "Attribute"
                        ],
                        [
                            "image_list.device",
                            "Attribute"
                        ],
                        [
                            "base_anchors.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "arange_386": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "size0",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "base_anchors.dtype",
                            "Attribute"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "base_anchors.device",
                            "Attribute"
                        ],
                        [
                            "image_list.device",
                            "Attribute"
                        ],
                        [
                            "base_anchors.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "arange_387": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "size1",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "base_anchors.dtype",
                            "Attribute"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "base_anchors.device",
                            "Attribute"
                        ],
                        [
                            "image_list.device",
                            "Attribute"
                        ],
                        [
                            "base_anchors.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "arange_388": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "size2",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "base_anchors.dtype",
                            "Attribute"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "base_anchors.device",
                            "Attribute"
                        ],
                        [
                            "image_list.device",
                            "Attribute"
                        ],
                        [
                            "base_anchors.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "tensor_91": {
                "data": {
                    "value": "stride_formatted",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[stride[0], stride[1], stride[0], stride[1]]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "nndet/core/boxes/clip.py": {
        "torch": {}
    },
    "nndet/core/boxes/coder.py": {
        "torch": {
            "clamp_148": {
                "variable": {
                    "value": "dw",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rel_codes[:, 2::offset] / ww",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(dw, max=bbox_xform_clip)",
                            "Call"
                        ]
                    ]
                },
                "max": {
                    "value": "bbox_xform_clip",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "clamp_149": {
                "variable": {
                    "value": "dh",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rel_codes[:, 3::offset] / wh",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(dh, max=bbox_xform_clip)",
                            "Call"
                        ]
                    ]
                },
                "max": {
                    "value": "bbox_xform_clip",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_110": {
                "variable": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(targets_dx, targets_dy, targets_dw, targets_dh, targets_dz, targets_dd)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_113": {
                "variable": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(targets_dx, targets_dy, targets_dw, targets_dh)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_170": {
                "variable": {
                    "value": "dd",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rel_codes[:, 5::offset] / wd",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(dd, max=bbox_xform_clip)",
                            "Call"
                        ]
                    ]
                },
                "max": {
                    "value": "bbox_xform_clip",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stack_177": {
                "variable": {
                    "value": "pred_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(pred_boxes1, pred_boxes2, pred_boxes3, pred_boxes4, pred_boxes5, pred_boxes6)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flatten_177": {
                "variable": {
                    "value": "pred_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_180": {
                "variable": {
                    "value": "pred_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(pred_boxes1, pred_boxes2, pred_boxes3, pred_boxes4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flatten_180": {
                "variable": {
                    "value": "pred_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_242": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reference_boxes.dtype",
                            "Attribute"
                        ],
                        [
                            "rel_codes.dtype",
                            "Attribute"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reference_boxes.device",
                            "Attribute"
                        ],
                        [
                            "rel_codes.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cat_262": {
                "variable": {
                    "value": "concat_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "boxes.to(rel_codes.dtype)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_90": {
                "input": {
                    "value": "gt_widths / ex_widths",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_91": {
                "input": {
                    "value": "gt_heights / ex_heights",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_153": {
                "input": {
                    "value": "dw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rel_codes[:, 2::offset] / ww",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(dw, max=bbox_xform_clip)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_154": {
                "input": {
                    "value": "dh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rel_codes[:, 3::offset] / wh",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(dh, max=bbox_xform_clip)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_108": {
                "input": {
                    "value": "gt_depth / ex_depth",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_156": {
                "data": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "pred_ctr_x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_157": {
                "data": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "pred_ctr_y.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_158": {
                "data": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "pred_ctr_x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_159": {
                "data": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "pred_ctr_y.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_173": {
                "input": {
                    "value": "dd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rel_codes[:, 5::offset] / wd",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(dd, max=bbox_xform_clip)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_175": {
                "data": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "pred_ctr_z.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_176": {
                "data": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "pred_ctr_z.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_227": {
                "input": {
                    "value": "proposals[img_idx]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "nndet/core/boxes/matcher.py": {
        "torch": {
            "arange_211": {
                "variable": {
                    "value": "matches[best_pred_idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "start": {
                    "value": "len(best_pred_idx)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_300": {
                "variable": {
                    "value": "candidate_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "candidate_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(candidate_idx, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "full_like_323": {
                "variable": {
                    "value": "ious_inf",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "match_quality_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([]).to(anchors)",
                            "Call"
                        ],
                        [
                            "self.similarity_fn(boxes, anchors)",
                            "Call"
                        ],
                        [
                            "self.similarity_fn(boxes, anchors)",
                            "Call"
                        ],
                        [
                            "match_quality_matrix",
                            "Method Argument"
                        ],
                        [
                            "match_quality_matrix",
                            "Method Argument"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "-INF",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_88": {
                "variable": {
                    "value": "match_quality_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "empty_89": {
                "variable": {
                    "value": "matches",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_anchors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "anchors.shape[0]",
                            "Subscript"
                        ],
                        [
                            "anchors.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_313": {
                "start": {
                    "value": "num_gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "boxes.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "boxes.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "nndet/core/boxes/nms.py": {
        "torch": {
            "sort_40": {
                "variable": {
                    "value": "(_, _idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scores",
                            "Method Argument"
                        ]
                    ]
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "autocast_51": {
                "enabled": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_48": {
                "data": {
                    "value": "keep",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "empty_93": {
                "*size": {
                    "value": "(0,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "boxes.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_46": {
                "condition": {
                    "value": "ious[_idx[0]][_idx] <= thresh",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    },
    "nndet/core/boxes/ops.py": {
        "torch": {
            "autocast_74": {
                "enabled": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "autocast_105": {
                "enabled": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_150": {
                "variable": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes1[:, None, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_151": {
                "variable": {
                    "value": "y1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes1[:, None, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_152": {
                "variable": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes1[:, None, 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_153": {
                "variable": {
                    "value": "y2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes1[:, None, 3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_154": {
                "variable": {
                    "value": "z1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes1[:, None, 4]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_155": {
                "variable": {
                    "value": "z2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes1[:, None, 5]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_177": {
                "variable": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes1[:, None, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_178": {
                "variable": {
                    "value": "y1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes1[:, None, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_179": {
                "variable": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes1[:, None, 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_180": {
                "variable": {
                    "value": "y2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes1[:, None, 3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_181": {
                "variable": {
                    "value": "z1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes1[:, None, 4]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_182": {
                "variable": {
                    "value": "z2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes1[:, None, 5]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_207": {
                "variable": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes1[:, None, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_208": {
                "variable": {
                    "value": "y1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes1[:, None, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_209": {
                "variable": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes1[:, None, 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_210": {
                "variable": {
                    "value": "y2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes1[:, None, 3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_232": {
                "variable": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes1[:, None, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_233": {
                "variable": {
                    "value": "y1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes1[:, None, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_234": {
                "variable": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes1[:, None, 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_235": {
                "variable": {
                    "value": "y2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes1[:, None, 3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "stack_327": {
                "tensors": {
                    "value": "centers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[(boxes[:, 2] + boxes[:, 0]) / 2.0, (boxes[:, 3] + boxes[:, 1]) / 2.0]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_392": {
                "tensors": {
                    "value": "dists",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(center1[:, None] - center2[None]).pow(2).sum(-1).sqrt()",
                            "Call"
                        ],
                        [
                            "(center1[:, None] - center2[None]).sum(-1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_98": {
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_124": {
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "where_258": {
                "condition": {
                    "value": "keep",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(ws >= min_size) & (hs >= min_size)",
                            "BinOp"
                        ],
                        [
                            "(ws >= min_size) & (hs >= min_size) & (ds >= min_size)",
                            "BinOp"
                        ],
                        [
                            "torch.where(keep)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "stack_311": {
                "tensors": {
                    "value": "axes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_311": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "nndet/core/boxes/sampler.py": {
        "torch": {
            "zeros_like_96": {
                "variable": {
                    "value": "neg_idx_per_image_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(target_labels, fg_probs)",
                            "Call"
                        ],
                        [
                            "zip(target_labels, fg_probs)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_207": {
                "variable": {
                    "value": "pos_idx_per_image_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(target_labels, fg_probs)",
                            "Call"
                        ],
                        [
                            "zip(target_labels, fg_probs)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_254": {
                "variable": {
                    "value": "target_labels_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "target_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randperm_93": {
                "n": {
                    "value": "negative.numel()",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "negative.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randperm_205": {
                "n": {
                    "value": "positive.numel()",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "positive.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_256": {
                "condition": {
                    "value": "target_labels_batch >= 1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "where_257": {
                "condition": {
                    "value": "target_labels_batch == 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "where_139": {
                "condition": {
                    "value": "img_labels >= 1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "where_140": {
                "condition": {
                    "value": "img_labels == 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "where_325": {
                "condition": {
                    "value": "img_labels == 0",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    },
    "nndet/core/retina.py": {
        "torch": {
            "no_grad_152": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_219": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_378": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_352": {
                "variable": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "probs.numel()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_268": {
                "variable": {
                    "value": "matched_gt_boxes_per_image",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "anchors_per_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(anchors, target_boxes, target_classes)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_269": {
                "variable": {
                    "value": "labels_per_image",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_anchors_per_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "anchors_per_image.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "nndet/inference/detection/ensemble.py": {
        "torch": {}
    },
    "nndet/inference/detection/model.py": {
        "torch": {
            "ones_like_85": {
                "variable": {
                    "value": "new_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "nndet/inference/detection/postprocessing.py": {
        "torch": {}
    },
    "nndet/inference/detection/wbc.py": {
        "torch": {
            "sort_130": {
                "variable": {
                    "value": "(_, idx_pool)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scores[topk_idx]",
                            "Subscript"
                        ]
                    ]
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_192": {
                "variable": {
                    "value": "n_missing_preds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tensor([0.0], device=n_expected.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_232": {
                "variable": {
                    "value": "n_missing_preds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tensor([0.0], device=n_expected.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "flatten_136": {
                "variable": {
                    "value": "matches",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "flatten_155": {
                "variable": {
                    "value": "non_matches",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_192": {
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "n_expected.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_232": {
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "n_expected.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_like_83": {
                "input": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "wbc(_boxes, _scores, weights=_weights, n_exp_preds=_n_exp_preds, iou_thresh=iou_thresh, score_thresh=score_thresh, use_area=use_area, missing_weight=missing_weight)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_85": {
                "tensors": {
                    "value": "clustered_boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_86": {
                "tensors": {
                    "value": "clustered_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_87": {
                "tensors": {
                    "value": "clustered_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_89": {
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_90": {
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_91": {
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_158": {
                "tensors": {
                    "value": "new_boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_158": {
                "tensors": {
                    "value": "new_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_160": {
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "where_136": {
                "condition": {
                    "value": "ious[highest_scoring_id][idx_pool] > iou_thresh",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "where_155": {
                "condition": {
                    "value": "ious[highest_scoring_id][idx_pool] <= iou_thresh",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    },
    "nndet/inference/ensembler/base.py": {
        "torch": {
            "no_grad_116": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_136": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_206": {
                "variable": {
                    "value": "ckp",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "str(Path(base_dir) / f'{case_id}_{self.ID}.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_216": {
                "variable": {
                    "value": "ckp",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "str(Path(base_dir) / f'{case_id}_{cls.ID}.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_302": {
                "variable": {
                    "value": "self.overlap_map",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.overlap_map",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_64": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_240": {
                "*size": {
                    "value": "*data_shape",
                    "type": "Starred",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_275": {
                "input": {
                    "value": "self.overlap_map[slicer].float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_288": {
                "data": {
                    "value": "[self.mean_num_overlap_of_box(box) for box in boxes]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "device_66": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "save_200": {
                "obj": {
                    "value": "kwargs",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "nndet/inference/ensembler/detection.py": {
        "torch": {
            "from_numpy_273": {
                "variable": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "boxes_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "restore_detection(boxes.detach().cpu().numpy(), transpose_backward=self.properties['transpose_backward'], original_spacing=self.properties['original_spacing'], spacing_after_resampling=self.properties['spacing_after_resampling'], crop_bbox=self.properties['crop_bbox'])",
                            "Call"
                        ]
                    ]
                }
            },
            "load_306": {
                "variable": {
                    "value": "ckp",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "str(Path(base_dir) / f'{case_id}_{cls.ID}.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_336": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_421": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_639": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_797": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_997": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_1122": {
                "variable": {
                    "value": "n_exp_preds",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[num_models] * len(boxes)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_417": {
                "ndarray": {
                    "value": "np.concatenate(all_weights)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_561": {
                "data": {
                    "value": "tile_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch[self.data_key].shape[2:]",
                            "Subscript"
                        ],
                        [
                            "batch[self.data_key].shape[2:]",
                            "Subscript"
                        ],
                        [
                            "batch[self.data_key].shape[2:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tensor_705": {
                "data": {
                    "value": "tile_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch[self.data_key].shape[2:]",
                            "Subscript"
                        ],
                        [
                            "batch[self.data_key].shape[2:]",
                            "Subscript"
                        ],
                        [
                            "batch[self.data_key].shape[2:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Tensor_1018": {},
            "tensor_1053": {
                "data": {
                    "value": "tile_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch[self.data_key].shape[2:]",
                            "Subscript"
                        ],
                        [
                            "batch[self.data_key].shape[2:]",
                            "Subscript"
                        ],
                        [
                            "batch[self.data_key].shape[2:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ones_like_369": {
                "input": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(result[self.box_key], result[self.score_key], result[self.label_key])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "nndet/inference/ensembler/segmentation.py": {
        "torch": {
            "zeros_58": {
                "variable": {
                    "value": "self.overlap",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.properties['shape']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_147": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_256": {
                "variable": {
                    "value": "logit_maps",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "logit_maps_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "restore_fmap(fmap=logit_maps.detach().cpu().numpy(), transpose_backward=self.properties['transpose_backward'], original_spacing=self.properties['original_spacing'], spacing_after_resampling=self.properties['spacing_after_resampling'], original_size_before_cropping=self.properties['original_size_before_cropping'], size_after_cropping=self.properties['size_after_cropping'], crop_bbox=self.properties['crop_bbox'], interpolation_order=1, interpolation_order_z=0, do_separate_z=None)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_259": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_317": {
                "variable": {
                    "value": "ckp",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "str(Path(base_dir) / f'{case_id}_{cls.ID}.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_168": {
                "variable": {
                    "value": "self.model_results",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(int(seg_batch.shape[1]), *self.properties['shape'])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "from_numpy_225": {
                "variable": {
                    "value": "self.cache_crop_weight[crop_size]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "weighting",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tmp_smooth + 1e-08",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_228": {
                "variable": {
                    "value": "self.cache_crop_weight[crop_size]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "crop_size",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "nndet/inference/loading.py": {
        "torch": {
            "load_96": {
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_names[0]",
                            "Subscript"
                        ],
                        [
                            "model_names",
                            "variable"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_138": {
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_names[0]",
                            "Subscript"
                        ],
                        [
                            "model_names",
                            "variable"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "nndet/inference/predictor.py": {
        "torch": {
            "DataLoader_246": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "tiles",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.tile_case(case)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "slice_collate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slice_collate",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_237": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_276": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "autocast_305": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "nndet/io/transforms/base.py": {
        "torch": {
            "ModuleList_48": {
                "variable": {
                    "value": "self.transforms",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "list(transforms)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "enable_grad_28": {
                "variable": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_30": {
                "variable": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "nndet/io/transforms/instances.py": {
        "torch": {
            "stack_132": {
                "variable": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(boxes)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[]])",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.stack(boxes)",
                            "Call"
                        ],
                        [
                            "np.array([[]])",
                            "Call"
                        ],
                        [
                            "instances_to_boxes_np(seg[0], **kwargs)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_134": {
                "variable": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_195": {
                "data": {
                    "value": "classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[int(map_dict[str(int(idx.detach().item()))]) for idx in instance_idx]",
                            "ListComp"
                        ],
                        [
                            "[int(map_dict[str(int(idx))]) for idx in instance_idx]",
                            "ListComp"
                        ]
                    ]
                },
                "device": {
                    "value": "instance_idx.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_250": {
                "variable": {
                    "value": "semantic",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data[self.instance_key]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_like_285": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "instances",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_seg.unique(sorted=True)",
                            "Call"
                        ],
                        [
                            "instances[instances > 0]",
                            "Subscript"
                        ],
                        [
                            "np.unique(seg)",
                            "Call"
                        ],
                        [
                            "instances[instances > 0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tensor_129": {
                "data": {
                    "value": "box",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[_mins[-dim] - 1, _mins[-dim + 1] - 1, _maxs[-dim] + 1, _maxs[-dim + 1] + 1]",
                            "List"
                        ],
                        [
                            "box + [_mins[-dim + 2] - 1, _maxs[-dim + 2] + 1]",
                            "BinOp"
                        ],
                        [
                            "[_mins[-dim] - 1, _mins[-dim + 1] - 1, _maxs[-dim] + 1, _maxs[-dim + 1] + 1]",
                            "List"
                        ],
                        [
                            "box + [_mins[-dim + 2] - 1, _maxs[-dim + 2] + 1]",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "nndet/io/transforms/spatial.py": {
        "torch": {
            "eye_143": {
                "variable": {
                    "value": "mat",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "homogeneous_dims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cartesian_dims + 1",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_149": {
                "variable": {
                    "value": "self_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "cartesian_dims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "points[0].shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_150": {
                "variable": {
                    "value": "index_tensor",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_151": {
                "variable": {
                    "value": "src_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1] * len(mirror_dims)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_205": {
                "tensors": {
                    "value": "[points0, points1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_222": {
                "variable": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "points.shape[0] // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "points.shape[1] * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "min_224": {
                "variable": {
                    "value": "boxes[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "points0[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_225": {
                "variable": {
                    "value": "boxes[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "points0[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_226": {
                "variable": {
                    "value": "boxes[:, 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "points0[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_227": {
                "variable": {
                    "value": "boxes[:, 3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "points0[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_153": {
                "data": {
                    "value": "data_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(homogeneous_points, data_shapes)",
                            "Call"
                        ],
                        [
                            "list(data_shape)",
                            "Call"
                        ],
                        [
                            "data[self.keys[0]].shape",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cat_168": {
                "tensors": {
                    "value": "[p, torch.ones(p.shape[0], 1).to(p)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_229": {
                "variable": {
                    "value": "boxes[:, 4]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "points0[:, 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_230": {
                "variable": {
                    "value": "boxes[:, 5]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "points0[:, 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_233": {
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_168": {
                "*size": {
                    "value": "p.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "nndet/losses/base.py": {
        "torch": {
            "mean_34": {
                "input": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_38": {
                "input": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "nndet/losses/classification.py": {
        "torch": {
            "empty_32": {
                "variable": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(*data.shape, num_classes)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "data.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_66": {
                "variable": {
                    "value": "bce_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sigmoid_68": {
                "variable": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "nndet/losses/regression.py": {
        "torch": {
            "abs_101": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inp - target",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_103": {
                "variable": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inp - target",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_105": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "cond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n < beta",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "0.5 * n ** 2 / beta",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "n - 0.5 * beta",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "diag_150": {
                "input": {
                    "value": "generalized_box_iou(pred_boxes, target_boxes, eps=self.eps)",
                    "type": "Call",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "nndet/losses/segmentation.py": {
        "torch": {
            "empty_26": {
                "variable": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(shape[0], num_classes, *shape[1:])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "data.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_69": {
                "variable": {
                    "value": "tp",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tuple((x_i * mask[:, 0] for x_i in torch.unbind(tp, dim=1)))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_70": {
                "variable": {
                    "value": "fp",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tuple((x_i * mask[:, 0] for x_i in torch.unbind(fp, dim=1)))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_71": {
                "variable": {
                    "value": "fn",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tuple((x_i * mask[:, 0] for x_i in torch.unbind(fn, dim=1)))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_50": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_59": {
                "variable": {
                    "value": "y_onehot",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shp_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_output.shape",
                            "Attribute"
                        ],
                        [
                            "inp.shape",
                            "Attribute"
                        ]
                    ]
                }
            },
            "unbind_69": {
                "input": {
                    "value": "tp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_output * y_onehot",
                            "BinOp"
                        ],
                        [
                            "torch.stack(tuple((x_i * mask[:, 0] for x_i in torch.unbind(tp, dim=1))), dim=1)",
                            "Call"
                        ],
                        [
                            "tp ** 2",
                            "BinOp"
                        ],
                        [
                            "tp.sum(dim=axes, keepdim=False)",
                            "Call"
                        ],
                        [
                            "get_tp_fp_fn(inp, target, axes, loss_mask, False)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unbind_70": {
                "input": {
                    "value": "fp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_output * (1 - y_onehot)",
                            "BinOp"
                        ],
                        [
                            "torch.stack(tuple((x_i * mask[:, 0] for x_i in torch.unbind(fp, dim=1))), dim=1)",
                            "Call"
                        ],
                        [
                            "fp ** 2",
                            "BinOp"
                        ],
                        [
                            "fp.sum(dim=axes, keepdim=False)",
                            "Call"
                        ],
                        [
                            "get_tp_fp_fn(inp, target, axes, loss_mask, False)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unbind_71": {
                "input": {
                    "value": "fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1 - net_output) * y_onehot",
                            "BinOp"
                        ],
                        [
                            "torch.stack(tuple((x_i * mask[:, 0] for x_i in torch.unbind(fn, dim=1))), dim=1)",
                            "Call"
                        ],
                        [
                            "fn ** 2",
                            "BinOp"
                        ],
                        [
                            "fn.sum(dim=axes, keepdim=False)",
                            "Call"
                        ],
                        [
                            "get_tp_fp_fn(inp, target, axes, loss_mask, False)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "nndet/planning/architecture/boxes/base.py": {
        "torch": {
            "from_numpy_378": {
                "variable": {
                    "value": "boxes_torch",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "boxes_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.filter_boxes(boxes_np_full)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_467": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "nndet/planning/architecture/boxes/c002.py": {
        "torch": {
            "from_numpy_261": {
                "variable": {
                    "value": "boxes_torch",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "boxes_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.filter_boxes(boxes_np_full)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_241": {
                "ndarray": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._get_scaled_boxes(target_spacing_transposed=target_spacing_transposed, transpose_forward=transpose_forward, cat=False)",
                            "Call"
                        ],
                        [
                            "zip(self.all_spacings, self.all_boxes)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "nndet/planning/architecture/boxes/utils.py": {
        "torch": {
            "tensor_44": {
                "data": {
                    "value": "patch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(patch_size, dtype=torch.float)[None, None] / 2",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_148": {
                "data": {
                    "value": "patch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(patch_size, dtype=torch.float)[None, None] / 2",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "nndet/planning/estimator.py": {
        "torch": {
            "rand_103": {
                "variable": {
                    "value": "tensor_mem",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "type": "variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f'cuda:{self.gpu_id}'",
                            "JoinedStr"
                        ],
                        [
                            "torch.device('cuda', self.gpu_id)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_191": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "self.gpu_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_memory_allocated_311": {
                "variable": {
                    "value": "self.peak",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rand_104": {
                "*size": {
                    "value": "math.ceil(self.offset / tensor_mem)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "type": "variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f'cuda:{self.gpu_id}'",
                            "JoinedStr"
                        ],
                        [
                            "torch.device('cuda', self.gpu_id)",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_cache_142": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_253": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_peak_memory_stats_306": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "memory_reserved_202": {
                "variable": {
                    "value": "empty_mem",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GradScaler_203": {
                "variable": {
                    "value": "scaler",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "memory_reserved_239": {
                "variable": {
                    "value": "dyn_mem",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_peak_memory_stats_199": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "memory_reserved_227": {
                "variable": {
                    "value": "fixed_mem",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_device_properties_120": {
                "device": {
                    "value": "self.gpu_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_216": {
                "*size": {
                    "value": "(self.batch_size, *shape)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f'cuda:{self.gpu_id}'",
                            "JoinedStr"
                        ],
                        [
                            "torch.device('cuda', self.gpu_id)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "autocast_228": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_224": {
                "*size": {
                    "value": "(self.batch_size, *shape[1:])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f'cuda:{self.gpu_id}'",
                            "JoinedStr"
                        ],
                        [
                            "torch.device('cuda', self.gpu_id)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_218": {
                "data": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[0, 0, 2, 2]]",
                            "List"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f'cuda:{self.gpu_id}'",
                            "JoinedStr"
                        ],
                        [
                            "torch.device('cuda', self.gpu_id)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_221": {
                "data": {
                    "value": "[0] * num_instances",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f'cuda:{self.gpu_id}'",
                            "JoinedStr"
                        ],
                        [
                            "torch.device('cuda', self.gpu_id)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "nndet/ptmodule/base_module.py": {
        "torch": {
            "zeros_105": {
                "*size": {
                    "value": "*self.example_input_array_shape",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "nndet/ptmodule/retinaunet/base.py": {
        "torch": {
            "SGD_309": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "wd_groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_params_no_wd_on_norm(self, weight_decay=self.trainer_cfg['weight_decay'])",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "self.trainer_cfg['initial_lr']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.trainer_cfg['weight_decay']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.trainer_cfg['sgd_momentum']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "self.trainer_cfg['sgd_nesterov']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_143": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_165": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "nndet/training/learning_rate.py": {
        "torch": {}
    },
    "nndet/training/optimizer/utils.py": {
        "torch": {}
    },
    "nndet/training/swa.py": {
        "torch": {
            "device_39": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_99": {
                "variable": {
                    "value": "self.n_averaged",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "pl_module.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_130": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "nndet/utils/tensor.py": {
        "torch": {
            "zeros_30": {
                "variable": {
                    "value": "labels_onehot",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "*new_shape",
                    "type": "Starred",
                    "possible_values": []
                },
                "device": {
                    "value": "labels.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "labels.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_132": {
                "data": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_152": {
                "tensors": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/train.py": {
        "torch": {}
    },
    "scripts/utils.py": {
        "torch": {
            "get_arch_list_198": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_device_capability_199": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_200": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "setup.py": {
        "torch": {
            "is_available_58": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}