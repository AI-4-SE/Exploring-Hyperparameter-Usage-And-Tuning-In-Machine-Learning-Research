{
    "src/eval.py": {
        "sklearn": {
            "accuracy_score_49": {
                "y_true": {
                    "value": "actual",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "predicted",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "classification_report_50": {
                "y_true": {
                    "value": "actual",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "predicted",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "confusion_matrix_51": {
                "y_true": {
                    "value": "actual",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "predicted",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "src/readers/scorers.py": {
        "sklearn": {
            "cosine_similarity_132": {
                "X": {
                    "value": "np.array(embedding_list1)",
                    "possible_values": []
                },
                "Y": {
                    "value": "np.array(embedding_list2)",
                    "possible_values": []
                },
                "dense_output": {
                    "value": "True",
                    "possible_values": []
                }
            }
        }
    },
    "src/score_fever.py": {
        "sklearn": {
            "classification_report_78": {
                "y_true": {
                    "value": "actually",
                    "possible_values": [
                        [
                            "[i['label'] for i in actual]",
                            "ListComp"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "predicted",
                    "possible_values": [
                        [
                            "[i['predicted_label'] for i in predictions]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "confusion_matrix_79": {
                "y_true": {
                    "value": "actually",
                    "possible_values": [
                        [
                            "[i['label'] for i in actual]",
                            "ListComp"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "predicted",
                    "possible_values": [
                        [
                            "[i['predicted_label'] for i in predictions]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "classification_report_98": {
                "y_true": {
                    "value": "attack_predictions",
                    "possible_values": [
                        [
                            "[predictions[i] for i in idxs]",
                            "ListComp"
                        ],
                        [
                            "[predictions[i]['predicted_label'] for i in idxs]",
                            "ListComp"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "attack_actual",
                    "possible_values": [
                        [
                            "[actual[i] for i in idxs]",
                            "ListComp"
                        ],
                        [
                            "[actual[i]['label'] for i in idxs]",
                            "ListComp"
                        ]
                    ]
                }
            }
        }
    },
    "src/train.py": {
        "sklearn": {}
    },
    "src/modeling/bert.py": {
        "torch": {
            "Dropout_39": {
                "variable": {
                    "value": "self.dropout",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "possible_values": []
                }
            },
            "Linear_44": {
                "variable": {
                    "value": "self.hidden_layer",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_inputs * config.hidden_size",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "possible_values": []
                }
            },
            "Linear_45": {
                "variable": {
                    "value": "self.classifier",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_labels",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "stack_99": {
                "variable": {
                    "value": "pooled_output",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[i[:, 0].unsqueeze(1) for i in encoded_layers[-4:]]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "sum_99": {
                "variable": {
                    "value": "pooled_output",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_115": {
                "variable": {
                    "value": "pooled_output",
                    "possible_values": []
                },
                "tensors": {
                    "value": "combined_output",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "tensor_370": {
                "variable": {
                    "value": "all_input_ids",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_ids for f in features]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "tensor_371": {
                "variable": {
                    "value": "all_input_mask",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_mask for f in features]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "tensor_372": {
                "variable": {
                    "value": "all_segment_ids",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.segment_ids for f in features]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "tensor_373": {
                "variable": {
                    "value": "all_label_ids",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label_id for f in features]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            },
            "TensorDataset_374": {
                "variable": {
                    "value": "data",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "possible_values": []
                }
            },
            "SequentialSampler_375": {
                "variable": {
                    "value": "sampler",
                    "possible_values": []
                },
                "data_source": {
                    "value": "data",
                    "possible_values": [
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label_ids)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_376": {
                "variable": {
                    "value": "dataloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data",
                    "possible_values": [
                        [
                            "TensorDataset(all_input_ids, all_input_mask, all_segment_ids, all_label_ids)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "sampler",
                    "possible_values": [
                        [
                            "SequentialSampler(data)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "possible_values": []
                }
            },
            "load_63": {
                "variable": {
                    "value": "state_dict",
                    "possible_values": []
                },
                "f": {
                    "value": "weights_path",
                    "possible_values": [
                        [
                            "os.path.join(serialization_dir, WEIGHTS_NAME)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cuda_device",
                    "possible_values": [
                        [
                            "'cpu'",
                            "Constant"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "load_65": {
                "variable": {
                    "value": "state_dict",
                    "possible_values": []
                },
                "f": {
                    "value": "weights_path",
                    "possible_values": [
                        [
                            "os.path.join(serialization_dir, WEIGHTS_NAME)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_399": {
                "tensors": {
                    "value": "ret",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "no_grad_94": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "relu_117": {
                "input": {
                    "value": "self.hidden_layer(pooled_output)",
                    "possible_values": []
                }
            }
        }
    },
    "src/modeling/esim.py": {
        "torch": {
            "ESIM_23": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.vocab": {
                    "value": "vocab",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self._text_field_embedder": {
                    "value": "text_field_embedder",
                    "possible_values": [
                        [
                            "TextFieldEmbedder.from_params(vocab, embedder_params)",
                            "Call"
                        ],
                        [
                            "BasicTextFieldEmbedder(token_embedders)",
                            "Call"
                        ]
                    ]
                },
                "self._premise_encoder": {
                    "value": "premise_encoder",
                    "possible_values": [
                        [
                            "Seq2SeqEncoder.from_params(premise_encoder_params)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                },
                "self._premise_composer": {
                    "value": "premise_composer",
                    "possible_values": [
                        [
                            "Seq2SeqEncoder.from_params(premise_composer_params)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                },
                "self._combine_feedforward": {
                    "value": "combine_feedforward",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "FeedForward.from_params(combine_feedforward_params)",
                            "Call"
                        ]
                    ]
                },
                "self._aggregate_feedforward": {
                    "value": "aggregate_feedforward",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "FeedForward.from_params(aggregate_feedforward_params)",
                            "Call"
                        ]
                    ]
                },
                "self._num_wrapping_dims": {
                    "value": "num_wrapping_dims",
                    "possible_values": [
                        [
                            "params.pop('num_wrapping_dims', 0)",
                            "Call"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_195": {
                "variable": {
                    "value": "premise_compare_input",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[embedded_premise, attended_hypothesis, embedded_premise - attended_hypothesis, embedded_premise * attended_hypothesis]",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "cat_200": {
                "variable": {
                    "value": "hypothesis_compare_input",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[embedded_hypothesis, attended_premise, embedded_hypothesis - attended_premise, embedded_hypothesis * attended_premise]",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "cat_241": {
                "variable": {
                    "value": "pooled_premise",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sequence_max(compared_premise, premise_mask), sequence_mean(compared_premise, premise_len)]",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "cat_244": {
                "variable": {
                    "value": "pooled_hypothesis",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sequence_max(compared_hypothesis, hypothesis_mask), sequence_mean(compared_hypothesis, hypothesis_len)]",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "cat_251": {
                "variable": {
                    "value": "output",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[pooled_premise, pooled_hypothesis]",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "cat_260": {
                "variable": {
                    "value": "output",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sequence_max(output, evidence_mask), sequence_mean(output, evidence_len)]",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            }
        }
    },
    "src/modeling/esim_rl_ptr_extractor.py": {
        "torch": {
            "CrossEntropyLoss_133": {
                "variable": {
                    "value": "self._loss",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "softmax_344": {
                "variable": {
                    "value": "label_probs",
                    "possible_values": []
                },
                "input": {
                    "value": "label_logits",
                    "possible_values": [
                        [
                            "self._entailment_esim(features=states.view(batch_size * max_length, 1, -1))",
                            "Call"
                        ],
                        [
                            "output_dict['label_sequence_logits'][:, -1, :]",
                            "Subscript"
                        ],
                        [
                            "self._entailment_esim(selected_premise, hypothesis, premise_mask=selected_mask, features=selected_features)",
                            "Call"
                        ],
                        [
                            "self._entailment_esim(features=output['states'][:, 1:, :].contiguous().view(batch_size * (max_length - 1), 1, -1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "cat_306": {
                "variable": {
                    "value": "states",
                    "possible_values": []
                },
                "tensors": {
                    "value": "states",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(states, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "gather_325": {
                "variable": {
                    "value": "selected_mask",
                    "possible_values": []
                },
                "input": {
                    "value": "premise_mask",
                    "possible_values": [
                        [
                            "get_text_field_mask(premise, num_wrapping_dims=1).float()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "index": {
                    "value": "index",
                    "possible_values": [
                        [
                            "predictions.unsqueeze(2).expand(batch_size, max_select, max_premise_length)",
                            "Call"
                        ],
                        [
                            "index * l.long().unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "index.cuda(idx)",
                            "Call"
                        ],
                        [
                            "predictions.unsqueeze(2).expand(batch_size, max_select, features.size(-1))",
                            "Call"
                        ],
                        [
                            "index * l.long().unsqueeze(-1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "stack_285": {
                "tensors": {
                    "value": "valid_indices",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_287": {
                "tensors": {
                    "value": "valid_indices",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "is_available_299": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "gather_323": {
                "variable": {
                    "value": "selected_premise[key]",
                    "possible_values": []
                },
                "input": {
                    "value": "premise[key]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "index": {
                    "value": "index",
                    "possible_values": [
                        [
                            "predictions.unsqueeze(2).expand(batch_size, max_select, max_premise_length)",
                            "Call"
                        ],
                        [
                            "index * l.long().unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "index.cuda(idx)",
                            "Call"
                        ],
                        [
                            "predictions.unsqueeze(2).expand(batch_size, max_select, features.size(-1))",
                            "Call"
                        ],
                        [
                            "index * l.long().unsqueeze(-1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "gather_336": {
                "variable": {
                    "value": "selected_features",
                    "possible_values": []
                },
                "input": {
                    "value": "features",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "index": {
                    "value": "index",
                    "possible_values": [
                        [
                            "predictions.unsqueeze(2).expand(batch_size, max_select, max_premise_length)",
                            "Call"
                        ],
                        [
                            "index * l.long().unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "index.cuda(idx)",
                            "Call"
                        ],
                        [
                            "predictions.unsqueeze(2).expand(batch_size, max_select, features.size(-1))",
                            "Call"
                        ],
                        [
                            "index * l.long().unsqueeze(-1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_414": {
                "variable": {
                    "value": "baseline",
                    "possible_values": []
                },
                "tensors": {
                    "value": "baselines",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "list(itertools.chain(*baselines))",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_414": {
                "variable": {
                    "value": "baseline",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "cat_396": {
                "tensors": {
                    "value": "rewards",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "is_available_397": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "numel_452": {
                "input": {
                    "value": "evidence",
                    "possible_values": [
                        [
                            "evidence.squeeze(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_420": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "load_541": {
                "f": {
                    "value": "weights_file",
                    "possible_values": [
                        [
                            "entailment_params.pop('weights_file', None)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_392": {
                "start": {
                    "value": "selected_evidence_lengths[i]",
                    "possible_values": []
                }
            }
        }
    },
    "src/modeling/feature_model.py": {
        "torch": {
            "cat_65": {
                "variable": {
                    "value": "pooled_output",
                    "possible_values": []
                },
                "tensors": {
                    "value": "combined_output",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "Linear_36": {
                "variable": {
                    "value": "self._hidden_layer",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_inputs * hidden_size",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_37": {
                "variable": {
                    "value": "self._classifier",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_labels",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "relu_67": {
                "input": {
                    "value": "self._hidden_layer(pooled_output)",
                    "possible_values": []
                }
            }
        }
    },
    "src/modeling/fever_metrics.py": {
        "torch": {
            "is_available_48": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "src/modeling/metrics.py": {
        "torch": {
            "is_available_72": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "src/modeling/ptr_extractor.py": {
        "torch": {
            "LSTMPointerNet_10": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Parameter_16": {
                    "variable": {
                        "value": "self._init_h",
                        "possible_values": []
                    },
                    "data": {
                        "value": "torch.Tensor(n_layer, n_hidden)",
                        "possible_values": []
                    }
                },
                "Parameter_17": {
                    "variable": {
                        "value": "self._init_c",
                        "possible_values": []
                    },
                    "data": {
                        "value": "torch.Tensor(n_layer, n_hidden)",
                        "possible_values": []
                    }
                },
                "Parameter_18": {
                    "variable": {
                        "value": "self._init_i",
                        "possible_values": []
                    },
                    "data": {
                        "value": "torch.Tensor(input_dim)",
                        "possible_values": []
                    }
                },
                "LSTM_22": {
                    "variable": {
                        "value": "self._lstm",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "input_dim",
                        "possible_values": []
                    },
                    "bidirectional": {
                        "value": "False",
                        "possible_values": []
                    },
                    "dropout": {
                        "value": "dropout",
                        "possible_values": [
                            [
                                "0.0",
                                "MethodArgument"
                            ]
                        ]
                    }
                },
                "Parameter_29": {
                    "variable": {
                        "value": "self._attn_wm",
                        "possible_values": []
                    },
                    "data": {
                        "value": "torch.Tensor(input_dim, n_hidden)",
                        "possible_values": []
                    }
                },
                "Parameter_30": {
                    "variable": {
                        "value": "self._attn_wq",
                        "possible_values": []
                    },
                    "data": {
                        "value": "torch.Tensor(n_hidden, n_hidden)",
                        "possible_values": []
                    }
                },
                "Parameter_31": {
                    "variable": {
                        "value": "self._attn_v",
                        "possible_values": []
                    },
                    "data": {
                        "value": "torch.Tensor(n_hidden)",
                        "possible_values": []
                    }
                },
                "Parameter_37": {
                    "variable": {
                        "value": "self._hop_wm",
                        "possible_values": []
                    },
                    "data": {
                        "value": "torch.Tensor(input_dim, n_hidden)",
                        "possible_values": []
                    }
                },
                "Parameter_38": {
                    "variable": {
                        "value": "self._hop_wq",
                        "possible_values": []
                    },
                    "data": {
                        "value": "torch.Tensor(n_hidden, n_hidden)",
                        "possible_values": []
                    }
                },
                "Parameter_39": {
                    "variable": {
                        "value": "self._hop_v",
                        "possible_values": []
                    },
                    "data": {
                        "value": "torch.Tensor(n_hidden)",
                        "possible_values": []
                    }
                },
                "self._n_hop": {
                    "value": "n_hop",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "PtrExtractSumm_225": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                }
            },
            "cat_50": {
                "variable": {
                    "value": "lstm_in",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[init_i, lstm_in]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "transpose_50": {
                "variable": {
                    "value": "lstm_in",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "matmul_186": {
                "variable": {
                    "value": "attn_feat",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_mem",
                    "possible_values": []
                },
                "other": {
                    "value": "self._attn_wm.unsqueeze(0)",
                    "possible_values": []
                }
            },
            "matmul_187": {
                "variable": {
                    "value": "hop_feat",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_mem",
                    "possible_values": []
                },
                "other": {
                    "value": "self._hop_wm.unsqueeze(0)",
                    "possible_values": []
                }
            },
            "matmul_203": {
                "variable": {
                    "value": "score",
                    "possible_values": []
                },
                "input": {
                    "value": "F.tanh(sum_)",
                    "possible_values": []
                },
                "other": {
                    "value": "v.unsqueeze(0).unsqueeze(1).unsqueeze(3)",
                    "possible_values": []
                }
            },
            "squeeze_203": {
                "variable": {
                    "value": "score",
                    "possible_values": []
                },
                "input": {
                    "value": "3",
                    "possible_values": []
                }
            },
            "matmul_222": {
                "variable": {
                    "value": "output",
                    "possible_values": []
                },
                "input": {
                    "value": "norm_score",
                    "possible_values": [
                        [
                            "F.softmax(score, dim=-1)",
                            "Call"
                        ],
                        [
                            "prob_normalize(score, mask)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "attention",
                    "possible_values": []
                }
            },
            "gather_240": {
                "variable": {
                    "value": "ptr_in",
                    "possible_values": []
                },
                "input": {
                    "value": "enc_out",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "index": {
                    "value": "target.clamp(min=0).unsqueeze(2).expand(bs, nt, d)",
                    "possible_values": []
                }
            },
            "gather_159": {
                "variable": {
                    "value": "lstm_in",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_mem.expand(attn_mem.size(0) * beam_size, max_mem_size, -1)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "index": {
                    "value": "ext.view(-1, 1, 1).expand(attn_mem.size(0) * beam_size, 1, attn_mem.size(-1))",
                    "possible_values": []
                }
            },
            "transpose_159": {
                "variable": {
                    "value": "lstm_in",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "stack_170": {
                "variable": {
                    "value": "extracts",
                    "possible_values": []
                },
                "tensors": {
                    "value": "extracts",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(extracts, dim=0).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "extracts.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "extracts.cuda(idx)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.autograd.Variable(torch.LongTensor(extracts).transpose(0, 1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "transpose_170": {
                "variable": {
                    "value": "extracts",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_181": {
                "variable": {
                    "value": "hidden_states",
                    "possible_values": []
                },
                "tensors": {
                    "value": "hidden_states",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(hidden_states, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "softmax_213": {
                "variable": {
                    "value": "norm_score",
                    "possible_values": []
                },
                "input": {
                    "value": "score",
                    "possible_values": [
                        [
                            "LSTMPointerNet.attention_score(attn_feat, query, self._attn_v, self._attn_wq)",
                            "Call"
                        ],
                        [
                            "score.squeeze() + mask.eq(0).float() * -100000000.0",
                            "BinOp"
                        ],
                        [
                            "score",
                            "Name"
                        ],
                        [
                            "torch.matmul(F.tanh(sum_), v.unsqueeze(0).unsqueeze(1).unsqueeze(3)).squeeze(3)",
                            "Call"
                        ],
                        [
                            "LSTMPointerNet.attention_score(attention, query, v, w)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "is_available_174": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "matmul_200": {
                "input": {
                    "value": "query",
                    "possible_values": [
                        [
                            "query.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "LSTMPointerNet.attention(hop_feat, query, self._hop_v, self._hop_wq, mem_sizes)",
                            "Call"
                        ],
                        [
                            "output.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "LSTMPointerNet.attention(hop_feat, query, self._hop_v, self._hop_wq, mem_sizes, mask)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "w.unsqueeze(0)",
                    "possible_values": []
                }
            },
            "unsqueeze_200": {
                "input": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "transpose_143": {
                "input": {
                    "value": "0",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "tanh_204": {
                "input": {
                    "value": "sum_",
                    "possible_values": [
                        [
                            "attention.unsqueeze(1) + torch.matmul(query, w.unsqueeze(0)).unsqueeze(2)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "is_available_217": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "src/modeling/rl_ptr_extractor.py": {
        "torch": {
            "PtrScorer_12": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Linear_24": {
                    "variable": {
                        "value": "self._score_linear",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "input_dim",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "1",
                        "possible_values": []
                    }
                }
            },
            "ActorCritic_60": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self._use_stop": {
                    "value": "use_stop",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "mm_28": {
                "variable": {
                    "value": "attn_feat",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_mem",
                    "possible_values": [
                        [
                            "torch.cat([attn_mem, self._stop.unsqueeze(0)], dim=0)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self._ptr_net._attn_wm",
                    "possible_values": []
                }
            },
            "mm_29": {
                "variable": {
                    "value": "hop_feat",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_mem",
                    "possible_values": [
                        [
                            "torch.cat([attn_mem, self._stop.unsqueeze(0)], dim=0)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self._ptr_net._hop_wm",
                    "possible_values": []
                }
            },
            "mm_52": {
                "variable": {
                    "value": "score",
                    "possible_values": []
                },
                "input": {
                    "value": "F.tanh(sum_)",
                    "possible_values": []
                },
                "mat2": {
                    "value": "v.unsqueeze(1)",
                    "possible_values": []
                }
            },
            "t_52": {
                "variable": {
                    "value": "score",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "softmax_55": {
                "variable": {
                    "value": "score",
                    "possible_values": []
                },
                "input": {
                    "value": "score",
                    "possible_values": [
                        [
                            "self._score_linear(output)",
                            "Call"
                        ],
                        [
                            "torch.mm(F.tanh(sum_), v.unsqueeze(1)).t()",
                            "Call"
                        ],
                        [
                            "score + mask.eq(0).float() * -100000000.0",
                            "BinOp"
                        ],
                        [
                            "F.softmax(score, dim=-1)",
                            "Call"
                        ],
                        [
                            "ActorCritic.attention_score(attn_feat, query, self._ext._attn_v, self._ext._attn_wq, mask=memory_mask)",
                            "Call"
                        ],
                        [
                            "torch.mm(F.tanh(sum_), v.unsqueeze(1)).t()",
                            "Call"
                        ],
                        [
                            "F.softmax(ActorCritic.attention_score(attention, query, v, w, mask=mask), dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "mm_56": {
                "variable": {
                    "value": "output",
                    "possible_values": []
                },
                "input": {
                    "value": "score",
                    "possible_values": [
                        [
                            "self._score_linear(output)",
                            "Call"
                        ],
                        [
                            "torch.mm(F.tanh(sum_), v.unsqueeze(1)).t()",
                            "Call"
                        ],
                        [
                            "score + mask.eq(0).float() * -100000000.0",
                            "BinOp"
                        ],
                        [
                            "F.softmax(score, dim=-1)",
                            "Call"
                        ],
                        [
                            "ActorCritic.attention_score(attn_feat, query, self._ext._attn_v, self._ext._attn_wq, mask=memory_mask)",
                            "Call"
                        ],
                        [
                            "torch.mm(F.tanh(sum_), v.unsqueeze(1)).t()",
                            "Call"
                        ],
                        [
                            "F.softmax(ActorCritic.attention_score(attention, query, v, w, mask=mask), dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "attention",
                    "possible_values": []
                }
            },
            "mm_92": {
                "variable": {
                    "value": "attn_feat",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_mem",
                    "possible_values": [
                        [
                            "torch.cat([attn_mem, self._stop.unsqueeze(0)], dim=0)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self._ext._attn_wm",
                    "possible_values": []
                }
            },
            "mm_93": {
                "variable": {
                    "value": "hop_feat",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_mem",
                    "possible_values": [
                        [
                            "torch.cat([attn_mem, self._stop.unsqueeze(0)], dim=0)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self._ext._hop_wm",
                    "possible_values": []
                }
            },
            "mm_153": {
                "variable": {
                    "value": "score",
                    "possible_values": []
                },
                "input": {
                    "value": "F.tanh(sum_)",
                    "possible_values": []
                },
                "mat2": {
                    "value": "v.unsqueeze(1)",
                    "possible_values": []
                }
            },
            "t_153": {
                "variable": {
                    "value": "score",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "softmax_163": {
                "variable": {
                    "value": "score",
                    "possible_values": []
                },
                "input": {
                    "value": "ActorCritic.attention_score(attention, query, v, w, mask=mask)",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "mm_165": {
                "variable": {
                    "value": "output",
                    "possible_values": []
                },
                "input": {
                    "value": "score",
                    "possible_values": [
                        [
                            "self._score_linear(output)",
                            "Call"
                        ],
                        [
                            "torch.mm(F.tanh(sum_), v.unsqueeze(1)).t()",
                            "Call"
                        ],
                        [
                            "score + mask.eq(0).float() * -100000000.0",
                            "BinOp"
                        ],
                        [
                            "F.softmax(score, dim=-1)",
                            "Call"
                        ],
                        [
                            "ActorCritic.attention_score(attn_feat, query, self._ext._attn_v, self._ext._attn_wq, mask=memory_mask)",
                            "Call"
                        ],
                        [
                            "torch.mm(F.tanh(sum_), v.unsqueeze(1)).t()",
                            "Call"
                        ],
                        [
                            "F.softmax(ActorCritic.attention_score(attention, query, v, w, mask=mask), dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "attention",
                    "possible_values": []
                }
            },
            "Parameter_76": {
                "variable": {
                    "value": "self._stop",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(input_dim)",
                    "possible_values": []
                }
            },
            "cat_84": {
                "variable": {
                    "value": "attn_mem",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[attn_mem, self._stop.unsqueeze(0)]",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "cat_89": {
                "variable": {
                    "value": "memory_mask",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[memory_mask, o]",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "mm_51": {
                "input": {
                    "value": "query",
                    "possible_values": [
                        [
                            "output[:, -1, :]",
                            "Subscript"
                        ],
                        [
                            "PtrScorer.attention(hop_feat, hop_feat, query, self._ptr_net._hop_v, self._ptr_net._hop_wq, mask=memory_mask)",
                            "Call"
                        ],
                        [
                            "output[:, -1, :]",
                            "Subscript"
                        ],
                        [
                            "ActorCritic.attention(hop_feat, query, self._ext._hop_v, self._ext._hop_wq, mask=memory_mask)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "w",
                    "possible_values": []
                }
            },
            "softmax_122": {
                "variable": {
                    "value": "prob",
                    "possible_values": []
                },
                "input": {
                    "value": "score",
                    "possible_values": [
                        [
                            "self._score_linear(output)",
                            "Call"
                        ],
                        [
                            "torch.mm(F.tanh(sum_), v.unsqueeze(1)).t()",
                            "Call"
                        ],
                        [
                            "score + mask.eq(0).float() * -100000000.0",
                            "BinOp"
                        ],
                        [
                            "F.softmax(score, dim=-1)",
                            "Call"
                        ],
                        [
                            "ActorCritic.attention_score(attn_feat, query, self._ext._attn_v, self._ext._attn_wq, mask=memory_mask)",
                            "Call"
                        ],
                        [
                            "torch.mm(F.tanh(sum_), v.unsqueeze(1)).t()",
                            "Call"
                        ],
                        [
                            "F.softmax(ActorCritic.attention_score(attention, query, v, w, mask=mask), dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "Categorical_124": {
                "variable": {
                    "value": "m",
                    "possible_values": []
                },
                "probs": {
                    "value": "prob",
                    "possible_values": [
                        [
                            "F.softmax(score, dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_152": {
                "input": {
                    "value": "query",
                    "possible_values": [
                        [
                            "output[:, -1, :]",
                            "Subscript"
                        ],
                        [
                            "PtrScorer.attention(hop_feat, hop_feat, query, self._ptr_net._hop_v, self._ptr_net._hop_wq, mask=memory_mask)",
                            "Call"
                        ],
                        [
                            "output[:, -1, :]",
                            "Subscript"
                        ],
                        [
                            "ActorCritic.attention(hop_feat, query, self._ext._hop_v, self._ext._hop_wq, mask=memory_mask)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "w",
                    "possible_values": []
                }
            },
            "gather_181": {
                "variable": {
                    "value": "ptr_in",
                    "possible_values": []
                },
                "input": {
                    "value": "enc_out",
                    "possible_values": [
                        [
                            "enc_out.unsqueeze(0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "index": {
                    "value": "gold_evidence.clamp(min=0).unsqueeze(2).expand(bs, nt, d)",
                    "possible_values": []
                }
            },
            "ones_85": {
                "*size": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "is_available_86": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "cat_147": {
                "tensors": {
                    "value": "states",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "unsqueeze_147": {
                "input": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "tanh_52": {
                "input": {
                    "value": "sum_",
                    "possible_values": [
                        [
                            "attention_feat + torch.mm(query, w)",
                            "BinOp"
                        ],
                        [
                            "attention + torch.mm(query, w)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "is_available_116": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "tanh_153": {
                "input": {
                    "value": "sum_",
                    "possible_values": [
                        [
                            "attention_feat + torch.mm(query, w)",
                            "BinOp"
                        ],
                        [
                            "attention + torch.mm(query, w)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_136": {
                "tensors": {
                    "value": "outputs",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self._ext.extract(enc_out, None, n_abs, mask=memory_mask, beam_size=beam_size)",
                            "Call"
                        ],
                        [
                            "self._extract(enc_out, memory_mask=memory_mask, gold_evidence=gold_evidence)",
                            "Call"
                        ],
                        [
                            "self._extract(enc_out, n_abs, memory_mask=memory_mask, gold_evidence=gold_evidence)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/modeling/utils/options.py": {
        "torch": {
            "set_device_13": {
                "device": {
                    "value": "int(os.getenv('CUDA_DEVICE', 0))",
                    "possible_values": []
                }
            }
        }
    },
    "src/modeling/utils/random.py": {
        "torch": {
            "manual_seed_33": {
                "seed": {
                    "value": "SimpleRandom.get_seed()",
                    "possible_values": []
                }
            },
            "manual_seed_all_35": {
                "seed": {
                    "value": "SimpleRandom.get_seed()",
                    "possible_values": []
                }
            }
        }
    },
    "src/modeling/utils/utils.py": {
        "torch": {
            "StackedLSTMCells_103": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "ModuleList_107": {
                    "variable": {
                        "value": "self._cells",
                        "possible_values": []
                    },
                    "modules": {
                        "value": "cells",
                        "possible_values": [
                            [
                                "[]",
                                "List"
                            ]
                        ]
                    }
                },
                "self._dropout": {
                    "value": "dropout",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "softmax_12": {
                "variable": {
                    "value": "norm_score",
                    "possible_values": []
                },
                "input": {
                    "value": "score",
                    "possible_values": [
                        [
                            "score.masked_fill(mask == 0, -1e+18)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "stack_64": {
                "variable": {
                    "value": "mx",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[s[:int(l)].max(dim=0)[0] if l else torch.zeros_like(s[0]) for (s, l) in zip(sequence, seq_lens)]",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "sum_76": {
                "variable": {
                    "value": "sum_",
                    "possible_values": []
                },
                "input": {
                    "value": "sequence",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "stack_77": {
                "variable": {
                    "value": "mean",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[s / l if l else torch.zeros_like(s) for (s, l) in zip(sum_, seq_lens)]",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "cross_entropy_98": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "input": {
                    "value": "logit",
                    "possible_values": [
                        [
                            "logits.masked_select(mask.unsqueeze(2).expand_as(logits)).contiguous().view(-1, logits.size(-1))",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "possible_values": [
                        [
                            "targets.masked_select(mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_130": {
                "variable": {
                    "value": "new_h",
                    "possible_values": []
                },
                "tensors": {
                    "value": "hs",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "stack_131": {
                "variable": {
                    "value": "new_c",
                    "possible_values": []
                },
                "tensors": {
                    "value": "cs",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "is_available_41": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "sum_80": {
                "variable": {
                    "value": "sum_",
                    "possible_values": []
                },
                "input": {
                    "value": "sequence",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "mean_83": {
                "variable": {
                    "value": "mean",
                    "possible_values": []
                },
                "input": {
                    "value": "sequence",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "dropout_128": {
                "variable": {
                    "value": "input_",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "possible_values": []
                },
                "p": {
                    "value": "self._dropout",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "possible_values": []
                }
            },
            "LSTMCell_160": {
                "input_size": {
                    "value": "input_size",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "hidden_size",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "possible_values": [
                        [
                            "[cell.bias_ih, cell.bias_hh]",
                            "List"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "max_68": {
                "input": {
                    "value": "sequence + seq_lens.unsqueeze(-1)",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "max_70": {
                "input": {
                    "value": "sequence",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LSTMCell_162": {
                "input_size": {
                    "value": "hidden_size",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "hidden_size",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "possible_values": [
                        [
                            "[cell.bias_ih, cell.bias_hh]",
                            "List"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "chunk_174": {
                "input": {
                    "value": "weight",
                    "possible_values": [
                        [
                            "[cell.weight_ih, cell.weight_hh]",
                            "List"
                        ]
                    ]
                },
                "chunks": {
                    "value": "4",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "zeros_like_64": {
                "input": {
                    "value": "s[0]",
                    "possible_values": []
                }
            },
            "zeros_like_77": {
                "input": {
                    "value": "s",
                    "possible_values": [
                        [
                            "(state[0][i, :, :], state[1][i, :, :])",
                            "Tuple"
                        ]
                    ]
                }
            },
            "chunk_178": {
                "input": {
                    "value": "bias",
                    "possible_values": [
                        [
                            "[cell.bias_ih, cell.bias_hh]",
                            "List"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "chunks": {
                    "value": "4",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            }
        }
    },
    "src/readers/my_text_field.py": {
        "torch": {}
    }
}