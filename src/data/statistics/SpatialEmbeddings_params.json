{
    "src/criterions/lovasz_losses.py": {
        "torch": {
            "sort_109": {
                "variable": {
                    "value": "(errors_sorted, perm)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "errors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 - logits * Variable(signs)",
                            "BinOp"
                        ],
                        [
                            "(Variable(fg) - probas[:, c]).abs()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "dot_113": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.relu(errors_sorted)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "Variable(grad)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sort_189": {
                "variable": {
                    "value": "(errors_sorted, perm)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "errors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 - logits * Variable(signs)",
                            "BinOp"
                        ],
                        [
                            "(Variable(fg) - probas[:, c]).abs()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cross_entropy_217": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "Variable(labels)",
                    "type": "Call",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "255",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_113": {
                "input": {
                    "value": "errors_sorted",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "dot_193": {
                "input": {
                    "value": "errors_sorted",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "Variable(lovasz_grad(fg_sorted))",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "src/criterions/my_loss.py": {
        "torch": {
            "linspace_27": {
                "variable": {
                    "value": "xm",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "steps": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                }
            },
            "linspace_29": {
                "variable": {
                    "value": "ym",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "steps": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_31": {
                "variable": {
                    "value": "xym",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(xm, ym)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_48": {
                "variable": {
                    "value": "seed_map",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prediction[b, 2 + self.n_sigma:2 + self.n_sigma + 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "exp_93": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s * 10",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_96": {
                "variable": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1 * torch.sum(torch.pow(spatial_emb - center, 2) * s, 0, keepdim=True)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_46": {
                "input": {
                    "value": "prediction[b, 0:2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_66": {
                "input": {
                    "value": "torch.pow(seed_map[bg_mask] - 0, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pow_67": {
                "input": {
                    "value": "seed_map[bg_mask] - 0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_90": {
                "input": {
                    "value": "torch.pow(sigma_in - s[..., 0].detach(), 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_104": {
                "input": {
                    "value": "torch.pow(seed_map[in_mask] - dist[in_mask].detach(), 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pow_91": {
                "input": {
                    "value": "sigma_in - s[..., 0].detach()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_96": {
                "input": {
                    "value": "torch.pow(spatial_emb - center, 2) * s",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pow_105": {
                "input": {
                    "value": "seed_map[in_mask] - dist[in_mask].detach()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_97": {
                "input": {
                    "value": "spatial_emb - center",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/datasets/CityscapesDataset.py": {
        "torch": {}
    },
    "src/models/BranchedERFNet.py": {
        "torch": {
            "ModuleList_21": {
                "variable": {
                    "value": "self.decoders",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_43": {
                "tensors": {
                    "value": "[decoder.forward(output) for decoder in self.decoders]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/models/erfnet.py": {
        "torch": {
            "Conv2d_16": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "ninput",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "noutput - ninput",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_18": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_19": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "noutput",
                    "type": "variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cat_22": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.conv(input), self.pool(input)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_31": {
                "variable": {
                    "value": "self.conv3x1_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "chann",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "chann",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_34": {
                "variable": {
                    "value": "self.conv1x3_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "chann",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "chann",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_37": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "chann",
                    "type": "variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_39": {
                "variable": {
                    "value": "self.conv3x1_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "chann",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "chann",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1 * dilated, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dilation": {
                    "value": "(dilated, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_42": {
                "variable": {
                    "value": "self.conv1x3_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "chann",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "chann",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 1 * dilated)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dilation": {
                    "value": "(1, dilated)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_45": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "chann",
                    "type": "variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout2d_47": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropprob",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "relu_52": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([self.conv(input), self.pool(input)], 1)",
                            "Call"
                        ],
                        [
                            "self.bn(output)",
                            "Call"
                        ],
                        [
                            "self.conv3x1_1(input)",
                            "Call"
                        ],
                        [
                            "F.relu(output)",
                            "Call"
                        ],
                        [
                            "self.conv1x3_1(output)",
                            "Call"
                        ],
                        [
                            "self.bn1(output)",
                            "Call"
                        ],
                        [
                            "F.relu(output)",
                            "Call"
                        ],
                        [
                            "self.conv3x1_2(output)",
                            "Call"
                        ],
                        [
                            "F.relu(output)",
                            "Call"
                        ],
                        [
                            "self.conv1x3_2(output)",
                            "Call"
                        ],
                        [
                            "self.bn2(output)",
                            "Call"
                        ],
                        [
                            "self.dropout(output)",
                            "Call"
                        ],
                        [
                            "self.initial_block(input)",
                            "Call"
                        ],
                        [
                            "layer(output)",
                            "Call"
                        ],
                        [
                            "self.output_conv(output)",
                            "Call"
                        ],
                        [
                            "self.conv(input)",
                            "Call"
                        ],
                        [
                            "self.bn(output)",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "layer(output)",
                            "Call"
                        ],
                        [
                            "self.output_conv(output)",
                            "Call"
                        ],
                        [
                            "self.encoder(input)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_55": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([self.conv(input), self.pool(input)], 1)",
                            "Call"
                        ],
                        [
                            "self.bn(output)",
                            "Call"
                        ],
                        [
                            "self.conv3x1_1(input)",
                            "Call"
                        ],
                        [
                            "F.relu(output)",
                            "Call"
                        ],
                        [
                            "self.conv1x3_1(output)",
                            "Call"
                        ],
                        [
                            "self.bn1(output)",
                            "Call"
                        ],
                        [
                            "F.relu(output)",
                            "Call"
                        ],
                        [
                            "self.conv3x1_2(output)",
                            "Call"
                        ],
                        [
                            "F.relu(output)",
                            "Call"
                        ],
                        [
                            "self.conv1x3_2(output)",
                            "Call"
                        ],
                        [
                            "self.bn2(output)",
                            "Call"
                        ],
                        [
                            "self.dropout(output)",
                            "Call"
                        ],
                        [
                            "self.initial_block(input)",
                            "Call"
                        ],
                        [
                            "layer(output)",
                            "Call"
                        ],
                        [
                            "self.output_conv(output)",
                            "Call"
                        ],
                        [
                            "self.conv(input)",
                            "Call"
                        ],
                        [
                            "self.bn(output)",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "layer(output)",
                            "Call"
                        ],
                        [
                            "self.output_conv(output)",
                            "Call"
                        ],
                        [
                            "self.encoder(input)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_58": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([self.conv(input), self.pool(input)], 1)",
                            "Call"
                        ],
                        [
                            "self.bn(output)",
                            "Call"
                        ],
                        [
                            "self.conv3x1_1(input)",
                            "Call"
                        ],
                        [
                            "F.relu(output)",
                            "Call"
                        ],
                        [
                            "self.conv1x3_1(output)",
                            "Call"
                        ],
                        [
                            "self.bn1(output)",
                            "Call"
                        ],
                        [
                            "F.relu(output)",
                            "Call"
                        ],
                        [
                            "self.conv3x1_2(output)",
                            "Call"
                        ],
                        [
                            "F.relu(output)",
                            "Call"
                        ],
                        [
                            "self.conv1x3_2(output)",
                            "Call"
                        ],
                        [
                            "self.bn2(output)",
                            "Call"
                        ],
                        [
                            "self.dropout(output)",
                            "Call"
                        ],
                        [
                            "self.initial_block(input)",
                            "Call"
                        ],
                        [
                            "layer(output)",
                            "Call"
                        ],
                        [
                            "self.output_conv(output)",
                            "Call"
                        ],
                        [
                            "self.conv(input)",
                            "Call"
                        ],
                        [
                            "self.bn(output)",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "layer(output)",
                            "Call"
                        ],
                        [
                            "self.output_conv(output)",
                            "Call"
                        ],
                        [
                            "self.encoder(input)",
                            "Call"
                        ]
                    ]
                }
            },
            "ModuleList_73": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_89": {
                "variable": {
                    "value": "self.output_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_107": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "ninput",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "noutput",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_109": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "noutput",
                    "type": "variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ModuleList_121": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose2d_131": {
                "variable": {
                    "value": "self.output_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_24": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([self.conv(input), self.pool(input)], 1)",
                            "Call"
                        ],
                        [
                            "self.bn(output)",
                            "Call"
                        ],
                        [
                            "self.conv3x1_1(input)",
                            "Call"
                        ],
                        [
                            "F.relu(output)",
                            "Call"
                        ],
                        [
                            "self.conv1x3_1(output)",
                            "Call"
                        ],
                        [
                            "self.bn1(output)",
                            "Call"
                        ],
                        [
                            "F.relu(output)",
                            "Call"
                        ],
                        [
                            "self.conv3x1_2(output)",
                            "Call"
                        ],
                        [
                            "F.relu(output)",
                            "Call"
                        ],
                        [
                            "self.conv1x3_2(output)",
                            "Call"
                        ],
                        [
                            "self.bn2(output)",
                            "Call"
                        ],
                        [
                            "self.dropout(output)",
                            "Call"
                        ],
                        [
                            "self.initial_block(input)",
                            "Call"
                        ],
                        [
                            "layer(output)",
                            "Call"
                        ],
                        [
                            "self.output_conv(output)",
                            "Call"
                        ],
                        [
                            "self.conv(input)",
                            "Call"
                        ],
                        [
                            "self.bn(output)",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "layer(output)",
                            "Call"
                        ],
                        [
                            "self.output_conv(output)",
                            "Call"
                        ],
                        [
                            "self.encoder(input)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_65": {
                "input": {
                    "value": "output + input",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_114": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([self.conv(input), self.pool(input)], 1)",
                            "Call"
                        ],
                        [
                            "self.bn(output)",
                            "Call"
                        ],
                        [
                            "self.conv3x1_1(input)",
                            "Call"
                        ],
                        [
                            "F.relu(output)",
                            "Call"
                        ],
                        [
                            "self.conv1x3_1(output)",
                            "Call"
                        ],
                        [
                            "self.bn1(output)",
                            "Call"
                        ],
                        [
                            "F.relu(output)",
                            "Call"
                        ],
                        [
                            "self.conv3x1_2(output)",
                            "Call"
                        ],
                        [
                            "F.relu(output)",
                            "Call"
                        ],
                        [
                            "self.conv1x3_2(output)",
                            "Call"
                        ],
                        [
                            "self.bn2(output)",
                            "Call"
                        ],
                        [
                            "self.dropout(output)",
                            "Call"
                        ],
                        [
                            "self.initial_block(input)",
                            "Call"
                        ],
                        [
                            "layer(output)",
                            "Call"
                        ],
                        [
                            "self.output_conv(output)",
                            "Call"
                        ],
                        [
                            "self.conv(input)",
                            "Call"
                        ],
                        [
                            "self.bn(output)",
                            "Call"
                        ],
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "layer(output)",
                            "Call"
                        ],
                        [
                            "self.output_conv(output)",
                            "Call"
                        ],
                        [
                            "self.encoder(input)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/test.py": {
        "torch": {
            "device_33": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if args[cuda] else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_38": {
                "variable": {
                    "value": "dataset_it",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_dataset(args['dataset']['name'], args['dataset']['kwargs'])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True if args['cuda'] else False",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataParallel_43": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_model(args['model']['name'], args['model']['kwargs'])",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_47": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args['checkpoint_path']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_60": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_81": {
                "variable": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output[0][3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "src/test_config.py": {
        "torch": {}
    },
    "src/train.py": {
        "torch": {
            "device_34": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if args[cuda] else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_39": {
                "variable": {
                    "value": "train_dataset_it",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_dataset(args['train_dataset']['name'], args['train_dataset']['kwargs'])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args['train_dataset']['batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "train_config.get_args()",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args['train_dataset']['workers']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "train_config.get_args()",
                            "Call"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True if args['cuda'] else False",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_46": {
                "variable": {
                    "value": "val_dataset_it",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_dataset(args['val_dataset']['name'], args['val_dataset']['kwargs'])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args['val_dataset']['batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "train_config.get_args()",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args['train_dataset']['workers']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "train_config.get_args()",
                            "Call"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True if args['cuda'] else False",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataParallel_53": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_model(args['model']['name'], args['model']['kwargs'])",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_57": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SpatialEmbLoss(**args['loss_opts'])",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(criterion).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_60": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args['lr']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "train_config.get_args()",
                            "Call"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "LambdaLR_66": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(model.parameters(), lr=args['lr'], weight_decay=0.0001)",
                            "Call"
                        ]
                    ]
                },
                "lr_lambda": {
                    "value": "lambda_",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "load_83": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args['resume_path']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "save_177": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(args['resume_path'])",
                            "Call"
                        ],
                        [
                            "{'epoch': epoch, 'best_iou': best_iou, 'model_state_dict': model.state_dict(), 'optim_state_dict': optimizer.state_dict(), 'logger_data': logger.data}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "file_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args['save_dir'], name)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_142": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_127": {
                "variable": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output[0][3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_116": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_167": {
                "variable": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output[0][3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_156": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/train_config.py": {
        "torch": {}
    },
    "src/utils/transforms.py": {
        "torch": {}
    },
    "src/utils/utils.py": {
        "torch": {
            "linspace_99": {
                "variable": {
                    "value": "xm",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "steps": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                }
            },
            "linspace_100": {
                "variable": {
                    "value": "ym",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "steps": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_101": {
                "variable": {
                    "value": "xym",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(xm, ym)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_114": {
                "variable": {
                    "value": "instance_map",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "height",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sigmoid_143": {
                "variable": {
                    "value": "seed_map",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prediction[2 + n_sigma:2 + n_sigma + 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_145": {
                "variable": {
                    "value": "instance_map",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "height",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "exp_127": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s * 10",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_129": {
                "variable": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1 * torch.sum(torch.pow(spatial_emb - center, 2) * s, 0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_157": {
                "variable": {
                    "value": "unclustered",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "mask.sum()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_158": {
                "variable": {
                    "value": "instance_map_masked",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "mask.sum()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_111": {
                "input": {
                    "value": "prediction[0:2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tanh_141": {
                "input": {
                    "value": "prediction[0:2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "exp_168": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sigma_masked[:, seed:seed + 1] * 10",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_169": {
                "variable": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1 * torch.sum(torch.pow(spatial_emb_masked - center, 2) * s, 0, keepdim=True)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_129": {
                "input": {
                    "value": "torch.pow(spatial_emb - center, 2) * s",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_177": {
                "variable": {
                    "value": "instance_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "height",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_169": {
                "input": {
                    "value": "torch.pow(spatial_emb_masked - center, 2) * s",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pow_129": {
                "input": {
                    "value": "spatial_emb - center",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_169": {
                "input": {
                    "value": "spatial_emb_masked - center",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}