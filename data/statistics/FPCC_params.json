{
    "fpcc_test.py": {
        "tensorflow": {
            "Saver_175": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConfigProto_176": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_164": {
                "variable": {
                    "value": "is_training_ph",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "get_checkpoint_state_186": {
                "variable": {
                    "value": "ckptstate",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "PRETRAINED_MODEL_PATH",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(FLAGS.restore_dir, 'ring_vdm_asm/')",
                            "Call"
                        ]
                    ]
                }
            },
            "Graph_301": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_163": {
                "device_name": {
                    "value": "'/gpu:' + str(gpu_to_use)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Session_180": {
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "fpcc_train.py": {
        "tensorflow": {
            "trainable_variables_136": {
                "variable": {
                    "value": "train_variables",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdamOptimizer_138": {
                "variable": {
                    "value": "trainer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.exponential_decay(BASE_LEARNING_RATE, batch * BATCH_SIZE, DECAY_STEP, DECAY_RATE, staircase=True)",
                            "Call"
                        ],
                        [
                            "tf.maximum(learning_rate, LEARNING_RATE_CLIP)",
                            "Call"
                        ]
                    ]
                }
            },
            "Saver_141": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "[v for v in tf.all_variables() if 'conf_logits' not in v.name and 'Fsim' not in v.name and ('Fsconf' not in v.name) and ('batch' not in v.name)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Saver_149": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "[v for v in tf.all_variables()]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ConfigProto_151": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_154": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_156": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FileWriter_159": {
                "variable": {
                    "value": "train_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "SUMMARIES_FOLDER + '/train'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "graph": {
                    "value": "sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_checkpoint_state_171": {
                "variable": {
                    "value": "ckptstate",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "PRETRAINED_MODEL_PATH",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(FLAGS.restore_model, 'ring_vdm_asm/')",
                            "Call"
                        ]
                    ]
                }
            },
            "Graph_104": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Variable_106": {
                "variable": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "batch",
                    "type": "str",
                    "possible_values": []
                }
            },
            "exponential_decay_107": {
                "variable": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "BASE_LEARNING_RATE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "float"
                        ]
                    ]
                },
                "global_step": {
                    "value": "batch * BATCH_SIZE",
                    "type": "BinOp",
                    "possible_values": []
                },
                "decay_steps": {
                    "value": "DECAY_STEP",
                    "type": "variable",
                    "possible_values": [
                        [
                            "800000.0",
                            "float"
                        ]
                    ]
                },
                "decay_rate": {
                    "value": "DECAY_RATE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "float"
                        ]
                    ]
                },
                "staircase": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "maximum_114": {
                "variable": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.exponential_decay(BASE_LEARNING_RATE, batch * BATCH_SIZE, DECAY_STEP, DECAY_RATE, staircase=True)",
                            "Call"
                        ],
                        [
                            "tf.maximum(learning_rate, LEARNING_RATE_CLIP)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "LEARNING_RATE_CLIP",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-06",
                            "float"
                        ]
                    ]
                }
            },
            "scalar_116": {
                "variable": {
                    "value": "lr_op",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "learning_rate",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.exponential_decay(BASE_LEARNING_RATE, batch * BATCH_SIZE, DECAY_STEP, DECAY_RATE, staircase=True)",
                            "Call"
                        ],
                        [
                            "tf.maximum(learning_rate, LEARNING_RATE_CLIP)",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_120": {
                "variable": {
                    "value": "is_training_ph",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_131": {
                "variable": {
                    "value": "total_training_loss_ph",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_132": {
                "variable": {
                    "value": "group_err_loss_ph",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "scalar_133": {
                "variable": {
                    "value": "total_train_loss_sum_op",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "total_training_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "total_training_loss_ph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=())",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_134": {
                "variable": {
                    "value": "group_err_op",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "group_err_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "group_err_loss_ph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=())",
                            "Call"
                        ]
                    ]
                }
            },
            "device_105": {
                "device_name": {
                    "value": "'/gpu:' + str(FLAGS.gpu)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "all_variables_141": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "all_variables_149": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models/dgcnn.py": {
        "tensorflow": {
            "expand_dims_24": {
                "variable": {
                    "value": "input_image",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "point_cloud",
                    "type": "variable",
                    "possible_values": [
                        [
                            "point_cloud",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_max_43": {
                "variable": {
                    "value": "net_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "out2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_util.conv2d(out1, 64, [1, 1], padding='VALID', stride=[1, 1], bn=bn, is_training=is_training, weight_decay=weight_decay, scope='adj_conv2', bn_decay=bn_decay, is_dist=True)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_max_61": {
                "variable": {
                    "value": "net_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "out4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_util.conv2d(out3, 64, [1, 1], padding='VALID', stride=[1, 1], bn=bn, is_training=is_training, weight_decay=weight_decay, scope='adj_conv4', bn_decay=bn_decay, is_dist=True)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_max_79": {
                "variable": {
                    "value": "net_3",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "out5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_util.conv2d(edge_feature, 64, [1, 1], padding='VALID', stride=[1, 1], bn=bn, is_training=is_training, weight_decay=weight_decay, scope='adj_conv5', bn_decay=bn_decay, is_dist=True)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tile_91": {
                "variable": {
                    "value": "expand",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_util.max_pool2d(out7, [num_point, 1], padding='VALID', scope='maxpool')",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, num_point, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_93": {
                "variable": {
                    "value": "concat",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[expand, net_1, net_2, net_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_118": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(2, 4096, 6)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "concat_83": {
                "values": {
                    "value": "[net_1, net_2, net_3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Graph_117": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_122": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_119": {
                "value": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Session_121": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models/model.py": {
        "tensorflow": {
            "placeholder_27": {
                "variable": {
                    "value": "pts_grouplabels_ph",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, num_point, num_group)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_31": {
                "variable": {
                    "value": "pts_score_ph",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, num_point)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "squeeze_144": {
                "variable": {
                    "value": "ptscenter_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ptscenter_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_util.conv2d(Center, 1, [1, 1], padding='VALID', stride=[1, 1], activation_fn=None, scope='conf_logits')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(ptscenter_logits)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_145": {
                "variable": {
                    "value": "ptscenter",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "ptscenter_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_util.conv2d(Center, 1, [1, 1], padding='VALID', stride=[1, 1], activation_fn=None, scope='conf_logits')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(ptscenter_logits)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "center_confidence",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_153": {
                "variable": {
                    "value": "Fsim",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Fsim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_util.conv2d(F, 128, [1, 1], padding='VALID', stride=[1, 1], bn=False, is_training=is_training, scope='Fsim')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(Fsim, [2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_196": {
                "variable": {
                    "value": "onediag",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[B, N]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_199": {
                "variable": {
                    "value": "group_mat_label",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "pts_group_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels['ptsgroup']",
                            "Subscript"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.transpose(pts_group_label, perm=[0, 2, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_202": {
                "variable": {
                    "value": "valid_distance_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.less(dis_matrix, tf.constant(d_max))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "subtract_213": {
                "variable": {
                    "value": "diffgroup_mat_label",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "group_mat_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(pts_group_label, tf.transpose(pts_group_label, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.matrix_set_diag(group_mat_label, onediag)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_224": {
                "variable": {
                    "value": "num_samegroup",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "samegroup_mat_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "group_mat_label",
                            "variable"
                        ]
                    ]
                }
            },
            "constant_237": {
                "variable": {
                    "value": "C_same",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "margin[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "C_same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_238": {
                "variable": {
                    "value": "C_diff",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "margin[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "C_diff",
                    "type": "str",
                    "possible_values": []
                }
            },
            "multiply_243": {
                "variable": {
                    "value": "diff_ins_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "diffgroup_samesem_mat_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "diffgroup_mat_label",
                            "variable"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.maximum(tf.subtract(C_diff, pred_simmat), 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_252": {
                "variable": {
                    "value": "score_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pts_score_label",
                            "variable"
                        ],
                        [
                            "tf.expand_dims(score_mask, dim=-1)",
                            "Call"
                        ],
                        [
                            "tf.tile(score_mask, multiples)",
                            "Call"
                        ],
                        [
                            "tf.add(score_mask, tf.transpose(score_mask, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(score_mask, clip_value_min=0, clip_value_max=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "constant_253": {
                "variable": {
                    "value": "multiples",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[1, 1, 4096]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tile_254": {
                "variable": {
                    "value": "score_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pts_score_label",
                            "variable"
                        ],
                        [
                            "tf.expand_dims(score_mask, dim=-1)",
                            "Call"
                        ],
                        [
                            "tf.tile(score_mask, multiples)",
                            "Call"
                        ],
                        [
                            "tf.add(score_mask, tf.transpose(score_mask, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(score_mask, clip_value_min=0, clip_value_max=1)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "multiples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([1, 1, 4096], tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_255": {
                "variable": {
                    "value": "score_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "score_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pts_score_label",
                            "variable"
                        ],
                        [
                            "tf.expand_dims(score_mask, dim=-1)",
                            "Call"
                        ],
                        [
                            "tf.tile(score_mask, multiples)",
                            "Call"
                        ],
                        [
                            "tf.add(score_mask, tf.transpose(score_mask, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(score_mask, clip_value_min=0, clip_value_max=1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.transpose(score_mask, perm=[0, 2, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_by_value_256": {
                "variable": {
                    "value": "score_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "score_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pts_score_label",
                            "variable"
                        ],
                        [
                            "tf.expand_dims(score_mask, dim=-1)",
                            "Call"
                        ],
                        [
                            "tf.tile(score_mask, multiples)",
                            "Call"
                        ],
                        [
                            "tf.add(score_mask, tf.transpose(score_mask, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(score_mask, clip_value_min=0, clip_value_max=1)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_261": {
                "variable": {
                    "value": "simmat_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "simmat_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "same_ins_loss + diff_ins_loss",
                            "BinOp"
                        ],
                        [
                            "tf.multiply(simmat_loss, score_mask)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(simmat_loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "subtract_266": {
                "variable": {
                    "value": "regression_diff",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "net_output['center_score']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "pts_score_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels['center_score']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "abs_267": {
                "variable": {
                    "value": "regression_diff",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "regression_diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.subtract(net_output['center_score'], pts_score_label)",
                            "Call"
                        ],
                        [
                            "tf.abs(regression_diff)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_268": {
                "variable": {
                    "value": "regression_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.less(regression_diff, 1.0 / sigma_squared)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "0.5 * sigma_squared * tf.pow(regression_diff, 2)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "regression_diff - 0.5 / sigma_squared",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_274": {
                "variable": {
                    "value": "ptscenter_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "regression_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(tf.less(regression_diff, 1.0 / sigma_squared), 0.5 * sigma_squared * tf.pow(regression_diff, 2), regression_diff - 0.5 / sigma_squared)",
                            "Call"
                        ]
                    ]
                }
            },
            "greater_277": {
                "variable": {
                    "value": "ng_label",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "ng_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "group_mat_label",
                            "variable"
                        ],
                        [
                            "tf.greater(ng_label, tf.constant(0.5))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.constant(0.5)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "less_279": {
                "variable": {
                    "value": "ng",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "pred_simmat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_output['simmat']",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.constant(margin[0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_284": {
                "variable": {
                    "value": "grouperr",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.cast(ng, tf.float32) - tf.cast(ng_label, tf.float32)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_23": {
                "variable": {
                    "value": "pointclouds_ph",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, None, dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_25": {
                "variable": {
                    "value": "pointclouds_ph",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, num_point, dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_sum_157": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "Fsim * Fsim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_158": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(Fsim * Fsim, 2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(r, [batch_size, -1, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, -1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "maximum_163": {
                "variable": {
                    "value": "simmat_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "r - 2 * tf.matmul(Fsim, tf.transpose(Fsim, perm=[0, 2, 1])) + tf.transpose(r, perm=[0, 2, 1])",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "multiply_216": {
                "variable": {
                    "value": "diffgroup_mat_label",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "diffgroup_mat_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.subtract(1.0, group_mat_label)",
                            "Call"
                        ],
                        [
                            "tf.multiply(diffgroup_mat_label, valid_distance_matrix)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "valid_distance_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.less(dis_matrix, tf.constant(d_max)), tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_259": {
                "variable": {
                    "value": "simmat_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "simmat_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "same_ins_loss + diff_ins_loss",
                            "BinOp"
                        ],
                        [
                            "tf.multiply(simmat_loss, score_mask)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(simmat_loss)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "score_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pts_score_label",
                            "variable"
                        ],
                        [
                            "tf.expand_dims(score_mask, dim=-1)",
                            "Call"
                        ],
                        [
                            "tf.tile(score_mask, multiples)",
                            "Call"
                        ],
                        [
                            "tf.add(score_mask, tf.transpose(score_mask, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(score_mask, clip_value_min=0, clip_value_max=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_199": {
                "a": {
                    "value": "pts_group_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels['ptsgroup']",
                            "Subscript"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "less_202": {
                "x": {
                    "value": "dis_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_output['3d_distance']",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.constant(d_max)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_242": {
                "x": {
                    "value": "samegroup_mat_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "group_mat_label",
                            "variable"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.maximum(tf.subtract(pred_simmat, C_same), 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "maximum_243": {
                "x": {
                    "value": "tf.subtract(C_diff, pred_simmat)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_255": {
                "a": {
                    "value": "score_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pts_score_label",
                            "variable"
                        ],
                        [
                            "tf.expand_dims(score_mask, dim=-1)",
                            "Call"
                        ],
                        [
                            "tf.tile(score_mask, multiples)",
                            "Call"
                        ],
                        [
                            "tf.add(score_mask, tf.transpose(score_mask, perm=[0, 2, 1]))",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(score_mask, clip_value_min=0, clip_value_max=1)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "less_269": {
                "x": {
                    "value": "regression_diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.subtract(net_output['center_score'], pts_score_label)",
                            "Call"
                        ],
                        [
                            "tf.abs(regression_diff)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1.0 / sigma_squared",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_277": {
                "value": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_279": {
                "value": {
                    "value": "margin[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_mean_287": {
                "input_tensor": {
                    "value": "grouperr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.abs(tf.cast(ng, tf.float32) - tf.cast(ng_label, tf.float32))",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_159": {
                "a": {
                    "value": "Fsim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_util.conv2d(F, 128, [1, 1], padding='VALID', stride=[1, 1], bn=False, is_training=is_training, scope='Fsim')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(Fsim, [2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_202": {
                "value": {
                    "value": "d_max",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "maximum_242": {
                "x": {
                    "value": "tf.subtract(pred_simmat, C_same)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "subtract_243": {
                "x": {
                    "value": "C_diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(margin[1], name='C_diff')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "pred_simmat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_output['simmat']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "pow_270": {
                "x": {
                    "value": "regression_diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.subtract(net_output['center_score'], pts_score_label)",
                            "Call"
                        ],
                        [
                            "tf.abs(regression_diff)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_284": {
                "x": {
                    "value": "ng_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "group_mat_label",
                            "variable"
                        ],
                        [
                            "tf.greater(ng_label, tf.constant(0.5))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "subtract_242": {
                "x": {
                    "value": "pred_simmat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_output['simmat']",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "C_same",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(margin[0], name='C_same')",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_159": {
                "a": {
                    "value": "Fsim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_util.conv2d(F, 128, [1, 1], padding='VALID', stride=[1, 1], bn=False, is_training=is_training, scope='Fsim')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(Fsim, [2])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.transpose(Fsim, perm=[0, 2, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "models/pointnet.py": {
        "tensorflow": {
            "placeholder_15": {
                "variable": {
                    "value": "pointclouds_pl",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, num_point, 9)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_17": {
                "variable": {
                    "value": "labels_pl",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, num_point)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "expand_dims_27": {
                "variable": {
                    "value": "input_image",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "point_cloud",
                    "type": "variable",
                    "possible_values": [
                        [
                            "point_cloud",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_42": {
                "variable": {
                    "value": "pc_feat1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "pc_feat1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_util.max_pool2d(points_feat1, [num_point, 1], padding='VALID', scope='maxpool1')",
                            "Call"
                        ],
                        [
                            "tf.reshape(pc_feat1, [batch_size, -1])",
                            "Call"
                        ],
                        [
                            "tf_util.fully_connected(pc_feat1, 256, bn=bn, is_training=is_training, scope='fc1', bn_decay=bn_decay)",
                            "Call"
                        ],
                        [
                            "tf_util.fully_connected(pc_feat1, 128, bn=bn, is_training=is_training, scope='fc2', bn_decay=bn_decay)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_48": {
                "variable": {
                    "value": "pc_feat1_expand",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reshape(pc_feat1, [batch_size, 1, 1, -1])",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, num_point, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_49": {
                "variable": {
                    "value": "points_feat1_concat",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[points_feat1, pc_feat1_expand]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_with_logits_65": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred",
                            "Method Argument"
                        ]
                    ]
                },
                "labels": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_mean_66": {
                "input_tensor": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sparse_softmax_cross_entropy_with_logits(logits=pred, labels=label)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_48": {
                "tensor": {
                    "value": "pc_feat1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_util.max_pool2d(points_feat1, [num_point, 1], padding='VALID', scope='maxpool1')",
                            "Call"
                        ],
                        [
                            "tf.reshape(pc_feat1, [batch_size, -1])",
                            "Call"
                        ],
                        [
                            "tf_util.fully_connected(pc_feat1, 256, bn=bn, is_training=is_training, scope='fc1', bn_decay=bn_decay)",
                            "Call"
                        ],
                        [
                            "tf_util.fully_connected(pc_feat1, 128, bn=bn, is_training=is_training, scope='fc2', bn_decay=bn_decay)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, 1, 1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Graph_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_72": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, 4096, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "device_71": {
                "device_name": {
                    "value": "/gpu: 1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "global_variables_initializer_75": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_73": {
                "value": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Session_74": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models/tf_util.py": {
        "tensorflow": {
            "get_variable_20": {
                "variable": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Call"
                        ],
                        [
                            "tf.truncated_normal_initializer(stddev=stddev)",
                            "Call"
                        ],
                        [
                            "initializer",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float16 if use_fp16 else tf.float32",
                            "IfExp"
                        ]
                    ]
                },
                "trainable": {
                    "value": "trainable",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_650": {
                "variable": {
                    "value": "point_cloud",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "point_cloud",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(point_cloud)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(point_cloud, 0)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(point_cloud)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(point_cloud, 0)",
                            "Call"
                        ],
                        [
                            "point_cloud",
                            "Method Argument"
                        ],
                        [
                            "point_cloud",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "transpose_654": {
                "variable": {
                    "value": "point_cloud_transpose",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "point_cloud",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(point_cloud)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(point_cloud, 0)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(point_cloud)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(point_cloud, 0)",
                            "Call"
                        ],
                        [
                            "point_cloud",
                            "Method Argument"
                        ],
                        [
                            "point_cloud",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_655": {
                "variable": {
                    "value": "point_cloud_inner",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "point_cloud",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(point_cloud)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(point_cloud, 0)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(point_cloud)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(point_cloud, 0)",
                            "Call"
                        ],
                        [
                            "point_cloud",
                            "Method Argument"
                        ],
                        [
                            "point_cloud",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "point_cloud_transpose",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(point_cloud, perm=[0, 2, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_657": {
                "variable": {
                    "value": "point_cloud_square",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(point_cloud)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "transpose_658": {
                "variable": {
                    "value": "point_cloud_square_tranpose",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "point_cloud_square",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.square(point_cloud), axis=-1, keep_dims=True)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "top_k_671": {
                "variable": {
                    "value": "(_, nn_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "neg_adj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-adj_matrix",
                            "UnaryOp"
                        ]
                    ]
                },
                "k": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "20",
                            "Method Argument"
                        ],
                        [
                            "20",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_686": {
                "variable": {
                    "value": "point_cloud",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "point_cloud",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(point_cloud)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(point_cloud, 0)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(point_cloud)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(point_cloud, 0)",
                            "Call"
                        ],
                        [
                            "point_cloud",
                            "Method Argument"
                        ],
                        [
                            "point_cloud",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_698": {
                "variable": {
                    "value": "idx_",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "idx_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.range(batch_size) * num_points",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(idx_, [batch_size, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_700": {
                "variable": {
                    "value": "point_cloud_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "point_cloud",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(point_cloud)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(point_cloud, 0)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(point_cloud)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(point_cloud, 0)",
                            "Call"
                        ],
                        [
                            "point_cloud",
                            "Method Argument"
                        ],
                        [
                            "point_cloud",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, num_dims]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_701": {
                "variable": {
                    "value": "point_cloud_neighbors",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "point_cloud_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(point_cloud, [-1, num_dims])",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "nn_idx + idx_",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "expand_dims_702": {
                "variable": {
                    "value": "point_cloud_central",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "point_cloud_central",
                    "type": "variable",
                    "possible_values": [
                        [
                            "point_cloud",
                            "variable"
                        ],
                        [
                            "tf.expand_dims(point_cloud_central, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.tile(point_cloud_central, [1, 1, k, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tile_704": {
                "variable": {
                    "value": "point_cloud_central",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "point_cloud_central",
                    "type": "variable",
                    "possible_values": [
                        [
                            "point_cloud",
                            "variable"
                        ],
                        [
                            "tf.expand_dims(point_cloud_central, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.tile(point_cloud_central, [1, 1, k, 1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, 1, k, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_706": {
                "variable": {
                    "value": "edge_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[point_cloud_central, point_cloud_neighbors - point_cloud_central]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_43": {
                "variable": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "stddev": {
                    "value": "stddev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stddev",
                            "Method Argument"
                        ],
                        [
                            "0.001",
                            "Method Argument"
                        ],
                        [
                            "0.001",
                            "Method Argument"
                        ],
                        [
                            "0.001",
                            "Method Argument"
                        ],
                        [
                            "0.001",
                            "Method Argument"
                        ],
                        [
                            "0.001",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "multiply_46": {
                "variable": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.l2_loss(var)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "wd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "wd",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "weight_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv1d_93": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_variable_with_weight_decay('weights', shape=kernel_shape, use_xavier=use_xavier, stddev=stddev, wd=weight_decay)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=kernel_shape, use_xavier=use_xavier, stddev=stddev, wd=weight_decay)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=kernel_shape, use_xavier=use_xavier, stddev=stddev, wd=weight_decay)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=kernel_shape, use_xavier=use_xavier, stddev=stddev, wd=weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "[1",
                            "Method Argument"
                        ],
                        [
                            "[1",
                            "Method Argument"
                        ],
                        [
                            "[1",
                            "Method Argument"
                        ],
                        [
                            "[2",
                            "Method Argument"
                        ],
                        [
                            "[2",
                            "Method Argument"
                        ],
                        [
                            "[2",
                            "Method Argument"
                        ],
                        [
                            "[2",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "bias_add_98": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv1d(inputs, kernel, stride=stride, padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv1d(outputs, is_training, bn_decay=bn_decay, scope='bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(inputs, kernel, [1, stride_h, stride_w, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv2d(outputs, is_training, bn_decay=bn_decay, scope='bn', is_dist=is_dist)",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(inputs, kernel, output_shape, [1, stride_h, stride_w, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv2d(outputs, is_training, bn_decay=bn_decay, scope='bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d(inputs, kernel, [1, stride_d, stride_h, stride_w, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv3d(outputs, is_training, bn_decay=bn_decay, scope='bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, weights)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_fc(outputs, is_training, bn_decay, 'bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(inputs, ksize=[1, kernel_h, kernel_w, 1], strides=[1, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(inputs, ksize=[1, kernel_h, kernel_w, 1], strides=[1, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(inputs, ksize=[1, kernel_d, kernel_h, kernel_w, 1], strides=[1, stride_d, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(inputs, ksize=[1, kernel_d, kernel_h, kernel_w, 1], strides=[1, stride_d, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.cond(is_training, lambda : tf.nn.dropout(inputs, keep_prob, noise_shape), lambda : inputs)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_outputs], tf.constant_initializer(0.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_156": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_variable_with_weight_decay('weights', shape=kernel_shape, use_xavier=use_xavier, stddev=stddev, wd=weight_decay)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=kernel_shape, use_xavier=use_xavier, stddev=stddev, wd=weight_decay)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=kernel_shape, use_xavier=use_xavier, stddev=stddev, wd=weight_decay)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=kernel_shape, use_xavier=use_xavier, stddev=stddev, wd=weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, stride_h, stride_w, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "bias_add_161": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv1d(inputs, kernel, stride=stride, padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv1d(outputs, is_training, bn_decay=bn_decay, scope='bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(inputs, kernel, [1, stride_h, stride_w, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv2d(outputs, is_training, bn_decay=bn_decay, scope='bn', is_dist=is_dist)",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(inputs, kernel, output_shape, [1, stride_h, stride_w, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv2d(outputs, is_training, bn_decay=bn_decay, scope='bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d(inputs, kernel, [1, stride_d, stride_h, stride_w, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv3d(outputs, is_training, bn_decay=bn_decay, scope='bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, weights)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_fc(outputs, is_training, bn_decay, 'bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(inputs, ksize=[1, kernel_h, kernel_w, 1], strides=[1, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(inputs, ksize=[1, kernel_h, kernel_w, 1], strides=[1, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(inputs, ksize=[1, kernel_d, kernel_h, kernel_w, 1], strides=[1, stride_d, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(inputs, ksize=[1, kernel_d, kernel_h, kernel_w, 1], strides=[1, stride_d, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.cond(is_training, lambda : tf.nn.dropout(inputs, keep_prob, noise_shape), lambda : inputs)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_outputs], tf.constant_initializer(0.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_transpose_235": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_variable_with_weight_decay('weights', shape=kernel_shape, use_xavier=use_xavier, stddev=stddev, wd=weight_decay)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=kernel_shape, use_xavier=use_xavier, stddev=stddev, wd=weight_decay)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=kernel_shape, use_xavier=use_xavier, stddev=stddev, wd=weight_decay)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=kernel_shape, use_xavier=use_xavier, stddev=stddev, wd=weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "output_shape": {
                    "value": "output_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[batch_size, out_height, out_width, num_output_channels]",
                            "List"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, stride_h, stride_w, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "bias_add_240": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv1d(inputs, kernel, stride=stride, padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv1d(outputs, is_training, bn_decay=bn_decay, scope='bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(inputs, kernel, [1, stride_h, stride_w, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv2d(outputs, is_training, bn_decay=bn_decay, scope='bn', is_dist=is_dist)",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(inputs, kernel, output_shape, [1, stride_h, stride_w, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv2d(outputs, is_training, bn_decay=bn_decay, scope='bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d(inputs, kernel, [1, stride_d, stride_h, stride_w, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv3d(outputs, is_training, bn_decay=bn_decay, scope='bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, weights)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_fc(outputs, is_training, bn_decay, 'bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(inputs, ksize=[1, kernel_h, kernel_w, 1], strides=[1, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(inputs, ksize=[1, kernel_h, kernel_w, 1], strides=[1, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(inputs, ksize=[1, kernel_d, kernel_h, kernel_w, 1], strides=[1, stride_d, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(inputs, ksize=[1, kernel_d, kernel_h, kernel_w, 1], strides=[1, stride_d, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.cond(is_training, lambda : tf.nn.dropout(inputs, keep_prob, noise_shape), lambda : inputs)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_outputs], tf.constant_initializer(0.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "conv3d_296": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_variable_with_weight_decay('weights', shape=kernel_shape, use_xavier=use_xavier, stddev=stddev, wd=weight_decay)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=kernel_shape, use_xavier=use_xavier, stddev=stddev, wd=weight_decay)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=kernel_shape, use_xavier=use_xavier, stddev=stddev, wd=weight_decay)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('weights', shape=kernel_shape, use_xavier=use_xavier, stddev=stddev, wd=weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, stride_d, stride_h, stride_w, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "bias_add_301": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv1d(inputs, kernel, stride=stride, padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv1d(outputs, is_training, bn_decay=bn_decay, scope='bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(inputs, kernel, [1, stride_h, stride_w, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv2d(outputs, is_training, bn_decay=bn_decay, scope='bn', is_dist=is_dist)",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(inputs, kernel, output_shape, [1, stride_h, stride_w, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv2d(outputs, is_training, bn_decay=bn_decay, scope='bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d(inputs, kernel, [1, stride_d, stride_h, stride_w, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv3d(outputs, is_training, bn_decay=bn_decay, scope='bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, weights)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_fc(outputs, is_training, bn_decay, 'bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(inputs, ksize=[1, kernel_h, kernel_w, 1], strides=[1, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(inputs, ksize=[1, kernel_h, kernel_w, 1], strides=[1, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(inputs, ksize=[1, kernel_d, kernel_h, kernel_w, 1], strides=[1, stride_d, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(inputs, ksize=[1, kernel_d, kernel_h, kernel_w, 1], strides=[1, stride_d, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.cond(is_training, lambda : tf.nn.dropout(inputs, keep_prob, noise_shape), lambda : inputs)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_outputs], tf.constant_initializer(0.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_337": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_variable_with_weight_decay('weights', shape=[num_input_units, num_outputs], use_xavier=use_xavier, stddev=stddev, wd=weight_decay)",
                            "Call"
                        ]
                    ]
                }
            },
            "bias_add_340": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv1d(inputs, kernel, stride=stride, padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv1d(outputs, is_training, bn_decay=bn_decay, scope='bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(inputs, kernel, [1, stride_h, stride_w, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv2d(outputs, is_training, bn_decay=bn_decay, scope='bn', is_dist=is_dist)",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(inputs, kernel, output_shape, [1, stride_h, stride_w, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv2d(outputs, is_training, bn_decay=bn_decay, scope='bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d(inputs, kernel, [1, stride_d, stride_h, stride_w, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_conv3d(outputs, is_training, bn_decay=bn_decay, scope='bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, weights)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "batch_norm_for_fc(outputs, is_training, bn_decay, 'bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(inputs, ksize=[1, kernel_h, kernel_w, 1], strides=[1, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(inputs, ksize=[1, kernel_h, kernel_w, 1], strides=[1, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool3d(inputs, ksize=[1, kernel_d, kernel_h, kernel_w, 1], strides=[1, stride_d, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool3d(inputs, ksize=[1, kernel_d, kernel_h, kernel_w, 1], strides=[1, stride_d, stride_h, stride_w, 1], padding=padding, name=sc.name)",
                            "Call"
                        ],
                        [
                            "tf.cond(is_training, lambda : tf.nn.dropout(inputs, keep_prob, noise_shape), lambda : inputs)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_output_channels], tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('biases', [num_outputs], tf.constant_initializer(0.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "max_pool_368": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, kernel_h, kernel_w, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, stride_h, stride_w, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "sc.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "avg_pool_393": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, kernel_h, kernel_w, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, stride_h, stride_w, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "sc.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_pool3d_419": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, kernel_d, kernel_h, kernel_w, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, stride_d, stride_h, stride_w, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "sc.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "avg_pool3d_444": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, kernel_d, kernel_h, kernel_w, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, stride_d, stride_h, stride_w, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "'VALID'",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "sc.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_476": {
                "variable": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(0.0, shape=[num_channels])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "beta",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Variable_478": {
                "variable": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(1.0, shape=[num_channels])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "gamma",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "moments_480": {
                "variable": {
                    "value": "(batch_mean, batch_var)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "axes": {
                    "value": "moments_dims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "moments_dims",
                            "Method Argument"
                        ],
                        [
                            "moments_dims",
                            "Method Argument"
                        ],
                        [
                            "moments_dims",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "moments",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ExponentialMovingAverage_482": {
                "variable": {
                    "value": "ema",
                    "type": "variable",
                    "possible_values": []
                },
                "decay": {
                    "value": "decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bn_decay if bn_decay is not None else 0.9",
                            "IfExp"
                        ],
                        [
                            "bn_decay if bn_decay is not None else 0.9",
                            "IfExp"
                        ]
                    ]
                }
            },
            "cond_497": {
                "variable": {
                    "value": "(mean, var)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "pred": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "mean_var_with_update",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mean_var_with_update",
                            "Call"
                        ]
                    ]
                },
                "false_fn": {
                    "value": "lambda : (ema.average(batch_mean), ema.average(batch_var))",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "batch_normalization_500": {
                "variable": {
                    "value": "normed",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "mean": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(is_training, mean_var_with_update, lambda : (ema.average(batch_mean), ema.average(batch_var)))",
                            "Call"
                        ]
                    ]
                },
                "variance": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name, shape, initializer=initializer, dtype=dtype, trainable=trainable)",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu(name, shape, initializer)",
                            "Call"
                        ],
                        [
                            "tf.cond(is_training, mean_var_with_update, lambda : (ema.average(batch_mean), ema.average(batch_var)))",
                            "Call"
                        ]
                    ]
                },
                "offset": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.constant(0.0, shape=[num_channels]), name='beta', trainable=True)",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('beta', [num_channels], initializer=tf.zeros_initializer())",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.constant(1.0, shape=[num_channels]), name='gamma', trainable=True)",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('gamma', [num_channels], initializer=tf.ones_initializer())",
                            "Call"
                        ]
                    ]
                },
                "variance_epsilon": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cond_533": {
                "variable": {
                    "value": "normed",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "train_bn_op",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_bn_op",
                            "Call"
                        ]
                    ]
                },
                "false_fn": {
                    "value": "test_bn_op",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_bn_op",
                            "Call"
                        ]
                    ]
                }
            },
            "cond_633": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : tf.nn.dropout(inputs, keep_prob, noise_shape)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : inputs",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "expand_dims_652": {
                "variable": {
                    "value": "point_cloud",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "point_cloud",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(point_cloud)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(point_cloud, 0)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(point_cloud)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(point_cloud, 0)",
                            "Call"
                        ],
                        [
                            "point_cloud",
                            "Method Argument"
                        ],
                        [
                            "point_cloud",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_688": {
                "variable": {
                    "value": "point_cloud",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "point_cloud",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(point_cloud)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(point_cloud, 0)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(point_cloud)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(point_cloud, 0)",
                            "Call"
                        ],
                        [
                            "point_cloud",
                            "Method Argument"
                        ],
                        [
                            "point_cloud",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_to_collection_47": {
                "name": {
                    "value": "losses",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(tf.nn.l2_loss(var), wd, name='weight_loss')",
                            "Call"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_84": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_145": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_207": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_285": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_330": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_365": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_390": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_416": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_441": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_474": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cond_487": {
                "variable": {
                    "value": "ema_apply_op",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : ema.apply([batch_mean, batch_var])",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.no_op()",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "variable_scope_514": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "moments_523": {
                "variable": {
                    "value": "(batch_mean, batch_var)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "axes": {
                    "value": "moments_dims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "moments_dims",
                            "Method Argument"
                        ],
                        [
                            "moments_dims",
                            "Method Argument"
                        ],
                        [
                            "moments_dims",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "moments",
                    "type": "str",
                    "possible_values": []
                }
            },
            "assign_525": {
                "variable": {
                    "value": "train_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "pop_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_variable_on_cpu('pop_mean', [num_channels], initializer=tf.zeros_initializer(), trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "pop_mean * decay + batch_mean * (1 - decay)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "assign_526": {
                "variable": {
                    "value": "train_var",
                    "type": "variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "pop_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_variable_on_cpu('pop_var', [num_channels], initializer=tf.ones_initializer(), trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "pop_var * decay + batch_var * (1 - decay)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_541": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_632": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "square_657": {
                "x": {
                    "value": "point_cloud",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(point_cloud)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(point_cloud, 0)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(point_cloud)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(point_cloud, 0)",
                            "Call"
                        ],
                        [
                            "point_cloud",
                            "Method Argument"
                        ],
                        [
                            "point_cloud",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "l2_loss_46": {
                "t": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name, shape, initializer=initializer, dtype=dtype, trainable=trainable)",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu(name, shape, initializer)",
                            "Call"
                        ],
                        [
                            "tf.cond(is_training, mean_var_with_update, lambda : (ema.average(batch_mean), ema.average(batch_var)))",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_initializer_97": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_160": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_239": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_300": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_339": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_476": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_478": {
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_486": {
                "name_or_scope": {
                    "value": "tf.get_variable_scope()",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "batch_normalization_531": {
                "x": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "mean": {
                    "value": "pop_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_variable_on_cpu('pop_mean', [num_channels], initializer=tf.zeros_initializer(), trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "variance": {
                    "value": "pop_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_variable_on_cpu('pop_var', [num_channels], initializer=tf.ones_initializer(), trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "offset": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.constant(0.0, shape=[num_channels]), name='beta', trainable=True)",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('beta', [num_channels], initializer=tf.zeros_initializer())",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.constant(1.0, shape=[num_channels]), name='gamma', trainable=True)",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('gamma', [num_channels], initializer=tf.ones_initializer())",
                            "Call"
                        ]
                    ]
                },
                "variance_epsilon": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "get_variable_scope_486": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "control_dependencies_493": {
                "control_inputs": {
                    "value": "[ema_apply_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_initializer_516": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_initializer_517": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_519": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_initializer_520": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "control_dependencies_527": {
                "control_inputs": {
                    "value": "[train_mean, train_var]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "batch_normalization_528": {
                "x": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "mean": {
                    "value": "batch_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.moments(inputs, moments_dims, name='moments')",
                            "Call"
                        ],
                        [
                            "tf.nn.moments(inputs, moments_dims, name='moments')",
                            "Call"
                        ]
                    ]
                },
                "variance": {
                    "value": "batch_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.moments(inputs, moments_dims, name='moments')",
                            "Call"
                        ],
                        [
                            "tf.nn.moments(inputs, moments_dims, name='moments')",
                            "Call"
                        ]
                    ]
                },
                "offset": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.constant(0.0, shape=[num_channels]), name='beta', trainable=True)",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('beta', [num_channels], initializer=tf.zeros_initializer())",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.constant(1.0, shape=[num_channels]), name='gamma', trainable=True)",
                            "Call"
                        ],
                        [
                            "_variable_on_cpu('gamma', [num_channels], initializer=tf.ones_initializer())",
                            "Call"
                        ]
                    ]
                },
                "variance_epsilon": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "dropout_634": {
                "x": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "rate": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                },
                "noise_shape": {
                    "value": "noise_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_op_489": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "identity_494": {
                "input": {
                    "value": "batch_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.moments(inputs, moments_dims, name='moments')",
                            "Call"
                        ],
                        [
                            "tf.nn.moments(inputs, moments_dims, name='moments')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "utils/pointnet_util.py": {
        "tensorflow": {
            "constant_77": {
                "variable": {
                    "value": "new_xyz",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.tile(np.array([0, 0, 0]).reshape((1, 1, 3)), (batch_size, 1, 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_78": {
                "variable": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.tile(np.array(range(nsample)).reshape((1, 1, nsample)), (batch_size, 1, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_79": {
                "variable": {
                    "value": "grouped_xyz",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "xyz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xyz",
                            "Method Argument"
                        ],
                        [
                            "xyz",
                            "Method Argument"
                        ],
                        [
                            "xyz",
                            "Method Argument"
                        ],
                        [
                            "xyz",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size, 1, nsample, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tile_48": {
                "input": {
                    "value": "tf.expand_dims(new_xyz, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, nsample, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_85": {
                "variable": {
                    "value": "new_points",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([grouped_xyz, grouped_points], axis=-1)",
                            "Call"
                        ],
                        [
                            "grouped_points",
                            "variable"
                        ],
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([xyz, points], axis=2)",
                            "Call"
                        ],
                        [
                            "points",
                            "variable"
                        ],
                        [
                            "tf.expand_dims(new_points, 1)",
                            "Call"
                        ],
                        [
                            "sample_and_group_all(xyz, points, use_xyz)",
                            "Call"
                        ],
                        [
                            "sample_and_group(npoint, radius, nsample, xyz, points, tnet_spec, knn, use_xyz)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_points, num_out_channel, [1, 1], padding='VALID', stride=[1, 1], bn=bn, is_training=is_training, scope='conv%d' % i, bn_decay=bn_decay)",
                            "Call"
                        ],
                        [
                            "tf_util.avg_pool2d(new_points, [1, nsample], stride=[1, 1], padding='VALID', scope='avgpool1')",
                            "Call"
                        ],
                        [
                            "new_points * weights",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(new_points, axis=2, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(new_points, axis=[2], keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_points, num_out_channel, [1, 1], padding='VALID', stride=[1, 1], bn=bn, is_training=is_training, scope='conv_post_%d' % i, bn_decay=bn_decay)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(new_points, [2])",
                            "Call"
                        ],
                        [
                            "tf_util.max_pool2d(-1 * new_points, [1, nsample], stride=[1, 1], padding='VALID', scope='minpool1')",
                            "Call"
                        ],
                        [
                            "tf.concat([avg_points, max_points], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(grouped_points, axis=[2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_144": {
                "variable": {
                    "value": "new_points",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([grouped_xyz, grouped_points], axis=-1)",
                            "Call"
                        ],
                        [
                            "grouped_points",
                            "variable"
                        ],
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([xyz, points], axis=2)",
                            "Call"
                        ],
                        [
                            "points",
                            "variable"
                        ],
                        [
                            "tf.expand_dims(new_points, 1)",
                            "Call"
                        ],
                        [
                            "sample_and_group_all(xyz, points, use_xyz)",
                            "Call"
                        ],
                        [
                            "sample_and_group(npoint, radius, nsample, xyz, points, tnet_spec, knn, use_xyz)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_points, num_out_channel, [1, 1], padding='VALID', stride=[1, 1], bn=bn, is_training=is_training, scope='conv%d' % i, bn_decay=bn_decay)",
                            "Call"
                        ],
                        [
                            "tf_util.avg_pool2d(new_points, [1, nsample], stride=[1, 1], padding='VALID', scope='avgpool1')",
                            "Call"
                        ],
                        [
                            "new_points * weights",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(new_points, axis=2, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(new_points, axis=[2], keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_points, num_out_channel, [1, 1], padding='VALID', stride=[1, 1], bn=bn, is_training=is_training, scope='conv_post_%d' % i, bn_decay=bn_decay)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(new_points, [2])",
                            "Call"
                        ],
                        [
                            "tf_util.max_pool2d(-1 * new_points, [1, nsample], stride=[1, 1], padding='VALID', scope='minpool1')",
                            "Call"
                        ],
                        [
                            "tf.concat([avg_points, max_points], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(grouped_points, axis=[2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_182": {
                "variable": {
                    "value": "new_points_concat",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "new_points_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "maximum_199": {
                "variable": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "three_nn(xyz1, xyz2)",
                            "Call"
                        ],
                        [
                            "tf.maximum(dist, 1e-10)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1e-10",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reduce_sum_200": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "1.0 / dist",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tile_201": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(1.0 / dist, axis=2, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.tile(norm, [1, 1, 3])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_209": {
                "variable": {
                    "value": "new_points1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_points1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(axis=2, values=[interpolated_points, points1])",
                            "Call"
                        ],
                        [
                            "interpolated_points",
                            "variable"
                        ],
                        [
                            "tf.expand_dims(new_points1, 2)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_points1, num_out_channel, [1, 1], padding='VALID', stride=[1, 1], bn=bn, is_training=is_training, scope='conv_%d' % i, bn_decay=bn_decay)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(new_points1, [2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_215": {
                "variable": {
                    "value": "new_points1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_points1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(axis=2, values=[interpolated_points, points1])",
                            "Call"
                        ],
                        [
                            "interpolated_points",
                            "variable"
                        ],
                        [
                            "tf.expand_dims(new_points1, 2)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_points1, num_out_channel, [1, 1], padding='VALID', stride=[1, 1], bn=bn, is_training=is_training, scope='conv_%d' % i, bn_decay=bn_decay)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(new_points1, [2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_48": {
                "input": {
                    "value": "new_xyz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gather_point(xyz, farthest_point_sample(npoint, xyz))",
                            "Call"
                        ],
                        [
                            "tf.constant(np.tile(np.array([0, 0, 0]).reshape((1, 1, 3)), (batch_size, 1, 1)), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "sample_and_group_all(xyz, points, use_xyz)",
                            "Call"
                        ],
                        [
                            "sample_and_group(npoint, radius, nsample, xyz, points, tnet_spec, knn, use_xyz)",
                            "Call"
                        ],
                        [
                            "gather_point(xyz, farthest_point_sample(npoint, xyz))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_54": {
                "variable": {
                    "value": "new_points",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[grouped_xyz, grouped_points]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_82": {
                "variable": {
                    "value": "new_points",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[xyz, points]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_109": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_161": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_max_180": {
                "variable": {
                    "value": "new_points",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "grouped_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "group_point(points, idx)",
                            "Call"
                        ],
                        [
                            "group_point(points, idx)",
                            "Call"
                        ],
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([grouped_points, grouped_xyz], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(grouped_points, num_out_channel, [1, 1], padding='VALID', stride=[1, 1], bn=bn, is_training=is_training, scope='conv%d_%d' % (i, j), bn_decay=bn_decay)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_197": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_206": {
                "variable": {
                    "value": "new_points1",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[interpolated_points, points1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_169": {
                "input": {
                    "value": "tf.expand_dims(new_xyz, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, nsample, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "norm_124": {
                "variable": {
                    "value": "dists",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "grouped_xyz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "group_point(xyz, idx)",
                            "Call"
                        ],
                        [
                            "grouped_xyz - tf.tile(tf.expand_dims(new_xyz, 2), [1, 1, nsample, 1])",
                            "BinOp"
                        ],
                        [
                            "tnet(grouped_xyz, tnet_spec)",
                            "Call"
                        ],
                        [
                            "tf.reshape(xyz, (batch_size, 1, nsample, 3))",
                            "Call"
                        ],
                        [
                            "sample_and_group_all(xyz, points, use_xyz)",
                            "Call"
                        ],
                        [
                            "sample_and_group(npoint, radius, nsample, xyz, points, tnet_spec, knn, use_xyz)",
                            "Call"
                        ],
                        [
                            "group_point(xyz, idx)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "ord": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "exp_125": {
                "variable": {
                    "value": "exp_dists",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "-dists * 5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_128": {
                "variable": {
                    "value": "new_points",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "new_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([grouped_xyz, grouped_points], axis=-1)",
                            "Call"
                        ],
                        [
                            "grouped_points",
                            "variable"
                        ],
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([xyz, points], axis=2)",
                            "Call"
                        ],
                        [
                            "points",
                            "variable"
                        ],
                        [
                            "tf.expand_dims(new_points, 1)",
                            "Call"
                        ],
                        [
                            "sample_and_group_all(xyz, points, use_xyz)",
                            "Call"
                        ],
                        [
                            "sample_and_group(npoint, radius, nsample, xyz, points, tnet_spec, knn, use_xyz)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_points, num_out_channel, [1, 1], padding='VALID', stride=[1, 1], bn=bn, is_training=is_training, scope='conv%d' % i, bn_decay=bn_decay)",
                            "Call"
                        ],
                        [
                            "tf_util.avg_pool2d(new_points, [1, nsample], stride=[1, 1], padding='VALID', scope='avgpool1')",
                            "Call"
                        ],
                        [
                            "new_points * weights",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(new_points, axis=2, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(new_points, axis=[2], keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_points, num_out_channel, [1, 1], padding='VALID', stride=[1, 1], bn=bn, is_training=is_training, scope='conv_post_%d' % i, bn_decay=bn_decay)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(new_points, [2])",
                            "Call"
                        ],
                        [
                            "tf_util.max_pool2d(-1 * new_points, [1, nsample], stride=[1, 1], padding='VALID', scope='minpool1')",
                            "Call"
                        ],
                        [
                            "tf.concat([avg_points, max_points], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(grouped_points, axis=[2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_max_130": {
                "variable": {
                    "value": "new_points",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "new_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([grouped_xyz, grouped_points], axis=-1)",
                            "Call"
                        ],
                        [
                            "grouped_points",
                            "variable"
                        ],
                        [
                            "grouped_xyz",
                            "variable"
                        ],
                        [
                            "tf.concat([xyz, points], axis=2)",
                            "Call"
                        ],
                        [
                            "points",
                            "variable"
                        ],
                        [
                            "tf.expand_dims(new_points, 1)",
                            "Call"
                        ],
                        [
                            "sample_and_group_all(xyz, points, use_xyz)",
                            "Call"
                        ],
                        [
                            "sample_and_group(npoint, radius, nsample, xyz, points, tnet_spec, knn, use_xyz)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_points, num_out_channel, [1, 1], padding='VALID', stride=[1, 1], bn=bn, is_training=is_training, scope='conv%d' % i, bn_decay=bn_decay)",
                            "Call"
                        ],
                        [
                            "tf_util.avg_pool2d(new_points, [1, nsample], stride=[1, 1], padding='VALID', scope='avgpool1')",
                            "Call"
                        ],
                        [
                            "new_points * weights",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(new_points, axis=2, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(new_points, axis=[2], keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf_util.conv2d(new_points, num_out_channel, [1, 1], padding='VALID', stride=[1, 1], bn=bn, is_training=is_training, scope='conv_post_%d' % i, bn_decay=bn_decay)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(new_points, [2])",
                            "Call"
                        ],
                        [
                            "tf_util.max_pool2d(-1 * new_points, [1, nsample], stride=[1, 1], padding='VALID', scope='minpool1')",
                            "Call"
                        ],
                        [
                            "tf.concat([avg_points, max_points], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(grouped_points, axis=[2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "expand_dims_169": {
                "input": {
                    "value": "new_xyz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gather_point(xyz, farthest_point_sample(npoint, xyz))",
                            "Call"
                        ],
                        [
                            "tf.constant(np.tile(np.array([0, 0, 0]).reshape((1, 1, 3)), (batch_size, 1, 1)), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "sample_and_group_all(xyz, points, use_xyz)",
                            "Call"
                        ],
                        [
                            "sample_and_group(npoint, radius, nsample, xyz, points, tnet_spec, knn, use_xyz)",
                            "Call"
                        ],
                        [
                            "gather_point(xyz, farthest_point_sample(npoint, xyz))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_173": {
                "variable": {
                    "value": "grouped_points",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[grouped_points, grouped_xyz]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "variable_scope_123": {
                "name_or_scope": {
                    "value": "weighted_avg1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_126": {
                "input_tensor": {
                    "value": "exp_dists",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(-dists * 5)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "concat_136": {
                "variable": {
                    "value": "new_points",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[avg_points, max_points]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    }
}