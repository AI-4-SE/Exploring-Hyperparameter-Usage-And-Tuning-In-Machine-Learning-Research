{
    "agent.py": {
        "torch": {
            "Adam_50": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.online_net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.config['training']['optimizer']['learning_rate']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "linspace_133": {
                "variable": {
                    "value": "self.support",
                    "type": "Attribute",
                    "possible_values": []
                },
                "start": {
                    "value": "self.v_min",
                    "type": "Attribute",
                    "possible_values": []
                },
                "end": {
                    "value": "self.v_max",
                    "type": "Attribute",
                    "possible_values": []
                },
                "steps": {
                    "value": "self.atoms",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_517": {
                "variable": {
                    "value": "q_value",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.stack(word_qvalues, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_519": {
                "variable": {
                    "value": "log_q_value",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mean(torch.stack(word_qvalues, -1), -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_570": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.smooth_l1_loss(q_value, rewards)",
                            "Call"
                        ],
                        [
                            "-torch.sum(m * log_q_value, 1)",
                            "UnaryOp"
                        ],
                        [
                            "torch.mean(loss)",
                            "Call"
                        ],
                        [
                            "interaction_loss * self.interaction_loss_lambda",
                            "BinOp"
                        ],
                        [
                            "qa_loss * self.qa_loss_lambda",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ne_628": {
                "variable": {
                    "value": "vocab_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vocab_distribution",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((batch_size, len(self.word_vocab)))",
                            "Call"
                        ],
                        [
                            "to_pt(vocab_distribution, self.use_cuda, type='float')",
                            "Call"
                        ],
                        [
                            "vocab_distribution.scatter_add_(1, observation, pred)",
                            "Call"
                        ],
                        [
                            "vocab_distribution - torch.min(vocab_distribution, -1, keepdim=True)[0] + 0.01",
                            "BinOp"
                        ],
                        [
                            "vocab_distribution * mask",
                            "BinOp"
                        ],
                        [
                            "self.answer_question(input_observation, input_observation_char, observation_id_list, input_quest, input_quest_char, use_model='online')",
                            "Call"
                        ],
                        [
                            "vocab_distribution",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_641": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vocab_distribution",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((batch_size, len(self.word_vocab)))",
                            "Call"
                        ],
                        [
                            "to_pt(vocab_distribution, self.use_cuda, type='float')",
                            "Call"
                        ],
                        [
                            "vocab_distribution.scatter_add_(1, observation, pred)",
                            "Call"
                        ],
                        [
                            "vocab_distribution - torch.min(vocab_distribution, -1, keepdim=True)[0] + 0.01",
                            "BinOp"
                        ],
                        [
                            "vocab_distribution * mask",
                            "BinOp"
                        ],
                        [
                            "self.answer_question(input_observation, input_observation_char, observation_id_list, input_quest, input_quest_char, use_model='online')",
                            "Call"
                        ],
                        [
                            "vocab_distribution",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "manual_seed_89": {
                "seed": {
                    "value": "self.random_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_90": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_213": {
                "obj": {
                    "value": "self.online_net.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_to",
                    "type": "variable",
                    "possible_values": [
                        [
                            "save_to",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mean_541": {
                "variable": {
                    "value": "next_q_value",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.stack(next_word_qvalues, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "smooth_l1_loss_546": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mean(torch.stack(word_qvalues, -1), -1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "rewards",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rewards + next_q_value * discount",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_560": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(obs)",
                            "Call"
                        ],
                        [
                            "len(obs)",
                            "Call"
                        ],
                        [
                            "len(possible_verbs)",
                            "Call"
                        ],
                        [
                            "chosen_indices_np[0].shape[0]",
                            "Subscript"
                        ],
                        [
                            "len(obs)",
                            "Call"
                        ],
                        [
                            "len(obs)",
                            "Call"
                        ],
                        [
                            "len(obs)",
                            "Call"
                        ],
                        [
                            "len(actual_n_list)",
                            "Call"
                        ],
                        [
                            "len(observation_id_list)",
                            "Call"
                        ],
                        [
                            "len(observation_strings)",
                            "Call"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "self.atoms",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linspace_563": {
                "variable": {
                    "value": "offset",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "(batch_size - 1) * self.atoms",
                    "type": "BinOp",
                    "possible_values": []
                },
                "steps": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(obs)",
                            "Call"
                        ],
                        [
                            "len(obs)",
                            "Call"
                        ],
                        [
                            "len(possible_verbs)",
                            "Call"
                        ],
                        [
                            "chosen_indices_np[0].shape[0]",
                            "Subscript"
                        ],
                        [
                            "len(obs)",
                            "Call"
                        ],
                        [
                            "len(obs)",
                            "Call"
                        ],
                        [
                            "len(obs)",
                            "Call"
                        ],
                        [
                            "len(actual_n_list)",
                            "Call"
                        ],
                        [
                            "len(observation_id_list)",
                            "Call"
                        ],
                        [
                            "len(observation_strings)",
                            "Call"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "unsqueeze_563": {
                "variable": {
                    "value": "offset",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_grad_norm__584": {
                "parameters": {
                    "value": "self.online_net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.clip_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_673": {
                "input": {
                    "value": "batch_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "NegativeLogLoss(answer_distribution, groundtruth)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_grad_norm__686": {
                "parameters": {
                    "value": "self.online_net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.clip_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_205": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "load_from",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_from",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_207": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "load_from",
                    "type": "variable",
                    "possible_values": [
                        [
                            "load_from",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_389": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_415": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_447": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_517": {
                "tensors": {
                    "value": "word_qvalues",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[ez_gather_dim_1(w_rank, idx.unsqueeze(-1)).squeeze(1) for (w_rank, idx) in zip(action_ranks, chosen_indices)]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "no_grad_521": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_549": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_569": {
                "input": {
                    "value": "m * log_q_value",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_586": {
                "input": {
                    "value": "interaction_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_dqn_loss()",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_646": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_688": {
                "input": {
                    "value": "qa_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_qa_loss()",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_96": {
                "seed": {
                    "value": "self.random_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_333": {
                "input": {
                    "value": "ar",
                    "type": "variable",
                    "possible_values": [
                        [
                            "action_ranks[i]",
                            "Subscript"
                        ],
                        [
                            "ar - torch.min(ar, -1, keepdim=True)[0] + 0.01",
                            "BinOp"
                        ],
                        [
                            "ar * word_mask[i]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "stack_541": {
                "tensors": {
                    "value": "next_word_qvalues",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[ez_gather_dim_1(w_rank, idx.unsqueeze(-1)).squeeze(1) for (w_rank, idx) in zip(next_action_ranks, next_word_indices)]",
                            "ListComp"
                        ],
                        [
                            "[ez_gather_dim_1(w_rank, idx.unsqueeze(-1)).squeeze(1) for (w_rank, idx) in zip(next_action_ranks, next_word_indices)]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "min_639": {
                "input": {
                    "value": "vocab_distribution",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((batch_size, len(self.word_vocab)))",
                            "Call"
                        ],
                        [
                            "to_pt(vocab_distribution, self.use_cuda, type='float')",
                            "Call"
                        ],
                        [
                            "vocab_distribution.scatter_add_(1, observation, pred)",
                            "Call"
                        ],
                        [
                            "vocab_distribution - torch.min(vocab_distribution, -1, keepdim=True)[0] + 0.01",
                            "BinOp"
                        ],
                        [
                            "vocab_distribution * mask",
                            "BinOp"
                        ],
                        [
                            "self.answer_question(input_observation, input_observation_char, observation_id_list, input_quest, input_quest_char, use_model='online')",
                            "Call"
                        ],
                        [
                            "vocab_distribution",
                            "Method Argument"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "min_329": {
                "input": {
                    "value": "ar",
                    "type": "variable",
                    "possible_values": [
                        [
                            "action_ranks[i]",
                            "Subscript"
                        ],
                        [
                            "ar - torch.min(ar, -1, keepdim=True)[0] + 0.01",
                            "BinOp"
                        ],
                        [
                            "ar * word_mask[i]",
                            "BinOp"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "command_generation_memory.py": {
        "torch": {
            "stack_132": {
                "variable": {
                    "value": "rewards",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "reward_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_80": {
                "variable": {
                    "value": "reward",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.stack(rewards_up_to_next_final)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_131": {
                "tensors": {
                    "value": "item",
                    "type": "variable",
                    "possible_values": [
                        [
                            "res",
                            "variable"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_80": {
                "tensors": {
                    "value": "rewards_up_to_next_final",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[self.discount_gamma ** i * which_memory[head + i].reward for i in range(next_final - head + 1)]",
                            "ListComp"
                        ]
                    ]
                }
            }
        }
    },
    "generic.py": {
        "torch": {
            "stack_119": {
                "tensors": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.zeros((batch_size, max_token_number, max_char_number), dtype='int32')",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_22": {
                "ndarray": {
                    "value": "np_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np_matrix",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_24": {
                "ndarray": {
                    "value": "np_matrix.copy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_27": {
                "ndarray": {
                    "value": "np_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np_matrix",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_29": {
                "ndarray": {
                    "value": "np_matrix.copy()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "layers.py": {
        "torch": {
            "ne_9": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp(x, min=-15.0, max=15.0)",
                            "Call"
                        ],
                        [
                            "x * m",
                            "BinOp"
                        ],
                        [
                            "torch.randn(size)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.dot_product_attention(Q, K, V, mask=query_mask)",
                            "Call"
                        ],
                        [
                            "gate * nonlinear + (1 - gate) * x",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_19": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp(x, min=-15.0, max=15.0)",
                            "Call"
                        ],
                        [
                            "x * m",
                            "BinOp"
                        ],
                        [
                            "torch.randn(size)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.dot_product_attention(Q, K, V, mask=query_mask)",
                            "Call"
                        ],
                        [
                            "gate * nonlinear + (1 - gate) * x",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "min": {
                    "value": "-15.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "15.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "exp_23": {
                "variable": {
                    "value": "e_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x - torch.max(x, dim=axis, keepdim=True)[0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_39": {
                "variable": {
                    "value": "mask_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "m.float()",
                            "Call"
                        ],
                        [
                            "torch.nn.ZeroPad2d((0, channels % 2, 0, 0))",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_40": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp(x, min=-15.0, max=15.0)",
                            "Call"
                        ],
                        [
                            "x * m",
                            "BinOp"
                        ],
                        [
                            "torch.randn(size)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.dot_product_attention(Q, K, V, mask=query_mask)",
                            "Call"
                        ],
                        [
                            "gate * nonlinear + (1 - gate) * x",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_62": {
                "variable": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_true_onehot.squeeze(-1) * y_pred",
                            "BinOp"
                        ],
                        [
                            "torch.sum(P, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gt_63": {
                "variable": {
                    "value": "gt_zero",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_true_onehot.squeeze(-1) * y_pred",
                            "BinOp"
                        ],
                        [
                            "torch.sum(P, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "arange_79": {
                "variable": {
                    "value": "position",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size(1)",
                            "Call"
                        ],
                        [
                            "length",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_85": {
                "variable": {
                    "value": "signal",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.sin(scaled_time), torch.cos(scaled_time)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ZeroPad2d_86": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, channels % 2, 0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Parameter_96": {
                "variable": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(input_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_97": {
                "variable": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(input_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_104": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x.var(dim=1, keepdim=True) + self.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Embedding_165": {
                "variable": {
                    "value": "self.embedding_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_172": {
                "variable": {
                    "value": "self.embedding_layer.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "init_embedding_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embedding_init()",
                            "Call"
                        ],
                        [
                            "init_embedding_matrix.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_187": {
                "variable": {
                    "value": "word_embedding_init",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "word_embedding_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.uniform(low=-0.05, high=0.05, size=(self.vocab_size, self.embedding_size))",
                            "Call"
                        ],
                        [
                            "embedding_initr.word_embedding_initialize(self.id2word, dim_size=self.embedding_size, oov_init=self.embedding_oov_init)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(word_embedding_init).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "ne_191": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp(x, min=-15.0, max=15.0)",
                            "Call"
                        ],
                        [
                            "x * m",
                            "BinOp"
                        ],
                        [
                            "torch.randn(size)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.dot_product_attention(Q, K, V, mask=query_mask)",
                            "Call"
                        ],
                        [
                            "gate * nonlinear + (1 - gate) * x",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_198": {
                "variable": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embedding_layer(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(embeddings, p=self.dropout_rate, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_210": {
                "variable": {
                    "value": "self.weight_mu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.empty(out_features, in_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_211": {
                "variable": {
                    "value": "self.weight_sigma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.empty(out_features, in_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_213": {
                "variable": {
                    "value": "self.bias_mu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.empty(out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_214": {
                "variable": {
                    "value": "self.bias_sigma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.empty(out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_228": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "size",
                            "Method Argument"
                        ],
                        [
                            "size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv1d_253": {
                "variable": {
                    "value": "self.depthwise_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "k",
                            "Method Argument"
                        ],
                        [
                            "k",
                            "Method Argument"
                        ],
                        [
                            "k",
                            "Method Argument"
                        ]
                    ]
                },
                "groups": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "k // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_254": {
                "variable": {
                    "value": "self.pointwise_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.empty(1)",
                            "Call"
                        ],
                        [
                            "torch.empty(1)",
                            "Call"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_258": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.pointwise_conv(self.depthwise_conv(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_269": {
                "variable": {
                    "value": "self.key_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "block_hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "block_hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_270": {
                "variable": {
                    "value": "self.value_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "block_hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "block_hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_271": {
                "variable": {
                    "value": "self.query_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "block_hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "block_hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "empty_272": {
                "variable": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_274": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.empty(1)",
                            "Call"
                        ],
                        [
                            "torch.empty(1)",
                            "Call"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_303": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "k.permute(0, 1, 3, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_312": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "masked_softmax(logits, mask, axis=-1)",
                            "Call"
                        ],
                        [
                            "F.dropout(weights, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_348": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[DepthwiseSeparableConv(ch_num, ch_num, k) for _ in range(conv_num)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_350": {
                "variable": {
                    "value": "self.FFN_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "ch_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ch_num",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "ch_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ch_num",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_351": {
                "variable": {
                    "value": "self.FFN_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "ch_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ch_num",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "ch_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ch_num",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ModuleList_352": {
                "variable": {
                    "value": "self.norm_C",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[torch.nn.LayerNorm(block_hidden_dim) for _ in range(conv_num)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "LayerNorm_353": {
                "variable": {
                    "value": "self.norm_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "block_hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LayerNorm_354": {
                "variable": {
                    "value": "self.norm_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "block_hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dropout_372": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "PosEncoder(x)",
                            "Call"
                        ],
                        [
                            "self.norm_C[i](out)",
                            "Call"
                        ],
                        [
                            "self.norm_1(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.self_att(out, self_att_mask, out, out)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "self.norm_2(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.FFN_1(out)",
                            "Call"
                        ],
                        [
                            "torch.relu(out)",
                            "Call"
                        ],
                        [
                            "self.FFN_2(out)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "conv(out)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "torch.cat([C, A, torch.mul(C, A), torch.mul(C, B)], dim=2)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_380": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "PosEncoder(x)",
                            "Call"
                        ],
                        [
                            "self.norm_C[i](out)",
                            "Call"
                        ],
                        [
                            "self.norm_1(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.self_att(out, self_att_mask, out, out)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "self.norm_2(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.FFN_1(out)",
                            "Call"
                        ],
                        [
                            "torch.relu(out)",
                            "Call"
                        ],
                        [
                            "self.FFN_2(out)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "conv(out)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "torch.cat([C, A, torch.mul(C, A), torch.mul(C, B)], dim=2)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_383": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "PosEncoder(x)",
                            "Call"
                        ],
                        [
                            "self.norm_C[i](out)",
                            "Call"
                        ],
                        [
                            "self.norm_1(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.self_att(out, self_att_mask, out, out)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "self.norm_2(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.FFN_1(out)",
                            "Call"
                        ],
                        [
                            "torch.relu(out)",
                            "Call"
                        ],
                        [
                            "self.FFN_2(out)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "conv(out)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "torch.cat([C, A, torch.mul(C, A), torch.mul(C, B)], dim=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_405": {
                "variable": {
                    "value": "w4C",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "block_hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_406": {
                "variable": {
                    "value": "w4Q",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "block_hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_407": {
                "variable": {
                    "value": "w4mlu",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "block_hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_411": {
                "variable": {
                    "value": "self.w4C",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "w4C",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.empty(block_hidden_dim, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_412": {
                "variable": {
                    "value": "self.w4Q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "w4Q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.empty(block_hidden_dim, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_413": {
                "variable": {
                    "value": "self.w4mlu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "w4mlu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.empty(1, 1, block_hidden_dim)",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_415": {
                "variable": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_417": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.empty(1)",
                            "Call"
                        ],
                        [
                            "torch.empty(1)",
                            "Call"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "bmm_425": {
                "variable": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "S1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "masked_softmax(S, Qmask, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "Q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.split_last_dim(query, self.n_head)",
                            "Call"
                        ],
                        [
                            "Q * key_depth_per_head ** (-0.5)",
                            "BinOp"
                        ],
                        [
                            "F.dropout(Q, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "Q",
                            "Method Argument"
                        ],
                        [
                            "Q",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "bmm_426": {
                "input": {
                    "value": "S1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "masked_softmax(S, Qmask, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "S2.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_427": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[C, A, torch.mul(C, A), torch.mul(C, B)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_431": {
                "variable": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.dropout(C, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "C",
                            "Method Argument"
                        ],
                        [
                            "C",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_432": {
                "variable": {
                    "value": "Q",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.split_last_dim(query, self.n_head)",
                            "Call"
                        ],
                        [
                            "Q * key_depth_per_head ** (-0.5)",
                            "BinOp"
                        ],
                        [
                            "F.dropout(Q, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "Q",
                            "Method Argument"
                        ],
                        [
                            "Q",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_435": {
                "variable": {
                    "value": "subres0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.dropout(C, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "C",
                            "Method Argument"
                        ],
                        [
                            "C",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "self.w4C",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_436": {
                "variable": {
                    "value": "subres1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.split_last_dim(query, self.n_head)",
                            "Call"
                        ],
                        [
                            "Q * key_depth_per_head ** (-0.5)",
                            "BinOp"
                        ],
                        [
                            "F.dropout(Q, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "Q",
                            "Method Argument"
                        ],
                        [
                            "Q",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "self.w4Q",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_436": {
                "variable": {
                    "value": "subres1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_437": {
                "variable": {
                    "value": "subres2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "C * self.w4mlu",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "Q.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_457": {
                "variable": {
                    "value": "X_concat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[M1, M2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "relu_458": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.w_1(X_concat)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_459": {
                "variable": {
                    "value": "X_advantage",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.w_1_advantage(X_concat)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_485": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[torch.nn.Linear(size, size) for _ in range(self.n)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_486": {
                "variable": {
                    "value": "self.gate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[torch.nn.Linear(size, size) for _ in range(self.n)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Conv2d_501": {
                "variable": {
                    "value": "self.conv2d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "char_emb_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "char_emb_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "block_hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, 5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_504": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "word_emb_dim + block_hidden_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "block_hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_512": {
                "variable": {
                    "value": "char_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "char_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "char_emb.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "self.conv2d(char_emb)",
                            "Call"
                        ],
                        [
                            "char_emb * mask.unsqueeze(1).unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "F.relu(char_emb)",
                            "Call"
                        ],
                        [
                            "torch.max(char_emb, dim=3)",
                            "Call"
                        ],
                        [
                            "char_emb.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "char_emb",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_513": {
                "variable": {
                    "value": "(char_emb, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "char_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "char_emb.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "self.conv2d(char_emb)",
                            "Call"
                        ],
                        [
                            "char_emb * mask.unsqueeze(1).unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "F.relu(char_emb)",
                            "Call"
                        ],
                        [
                            "torch.max(char_emb, dim=3)",
                            "Call"
                        ],
                        [
                            "char_emb.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "char_emb",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_515": {
                "variable": {
                    "value": "emb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[char_emb, word_emb]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_38": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp(x, min=-15.0, max=15.0)",
                            "Call"
                        ],
                        [
                            "x * m",
                            "BinOp"
                        ],
                        [
                            "torch.randn(size)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.dot_product_attention(Q, K, V, mask=query_mask)",
                            "Call"
                        ],
                        [
                            "gate * nonlinear + (1 - gate) * x",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "le_64": {
                "input": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_true_onehot.squeeze(-1) * y_pred",
                            "BinOp"
                        ],
                        [
                            "torch.sum(P, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "log_65": {
                "input": {
                    "value": "P + epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_82": {
                "input": {
                    "value": "torch.arange(num_timescales).type(torch.float32) * -log_timescale_increment",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_313": {
                "input": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "masked_softmax(logits, mask, axis=-1)",
                            "Call"
                        ],
                        [
                            "F.dropout(weights, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_452": {
                "variable": {
                    "value": "self.w_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "block_hidden_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_453": {
                "variable": {
                    "value": "self.w_1_advantage",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "block_hidden_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "block_hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_454": {
                "variable": {
                    "value": "self.w_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "block_hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_491": {
                "variable": {
                    "value": "gate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.gate[i](x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_493": {
                "variable": {
                    "value": "nonlinear",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "nonlinear",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.linear[i](x)",
                            "Call"
                        ],
                        [
                            "F.dropout(nonlinear, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_26": {
                "input": {
                    "value": "e_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(x - torch.max(x, dim=axis, keepdim=True)[0])",
                            "Call"
                        ],
                        [
                            "e_x * m",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sin_85": {
                "input": {
                    "value": "scaled_time",
                    "type": "variable",
                    "possible_values": [
                        [
                            "position.unsqueeze(1) * inv_timescales.unsqueeze(0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cos_85": {
                "input": {
                    "value": "scaled_time",
                    "type": "variable",
                    "possible_values": [
                        [
                            "position.unsqueeze(1) * inv_timescales.unsqueeze(0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_96": {
                "*size": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_97": {
                "*size": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "empty_210": {
                "*size": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_features",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "empty_211": {
                "*size": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_features",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "empty_212": {
                "*size": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_features",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "empty_213": {
                "*size": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "empty_214": {
                "*size": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "empty_215": {
                "*size": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "linear_247": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight_mu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias_mu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_365": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "PosEncoder(x)",
                            "Call"
                        ],
                        [
                            "self.norm_C[i](out)",
                            "Call"
                        ],
                        [
                            "self.norm_1(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.self_att(out, self_att_mask, out, out)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "self.norm_2(out)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.FFN_1(out)",
                            "Call"
                        ],
                        [
                            "torch.relu(out)",
                            "Call"
                        ],
                        [
                            "self.FFN_2(out)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "conv(out)",
                            "Call"
                        ],
                        [
                            "out * mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "self.layer_dropout(out, res, self.dropout * float(l) / total_layers)",
                            "Call"
                        ],
                        [
                            "torch.cat([C, A, torch.mul(C, A), torch.mul(C, B)], dim=2)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_23": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp(x, min=-15.0, max=15.0)",
                            "Call"
                        ],
                        [
                            "x * m",
                            "BinOp"
                        ],
                        [
                            "torch.randn(size)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.dot_product_attention(Q, K, V, mask=query_mask)",
                            "Call"
                        ],
                        [
                            "gate * nonlinear + (1 - gate) * x",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "arange_83": {
                "start": {
                    "value": "num_timescales",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channels // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "linear_243": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight_mu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias_mu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_245": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight_mu + self.weight_sigma * self.weight_epsilon",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias_mu + self.bias_sigma * self.bias_epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "LayerNorm_352": {
                "normalized_shape": {
                    "value": "block_hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "block_hidden_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "empty_392": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mul_427": {
                "input": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.dropout(C, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "C",
                            "Method Argument"
                        ],
                        [
                            "C",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(torch.bmm(S1, S2.transpose(1, 2)), C)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_485": {
                "in_features": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "size",
                            "Method Argument"
                        ],
                        [
                            "size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "size",
                            "Method Argument"
                        ],
                        [
                            "size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_486": {
                "in_features": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "size",
                            "Method Argument"
                        ],
                        [
                            "size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "size",
                            "Method Argument"
                        ],
                        [
                            "size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dropout_396": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "model.py": {
        "torch": {
            "ModuleList_101": {
                "variable": {
                    "value": "self.encoders",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[EncoderBlock(conv_num=self.encoder_conv_num, ch_num=self.block_hidden_dim, k=7, block_hidden_dim=self.block_hidden_dim, n_head=self.n_heads, dropout=self.block_dropout) for _ in range(self.encoder_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_105": {
                "variable": {
                    "value": "self.context_question_attention_resizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.block_hidden_dim * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.block_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_107": {
                "variable": {
                    "value": "self.aggregators",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[EncoderBlock(conv_num=self.aggregation_conv_num, ch_num=self.block_hidden_dim, k=5, block_hidden_dim=self.block_hidden_dim, n_head=self.n_heads, dropout=self.block_dropout) for _ in range(self.aggregation_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_129": {
                "variable": {
                    "value": "self.action_scorers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "action_scorers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "dropout_148": {
                "variable": {
                    "value": "M0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "M0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.context_question_attention_resizer(X)",
                            "Call"
                        ],
                        [
                            "F.dropout(M0, p=self.block_dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.aggregators[i](M0, doc_mask, square_mask, i * (self.aggregation_conv_num + 2) + 1, self.aggregation_layers)",
                            "Call"
                        ],
                        [
                            "matching_representation_sequence",
                            "variable"
                        ],
                        [
                            "self.aggregators[i](M0, doc_mask, square_mask, i * (self.aggregation_conv_num + 2) + 1, self.aggregation_layers)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.block_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bmm_149": {
                "variable": {
                    "value": "square_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "doc_mask.unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "doc_mask.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_158": {
                "variable": {
                    "value": "square_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask.unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "mask.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_166": {
                "variable": {
                    "value": "(state_representation, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "state_representation_sequence",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state_representation_sequence",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_168": {
                "variable": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.action_scorer_shared_linear(state_representation)",
                            "Call"
                        ],
                        [
                            "torch.relu(hidden)",
                            "Call"
                        ],
                        [
                            "self.question_answerer_output_1(z)",
                            "Call"
                        ],
                        [
                            "torch.relu(hidden)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_195": {
                "variable": {
                    "value": "square_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "doc_mask.unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "doc_mask.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_207": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_distribution.view(pred_distribution.size(0), 1, pred_distribution.size(1))",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "M2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "M0",
                            "variable"
                        ]
                    ]
                }
            },
            "relu_210": {
                "variable": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.action_scorer_shared_linear(state_representation)",
                            "Call"
                        ],
                        [
                            "torch.relu(hidden)",
                            "Call"
                        ],
                        [
                            "self.question_answerer_output_1(z)",
                            "Call"
                        ],
                        [
                            "torch.relu(hidden)",
                            "Call"
                        ]
                    ]
                }
            },
            "ModuleList_135": {
                "variable": {
                    "value": "self.action_scorers_advantage",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "action_scorers_advantage",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "zeros_like_212": {
                "variable": {
                    "value": "replay_info[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "replay_info[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    }
}