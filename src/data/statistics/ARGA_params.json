{
    "ARGA/arga/clustering.py": {
        "sklearn": {
            "KMeans_50": {
                "variable": {
                    "value": "kmeans",
                    "type": "variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "self.n_clusters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "Session_41": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "ARGA/arga/metrics.py": {
        "sklearn": {
            "roc_auc_score_37": {
                "variable": {
                    "value": "roc_score",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.hstack([np.ones(len(preds)), np.zeros(len(preds))])",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "preds_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.hstack([preds, preds_neg])",
                            "Call"
                        ]
                    ]
                }
            },
            "average_precision_score_38": {
                "variable": {
                    "value": "ap_score",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.hstack([np.ones(len(preds)), np.zeros(len(preds))])",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "preds_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.hstack([preds, preds_neg])",
                            "Call"
                        ]
                    ]
                }
            },
            "accuracy_score_84": {
                "variable": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "self.true_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "new_predict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros(len(self.pred_label))",
                            "Call"
                        ]
                    ]
                }
            },
            "f1_score_85": {
                "variable": {
                    "value": "f1_macro",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "self.true_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "new_predict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros(len(self.pred_label))",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "precision_score_86": {
                "variable": {
                    "value": "precision_macro",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "self.true_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "new_predict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros(len(self.pred_label))",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "recall_score_87": {
                "variable": {
                    "value": "recall_macro",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "self.true_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "new_predict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros(len(self.pred_label))",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "f1_score_88": {
                "variable": {
                    "value": "f1_micro",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "self.true_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "new_predict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros(len(self.pred_label))",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "micro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "precision_score_89": {
                "variable": {
                    "value": "precision_micro",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "self.true_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "new_predict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros(len(self.pred_label))",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "micro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "recall_score_90": {
                "variable": {
                    "value": "recall_micro",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "self.true_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "new_predict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros(len(self.pred_label))",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "micro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "normalized_mutual_info_score_94": {
                "variable": {
                    "value": "nmi",
                    "type": "variable",
                    "possible_values": []
                },
                "labels_true": {
                    "value": "self.true_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels_pred": {
                    "value": "self.pred_label",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "adjusted_rand_score_95": {
                "variable": {
                    "value": "adjscore",
                    "type": "variable",
                    "possible_values": []
                },
                "labels_true": {
                    "value": "self.true_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels_pred": {
                    "value": "self.pred_label",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "ARGA/arga/constructor.py": {
        "tensorflow": {
            "sparse_placeholder_14": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sparse_placeholder_15": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sparse_placeholder_16": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_with_default_17": {
                "input": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_18": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[adj.shape[0], FLAGS.hidden2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "real_distribution",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_83": {
                "tensor": {
                    "value": "tf.sparse_tensor_to_dense(placeholders['adj_orig'], validate_indices=False)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_91": {
                "tensor": {
                    "value": "tf.sparse_tensor_to_dense(placeholders['adj_orig'], validate_indices=False)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "ARGA/arga/initializations.py": {
        "tensorflow": {
            "Variable_11": {
                "initial_value": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform([input_dim, output_dim], minval=-init_range, maxval=init_range, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "''",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "ARGA/arga/layers.py": {
        "tensorflow": {
            "cast_28": {
                "variable": {
                    "value": "dropout_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.floor(random_tensor)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_79": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(self.adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "dropout_sparse(x, 1 - self.dropout, self.features_nonzero)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(self.adj, x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "1 - self.dropout",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_80": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(self.adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "dropout_sparse(x, 1 - self.dropout, self.features_nonzero)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(self.adj, x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.vars['weights']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "dropout_115": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(inputs, 1 - self.dropout)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "1 - self.dropout",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "transpose_116": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(inputs, 1 - self.dropout)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_117": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(inputs, 1 - self.dropout)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(self.adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "dropout_sparse(x, 1 - self.dropout, self.features_nonzero)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(self.adj, x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_118": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(self.adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "dropout_sparse(x, 1 - self.dropout, self.features_nonzero)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(self.adj, x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "floor_28": {
                "x": {
                    "value": "random_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "keep_prob",
                            "variable"
                        ],
                        [
                            "random_tensor + tf.random_uniform(noise_shape)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "name_scope_62": {
                "name": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_71": {
                "name_or_scope": {
                    "value": "self.name + '_vars'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_90": {
                "name_or_scope": {
                    "value": "self.name + '_vars'",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "ARGA/arga/link_prediction.py": {
        "tensorflow": {
            "Session_36": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "ARGA/arga/model.py": {
        "tensorflow": {
            "get_collection_33": {
                "variable": {
                    "value": "variables",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_146": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n1, n2]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(mean=0.0, stddev=0.01)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_148": {
                "variable": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n2]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_149": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(x, weights)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('bias', shape=[n2], initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "matmul",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_143": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.get('name')",
                            "Call"
                        ],
                        [
                            "self.__class__.__name__.lower()",
                            "Call"
                        ]
                    ]
                },
                "reuse": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "set_random_seed_145": {
                "seed": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_166": {
                "variable": {
                    "value": "dc_den1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "dense(inputs, FLAGS.hidden2, FLAGS.hidden3, name='dc_den1')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_167": {
                "variable": {
                    "value": "dc_den2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "dense(dc_den1, FLAGS.hidden3, FLAGS.hidden1, name='dc_den2')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_31": {
                "name_or_scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_56": {
                "name_or_scope": {
                    "value": "Encoder",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "variable_scope_100": {
                "name_or_scope": {
                    "value": "Encoder",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_149": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('weights', shape=[n1, n2], initializer=tf.random_normal_initializer(mean=0.0, stddev=0.01))",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_161": {
                "name_or_scope": {
                    "value": "Discriminator",
                    "type": "str",
                    "possible_values": []
                }
            },
            "set_random_seed_165": {
                "seed": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_172": {
                "input": {
                    "value": "input_layer",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "random_normal_initializer_147": {
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_148": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "get_variable_scope_163": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "exp_126": {
                "x": {
                    "value": "self.z_log_std",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "ARGA/arga/optimizer.py": {
        "tensorflow": {
            "reduce_mean_15": {
                "variable": {
                    "value": "self.dc_loss_real",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(labels=tf.ones_like(self.real), logits=self.real, name='dclreal')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_18": {
                "variable": {
                    "value": "self.dc_loss_fake",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(labels=tf.zeros_like(d_fake), logits=d_fake, name='dcfake')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_23": {
                "variable": {
                    "value": "generator_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(labels=tf.ones_like(d_fake), logits=d_fake, name='gl')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_30": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "FLAGS.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "trainable_variables_32": {
                "variable": {
                    "value": "all_variables",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_mean_56": {
                "variable": {
                    "value": "dc_loss_real",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(labels=tf.ones_like(d_real), logits=d_real)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_58": {
                "variable": {
                    "value": "dc_loss_fake",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(labels=tf.zeros_like(d_fake), logits=d_fake)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_63": {
                "variable": {
                    "value": "self.generator_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(labels=tf.ones_like(d_fake), logits=d_fake)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_68": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "FLAGS.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "trainable_variables_70": {
                "variable": {
                    "value": "all_variables",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdamOptimizer_84": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "FLAGS.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_38": {
                "variable": {
                    "value": "self.discriminator_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "FLAGS.discriminator_learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "beta1": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "name": {
                    "value": "adam1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "AdamOptimizer_41": {
                "variable": {
                    "value": "self.generator_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "FLAGS.discriminator_learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "beta1": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "name": {
                    "value": "adam2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "AdamOptimizer_76": {
                "variable": {
                    "value": "self.discriminator_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "FLAGS.discriminator_learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "beta1": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "name": {
                    "value": "adam1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "AdamOptimizer_79": {
                "variable": {
                    "value": "self.generator_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "FLAGS.discriminator_learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "beta1": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "name": {
                    "value": "adam2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_16": {
                "labels": {
                    "value": "tf.ones_like(self.real)",
                    "type": "Call",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.real",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "dclreal",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_19": {
                "labels": {
                    "value": "tf.zeros_like(d_fake)",
                    "type": "Call",
                    "possible_values": []
                },
                "logits": {
                    "value": "d_fake",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "dcfake",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_24": {
                "labels": {
                    "value": "tf.ones_like(d_fake)",
                    "type": "Call",
                    "possible_values": []
                },
                "logits": {
                    "value": "d_fake",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "gl",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_28": {
                "input_tensor": {
                    "value": "tf.nn.weighted_cross_entropy_with_logits(logits=preds_sub, targets=labels_sub, pos_weight=pos_weight)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_37": {
                "name_or_scope": {
                    "value": "tf.get_variable_scope()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_57": {
                "labels": {
                    "value": "tf.ones_like(d_real)",
                    "type": "Call",
                    "possible_values": []
                },
                "logits": {
                    "value": "d_real",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_59": {
                "labels": {
                    "value": "tf.zeros_like(d_fake)",
                    "type": "Call",
                    "possible_values": []
                },
                "logits": {
                    "value": "d_fake",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_64": {
                "labels": {
                    "value": "tf.ones_like(d_fake)",
                    "type": "Call",
                    "possible_values": []
                },
                "logits": {
                    "value": "d_fake",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_mean_66": {
                "input_tensor": {
                    "value": "tf.nn.weighted_cross_entropy_with_logits(logits=preds_sub, targets=labels_sub, pos_weight=pos_weight)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_75": {
                "name_or_scope": {
                    "value": "tf.get_variable_scope()",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_mean_83": {
                "input_tensor": {
                    "value": "tf.nn.weighted_cross_entropy_with_logits(logits=preds_sub, targets=labels_sub, pos_weight=pos_weight)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_88": {
                "input_tensor": {
                    "value": "tf.reduce_sum(1 + 2 * model.z_log_std - tf.square(model.z_mean) - tf.square(tf.exp(model.z_log_std)), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "weighted_cross_entropy_with_logits_28": {
                "logits": {
                    "value": "preds_sub",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds",
                            "variable"
                        ],
                        [
                            "preds",
                            "variable"
                        ]
                    ]
                },
                "targets": {
                    "value": "labels_sub",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels",
                            "variable"
                        ],
                        [
                            "labels",
                            "variable"
                        ]
                    ]
                },
                "pos_weight": {
                    "value": "pos_weight",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "get_variable_scope_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "weighted_cross_entropy_with_logits_67": {
                "logits": {
                    "value": "preds_sub",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds",
                            "variable"
                        ],
                        [
                            "preds",
                            "variable"
                        ]
                    ]
                },
                "targets": {
                    "value": "labels_sub",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels",
                            "variable"
                        ],
                        [
                            "labels",
                            "variable"
                        ]
                    ]
                },
                "pos_weight": {
                    "value": "pos_weight",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "get_variable_scope_75": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "weighted_cross_entropy_with_logits_83": {
                "logits": {
                    "value": "preds_sub",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds",
                            "variable"
                        ],
                        [
                            "preds",
                            "variable"
                        ]
                    ]
                },
                "targets": {
                    "value": "labels_sub",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels",
                            "variable"
                        ],
                        [
                            "labels",
                            "variable"
                        ]
                    ]
                },
                "pos_weight": {
                    "value": "pos_weight",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_sum_88": {
                "input_tensor": {
                    "value": "1 + 2 * model.z_log_std - tf.square(model.z_mean) - tf.square(tf.exp(model.z_log_std))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_like_16": {
                "input": {
                    "value": "self.real",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_19": {
                "input": {
                    "value": "d_fake",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_like_24": {
                "input": {
                    "value": "d_fake",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_like_57": {
                "input": {
                    "value": "d_real",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_59": {
                "input": {
                    "value": "d_fake",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_like_64": {
                "input": {
                    "value": "d_fake",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "square_89": {
                "x": {
                    "value": "tf.exp(model.z_log_std)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_88": {
                "x": {
                    "value": "model.z_mean",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_89": {
                "x": {
                    "value": "model.z_log_std",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "ARGA/arga/settings.py": {
        "tensorflow": {
            "set_random_seed_31": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "7",
                            "int"
                        ]
                    ]
                }
            }
        }
    }
}