{
    "data.py": {
        "torch": {}
    },
    "embed_regularize.py": {
        "torch": {
            "embedding_18": {
                "variable": {
                    "value": "X",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "words",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.random.random_integers(low=0, high=V - 1, size=(batch_size, bptt))",
                            "Call"
                        ],
                        [
                            "torch.LongTensor(words)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "masked_embed_weight",
                    "type": "Name",
                    "possible_values": [
                        [
                            "mask * embed.weight",
                            "BinOp"
                        ],
                        [
                            "embed.weight",
                            "Attribute"
                        ],
                        [
                            "scale.expand_as(masked_embed_weight) * masked_embed_weight",
                            "BinOp"
                        ]
                    ]
                },
                "padding_idx": {
                    "value": "padding_idx",
                    "type": "Name",
                    "possible_values": [
                        [
                            "embed.padding_idx",
                            "Attribute"
                        ],
                        [
                            "-1",
                            "UnaryOp"
                        ]
                    ]
                },
                "max_norm": {
                    "value": "embed.max_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "norm_type": {
                    "value": "embed.norm_type",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_grad_by_freq": {
                    "value": "embed.scale_grad_by_freq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sparse": {
                    "value": "embed.sparse",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_30": {
                "variable": {
                    "value": "embed",
                    "type": "Name",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "V",
                    "type": "Name",
                    "possible_values": [
                        [
                            "50",
                            "Constant"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "h",
                    "type": "Name",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                }
            }
        }
    },
    "finetune.py": {
        "torch": {
            "CrossEntropyLoss_98": {
                "variable": {
                    "value": "criterion",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_67": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_177": {
                "variable": {
                    "value": "model",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "f",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "ASGD_187": {
                "variable": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "t0": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "lambd": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.wdecay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_227": {
                "variable": {
                    "value": "model",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "f",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "manual_seed_72": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ASGD_217": {
                "variable": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "t0": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "lambd": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.wdecay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_206": {
                "obj": {
                    "value": "model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model.RNNModel(args.model, ntokens, args.emsize, args.nhid, args.nlayers, args.dropout, args.dropouth, args.dropouti, args.dropoute, args.wdrop, args.tied)",
                            "Call"
                        ],
                        [
                            "torch.load(f)",
                            "Call"
                        ],
                        [
                            "torch.load(f)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "f",
                    "type": "Name",
                    "possible_values": []
                }
            }
        }
    },
    "generate.py": {
        "torch": {
            "manual_seed_39": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_50": {
                "variable": {
                    "value": "model",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "f",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "rand_63": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mul_63": {
                "input": {
                    "value": "ntokens",
                    "type": "Name",
                    "possible_values": [
                        [
                            "len(corpus.dictionary)",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_44": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multinomial_71": {
                "input": {
                    "value": "word_weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "output.squeeze().data.div(args.temperature).exp().cpu()",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "locked_dropout.py": {
        "torch": {}
    },
    "main.py": {
        "torch": {
            "manual_seed_76": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_77": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_101": {
                "variable": {
                    "value": "corpus",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "fn",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'corpus.{}.data'.format(hashlib.md5(args.data.encode()).hexdigest())",
                            "Call"
                        ]
                    ]
                }
            },
            "load_94": {
                "variable": {
                    "value": "(model, criterion, optimizer)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "f",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "save_105": {
                "obj": {
                    "value": "corpus",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.load(fn)",
                            "Call"
                        ],
                        [
                            "data.Corpus(args.data)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "fn",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'corpus.{}.data'.format(hashlib.md5(args.data.encode()).hexdigest())",
                            "Call"
                        ]
                    ]
                }
            },
            "SGD_341": {
                "variable": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "Name",
                    "possible_values": [
                        [
                            "list(model.parameters()) + list(criterion.parameters())",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Adam_343": {
                "variable": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "Name",
                    "possible_values": [
                        [
                            "list(model.parameters()) + list(criterion.parameters())",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.wdecay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_81": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_89": {
                "obj": {
                    "value": "[model, criterion, optimizer]",
                    "type": "List",
                    "possible_values": []
                },
                "f": {
                    "value": "f",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "clip_grad_norm__277": {
                "parameters": {
                    "value": "params",
                    "type": "Name",
                    "possible_values": [
                        [
                            "list(model.parameters()) + list(criterion.parameters())",
                            "BinOp"
                        ]
                    ]
                },
                "max_norm": {
                    "value": "args.clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "model.py": {
        "torch": {
            "Dropout_14": {
                "variable": {
                    "value": "self.idrop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropouti",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_15": {
                "variable": {
                    "value": "self.hdrop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropouth",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_16": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Embedding_17": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "ntoken",
                    "type": "Name",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "ninp",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "ModuleList_34": {
                "variable": {
                    "value": "self.rnns",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.rnns",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_35": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nhid",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "ntoken",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "LSTM_20": {
                "*args": {
                    "value": "ninp if l == 0 else nhid",
                    "type": null,
                    "possible_values": []
                },
                "dropout": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "GRU_24": {
                "*args": {
                    "value": "ninp if l == 0 else nhid",
                    "type": null,
                    "possible_values": []
                },
                "dropout": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "pointer.py": {
        "torch": {
            "CrossEntropyLoss_50": {
                "variable": {
                    "value": "criterion",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_93": {
                "variable": {
                    "value": "softmax_output_flat",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "output_flat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "output.view(-1, ntokens)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_118": {
                "variable": {
                    "value": "model",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "f",
                    "type": "Name",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_120": {
                "variable": {
                    "value": "model",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "f",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "from_numpy_55": {
                "ndarray": {
                    "value": "a",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros((1, size), np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_77": {
                "tensors": {
                    "value": "[one_hot(t.data[0], ntokens) for t in targets]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_79": {
                "tensors": {
                    "value": "[pointer_history, Variable(rnn_out.data)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mv_99": {
                "variable": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "valid_pointer_history",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pointer_history[start_idx + idx - window:start_idx + idx]",
                            "Subscript"
                        ]
                    ]
                },
                "vec": {
                    "value": "rnn_out[idx]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "softmax_101": {
                "variable": {
                    "value": "ptr_attn",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "theta * logits",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_107": {
                "input": {
                    "value": "target_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "p[targets[idx].data]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "splitcross.py": {
        "torch": {
            "Embedding_183": {
                "variable": {
                    "value": "embed",
                    "type": "Name",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "V",
                    "type": "Name",
                    "possible_values": [
                        [
                            "8",
                            "Constant"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "H",
                    "type": "Name",
                    "possible_values": [
                        [
                            "10",
                            "Constant"
                        ]
                    ]
                }
            },
            "Parameter_185": {
                "variable": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(V)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "SGD_186": {
                "variable": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "list(embed.parameters()) + list(crit.parameters())",
                    "type": "BinOp",
                    "possible_values": []
                },
                "lr": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_129": {
                "variable": {
                    "value": "combo",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[split_hiddens[i] for i in range(self.nsplits) if len(split_hiddens[i])]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "linear_131": {
                "variable": {
                    "value": "all_head_res",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "combo",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat([split_hiddens[i] for i in range(self.nsplits) if len(split_hiddens[i])])",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "head_weight",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None if end - start == 0 else weight[start:end]",
                            "IfExp"
                        ],
                        [
                            "self.tail_vectors if head_weight is None else torch.cat([head_weight, self.tail_vectors])",
                            "IfExp"
                        ],
                        [
                            "None if end - start == 0 else weight[start:end]",
                            "IfExp"
                        ],
                        [
                            "self.tail_vectors if head_weight is None else torch.cat([head_weight, self.tail_vectors])",
                            "IfExp"
                        ]
                    ]
                },
                "bias": {
                    "value": "head_bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None if end - start == 0 else bias[start:end]",
                            "IfExp"
                        ],
                        [
                            "self.tail_bias if head_bias is None else torch.cat([head_bias, self.tail_bias])",
                            "IfExp"
                        ],
                        [
                            "None if end - start == 0 else bias[start:end]",
                            "IfExp"
                        ],
                        [
                            "self.tail_bias if head_bias is None else torch.cat([head_bias, self.tail_bias])",
                            "IfExp"
                        ]
                    ]
                }
            },
            "log_softmax_132": {
                "variable": {
                    "value": "softmaxed_all_head_res",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "all_head_res",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.nn.functional.linear(combo, head_weight, bias=head_bias)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "manual_seed_174": {
                "seed": {
                    "value": "42",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "is_available_175": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_23": {
                "variable": {
                    "value": "self.tail_vectors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(self.nsplits - 1, hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_24": {
                "variable": {
                    "value": "self.tail_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(self.nsplits - 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linear_39": {
                "variable": {
                    "value": "head_res",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "hiddens",
                    "type": "Name",
                    "possible_values": [
                        [
                            "hiddens.view(-1, hiddens.size(2))",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "head_weight",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None if end - start == 0 else weight[start:end]",
                            "IfExp"
                        ],
                        [
                            "self.tail_vectors if head_weight is None else torch.cat([head_weight, self.tail_vectors])",
                            "IfExp"
                        ],
                        [
                            "None if end - start == 0 else weight[start:end]",
                            "IfExp"
                        ],
                        [
                            "self.tail_vectors if head_weight is None else torch.cat([head_weight, self.tail_vectors])",
                            "IfExp"
                        ]
                    ]
                },
                "bias": {
                    "value": "head_bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None if end - start == 0 else bias[start:end]",
                            "IfExp"
                        ],
                        [
                            "self.tail_bias if head_bias is None else torch.cat([head_bias, self.tail_bias])",
                            "IfExp"
                        ],
                        [
                            "None if end - start == 0 else bias[start:end]",
                            "IfExp"
                        ],
                        [
                            "self.tail_bias if head_bias is None else torch.cat([head_bias, self.tail_bias])",
                            "IfExp"
                        ]
                    ]
                }
            },
            "log_softmax_40": {
                "variable": {
                    "value": "softmaxed_head_res",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "head_res",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.nn.functional.linear(hiddens, head_weight, bias=head_bias)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "manual_seed_176": {
                "seed": {
                    "value": "42",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_185": {
                "*size": {
                    "value": "V",
                    "type": "Name",
                    "possible_values": [
                        [
                            "8",
                            "Constant"
                        ]
                    ]
                }
            },
            "linear_60": {
                "variable": {
                    "value": "tail_res",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "hiddens",
                    "type": "Name",
                    "possible_values": [
                        [
                            "hiddens.view(-1, hiddens.size(2))",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "tail_weight",
                    "type": "Name",
                    "possible_values": [
                        [
                            "weight[start:end]",
                            "Subscript"
                        ],
                        [
                            "weight[start:end]",
                            "Subscript"
                        ]
                    ]
                },
                "bias": {
                    "value": "tail_bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "bias[start:end]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "log_softmax_65": {
                "variable": {
                    "value": "tail_entropy",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "tail_res",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.nn.functional.linear(hiddens, tail_weight, bias=tail_bias)",
                            "Call"
                        ],
                        [
                            "self.logprob(weight, bias, split_hiddens[idx], splits=[idx], softmaxed_head_res=softmaxed_head_res)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_69": {
                "tensors": {
                    "value": "results",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gather_163": {
                "variable": {
                    "value": "tail_entropy",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.nn.functional.log_softmax(tail_res, dim=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "indices",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(split_targets[idx] - self.splits[idx]).view(-1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_163": {
                "variable": {
                    "value": "tail_entropy",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_23": {
                "*size": {
                    "value": "self.nsplits - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "hidden_size",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "zeros_24": {
                "*size": {
                    "value": "self.nsplits - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "masked_select_102": {
                "input": {
                    "value": "targets",
                    "type": "Name",
                    "possible_values": []
                },
                "mask": {
                    "value": "tmp_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "mask == idx",
                            "Compare"
                        ]
                    ]
                }
            },
            "cat_124": {
                "tensors": {
                    "value": "[head_weight, self.tail_vectors]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_125": {
                "tensors": {
                    "value": "[head_bias, self.tail_bias]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_34": {
                "tensors": {
                    "value": "[head_weight, self.tail_vectors]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_35": {
                "tensors": {
                    "value": "[head_bias, self.tail_bias]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_144": {
                "input": {
                    "value": "softmaxed_head_res",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.nn.functional.log_softmax(head_res, dim=-1)",
                            "Call"
                        ],
                        [
                            "softmaxed_all_head_res[running_offset:running_offset + len(split_hiddens[idx])]",
                            "Subscript"
                        ],
                        [
                            "softmaxed_all_head_res[running_offset:running_offset + len(split_hiddens[idx])]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "split_targets[idx].view(-1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_softmax_163": {
                "input": {
                    "value": "tail_res",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.nn.functional.linear(hiddens, tail_weight, bias=tail_bias)",
                            "Call"
                        ],
                        [
                            "self.logprob(weight, bias, split_hiddens[idx], splits=[idx], softmaxed_head_res=softmaxed_head_res)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "rand_189": {
                "*size": {
                    "value": "N",
                    "type": "Name",
                    "possible_values": [
                        [
                            "100",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_190": {
                "*size": {
                    "value": "N",
                    "type": "Name",
                    "possible_values": [
                        [
                            "100",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "utils.py": {
        "torch": {}
    },
    "weight_drop.py": {
        "torch": {
            "Linear_66": {
                "in_features": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LSTM_84": {
                "*args": {
                    "value": "10",
                    "type": null,
                    "possible_values": []
                }
            },
            "dropout_39": {
                "variable": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.autograd.Variable(torch.ones(raw_w.size(0), 1))",
                            "Call"
                        ],
                        [
                            "mask.cuda()",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.dropout(mask, p=self.dropout, training=True)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dropout_42": {
                "variable": {
                    "value": "w",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "raw_w",
                    "type": "Name",
                    "possible_values": [
                        [
                            "getattr(self.module, name_w + '_raw')",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_30": {
                "data": {
                    "value": "w.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_54": {
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_37": {
                "*size": {
                    "value": "raw_w.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    }
}