{
    "metrics/linear_separability.py": {
        "sklearn": {},
        "tensorflow": {
            "reshape_131": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Gs_clone.get_output_for(latents, None, **Gs_kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(images, [-1, images.shape[1], images.shape[2] // factor, factor, images.shape[3] // factor, factor])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(images, axis=[3, 5])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, images.shape[1], images.shape[2] // factor, factor, images.shape[3] // factor, factor]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_132": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Gs_clone.get_output_for(latents, None, **Gs_kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(images, [-1, images.shape[1], images.shape[2] // factor, factor, images.shape[3] // factor, factor])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(images, axis=[3, 5])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[3, 5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_139": {
                "variable": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "tf.concat([logits, -logits], axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_139": {
                "values": {
                    "value": "[logits, -logits]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "convert_ckpt_to_pkl.py": {
        "tensorflow": {
            "set_verbosity_12": {
                "level": {
                    "value": "tf.compat.v1.logging.ERROR",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_36": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "var_list",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[v for v in tf.global_variables()]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "latest_checkpoint_39": {
                "variable": {
                    "value": "ckpt",
                    "type": "Variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "model_dir",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args.ckpt_model_dir",
                            "Attribute"
                        ]
                    ]
                }
            },
            "get_default_session_40": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "convert_pkl_to_ckpt.py": {
        "tensorflow": {
            "set_verbosity_14": {
                "level": {
                    "value": "tf.compat.v1.logging.ERROR",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_39": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "var_list",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[v for v in tf.global_variables() if 'Dataset/' not in v.name]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "Session_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "dataset_tool.py": {
        "tensorflow": {
            "TFRecordOptions_74": {
                "variable": {
                    "value": "tfr_opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "compression_type": {
                    "value": "tf.python_io.TFRecordCompressionType.NONE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Example_84": {
                "variable": {
                    "value": "ex",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.train.Features(feature={'shape': tf.train.Feature(int64_list=tf.train.Int64List(value=quant.shape)), 'data': tf.train.Feature(bytes_list=tf.train.BytesList(value=[quant.tostring()]))})",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TFRecordWriter_77": {
                "path": {
                    "value": "tfr_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.tfr_prefix + '-r%02d.tfrecords' % (self.resolution_log2 - lod)",
                            "BinOp"
                        ]
                    ]
                },
                "options": {
                    "value": "tfr_opt",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.python_io.TFRecordOptions(tf.python_io.TFRecordCompressionType.NONE)",
                            "Call"
                        ]
                    ]
                }
            },
            "Features_84": {
                "feature": {
                    "value": "{'shape': tf.train.Feature(int64_list=tf.train.Int64List(value=quant.shape)), 'data': tf.train.Feature(bytes_list=tf.train.BytesList(value=[quant.tostring()]))}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "Feature_85": {
                "int64_list": {
                    "value": "tf.train.Int64List(value=quant.shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_86": {
                "bytes_list": {
                    "value": "tf.train.BytesList(value=[quant.tostring()])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Int64List_85": {
                "value": {
                    "value": "quant.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BytesList_86": {
                "value": {
                    "value": "[quant.tostring()]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "dnnlib/submission/submit.py": {
        "tensorflow": {
            "get_default_session_300": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_306": {
                "device_name": {
                    "value": "cores[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "dnnlib/tflib/autosummary.py": {
        "tensorflow": {
            "cast_50": {
                "variable": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "value_expr",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "_dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.float64",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cond_65": {
                "variable": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.is_finite(v[1])",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : tf.stack(v)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.zeros(3, dtype=_dtype)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_69": {
                "variable": {
                    "value": "update_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.is_variable_initialized(var)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : tf.assign_add(var, v)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.assign(var, v)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "reshape_133": {
                "variable": {
                    "value": "input_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input_tensor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(input_tensor, tuple(grid_shape) + tuple(image_shape) + (num_channels,))",
                            "Call"
                        ],
                        [
                            "tf.transpose(a=input_tensor, perm=[0, 1, 3, 2, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(input_tensor, [grid_shape[0], width, image_shape[0], num_channels])",
                            "Call"
                        ],
                        [
                            "tf.transpose(a=input_tensor, perm=[0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(input_tensor, [1, height, width, num_channels])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tuple(grid_shape) + tuple(image_shape) + (num_channels,)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "transpose_135": {
                "variable": {
                    "value": "input_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "input_tensor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(input_tensor, tuple(grid_shape) + tuple(image_shape) + (num_channels,))",
                            "Call"
                        ],
                        [
                            "tf.transpose(a=input_tensor, perm=[0, 1, 3, 2, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(input_tensor, [grid_shape[0], width, image_shape[0], num_channels])",
                            "Call"
                        ],
                        [
                            "tf.transpose(a=input_tensor, perm=[0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(input_tensor, [1, height, width, num_channels])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 1, 3, 2, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_136": {
                "variable": {
                    "value": "input_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input_tensor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(input_tensor, tuple(grid_shape) + tuple(image_shape) + (num_channels,))",
                            "Call"
                        ],
                        [
                            "tf.transpose(a=input_tensor, perm=[0, 1, 3, 2, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(input_tensor, [grid_shape[0], width, image_shape[0], num_channels])",
                            "Call"
                        ],
                        [
                            "tf.transpose(a=input_tensor, perm=[0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(input_tensor, [1, height, width, num_channels])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[grid_shape[0], width, image_shape[0], num_channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_138": {
                "variable": {
                    "value": "input_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "input_tensor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(input_tensor, tuple(grid_shape) + tuple(image_shape) + (num_channels,))",
                            "Call"
                        ],
                        [
                            "tf.transpose(a=input_tensor, perm=[0, 1, 3, 2, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(input_tensor, [grid_shape[0], width, image_shape[0], num_channels])",
                            "Call"
                        ],
                        [
                            "tf.transpose(a=input_tensor, perm=[0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(input_tensor, [1, height, width, num_channels])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_139": {
                "variable": {
                    "value": "input_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input_tensor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(input_tensor, tuple(grid_shape) + tuple(image_shape) + (num_channels,))",
                            "Call"
                        ],
                        [
                            "tf.transpose(a=input_tensor, perm=[0, 1, 3, 2, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(input_tensor, [grid_shape[0], width, image_shape[0], num_channels])",
                            "Call"
                        ],
                        [
                            "tf.transpose(a=input_tensor, perm=[0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(input_tensor, [1, height, width, num_channels])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, height, width, num_channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_54": {
                "variable": {
                    "value": "size_expr",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.prod(v.shape.as_list())",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "_dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.float64",
                            "Attribute"
                        ]
                    ]
                }
            },
            "reduce_prod_57": {
                "variable": {
                    "value": "size_expr",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(tf.shape(v), _dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_68": {
                "variable": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros(3, dtype=_dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "transpose_152": {
                "a": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_153": {
                "a": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "info_183": {
                "msg": {
                    "value": "autoimages(%s, %s): Creating %dx%d images grid at resolution %dx%d channel count %d across %d replicas",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "repr(summary_name)",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "repr(images)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_225": {
                "msg": {
                    "value": "autosummary(%s, %s)",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "repr(name)",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "repr(value)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_61": {
                "variable": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(value_expr, _dtype)",
                            "Call"
                        ],
                        [
                            "[size_expr, tf.reduce_sum(v), tf.reduce_sum(tf.square(v))]",
                            "List"
                        ],
                        [
                            "tf.reshape(v, [])",
                            "Call"
                        ],
                        [
                            "[size_expr, v, tf.square(v)]",
                            "List"
                        ],
                        [
                            "tf.cond(tf.is_finite(v[1]), lambda : tf.stack(v), lambda : tf.zeros(3, dtype=_dtype))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "is_finite_65": {
                "x": {
                    "value": "v[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "control_dependencies_67": {
                "control_inputs": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "is_variable_initialized_69": {
                "variable": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.zeros(3, dtype=_dtype), trainable=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "resize_197": {
                "variable": {
                    "value": "all_images",
                    "type": "Variable",
                    "possible_values": []
                },
                "images": {
                    "value": "all_images",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "all_images[:np.prod(grid_shape)]",
                            "Subscript"
                        ],
                        [
                            "tf.image.resize(all_images, sample_shape[0:2], method=tf.image.ResizeMethod.AREA)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "sample_shape[0:2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "method": {
                    "value": "tf.image.ResizeMethod.AREA",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_233": {
                "variable": {
                    "value": "condition",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "condition",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "condition",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cond_234": {
                "variable": {
                    "value": "update_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "condition",
                    "type": "Variable",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : tf.group(_create_var(name, value))",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "tf.no_op",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "control_dependencies_266": {
                "control_inputs": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "merge_all_324": {
                "variable": {
                    "value": "_merge_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cast_57": {
                "x": {
                    "value": "tf.shape(v)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "_dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.float64",
                            "Attribute"
                        ]
                    ]
                }
            },
            "square_62": {
                "x": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(value_expr, _dtype)",
                            "Call"
                        ],
                        [
                            "[size_expr, tf.reduce_sum(v), tf.reduce_sum(tf.square(v))]",
                            "List"
                        ],
                        [
                            "tf.reshape(v, [])",
                            "Call"
                        ],
                        [
                            "[size_expr, v, tf.square(v)]",
                            "List"
                        ],
                        [
                            "tf.cond(tf.is_finite(v[1]), lambda : tf.stack(v), lambda : tf.zeros(3, dtype=_dtype))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_64": {
                "input_tensor": {
                    "value": "tf.square(v)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_65": {
                "values": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(value_expr, _dtype)",
                            "Call"
                        ],
                        [
                            "[size_expr, tf.reduce_sum(v), tf.reduce_sum(tf.square(v))]",
                            "List"
                        ],
                        [
                            "tf.reshape(v, [])",
                            "Call"
                        ],
                        [
                            "[size_expr, v, tf.square(v)]",
                            "List"
                        ],
                        [
                            "tf.cond(tf.is_finite(v[1]), lambda : tf.stack(v), lambda : tf.zeros(3, dtype=_dtype))",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_65": {
                "shape": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "_dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.float64",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_68": {
                "shape": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "_dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.float64",
                            "Attribute"
                        ]
                    ]
                }
            },
            "assign_add_69": {
                "ref": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.zeros(3, dtype=_dtype), trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(value_expr, _dtype)",
                            "Call"
                        ],
                        [
                            "[size_expr, tf.reduce_sum(v), tf.reduce_sum(tf.square(v))]",
                            "List"
                        ],
                        [
                            "tf.reshape(v, [])",
                            "Call"
                        ],
                        [
                            "[size_expr, v, tf.square(v)]",
                            "List"
                        ],
                        [
                            "tf.cond(tf.is_finite(v[1]), lambda : tf.stack(v), lambda : tf.zeros(3, dtype=_dtype))",
                            "Call"
                        ]
                    ]
                }
            },
            "assign_69": {
                "ref": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.zeros(3, dtype=_dtype), trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(value_expr, _dtype)",
                            "Call"
                        ],
                        [
                            "[size_expr, tf.reduce_sum(v), tf.reduce_sum(tf.square(v))]",
                            "List"
                        ],
                        [
                            "tf.reshape(v, [])",
                            "Call"
                        ],
                        [
                            "[size_expr, v, tf.square(v)]",
                            "List"
                        ],
                        [
                            "tf.cond(tf.is_finite(v[1]), lambda : tf.stack(v), lambda : tf.zeros(3, dtype=_dtype))",
                            "Call"
                        ]
                    ]
                }
            },
            "info_193": {
                "msg": {
                    "value": "autoimages(%s, %s): Downscaling sampled images from %dx%d to %dx%d",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "repr(summary_name)",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "repr(all_images)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "name_scope_232": {
                "name": {
                    "value": "'summary_' + name_id",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "add_n_270": {
                "variable": {
                    "value": "moments",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "vars_list",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "control_dependencies_323": {
                "control_inputs": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "shape_57": {
                "input": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(value_expr, _dtype)",
                            "Call"
                        ],
                        [
                            "[size_expr, tf.reduce_sum(v), tf.reduce_sum(tf.square(v))]",
                            "List"
                        ],
                        [
                            "tf.reshape(v, [])",
                            "Call"
                        ],
                        [
                            "[size_expr, v, tf.square(v)]",
                            "List"
                        ],
                        [
                            "tf.cond(tf.is_finite(v[1]), lambda : tf.stack(v), lambda : tf.zeros(3, dtype=_dtype))",
                            "Call"
                        ]
                    ]
                }
            },
            "square_64": {
                "x": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(value_expr, _dtype)",
                            "Call"
                        ],
                        [
                            "[size_expr, tf.reduce_sum(v), tf.reduce_sum(tf.square(v))]",
                            "List"
                        ],
                        [
                            "tf.reshape(v, [])",
                            "Call"
                        ],
                        [
                            "[size_expr, v, tf.square(v)]",
                            "List"
                        ],
                        [
                            "tf.cond(tf.is_finite(v[1]), lambda : tf.stack(v), lambda : tf.zeros(3, dtype=_dtype))",
                            "Call"
                        ]
                    ]
                }
            },
            "control_dependencies_235": {
                "control_inputs": {
                    "value": "[update_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "identity_236": {
                "input": {
                    "value": "value if passthru is None else passthru",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "placeholder_244": {
                "variable": {
                    "value": "update_value",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "_dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.float64",
                            "Attribute"
                        ]
                    ]
                }
            },
            "group_234": {
                "*inputs": {
                    "value": "_create_var(name, value)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "control_dependencies_243": {
                "control_inputs": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "control_dependencies_272": {
                "control_inputs": {
                    "value": "[moments]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sqrt_276": {
                "variable": {
                    "value": "std",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "moments[2] - tf.square(moments[1])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "assign_273": {
                "ref": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.zeros(3, dtype=_dtype), trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "tf.zeros(3, dtype=_dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "name_scope_274": {
                "name": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "control_dependencies_274": {
                "control_inputs": {
                    "value": "reset_ops",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[tf.assign(var, tf.zeros(3, dtype=_dtype)) for var in vars_list]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "scalar_277": {
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "moments[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_273": {
                "shape": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "_dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.float64",
                            "Attribute"
                        ]
                    ]
                }
            },
            "scalar_279": {
                "name": {
                    "value": "xCustomScalars/ + name + /margin_lo",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "mean - std",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "scalar_280": {
                "name": {
                    "value": "xCustomScalars/ + name + /margin_hi",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "mean + std",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_276": {
                "x": {
                    "value": "moments[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "dnnlib/tflib/custom_ops.py": {
        "tensorflow": {
            "load_op_library_156": {
                "variable": {
                    "value": "plugin",
                    "type": "Variable",
                    "possible_values": []
                },
                "library_filename": {
                    "value": "bin_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(cuda_cache_path, cuda_file_name + '_' + md5.hexdigest() + bin_file_ext)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_include_66": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_include_67": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_include_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_include_69": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_lib_124": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_lib_126": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "dnnlib/tflib/network.py": {
        "tensorflow": {
            "get_default_graph_487": {
                "variable": {
                    "value": "ops",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_session_471": {
                "variable": {
                    "value": "mb_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_471": {
                "variable": {
                    "value": "mb_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "main": {
                    "value": "out_expr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._build_func(*self.input_templates, **build_kwargs)",
                            "Call"
                        ],
                        [
                            "self._build_func(*final_inputs, **build_kwargs)",
                            "Call"
                        ],
                        [
                            "[out_expr] if tfutil.is_tf_expression(out_expr) else list(out_expr)",
                            "IfExp"
                        ],
                        [
                            "[tf.concat(outputs, axis=0) for outputs in zip(*out_split)]",
                            "ListComp"
                        ]
                    ]
                },
                "argv": {
                    "value": "dict(zip(in_expr, mb_in))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_default_graph_160": {
                "variable": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "name_scope_230": {
                "name": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "group_380": {
                "*inputs": {
                    "value": "*ops",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "name_scope_569": {
                "name": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "control_dependencies_569": {
                "control_inputs": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "avg_pool_613": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "ksize": {
                    "value": "ksize",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[1, 1, out_shrink, out_shrink]",
                            "List"
                        ]
                    ]
                },
                "strides": {
                    "value": "ksize",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[1, 1, out_shrink, out_shrink]",
                            "List"
                        ]
                    ]
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "NCHW",
                    "type": "str",
                    "possible_values": []
                }
            },
            "as_dtype_616": {
                "type_value": {
                    "value": "out_dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "saturate_cast_618": {
                "value": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "out_dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "name_scope_159": {
                "name": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "get_default_graph_170": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "control_dependencies_171": {
                "control_inputs": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "identity_236": {
                "variable": {
                    "value": "expr",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "expr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[x * out_mul for x in expr]",
                            "ListComp"
                        ],
                        [
                            "[x + out_add for x in expr]",
                            "ListComp"
                        ],
                        [
                            "[tf.nn.avg_pool(x, ksize=ksize, strides=ksize, padding='VALID', data_format='NCHW') for x in expr]",
                            "ListComp"
                        ],
                        [
                            "[tf.round(x) for x in expr]",
                            "ListComp"
                        ],
                        [
                            "[tf.saturate_cast(x, out_dtype) for x in expr]",
                            "ListComp"
                        ],
                        [
                            "tf.identity(expr, name=name)",
                            "Call"
                        ],
                        [
                            "tf.zeros([tf.shape(valid_inputs[0])[0]] + shape[1:], name=name)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "title + '_' + p[-1] + '/' + '_'.join(p[:-1])",
                            "BinOp"
                        ],
                        [
                            "title + '_toplevel/' + local_name",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_238": {
                "variable": {
                    "value": "expr",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[tf.shape(valid_inputs[0])[0]] + shape[1:]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "title + '_' + p[-1] + '/' + '_'.join(p[:-1])",
                            "BinOp"
                        ],
                        [
                            "title + '_toplevel/' + local_name",
                            "BinOp"
                        ]
                    ]
                }
            },
            "control_dependencies_429": {
                "control_inputs": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "histogram_577": {
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "title + '_' + p[-1] + '/' + '_'.join(p[:-1])",
                            "BinOp"
                        ],
                        [
                            "title + '_toplevel/' + local_name",
                            "BinOp"
                        ]
                    ]
                },
                "data": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[op for op in cur_ops if op.type.startswith('Variable')]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "round_617": {
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "get_variable_scope_169": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_172": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "title + '_' + p[-1] + '/' + '_'.join(p[:-1])",
                            "BinOp"
                        ],
                        [
                            "title + '_toplevel/' + local_name",
                            "BinOp"
                        ]
                    ]
                }
            },
            "global_variables_200": {
                "scope": {
                    "value": "self.scope + '/'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_variable_scope_231": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_431": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "title + '_' + p[-1] + '/' + '_'.join(p[:-1])",
                            "BinOp"
                        ],
                        [
                            "title + '_toplevel/' + local_name",
                            "BinOp"
                        ]
                    ]
                }
            },
            "concat_457": {
                "values": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_238": {
                "input": {
                    "value": "valid_inputs[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "split_432": {
                "value": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "num_gpus",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "dnnlib/tflib/ops/fused_bias_act.py": {
        "tensorflow": {
            "convert_to_tensor_76": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "x * gain",
                            "BinOp"
                        ],
                        [
                            "act_spec.func(x, alpha=alpha)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_to_tensor_104": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "x * gain",
                            "BinOp"
                        ],
                        [
                            "act_spec.func(x, alpha=alpha)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_105": {
                "variable": {
                    "value": "empty_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_77": {
                "value": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(b) if b is not None else tf.constant([], dtype=x.dtype)",
                            "IfExp"
                        ],
                        [
                            "tf.convert_to_tensor(b) if b is not None else empty_tensor",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "constant_77": {
                "value": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_88": {
                "tensor": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(b) if b is not None else tf.constant([], dtype=x.dtype)",
                            "IfExp"
                        ],
                        [
                            "tf.convert_to_tensor(b) if b is not None else empty_tensor",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1 if i == axis else 1 for i in range(x.shape.rank)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "convert_to_tensor_106": {
                "value": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(b) if b is not None else tf.constant([], dtype=x.dtype)",
                            "IfExp"
                        ],
                        [
                            "tf.convert_to_tensor(b) if b is not None else empty_tensor",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reduce_sum_142": {
                "variable": {
                    "value": "db",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "db",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dx",
                            "Name"
                        ],
                        [
                            "tf.reduce_sum(db, list(range(axis + 1, x.shape.rank)))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(db, list(range(axis)))",
                            "Call"
                        ],
                        [
                            "grad_db(dx)",
                            "Call"
                        ],
                        [
                            "grad_db(dx)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "list(range(axis + 1, x.shape.rank))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_144": {
                "variable": {
                    "value": "db",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "db",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dx",
                            "Name"
                        ],
                        [
                            "tf.reduce_sum(db, list(range(axis + 1, x.shape.rank)))",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(db, list(range(axis)))",
                            "Call"
                        ],
                        [
                            "grad_db(dx)",
                            "Call"
                        ],
                        [
                            "grad_db(dx)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "list(range(axis))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_22": {
                "features": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "x * gain",
                            "BinOp"
                        ],
                        [
                            "act_spec.func(x, alpha=alpha)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "leaky_relu_23": {
                "features": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "x * gain",
                            "BinOp"
                        ],
                        [
                            "act_spec.func(x, alpha=alpha)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ]
                    ]
                },
                "alpha": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "act_spec.def_alpha",
                            "Attribute"
                        ],
                        [
                            "act_spec.def_alpha",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tanh_24": {
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "x * gain",
                            "BinOp"
                        ],
                        [
                            "act_spec.func(x, alpha=alpha)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_25": {
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "x * gain",
                            "BinOp"
                        ],
                        [
                            "act_spec.func(x, alpha=alpha)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "elu_26": {
                "features": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "x * gain",
                            "BinOp"
                        ],
                        [
                            "act_spec.func(x, alpha=alpha)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "selu_27": {
                "features": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "x * gain",
                            "BinOp"
                        ],
                        [
                            "act_spec.func(x, alpha=alpha)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "softplus_28": {
                "features": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "x * gain",
                            "BinOp"
                        ],
                        [
                            "act_spec.func(x, alpha=alpha)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_29": {
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "x * gain",
                            "BinOp"
                        ],
                        [
                            "act_spec.func(x, alpha=alpha)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "dnnlib/tflib/ops/upfirdn_2d.py": {
        "tensorflow": {
            "convert_to_tensor_69": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH, 1, inW, 1, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, upy - 1], [0, 0], [0, upx - 1], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH * upy, inW * upx, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [max(pady0, 0), max(pady1, 0)], [max(padx0, 0), max(padx1, 0)], [0, 0]])",
                            "Call"
                        ],
                        [
                            "x[:, max(-pady0, 0):x.shape[1].value - max(-pady1, 0), max(-padx0, 0):x.shape[2].value - max(-padx1, 0), :]",
                            "Subscript"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, inH * upy + pady0 + pady1, inW * upx + padx0 + padx1])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, w, strides=[1, 1, 1, 1], padding='VALID', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, minorDim, inH * upy + pady0 + pady1 - kernelH + 1, inW * upx + padx0 + padx1 - kernelW + 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, w, output_shape=output_shape, strides=stride, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "_simple_upfirdn_2d(x, k, pad0=(p + 1) // 2, pad1=p // 2, data_format=data_format, impl=impl)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_84": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH, 1, inW, 1, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, upy - 1], [0, 0], [0, upx - 1], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH * upy, inW * upx, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [max(pady0, 0), max(pady1, 0)], [max(padx0, 0), max(padx1, 0)], [0, 0]])",
                            "Call"
                        ],
                        [
                            "x[:, max(-pady0, 0):x.shape[1].value - max(-pady1, 0), max(-padx0, 0):x.shape[2].value - max(-padx1, 0), :]",
                            "Subscript"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, inH * upy + pady0 + pady1, inW * upx + padx0 + padx1])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, w, strides=[1, 1, 1, 1], padding='VALID', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, minorDim, inH * upy + pady0 + pady1 - kernelH + 1, inW * upx + padx0 + padx1 - kernelW + 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, w, output_shape=output_shape, strides=stride, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "_simple_upfirdn_2d(x, k, pad0=(p + 1) // 2, pad1=p // 2, data_format=data_format, impl=impl)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, inH, 1, inW, 1, minorDim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_85": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH, 1, inW, 1, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, upy - 1], [0, 0], [0, upx - 1], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH * upy, inW * upx, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [max(pady0, 0), max(pady1, 0)], [max(padx0, 0), max(padx1, 0)], [0, 0]])",
                            "Call"
                        ],
                        [
                            "x[:, max(-pady0, 0):x.shape[1].value - max(-pady1, 0), max(-padx0, 0):x.shape[2].value - max(-padx1, 0), :]",
                            "Subscript"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, inH * upy + pady0 + pady1, inW * upx + padx0 + padx1])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, w, strides=[1, 1, 1, 1], padding='VALID', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, minorDim, inH * upy + pady0 + pady1 - kernelH + 1, inW * upx + padx0 + padx1 - kernelW + 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, w, output_shape=output_shape, strides=stride, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "_simple_upfirdn_2d(x, k, pad0=(p + 1) // 2, pad1=p // 2, data_format=data_format, impl=impl)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [0, 0], [0, upy - 1], [0, 0], [0, upx - 1], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_86": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH, 1, inW, 1, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, upy - 1], [0, 0], [0, upx - 1], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH * upy, inW * upx, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [max(pady0, 0), max(pady1, 0)], [max(padx0, 0), max(padx1, 0)], [0, 0]])",
                            "Call"
                        ],
                        [
                            "x[:, max(-pady0, 0):x.shape[1].value - max(-pady1, 0), max(-padx0, 0):x.shape[2].value - max(-padx1, 0), :]",
                            "Subscript"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, inH * upy + pady0 + pady1, inW * upx + padx0 + padx1])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, w, strides=[1, 1, 1, 1], padding='VALID', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, minorDim, inH * upy + pady0 + pady1 - kernelH + 1, inW * upx + padx0 + padx1 - kernelW + 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, w, output_shape=output_shape, strides=stride, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "_simple_upfirdn_2d(x, k, pad0=(p + 1) // 2, pad1=p // 2, data_format=data_format, impl=impl)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, inH * upy, inW * upx, minorDim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_89": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH, 1, inW, 1, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, upy - 1], [0, 0], [0, upx - 1], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH * upy, inW * upx, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [max(pady0, 0), max(pady1, 0)], [max(padx0, 0), max(padx1, 0)], [0, 0]])",
                            "Call"
                        ],
                        [
                            "x[:, max(-pady0, 0):x.shape[1].value - max(-pady1, 0), max(-padx0, 0):x.shape[2].value - max(-padx1, 0), :]",
                            "Subscript"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, inH * upy + pady0 + pady1, inW * upx + padx0 + padx1])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, w, strides=[1, 1, 1, 1], padding='VALID', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, minorDim, inH * upy + pady0 + pady1 - kernelH + 1, inW * upx + padx0 + padx1 - kernelW + 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, w, output_shape=output_shape, strides=stride, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "_simple_upfirdn_2d(x, k, pad0=(p + 1) // 2, pad1=p // 2, data_format=data_format, impl=impl)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [max(pady0, 0), max(pady1, 0)], [max(padx0, 0), max(padx1, 0)], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_93": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH, 1, inW, 1, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, upy - 1], [0, 0], [0, upx - 1], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH * upy, inW * upx, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [max(pady0, 0), max(pady1, 0)], [max(padx0, 0), max(padx1, 0)], [0, 0]])",
                            "Call"
                        ],
                        [
                            "x[:, max(-pady0, 0):x.shape[1].value - max(-pady1, 0), max(-padx0, 0):x.shape[2].value - max(-padx1, 0), :]",
                            "Subscript"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, inH * upy + pady0 + pady1, inW * upx + padx0 + padx1])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, w, strides=[1, 1, 1, 1], padding='VALID', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, minorDim, inH * upy + pady0 + pady1 - kernelH + 1, inW * upx + padx0 + padx1 - kernelW + 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, w, output_shape=output_shape, strides=stride, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "_simple_upfirdn_2d(x, k, pad0=(p + 1) // 2, pad1=p // 2, data_format=data_format, impl=impl)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_94": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH, 1, inW, 1, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, upy - 1], [0, 0], [0, upx - 1], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH * upy, inW * upx, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [max(pady0, 0), max(pady1, 0)], [max(padx0, 0), max(padx1, 0)], [0, 0]])",
                            "Call"
                        ],
                        [
                            "x[:, max(-pady0, 0):x.shape[1].value - max(-pady1, 0), max(-padx0, 0):x.shape[2].value - max(-padx1, 0), :]",
                            "Subscript"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, inH * upy + pady0 + pady1, inW * upx + padx0 + padx1])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, w, strides=[1, 1, 1, 1], padding='VALID', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, minorDim, inH * upy + pady0 + pady1 - kernelH + 1, inW * upx + padx0 + padx1 - kernelW + 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, w, output_shape=output_shape, strides=stride, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "_simple_upfirdn_2d(x, k, pad0=(p + 1) // 2, pad1=p // 2, data_format=data_format, impl=impl)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1, inH * upy + pady0 + pady1, inW * upx + padx0 + padx1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_95": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "k[::-1, ::-1, np.newaxis, np.newaxis]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_96": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH, 1, inW, 1, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, upy - 1], [0, 0], [0, upx - 1], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH * upy, inW * upx, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [max(pady0, 0), max(pady1, 0)], [max(padx0, 0), max(padx1, 0)], [0, 0]])",
                            "Call"
                        ],
                        [
                            "x[:, max(-pady0, 0):x.shape[1].value - max(-pady1, 0), max(-padx0, 0):x.shape[2].value - max(-padx1, 0), :]",
                            "Subscript"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, inH * upy + pady0 + pady1, inW * upx + padx0 + padx1])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, w, strides=[1, 1, 1, 1], padding='VALID', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, minorDim, inH * upy + pady0 + pady1 - kernelH + 1, inW * upx + padx0 + padx1 - kernelW + 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, w, output_shape=output_shape, strides=stride, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "_simple_upfirdn_2d(x, k, pad0=(p + 1) // 2, pad1=p // 2, data_format=data_format, impl=impl)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant(k[::-1, ::-1, np.newaxis, np.newaxis], dtype=x.dtype)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(w)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [convH, convW, inC, num_groups, -1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(w[::-1, ::-1], [0, 1, 4, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [convH, convW, -1, num_groups * inC])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(w)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "NCHW",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_97": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH, 1, inW, 1, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, upy - 1], [0, 0], [0, upx - 1], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH * upy, inW * upx, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [max(pady0, 0), max(pady1, 0)], [max(padx0, 0), max(padx1, 0)], [0, 0]])",
                            "Call"
                        ],
                        [
                            "x[:, max(-pady0, 0):x.shape[1].value - max(-pady1, 0), max(-padx0, 0):x.shape[2].value - max(-padx1, 0), :]",
                            "Subscript"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, inH * upy + pady0 + pady1, inW * upx + padx0 + padx1])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, w, strides=[1, 1, 1, 1], padding='VALID', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, minorDim, inH * upy + pady0 + pady1 - kernelH + 1, inW * upx + padx0 + padx1 - kernelW + 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, w, output_shape=output_shape, strides=stride, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "_simple_upfirdn_2d(x, k, pad0=(p + 1) // 2, pad1=p // 2, data_format=data_format, impl=impl)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, minorDim, inH * upy + pady0 + pady1 - kernelH + 1, inW * upx + padx0 + padx1 - kernelW + 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_98": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH, 1, inW, 1, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, upy - 1], [0, 0], [0, upx - 1], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH * upy, inW * upx, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [max(pady0, 0), max(pady1, 0)], [max(padx0, 0), max(padx1, 0)], [0, 0]])",
                            "Call"
                        ],
                        [
                            "x[:, max(-pady0, 0):x.shape[1].value - max(-pady1, 0), max(-padx0, 0):x.shape[2].value - max(-padx1, 0), :]",
                            "Subscript"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, inH * upy + pady0 + pady1, inW * upx + padx0 + padx1])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, w, strides=[1, 1, 1, 1], padding='VALID', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, minorDim, inH * upy + pady0 + pady1 - kernelH + 1, inW * upx + padx0 + padx1 - kernelW + 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, w, output_shape=output_shape, strides=stride, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "_simple_upfirdn_2d(x, k, pad0=(p + 1) // 2, pad1=p // 2, data_format=data_format, impl=impl)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "convert_to_tensor_108": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH, 1, inW, 1, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, upy - 1], [0, 0], [0, upx - 1], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH * upy, inW * upx, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [max(pady0, 0), max(pady1, 0)], [max(padx0, 0), max(padx1, 0)], [0, 0]])",
                            "Call"
                        ],
                        [
                            "x[:, max(-pady0, 0):x.shape[1].value - max(-pady1, 0), max(-padx0, 0):x.shape[2].value - max(-padx1, 0), :]",
                            "Subscript"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, inH * upy + pady0 + pady1, inW * upx + padx0 + padx1])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, w, strides=[1, 1, 1, 1], padding='VALID', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, minorDim, inH * upy + pady0 + pady1 - kernelH + 1, inW * upx + padx0 + padx1 - kernelW + 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, w, output_shape=output_shape, strides=stride, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "_simple_upfirdn_2d(x, k, pad0=(p + 1) // 2, pad1=p // 2, data_format=data_format, impl=impl)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_123": {
                "variable": {
                    "value": "kc",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.asarray(k, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.asarray(k, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "_setup_kernel(k) * gain",
                            "BinOp"
                        ],
                        [
                            "[1] * factor",
                            "BinOp"
                        ],
                        [
                            "_setup_kernel(k) * (gain * factor ** 2)",
                            "BinOp"
                        ],
                        [
                            "[1] * factor",
                            "BinOp"
                        ],
                        [
                            "_setup_kernel(k) * gain",
                            "BinOp"
                        ],
                        [
                            "[1] * factor",
                            "BinOp"
                        ],
                        [
                            "_setup_kernel(k) * (gain * factor ** 2)",
                            "BinOp"
                        ],
                        [
                            "[1] * factor",
                            "BinOp"
                        ],
                        [
                            "_setup_kernel(k) * gain",
                            "BinOp"
                        ],
                        [
                            "np.asarray(k, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.outer(k, k)",
                            "Call"
                        ],
                        [
                            "k / np.sum(k)",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_124": {
                "variable": {
                    "value": "gkc",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "k[::-1, ::-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_261": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant(k[::-1, ::-1, np.newaxis, np.newaxis], dtype=x.dtype)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(w)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [convH, convW, inC, num_groups, -1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(w[::-1, ::-1], [0, 1, 4, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [convH, convW, -1, num_groups * inC])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(w)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_286": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant(k[::-1, ::-1, np.newaxis, np.newaxis], dtype=x.dtype)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(w)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [convH, convW, inC, num_groups, -1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(w[::-1, ::-1], [0, 1, 4, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [convH, convW, -1, num_groups * inC])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(w)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[convH, convW, inC, num_groups, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_287": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "w[::-1, ::-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 1, 4, 3, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_288": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant(k[::-1, ::-1, np.newaxis, np.newaxis], dtype=x.dtype)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(w)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [convH, convW, inC, num_groups, -1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(w[::-1, ::-1], [0, 1, 4, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [convH, convW, -1, num_groups * inC])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(w)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[convH, convW, -1, num_groups * inC]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_transpose_291": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH, 1, inW, 1, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, upy - 1], [0, 0], [0, upx - 1], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH * upy, inW * upx, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [max(pady0, 0), max(pady1, 0)], [max(padx0, 0), max(padx1, 0)], [0, 0]])",
                            "Call"
                        ],
                        [
                            "x[:, max(-pady0, 0):x.shape[1].value - max(-pady1, 0), max(-padx0, 0):x.shape[2].value - max(-padx1, 0), :]",
                            "Subscript"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, inH * upy + pady0 + pady1, inW * upx + padx0 + padx1])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, w, strides=[1, 1, 1, 1], padding='VALID', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, minorDim, inH * upy + pady0 + pady1 - kernelH + 1, inW * upx + padx0 + padx1 - kernelW + 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, w, output_shape=output_shape, strides=stride, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "_simple_upfirdn_2d(x, k, pad0=(p + 1) // 2, pad1=p // 2, data_format=data_format, impl=impl)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant(k[::-1, ::-1, np.newaxis, np.newaxis], dtype=x.dtype)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(w)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [convH, convW, inC, num_groups, -1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(w[::-1, ::-1], [0, 1, 4, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [convH, convW, -1, num_groups * inC])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(w)",
                            "Call"
                        ]
                    ]
                },
                "output_shape": {
                    "value": "output_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[_shape(x, 0), outC, (_shape(x, 2) - 1) * factor + convH, (_shape(x, 3) - 1) * factor + convW]",
                            "List"
                        ],
                        [
                            "[_shape(x, 0), (_shape(x, 1) - 1) * factor + convH, (_shape(x, 2) - 1) * factor + convW, outC]",
                            "List"
                        ]
                    ]
                },
                "strides": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[1, 1, factor, factor]",
                            "List"
                        ],
                        [
                            "[1, factor, factor, 1]",
                            "List"
                        ]
                    ]
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "data_format",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'NCHW'",
                            "MethodArgument"
                        ],
                        [
                            "'NCHW'",
                            "MethodArgument"
                        ],
                        [
                            "'NCHW'",
                            "MethodArgument"
                        ],
                        [
                            "'NCHW'",
                            "MethodArgument"
                        ],
                        [
                            "'NCHW'",
                            "MethodArgument"
                        ],
                        [
                            "'NCHW'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "convert_to_tensor_320": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant(k[::-1, ::-1, np.newaxis, np.newaxis], dtype=x.dtype)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(w)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [convH, convW, inC, num_groups, -1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(w[::-1, ::-1], [0, 1, 4, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [convH, convW, -1, num_groups * inC])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(w)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_332": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH, 1, inW, 1, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, upy - 1], [0, 0], [0, upx - 1], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, inH * upy, inW * upx, minorDim])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [max(pady0, 0), max(pady1, 0)], [max(padx0, 0), max(padx1, 0)], [0, 0]])",
                            "Call"
                        ],
                        [
                            "x[:, max(-pady0, 0):x.shape[1].value - max(-pady1, 0), max(-padx0, 0):x.shape[2].value - max(-padx1, 0), :]",
                            "Subscript"
                        ],
                        [
                            "tf.transpose(x, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 1, inH * upy + pady0 + pady1, inW * upx + padx0 + padx1])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, w, strides=[1, 1, 1, 1], padding='VALID', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, minorDim, inH * upy + pady0 + pady1 - kernelH + 1, inW * upx + padx0 + padx1 - kernelW + 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(x, w, output_shape=output_shape, strides=stride, padding='VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "_simple_upfirdn_2d(x, k, pad0=(p + 1) // 2, pad1=p // 2, data_format=data_format, impl=impl)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant(k[::-1, ::-1, np.newaxis, np.newaxis], dtype=x.dtype)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(w)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [convH, convW, inC, num_groups, -1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(w[::-1, ::-1], [0, 1, 4, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [convH, convW, -1, num_groups * inC])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(w)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[1, 1, factor, factor]",
                            "List"
                        ],
                        [
                            "[1, factor, factor, 1]",
                            "List"
                        ]
                    ]
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "data_format",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'NCHW'",
                            "MethodArgument"
                        ],
                        [
                            "'NCHW'",
                            "MethodArgument"
                        ],
                        [
                            "'NCHW'",
                            "MethodArgument"
                        ],
                        [
                            "'NCHW'",
                            "MethodArgument"
                        ],
                        [
                            "'NCHW'",
                            "MethodArgument"
                        ],
                        [
                            "'NCHW'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reshape_358": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_get_plugin().up_fir_dn2d(x=x, k=kc, upx=upx, upy=upy, downx=downx, downy=downy, padx0=padx0, padx1=padx1, pady0=pady0, pady1=pady1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "tf.reshape(y, [-1, _shape(y, 2), _shape(y, 3), 1])",
                            "Call"
                        ],
                        [
                            "upfirdn_2d(y, k, upx=up, upy=up, downx=down, downy=down, padx0=pad0, padx1=pad1, pady0=pad0, pady1=pad1, impl=impl)",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [-1, _shape(x, 1), _shape(y, 1), _shape(y, 2)])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, _shape(y, 2), _shape(y, 3), 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_361": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_get_plugin().up_fir_dn2d(x=x, k=kc, upx=upx, upy=upy, downx=downx, downy=downy, padx0=padx0, padx1=padx1, pady0=pady0, pady1=pady1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "tf.reshape(y, [-1, _shape(y, 2), _shape(y, 3), 1])",
                            "Call"
                        ],
                        [
                            "upfirdn_2d(y, k, upx=up, upy=up, downx=down, downy=down, padx0=pad0, padx1=pad1, pady0=pad0, pady1=pad1, impl=impl)",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [-1, _shape(x, 1), _shape(y, 1), _shape(y, 2)])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, _shape(x, 1), _shape(y, 1), _shape(y, 2)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_342": {
                "input": {
                    "value": "tf_expr",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "dnnlib/tflib/optimizer.py": {
        "tensorflow": {
            "get_default_graph_106": {
                "variable": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "control_dependencies_151": {
                "control_inputs": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "Variable_160": {
                "variable": {
                    "value": "device.loss_scaling_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.float32(self.loss_scaling_init)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "loss_scaling_var",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_197": {
                "name": {
                    "value": "self.id + '_grad'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "control_dependencies_197": {
                "control_inputs": {
                    "value": "deps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "reduce_all_289": {
                "input_tensor": {
                    "value": "tf.is_finite(g)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "name_scope_362": {
                "name": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_368": {
                "variable": {
                    "value": "b1pow_var",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Variable_369": {
                "variable": {
                    "value": "b2pow_var",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "group_389": {
                "*inputs": {
                    "value": "*update_ops",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "colocate_with_35": {
                "op": {
                    "value": "g[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "add_n_38": {
                "inputs": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "CrossShardOptimizer_157": {
                "variable": {
                    "value": "self._shared_optimizers[device_name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "opt": {
                    "value": "self._shared_optimizers[device_name]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cast_198": {
                "x": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.apply_loss_scaling(tf.cast(loss, tf.float32))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_op_218": {
                "name": {
                    "value": "TrainingOp",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_239": {
                "variable": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1.0 / len(device.grad_raw[var]) / len(self._devices)",
                            "BinOp"
                        ],
                        [
                            "tf.constant(scale, dtype=tf.float32, name='scale')",
                            "Call"
                        ],
                        [
                            "scale / tf.cast(self.minibatch_multiplier, tf.float32)",
                            "BinOp"
                        ],
                        [
                            "self.undo_loss_scaling(scale)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "scale",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_262": {
                "variable": {
                    "value": "acc_ok",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "acc_ok",
                    "type": "str",
                    "possible_values": []
                }
            },
            "group_317": {
                "*inputs": {
                    "value": "*all_ops",
                    "type": "Starred",
                    "possible_values": []
                },
                "name": {
                    "value": "TrainingOp",
                    "type": "str",
                    "possible_values": []
                }
            },
            "gradients_359": {
                "ys": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.apply_loss_scaling(tf.cast(loss, tf.float32))",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "var_list",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "control_dependencies_367": {
                "control_inputs": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "assign_373": {
                "ref": {
                    "value": "b2pow_var",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Variable(dtype=tf.float32, initial_value=1, trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "b2pow_new",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "b2pow_var * self.beta2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Variable_379": {
                "variable": {
                    "value": "m_var",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros_like(var)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Variable_380": {
                "variable": {
                    "value": "v_var",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros_like(var)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "add_n_36": {
                "inputs": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "name_scope_191": {
                "name": {
                    "value": "self.id + '_mem'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "control_dependencies_191": {
                "control_inputs": {
                    "value": "[loss]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_231": {
                "variable": {
                    "value": "grad",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "var.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_269": {
                "variable": {
                    "value": "device.grad_acc_count",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([])",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "grad_acc_count",
                    "type": "str",
                    "possible_values": []
                }
            },
            "stack_289": {
                "values": {
                    "value": "[acc_ok] + [tf.reduce_all(tf.is_finite(g)) for g in device.grad_acc.values()]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cond_291": {
                "pred": {
                    "value": "all_ok",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_all(tf.stack([acc_ok] + [tf.reduce_all(tf.is_finite(g)) for g in device.grad_acc.values()]))",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "apply_op",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "lambda : device.optimizer.apply_gradients([(tf.cast(grad, var.dtype), var) for (var, grad) in device.grad_acc.items()])",
                            "Lambda"
                        ]
                    ]
                },
                "false_fn": {
                    "value": "tf.no_op",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_374": {
                "x": {
                    "value": "1 - b2pow_new",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "control_dependencies_378": {
                "control_inputs": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "assign_385": {
                "ref": {
                    "value": "v_var",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Variable(dtype=tf.float32, initial_value=tf.zeros_like(var), trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "v_new",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.beta2 * v_var + (1 - self.beta2) * tf.square(grad)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "assign_sub_385": {
                "ref": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "device.grad_clean.keys()",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "var_delta",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "lr_new * m_new / (tf.sqrt(v_new) + self.epsilon)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cast_227": {
                "x": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_n_235": {
                "variable": {
                    "value": "grad",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "grad",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[g for g in grad if g is not None]",
                            "ListComp"
                        ],
                        [
                            "[tf.cast(g, tf.float32) for g in grad]",
                            "ListComp"
                        ],
                        [
                            "tf.zeros(var.shape)",
                            "Call"
                        ],
                        [
                            "grad[0]",
                            "Subscript"
                        ],
                        [
                            "tf.add_n(grad)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_241": {
                "x": {
                    "value": "self.minibatch_multiplier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "control_dependencies_266": {
                "control_inputs": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "Variable_268": {
                "variable": {
                    "value": "device.grad_acc_vars[var]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros(var.shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "grad_acc_var",
                    "type": "str",
                    "possible_values": []
                }
            },
            "assign_273": {
                "ref": {
                    "value": "device.grad_acc_count",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "count_cur",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "device.grad_acc_count + 1.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "assign_274": {
                "ref": {
                    "value": "device.grad_acc_count",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.zeros([])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_275": {
                "x": {
                    "value": "self.minibatch_multiplier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cond_276": {
                "pred": {
                    "value": "acc_ok",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant(True, name='acc_ok')",
                            "Call"
                        ],
                        [
                            "count_cur >= tf.cast(self.minibatch_multiplier, tf.float32)",
                            "Compare"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "count_reset_op",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "lambda : tf.assign(device.grad_acc_count, tf.zeros([]))",
                            "Lambda"
                        ]
                    ]
                },
                "false_fn": {
                    "value": "count_inc_op",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "lambda : tf.assign(device.grad_acc_count, count_cur)",
                            "Lambda"
                        ]
                    ]
                }
            },
            "assign_add_295": {
                "ref": {
                    "value": "device.loss_scaling_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.loss_scaling_inc",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assign_sub_296": {
                "ref": {
                    "value": "device.loss_scaling_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.loss_scaling_dec",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "group_297": {
                "*inputs": {
                    "value": "tf.cond(all_ok, ls_inc_op, ls_dec_op)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cond_298": {
                "pred": {
                    "value": "acc_ok",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant(True, name='acc_ok')",
                            "Call"
                        ],
                        [
                            "count_cur >= tf.cast(self.minibatch_multiplier, tf.float32)",
                            "Compare"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "ls_update_op",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "lambda : tf.group(tf.cond(all_ok, ls_inc_op, ls_dec_op))",
                            "Lambda"
                        ]
                    ]
                },
                "false_fn": {
                    "value": "tf.no_op",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_383": {
                "x": {
                    "value": "grad",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[g for g in grad if g is not None]",
                            "ListComp"
                        ],
                        [
                            "[tf.cast(g, tf.float32) for g in grad]",
                            "ListComp"
                        ],
                        [
                            "tf.zeros(var.shape)",
                            "Call"
                        ],
                        [
                            "grad[0]",
                            "Subscript"
                        ],
                        [
                            "tf.add_n(grad)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_384": {
                "x": {
                    "value": "v_new",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.beta2 * v_var + (1 - self.beta2) * tf.square(grad)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_269": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_274": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "control_dependencies_283": {
                "control_inputs": {
                    "value": "[acc_cur]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cond_297": {
                "pred": {
                    "value": "all_ok",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_all(tf.stack([acc_ok] + [tf.reduce_all(tf.is_finite(g)) for g in device.grad_acc.values()]))",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "ls_inc_op",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "lambda : tf.assign_add(device.loss_scaling_var, self.loss_scaling_inc)",
                            "Lambda"
                        ]
                    ]
                },
                "false_fn": {
                    "value": "ls_dec_op",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "lambda : tf.assign_sub(device.loss_scaling_var, self.loss_scaling_dec)",
                            "Lambda"
                        ]
                    ]
                }
            },
            "where_303": {
                "condition": {
                    "value": "all_ok",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_all(tf.stack([acc_ok] + [tf.reduce_all(tf.is_finite(g)) for g in device.grad_acc.values()]))",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_379": {
                "input": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "device.grad_clean.keys()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_380": {
                "input": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "device.grad_clean.keys()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_268": {
                "shape": {
                    "value": "var.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assign_284": {
                "ref": {
                    "value": "acc_var",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "device.grad_acc_vars[var]",
                            "Subscript"
                        ]
                    ]
                },
                "value": {
                    "value": "acc_cur",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "acc_var + grad",
                            "BinOp"
                        ]
                    ]
                }
            },
            "assign_285": {
                "ref": {
                    "value": "acc_var",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "device.grad_acc_vars[var]",
                            "Subscript"
                        ]
                    ]
                },
                "value": {
                    "value": "tf.zeros(var.shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cond_286": {
                "pred": {
                    "value": "acc_ok",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant(True, name='acc_ok')",
                            "Call"
                        ],
                        [
                            "count_cur >= tf.cast(self.minibatch_multiplier, tf.float32)",
                            "Compare"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "acc_reset_op",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "lambda : tf.assign(acc_var, tf.zeros(var.shape))",
                            "Lambda"
                        ]
                    ]
                },
                "false_fn": {
                    "value": "acc_inc_op",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "lambda : tf.assign(acc_var, acc_cur)",
                            "Lambda"
                        ]
                    ]
                }
            },
            "cast_290": {
                "x": {
                    "value": "grad",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[g for g in grad if g is not None]",
                            "ListComp"
                        ],
                        [
                            "[tf.cast(g, tf.float32) for g in grad]",
                            "ListComp"
                        ],
                        [
                            "tf.zeros(var.shape)",
                            "Call"
                        ],
                        [
                            "grad[0]",
                            "Subscript"
                        ],
                        [
                            "tf.add_n(grad)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "var.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_285": {
                "shape": {
                    "value": "var.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_finite_289": {
                "x": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "dnnlib/tflib/tfutil.py": {
        "tensorflow": {
            "ConfigProto_146": {
                "variable": {
                    "value": "config_proto",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_239": {
                "variable": {
                    "value": "zeros",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "initial_value.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "initial_value.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_240": {
                "variable": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "zeros",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.zeros(initial_value.shape, initial_value.dtype)",
                            "Call"
                        ],
                        [
                            "tf.zeros(initial_value.shape, initial_value.dtype)",
                            "Call"
                        ]
                    ]
                },
                "trainable": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "zeros_248": {
                "variable": {
                    "value": "zeros",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "initial_value.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "initial_value.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_249": {
                "variable": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "zeros",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.zeros(initial_value.shape, initial_value.dtype)",
                            "Call"
                        ],
                        [
                            "tf.zeros(initial_value.shape, initial_value.dtype)",
                            "Call"
                        ]
                    ]
                },
                "trainable": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cast_258": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(images, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.transpose(images, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.cast(images, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(images, ksize=ksize, strides=ksize, padding='VALID', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.transpose(images, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "images * scale + (0.5 - drange[0] * scale)",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_268": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(images, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.transpose(images, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.cast(images, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(images, ksize=ksize, strides=ksize, padding='VALID', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.transpose(images, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "images * scale + (0.5 - drange[0] * scale)",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_default_session_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_32": {
                "main": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "name_scope_77": {
                "name": {
                    "value": "scope + '/'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_82": {
                "name_or_scope": {
                    "value": "tf.VariableScope(name=scope, **kwargs)",
                    "type": "Call",
                    "possible_values": []
                },
                "auxiliary_name_scope": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "global_variables_174": {
                "variable": {
                    "value": "target_vars",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "transpose_260": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(images, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.transpose(images, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.cast(images, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(images, ksize=ksize, strides=ksize, padding='VALID', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.transpose(images, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "images * scale + (0.5 - drange[0] * scale)",
                            "BinOp"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "avg_pool_271": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(images, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.transpose(images, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.cast(images, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(images, ksize=ksize, strides=ksize, padding='VALID', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.transpose(images, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "images * scale + (0.5 - drange[0] * scale)",
                            "BinOp"
                        ]
                    ]
                },
                "ksize": {
                    "value": "ksize",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[1, 1, shrink, shrink]",
                            "List"
                        ]
                    ]
                },
                "strides": {
                    "value": "ksize",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[1, 1, shrink, shrink]",
                            "List"
                        ]
                    ]
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "NCHW",
                    "type": "str",
                    "possible_values": []
                }
            },
            "transpose_273": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(images, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.transpose(images, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.cast(images, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(images, ksize=ksize, strides=ksize, padding='VALID', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.transpose(images, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "images * scale + (0.5 - drange[0] * scale)",
                            "BinOp"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "saturate_cast_276": {
                "value": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(images, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.transpose(images, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.cast(images, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.nn.avg_pool(images, ksize=ksize, strides=ksize, padding='VALID', data_format='NCHW')",
                            "Call"
                        ],
                        [
                            "tf.transpose(images, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "images * scale + (0.5 - drange[0] * scale)",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_47": {
                "name": {
                    "value": "Flatten",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_48": {
                "tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "name_scope_53": {
                "name": {
                    "value": "Log2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_59": {
                "name": {
                    "value": "Exp2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "exp_60": {
                "x": {
                    "value": "x * np.float32(np.log(2.0))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "name_scope_65": {
                "name": {
                    "value": "Lerp",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_71": {
                "name": {
                    "value": "LerpClip",
                    "type": "str",
                    "possible_values": []
                }
            },
            "VariableScope_82": {
                "name": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "get_default_session_111": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_random_seed_123": {
                "seed": {
                    "value": "tf_random_seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cfg['rnd.tf_random_seed']",
                            "Subscript"
                        ],
                        [
                            "np.random.randint(1 << 31)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_default_session_138": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "control_dependencies_179": {
                "control_inputs": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "assign_250": {
                "ref": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "target_vars",
                            "Name"
                        ],
                        [
                            "tf.Variable(zeros, *args, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.Variable(zeros, *args, **kwargs)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "initial_value",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "log_54": {
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "clip_by_value_72": {
                "t": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "get_default_graph_213": {
                "variable": {
                    "value": "setter",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_graph_185": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "group_217": {
                "variable": {
                    "value": "setter",
                    "type": "Variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "tf.assign(var, value)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "setter_variable",
                    "type": "str",
                    "possible_values": []
                }
            },
            "assign_226": {
                "variable": {
                    "value": "assigner",
                    "type": "Variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "target_vars",
                            "Name"
                        ],
                        [
                            "tf.Variable(zeros, *args, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.Variable(zeros, *args, **kwargs)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "tf.placeholder(var.dtype, var.shape, 'new_value')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "group_227": {
                "variable": {
                    "value": "setter",
                    "type": "Variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "assigner",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.assign(var, tf.placeholder(var.dtype, var.shape, 'new_value'))",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "setter",
                    "type": "str",
                    "possible_values": []
                }
            },
            "is_variable_initialized_191": {
                "variable": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "target_vars",
                            "Name"
                        ],
                        [
                            "tf.Variable(zeros, *args, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.Variable(zeros, *args, **kwargs)",
                            "Call"
                        ]
                    ]
                }
            },
            "control_dependencies_216": {
                "control_inputs": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "control_dependencies_225": {
                "control_inputs": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "assign_217": {
                "ref": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "target_vars",
                            "Name"
                        ],
                        [
                            "tf.Variable(zeros, *args, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.Variable(zeros, *args, **kwargs)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "placeholder_226": {
                "dtype": {
                    "value": "var.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "var.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "new_value",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "dnnlib/tflib/tpu_summaries.py": {
        "tensorflow": {
            "convert_to_tensor_85": {
                "variable": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(tensor)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tensor, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_or_create_global_step_95": {
                "variable": {
                    "value": "global_step",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "expand_dims_87": {
                "variable": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(tensor)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tensor, 0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_96": {
                "input": {
                    "value": "global_step",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.train.get_or_create_global_step()",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "encoder/generator_model.py": {
        "tensorflow": {
            "constant_9": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "get_variable_14": {
                "variable": {
                    "value": "low_dim_dlatent",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "learnable_dlatents",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, 512)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.initializers.random_normal()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_default_session_49": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_graph_50": {
                "variable": {
                    "value": "self.graph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "saturate_cast_78": {
                "variable": {
                    "value": "self.generated_image_uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.generated_image",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "logical_or_83": {
                "variable": {
                    "value": "clipping_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.dlatent_variable > clipping_threshold",
                    "type": "Compare",
                    "possible_values": []
                },
                "y": {
                    "value": "self.dlatent_variable < -clipping_threshold",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "where_84": {
                "variable": {
                    "value": "clipped_values",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "clipping_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.math.logical_or(self.dlatent_variable > clipping_threshold, self.dlatent_variable < -clipping_threshold)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "tf.random_normal(shape=self.dlatent_variable.shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "self.dlatent_variable",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assign_85": {
                "variable": {
                    "value": "self.stochastic_clip_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ref": {
                    "value": "self.dlatent_variable",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "clipped_values",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.where(clipping_mask, tf.random_normal(shape=self.dlatent_variable.shape), self.dlatent_variable)",
                            "Call"
                        ]
                    ]
                }
            },
            "tile_18": {
                "input": {
                    "value": "tf.expand_dims(low_dim_dlatent, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, model_scale, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_20": {
                "name": {
                    "value": "learnable_dlatents",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, model_scale, 512)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.initializers.random_normal()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_18": {
                "input": {
                    "value": "low_dim_dlatent",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('learnable_dlatents', shape=(batch_size, 512), dtype='float32', initializer=tf.initializers.random_normal())",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "global_variables_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "encoder/perceptual_model.py": {
        "tensorflow": {
            "reduce_mean_23": {
                "input_tensor": {
                    "value": "tf.math.abs(img2 - img1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "reduce_mean_26": {
                "input_tensor": {
                    "value": "tf.keras.losses.logcosh(img1, img2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_101": {
                "variable": {
                    "value": "self._global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "str",
                    "possible_values": []
                }
            },
            "assign_add_102": {
                "variable": {
                    "value": "self._incremented_global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ref": {
                    "value": "self._global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "assign_103": {
                "variable": {
                    "value": "self._reset_global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ref": {
                    "value": "self._global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exponential_decay_104": {
                "variable": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "global_step": {
                    "value": "self._incremented_global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "decay_steps": {
                    "value": "self.decay_steps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "decay_rate": {
                    "value": "self.decay_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "staircase": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "resize_nearest_neighbor_109": {
                "variable": {
                    "value": "self.generated_image",
                    "type": "Attribute",
                    "possible_values": []
                },
                "images": {
                    "value": "self.generated_image_tensor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "(self.img_size, self.img_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_112": {
                "variable": {
                    "value": "self.ref_img",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "ref_img",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.generated_image.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.initializers.zeros()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_114": {
                "variable": {
                    "value": "self.ref_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "ref_weight",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.generated_image.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.initializers.zeros()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_23": {
                "x": {
                    "value": "img2 - img1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_variable_123": {
                "variable": {
                    "value": "self.ref_img_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "ref_img_features",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.generated_img_features.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.initializers.zeros()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_125": {
                "variable": {
                    "value": "self.features_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "features_weight",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.generated_img_features.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.initializers.zeros()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_153": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_default_session_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_92": {
                "dtype": {
                    "value": "var_val.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "var_val.get_shape()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_87": {
                "a": {
                    "value": "img2",
                    "type": "Variable",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 3, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_113": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_115": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_mean_140": {
                "input_tensor": {
                    "value": "1 - tf.image.ssim_multiscale(self.ref_weight * self.ref_img, self.ref_weight * self.generated_image, 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_143": {
                "input_tensor": {
                    "value": "self.compare_images(self.ref_weight * self.ref_img, self.ref_weight * self.generated_image)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_146": {
                "input_tensor": {
                    "value": "tf.math.abs(self.generator.dlatent_variable[:, 0] - self.generator.get_dlatent_avg())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variables_initializer_155": {
                "var_list": {
                    "value": "self.optimizer.variables()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_124": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_126": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_146": {
                "x": {
                    "value": "self.generator.dlatent_variable[:, 0] - self.generator.get_dlatent_avg()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ssim_multiscale_140": {
                "img1": {
                    "value": "self.ref_weight * self.ref_img",
                    "type": "BinOp",
                    "possible_values": []
                },
                "img2": {
                    "value": "self.ref_weight * self.generated_image",
                    "type": "BinOp",
                    "possible_values": []
                },
                "max_val": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "mammos.py": {
        "tensorflow": {
            "Saver_86": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "var_list",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tflex.Gs.trainables",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "global_variables_initializer_77": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "latest_checkpoint_83": {
                "checkpoint_dir": {
                    "value": "path",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "metrics/frechet_inception_distance.py": {
        "tensorflow": {}
    },
    "metrics/inception_score.py": {
        "tensorflow": {}
    },
    "metrics/metric_base.py": {
        "tensorflow": {
            "Graph_64": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "metrics/perceptual_path_length.py": {
        "tensorflow": {
            "reduce_sum_27": {
                "variable": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "a * b",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sqrt_21": {
                "x": {
                    "value": "tf.reduce_sum(tf.square(v), axis=-1, keepdims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "acos_28": {
                "x": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(a * b, axis=-1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "a * tf.math.cos(p) + c * tf.math.sin(p)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_21": {
                "input_tensor": {
                    "value": "tf.square(v)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cos_30": {
                "x": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "t * tf.math.acos(d)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sin_30": {
                "x": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "t * tf.math.acos(d)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_63": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.tile(self._get_random_labels_tf(self.minibatch_per_gpu), [1, 2])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.minibatch_per_gpu * 2, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "square_21": {
                "x": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cast_68": {
                "variable": {
                    "value": "dlat_t01",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "dlat_t01",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Gs_clone.components.mapping.get_output_for(lat_t01, labels, **Gs_kwargs)",
                            "Call"
                        ],
                        [
                            "tf.cast(dlat_t01, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_72": {
                "variable": {
                    "value": "dlat_e01",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.stack([dlat_e0, dlat_e1], axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "dlat_t01.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_77": {
                "variable": {
                    "value": "lat_e01",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.stack([lat_e0, lat_e1], axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "lat_t01.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_83": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Gs_clone.components.synthesis.get_output_for(dlat_e01, randomize_noise=False, **Gs_kwargs)",
                            "Call"
                        ],
                        [
                            "tf.cast(images, tf.float32)",
                            "Call"
                        ],
                        [
                            "images[:, :, c * 3:c * 7, c * 2:c * 6]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(images, [-1, images.shape[1], images.shape[2] // factor, factor, images.shape[3] // factor, factor])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(images, axis=[3, 5])",
                            "Call"
                        ],
                        [
                            "(images + 1) * (255 / 2)",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_93": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Gs_clone.components.synthesis.get_output_for(dlat_e01, randomize_noise=False, **Gs_kwargs)",
                            "Call"
                        ],
                        [
                            "tf.cast(images, tf.float32)",
                            "Call"
                        ],
                        [
                            "images[:, :, c * 3:c * 7, c * 2:c * 6]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(images, [-1, images.shape[1], images.shape[2] // factor, factor, images.shape[3] // factor, factor])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(images, axis=[3, 5])",
                            "Call"
                        ],
                        [
                            "(images + 1) * (255 / 2)",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, images.shape[1], images.shape[2] // factor, factor, images.shape[3] // factor, factor]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_94": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Gs_clone.components.synthesis.get_output_for(dlat_e01, randomize_noise=False, **Gs_kwargs)",
                            "Call"
                        ],
                        [
                            "tf.cast(images, tf.float32)",
                            "Call"
                        ],
                        [
                            "images[:, :, c * 3:c * 7, c * 2:c * 6]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(images, [-1, images.shape[1], images.shape[2] // factor, factor, images.shape[3] // factor, factor])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(images, axis=[3, 5])",
                            "Call"
                        ],
                        [
                            "(images + 1) * (255 / 2)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "[3, 5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_63": {
                "input": {
                    "value": "self._get_random_labels_tf(self.minibatch_per_gpu)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "control_dependencies_81": {
                "control_inputs": {
                    "value": "[var.initializer for var in noise_vars]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_72": {
                "values": {
                    "value": "[dlat_e0, dlat_e1]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_77": {
                "values": {
                    "value": "[lat_e0, lat_e1]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "metrics/precision_recall.py": {
        "tensorflow": {
            "reduce_sum_25": {
                "variable": {
                    "value": "norm_u",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(U)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_26": {
                "variable": {
                    "value": "norm_v",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(V)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_29": {
                "variable": {
                    "value": "norm_u",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "norm_u",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.square(U), 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(norm_u, [-1, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_30": {
                "variable": {
                    "value": "norm_v",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "norm_v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.square(V), 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(norm_v, [1, -1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "maximum_33": {
                "variable": {
                    "value": "D",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "norm_u - 2 * tf.matmul(U, V, False, True) + norm_v",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "variable_scope_23": {
                "name_or_scope": {
                    "value": "pairwise_dist_block",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_47": {
                "variable": {
                    "value": "self._features_batch1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float16",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.num_features]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_48": {
                "variable": {
                    "value": "self._features_batch2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float16",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.num_features]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "split_49": {
                "variable": {
                    "value": "features_split2",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self._features_batch2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "self.num_gpus",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_54": {
                "variable": {
                    "value": "self._distance_block",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "distances_split",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "square_25": {
                "x": {
                    "value": "U",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "square_26": {
                "x": {
                    "value": "V",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "matmul_33": {
                "a": {
                    "value": "U",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "V",
                    "type": "Variable",
                    "possible_values": []
                },
                "transpose_a": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "prepare_image.py": {
        "tensorflow": {
            "Example_58": {
                "variable": {
                    "value": "example",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.train.Features(feature={'image/height': _int64_feature(height), 'image/width': _int64_feature(width), 'image/colorspace': _bytes_feature(colorspace), 'image/channels': _int64_feature(channels), 'image/class/label': _int64_feature(label_int + 1), 'image/class/synset': _bytes_feature(label_str), 'image/format': _bytes_feature(image_format), 'image/filename': _bytes_feature(os.path.basename(filename)), 'image/encoded': _bytes_feature(image_buffer)})",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "parse_single_example_118": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "serialized": {
                    "value": "record",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "{'shape': tf.FixedLenFeature([3], tf.int64), 'data': tf.FixedLenFeature([], tf.string)}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "decode_raw_119": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_bytes": {
                    "value": "features['data']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_type": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TFRecordDataset_123": {
                "variable": {
                    "value": "dset",
                    "type": "Variable",
                    "possible_values": []
                },
                "filenames": {
                    "value": "tfr_file",
                    "type": "Variable",
                    "possible_values": []
                },
                "compression_type": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "buffer_size": {
                    "value": "buffer_mb << 20",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_229": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_rand(*args, **kws)",
                            "Call"
                        ],
                        [
                            "x + tf_rand(*args, **kws)",
                            "BinOp"
                        ],
                        [
                            "tf.cast(x, tf.float32) / bias",
                            "BinOp"
                        ],
                        [
                            "tf.cast(x, dtype)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "kws.pop('dtype') if 'dtype' in kws else tf.float32",
                            "IfExp"
                        ]
                    ]
                }
            },
            "equal_316": {
                "variable": {
                    "value": "match",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cast_317": {
                "variable": {
                    "value": "match",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "match",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.equal(a, b)",
                            "Call"
                        ],
                        [
                            "tf.cast(match, tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_322": {
                "variable": {
                    "value": "bbox",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[0.0, 0.0, 1.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 1, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "extract_jpeg_shape_331": {
                "variable": {
                    "value": "original_shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "image_bytes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "extract_jpeg_shape_347": {
                "variable": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "image_bytes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cast_350": {
                "variable": {
                    "value": "padded_center_crop_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image_size / (image_size + CROP_PADDING) * tf.cast(tf.minimum(image_height, image_width), tf.float32)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_356": {
                "variable": {
                    "value": "crop_window",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[offset_height, offset_width, padded_center_crop_size, padded_center_crop_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "decode_and_crop_jpeg_358": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "image_bytes",
                    "type": "Variable",
                    "possible_values": []
                },
                "crop_window": {
                    "value": "crop_window",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.stack([offset_y, offset_x, target_height, target_width])",
                            "Call"
                        ],
                        [
                            "tf.stack([offset_height, offset_width, padded_center_crop_size, padded_center_crop_size])",
                            "Call"
                        ]
                    ]
                },
                "channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Feature_32": {
                "int64_list": {
                    "value": "tf.train.Int64List(value=value)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_37": {
                "bytes_list": {
                    "value": "tf.train.BytesList(value=[value])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_84": {
                "variable": {
                    "value": "self._png_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "decode_png_85": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "self._png_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "encode_jpeg_86": {
                "variable": {
                    "value": "self._png_to_jpeg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "coder.decode_jpeg(image_data)",
                            "Call"
                        ],
                        [
                            "tf.cond(w > h, lambda : tf.image.decode_and_crop_jpeg(image_bytes, tf.stack([x + tf_between(w - h, seed=seed), y, h, h]), channels=n), lambda : tf.cond(h > w, lambda : tf.image.decode_and_crop_jpeg(image_bytes, tf.stack([x, y + tf_between(h - w, seed=seed), w, w]), channels=n), lambda : tf.image.decode_jpeg(image_bytes, channels=n)))",
                            "Call"
                        ],
                        [
                            "tf.image.resize([image], image_size, method=method)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.image.decode_and_crop_jpeg(image_bytes, crop_window, channels=3)",
                            "Call"
                        ],
                        [
                            "distorted_bounding_box_crop(image_bytes, bbox, min_object_covered=0.1, aspect_ratio_range=aspect_ratio_range, area_range=area_range, max_attempts=10, scope=None)",
                            "Call"
                        ],
                        [
                            "tf.cond(bad, lambda : _decode_and_center_crop(image_bytes, image_size, resize=resize, method=method), lambda : tf.image.resize([image], [image_size, image_size], method=method)[0])",
                            "Call"
                        ],
                        [
                            "tf.cond(bad, lambda : _decode_and_center_crop(image_bytes, image_size, resize=resize, method=method), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_and_crop_jpeg(image_bytes, crop_window, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.resize([image], [image_size, image_size], method=method)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.image.decode_png(self._png_data, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(self._cmyk_data, channels=0)",
                            "Call"
                        ],
                        [
                            "self._sess.run(self._decode_jpeg, feed_dict={self._decode_jpeg_data: image_data})",
                            "Call"
                        ]
                    ]
                },
                "format": {
                    "value": "rgb",
                    "type": "str",
                    "possible_values": []
                },
                "quality": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "placeholder_89": {
                "variable": {
                    "value": "self._cmyk_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "decode_jpeg_90": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "self._cmyk_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "channels": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "encode_jpeg_91": {
                "variable": {
                    "value": "self._cmyk_to_rgb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "coder.decode_jpeg(image_data)",
                            "Call"
                        ],
                        [
                            "tf.cond(w > h, lambda : tf.image.decode_and_crop_jpeg(image_bytes, tf.stack([x + tf_between(w - h, seed=seed), y, h, h]), channels=n), lambda : tf.cond(h > w, lambda : tf.image.decode_and_crop_jpeg(image_bytes, tf.stack([x, y + tf_between(h - w, seed=seed), w, w]), channels=n), lambda : tf.image.decode_jpeg(image_bytes, channels=n)))",
                            "Call"
                        ],
                        [
                            "tf.image.resize([image], image_size, method=method)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.image.decode_and_crop_jpeg(image_bytes, crop_window, channels=3)",
                            "Call"
                        ],
                        [
                            "distorted_bounding_box_crop(image_bytes, bbox, min_object_covered=0.1, aspect_ratio_range=aspect_ratio_range, area_range=area_range, max_attempts=10, scope=None)",
                            "Call"
                        ],
                        [
                            "tf.cond(bad, lambda : _decode_and_center_crop(image_bytes, image_size, resize=resize, method=method), lambda : tf.image.resize([image], [image_size, image_size], method=method)[0])",
                            "Call"
                        ],
                        [
                            "tf.cond(bad, lambda : _decode_and_center_crop(image_bytes, image_size, resize=resize, method=method), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_and_crop_jpeg(image_bytes, crop_window, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.resize([image], [image_size, image_size], method=method)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.image.decode_png(self._png_data, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(self._cmyk_data, channels=0)",
                            "Call"
                        ],
                        [
                            "self._sess.run(self._decode_jpeg, feed_dict={self._decode_jpeg_data: image_data})",
                            "Call"
                        ]
                    ]
                },
                "format": {
                    "value": "rgb",
                    "type": "str",
                    "possible_values": []
                },
                "quality": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "placeholder_94": {
                "variable": {
                    "value": "self._decode_jpeg_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "decode_jpeg_95": {
                "variable": {
                    "value": "self._decode_jpeg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "contents": {
                    "value": "self._decode_jpeg_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_120": {
                "tensor": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.decode_raw(features['data'], tf.uint8)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "features['shape']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "get_default_session_136": {
                "variable": {
                    "value": "session",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "transpose_141": {
                "variable": {
                    "value": "op",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "it.get_next()",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 2, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "uniform_211": {
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "minval": {
                    "value": "lo",
                    "type": "Variable",
                    "possible_values": []
                },
                "maxval": {
                    "value": "hi",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "uniform_220": {
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "minval": {
                    "value": "lo",
                    "type": "Variable",
                    "possible_values": []
                },
                "maxval": {
                    "value": "hi",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "extract_jpeg_shape_240": {
                "variable": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "image_bytes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cond_246": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "w > h",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : tf.image.decode_and_crop_jpeg(image_bytes, tf.stack([x + tf_between(w - h, seed=seed), y, h, h]), channels=n)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.cond(h > w, lambda : tf.image.decode_and_crop_jpeg(image_bytes, tf.stack([x, y + tf_between(h - w, seed=seed), w, w]), channels=n), lambda : tf.image.decode_jpeg(image_bytes, channels=n))",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "extract_jpeg_shape_296": {
                "variable": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "image_bytes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sample_distorted_bounding_box_297": {
                "variable": {
                    "value": "sample_distorted_bounding_box",
                    "type": "Variable",
                    "possible_values": []
                },
                "image_size": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.extract_jpeg_shape(image_bytes)",
                            "Call"
                        ],
                        [
                            "tf.image.extract_jpeg_shape(image_bytes)",
                            "Call"
                        ],
                        [
                            "tf.image.extract_jpeg_shape(image_bytes)",
                            "Call"
                        ]
                    ]
                },
                "bounding_boxes": {
                    "value": "bbox",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant([0.0, 0.0, 1.0, 1.0], dtype=tf.float32, shape=[1, 1, 4])",
                            "Call"
                        ]
                    ]
                },
                "min_object_covered": {
                    "value": "min_object_covered",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                },
                "aspect_ratio_range": {
                    "value": "aspect_ratio_range",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(0.75",
                            "MethodArgument"
                        ],
                        [
                            "(3.0 / 4",
                            "MethodArgument"
                        ]
                    ]
                },
                "area_range": {
                    "value": "area_range",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(0.05",
                            "MethodArgument"
                        ],
                        [
                            "(0.08",
                            "MethodArgument"
                        ]
                    ]
                },
                "max_attempts": {
                    "value": "max_attempts",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                },
                "use_image_if_no_bounding_boxes": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "unstack_307": {
                "variable": {
                    "value": "(offset_y, offset_x, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "bbox_begin",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "unstack_308": {
                "variable": {
                    "value": "(target_height, target_width, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "bbox_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "stack_309": {
                "variable": {
                    "value": "crop_window",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[offset_y, offset_x, target_height, target_width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "decode_and_crop_jpeg_310": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "image_bytes",
                    "type": "Variable",
                    "possible_values": []
                },
                "crop_window": {
                    "value": "crop_window",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.stack([offset_y, offset_x, target_height, target_width])",
                            "Call"
                        ],
                        [
                            "tf.stack([offset_height, offset_width, padded_center_crop_size, padded_center_crop_size])",
                            "Call"
                        ]
                    ]
                },
                "channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "greater_equal_318": {
                "x": {
                    "value": "tf.reduce_sum(match)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_rand(*args, **kws)",
                            "Call"
                        ],
                        [
                            "x + tf_rand(*args, **kws)",
                            "BinOp"
                        ],
                        [
                            "tf.cast(x, tf.float32) / bias",
                            "BinOp"
                        ],
                        [
                            "tf.cast(x, dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "cond_334": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "bad",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_at_least_x_are_equal(original_shape, tf.shape(image), 3)",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : _decode_and_center_crop(image_bytes, image_size, resize=resize, method=method)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.image.resize([image], [image_size, image_size], method=method)[0]",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_339": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "bad",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_at_least_x_are_equal(original_shape, tf.shape(image), 3)",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : _decode_and_center_crop(image_bytes, image_size, resize=resize, method=method)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : image",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "disable_eager_execution_379": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FastGFile_170": {
                "name": {
                    "value": "path",
                    "type": "Variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "rb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_190": {
                "msg": {
                    "value": "'Converting PNG to JPEG for %s' % filename",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_228": {
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_rand(*args, **kws)",
                            "Call"
                        ],
                        [
                            "x + tf_rand(*args, **kws)",
                            "BinOp"
                        ],
                        [
                            "tf.cast(x, tf.float32) / bias",
                            "BinOp"
                        ],
                        [
                            "tf.cast(x, dtype)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_239": {
                "name": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "name_scope_295": {
                "name": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reduce_sum_318": {
                "input_tensor": {
                    "value": "match",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.equal(a, b)",
                            "Call"
                        ],
                        [
                            "tf.cast(match, tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_332": {
                "input": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "coder.decode_jpeg(image_data)",
                            "Call"
                        ],
                        [
                            "tf.cond(w > h, lambda : tf.image.decode_and_crop_jpeg(image_bytes, tf.stack([x + tf_between(w - h, seed=seed), y, h, h]), channels=n), lambda : tf.cond(h > w, lambda : tf.image.decode_and_crop_jpeg(image_bytes, tf.stack([x, y + tf_between(h - w, seed=seed), w, w]), channels=n), lambda : tf.image.decode_jpeg(image_bytes, channels=n)))",
                            "Call"
                        ],
                        [
                            "tf.image.resize([image], image_size, method=method)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.image.decode_and_crop_jpeg(image_bytes, crop_window, channels=3)",
                            "Call"
                        ],
                        [
                            "distorted_bounding_box_crop(image_bytes, bbox, min_object_covered=0.1, aspect_ratio_range=aspect_ratio_range, area_range=area_range, max_attempts=10, scope=None)",
                            "Call"
                        ],
                        [
                            "tf.cond(bad, lambda : _decode_and_center_crop(image_bytes, image_size, resize=resize, method=method), lambda : tf.image.resize([image], [image_size, image_size], method=method)[0])",
                            "Call"
                        ],
                        [
                            "tf.cond(bad, lambda : _decode_and_center_crop(image_bytes, image_size, resize=resize, method=method), lambda : image)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_and_crop_jpeg(image_bytes, crop_window, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.resize([image], [image_size, image_size], method=method)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.image.decode_png(self._png_data, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(self._cmyk_data, channels=0)",
                            "Call"
                        ],
                        [
                            "self._sess.run(self._decode_jpeg, feed_dict={self._decode_jpeg_data: image_data})",
                            "Call"
                        ]
                    ]
                }
            },
            "TPUClusterResolver_372": {
                "variable": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                },
                "tpu": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.environ['COLAB_TPU_ADDR']",
                            "Subscript"
                        ],
                        [
                            "os.environ['TPU_NAME']",
                            "Subscript"
                        ],
                        [
                            "TPUClusterResolver(target).get_master()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Session_386": {
                "target": {
                    "value": "get_target()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "FastGFile_476": {
                "name": {
                    "value": "arguments['labels_file']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "r",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Int64List_32": {
                "value": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[value]",
                            "List"
                        ]
                    ]
                }
            },
            "BytesList_37": {
                "value": {
                    "value": "[value]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Features_59": {
                "feature": {
                    "value": "{'image/height': _int64_feature(height), 'image/width': _int64_feature(width), 'image/colorspace': _bytes_feature(colorspace), 'image/channels': _int64_feature(channels), 'image/class/label': _int64_feature(label_int + 1), 'image/class/synset': _bytes_feature(label_str), 'image/format': _bytes_feature(image_format), 'image/filename': _bytes_feature(os.path.basename(filename)), 'image/encoded': _bytes_feature(image_buffer)}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "get_default_session_80": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_81": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "info_194": {
                "msg": {
                    "value": "'Converting CMYK to RGB for %s' % filename",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_352": {
                "x": {
                    "value": "tf.minimum(image_height, image_width)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "resize_360": {
                "images": {
                    "value": "[image]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[image_size, image_size]",
                    "type": "List",
                    "possible_values": []
                },
                "method": {
                    "value": "method",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.ResizeMethod.AREA",
                            "MethodArgument"
                        ],
                        [
                            "tf.image.ResizeMethod.AREA",
                            "MethodArgument"
                        ],
                        [
                            "tf.image.ResizeMethod.AREA",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "encode_jpeg_388": {
                "image": {
                    "value": "sess.run(random_crop(image_data, resize=args.resize))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "FixedLenFeature_118": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "decode_and_crop_jpeg_247": {
                "contents": {
                    "value": "image_bytes",
                    "type": "Variable",
                    "possible_values": []
                },
                "crop_window": {
                    "value": "tf.stack([x + tf_between(w - h, seed=seed), y, h, h])",
                    "type": "Call",
                    "possible_values": []
                },
                "channels": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                }
            },
            "cond_248": {
                "pred": {
                    "value": "h > w",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : tf.image.decode_and_crop_jpeg(image_bytes, tf.stack([x, y + tf_between(h - w, seed=seed), w, w]), channels=n)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.image.decode_jpeg(image_bytes, channels=n)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "resize_253": {
                "images": {
                    "value": "[image]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "image_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[resize, resize] if isinstance(resize, int) or isinstance(resize, float) else resize",
                            "IfExp"
                        ]
                    ]
                },
                "method": {
                    "value": "method",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.ResizeMethod.AREA",
                            "MethodArgument"
                        ],
                        [
                            "tf.image.ResizeMethod.AREA",
                            "MethodArgument"
                        ],
                        [
                            "tf.image.ResizeMethod.AREA",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "minimum_352": {
                "x": {
                    "value": "image_height",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "image_width",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "stack_247": {
                "values": {
                    "value": "[x + tf_between(w - h, seed=seed), y, h, h]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "resize_337": {
                "images": {
                    "value": "[image]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[image_size, image_size]",
                    "type": "List",
                    "possible_values": []
                },
                "method": {
                    "value": "method",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.ResizeMethod.AREA",
                            "MethodArgument"
                        ],
                        [
                            "tf.image.ResizeMethod.AREA",
                            "MethodArgument"
                        ],
                        [
                            "tf.image.ResizeMethod.AREA",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "decode_and_crop_jpeg_249": {
                "contents": {
                    "value": "image_bytes",
                    "type": "Variable",
                    "possible_values": []
                },
                "crop_window": {
                    "value": "tf.stack([x, y + tf_between(h - w, seed=seed), w, w])",
                    "type": "Call",
                    "possible_values": []
                },
                "channels": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                }
            },
            "decode_jpeg_250": {
                "contents": {
                    "value": "image_bytes",
                    "type": "Variable",
                    "possible_values": []
                },
                "channels": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                }
            },
            "stack_249": {
                "values": {
                    "value": "[x, y + tf_between(h - w, seed=seed), w, w]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "projector.py": {
        "tensorflow": {
            "group_87": {
                "variable": {
                    "value": "self._noise_init_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "*noise_init_ops",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "group_88": {
                "variable": {
                    "value": "self._noise_normalize_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "*noise_normalize_ops",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Variable_92": {
                "variable": {
                    "value": "self._dlatents_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([self._minibatch_size] + list(self._dlatent_avg.shape[1:]))",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "dlatents_var",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_93": {
                "variable": {
                    "value": "self._noise_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "noise_in",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tile_95": {
                "variable": {
                    "value": "self._dlatents_expr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self._dlatents_var + dlatents_noise",
                    "type": "BinOp",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, self._Gs.components.synthesis.input_shape[1], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_107": {
                "variable": {
                    "value": "self._target_images_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros(proc_images_expr.shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "target_images_var",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_111": {
                "variable": {
                    "value": "self._loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self._dist",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_129": {
                "variable": {
                    "value": "self._lrate_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "lrate_in",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_83": {
                "variable": {
                    "value": "noise_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._Gs.vars[n]",
                            "Subscript"
                        ],
                        [
                            "self._noise_vars",
                            "Attribute"
                        ],
                        [
                            "tf.reshape(v, [1, 1, sz // 2, 2, sz // 2, 2])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(v, axis=[3, 5])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_103": {
                "variable": {
                    "value": "proc_images_expr",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reshape(proc_images_expr, [-1, sh[1], sh[2] // factor, factor, sh[2] // factor, factor])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[3, 5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_92": {
                "shape": {
                    "value": "[self._minibatch_size] + list(self._dlatent_avg.shape[1:])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "normal_94": {
                "shape": {
                    "value": "self._dlatents_var.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_107": {
                "shape": {
                    "value": "proc_images_expr.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_122": {
                "variable": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._Gs.vars[n]",
                            "Subscript"
                        ],
                        [
                            "self._noise_vars",
                            "Attribute"
                        ],
                        [
                            "tf.reshape(v, [1, 1, sz // 2, 2, sz // 2, 2])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(v, axis=[3, 5])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, 1, sz // 2, 2, sz // 2, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_123": {
                "variable": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._Gs.vars[n]",
                            "Subscript"
                        ],
                        [
                            "self._noise_vars",
                            "Attribute"
                        ],
                        [
                            "tf.reshape(v, [1, 1, sz // 2, 2, sz // 2, 2])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(v, axis=[3, 5])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[3, 5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "assign_82": {
                "ref": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._Gs.vars[n]",
                            "Subscript"
                        ],
                        [
                            "self._noise_vars",
                            "Attribute"
                        ],
                        [
                            "tf.reshape(v, [1, 1, sz // 2, 2, sz // 2, 2])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(v, axis=[3, 5])",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "tf.random_normal(tf.shape(v), dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_84": {
                "input_tensor": {
                    "value": "(v - noise_mean) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "assign_85": {
                "ref": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._Gs.vars[n]",
                            "Subscript"
                        ],
                        [
                            "self._noise_vars",
                            "Attribute"
                        ],
                        [
                            "tf.reshape(v, [1, 1, sz // 2, 2, sz // 2, 2])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(v, axis=[3, 5])",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "(v - noise_mean) / noise_std",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_103": {
                "tensor": {
                    "value": "proc_images_expr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(self._images_expr + 1) * (255 / 2)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(tf.reshape(proc_images_expr, [-1, sh[1], sh[2] // factor, factor, sh[2] // factor, factor]), axis=[3, 5])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, sh[1], sh[2] // factor, factor, sh[2] // factor, factor]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_82": {
                "input": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._Gs.vars[n]",
                            "Subscript"
                        ],
                        [
                            "self._noise_vars",
                            "Attribute"
                        ],
                        [
                            "tf.reshape(v, [1, 1, sz // 2, 2, sz // 2, 2])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(v, axis=[3, 5])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_119": {
                "input_tensor": {
                    "value": "v * tf.roll(v, shift=1, axis=2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "roll_119": {
                "input": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._Gs.vars[n]",
                            "Subscript"
                        ],
                        [
                            "self._noise_vars",
                            "Attribute"
                        ],
                        [
                            "tf.reshape(v, [1, 1, sz // 2, 2, sz // 2, 2])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(v, axis=[3, 5])",
                            "Call"
                        ]
                    ]
                },
                "shift": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "run_training.py": {
        "tensorflow": {
            "IsDirectory_194": {
                "dirname": {
                    "value": "args.data_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tflex.py": {
        "tensorflow": {
            "ConfigProto_230": {
                "variable": {
                    "value": "config",
                    "type": "Variable",
                    "possible_values": []
                },
                "operation_timeout_in_ms": {
                    "value": "timeout_in_ms",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(os.environ['TIMEOUT_IN_MS']) if 'TIMEOUT_IN_MS' in os.environ else 10 * 60 * 1000",
                            "IfExp"
                        ],
                        [
                            "600 * 60 * 1000",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "60000",
                            "MethodArgument"
                        ]
                    ]
                },
                "graph_options": {
                    "value": "tf.GraphOptions(rewrite_options=rewriter_config_pb2.RewriterConfig(disable_meta_optimizer=True))",
                    "type": "Call",
                    "possible_values": []
                },
                "isolate_session_state": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Session_238": {
                "variable": {
                    "value": "init_sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "target": {
                    "value": "cluster_resolver.get_master()",
                    "type": "Call",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(operation_timeout_in_ms=timeout_in_ms, graph_options=tf.GraphOptions(rewrite_options=rewriter_config_pb2.RewriterConfig(disable_meta_optimizer=True)), isolate_session_state=True)",
                            "Call"
                        ],
                        [
                            "tf.ConfigProto(operation_timeout_in_ms=timeout_in_ms, graph_options=tf.GraphOptions(rewrite_options=rewriter_config_pb2.RewriterConfig(disable_meta_optimizer=True)), isolate_session_state=True)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "NewCheckpointReader_461": {
                "variable": {
                    "value": "reader",
                    "type": "Variable",
                    "possible_values": []
                },
                "filepattern": {
                    "value": "ckpt",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.train.latest_checkpoint(checkpoint_dir, latest_filename=latest_filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "latest_checkpoint_390": {
                "variable": {
                    "value": "ckpt",
                    "type": "Variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "checkpoint_dir",
                    "type": "Variable",
                    "possible_values": []
                },
                "latest_filename": {
                    "value": "latest_filename",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "initialize_system_415": {
                "variable": {
                    "value": "op",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "RunOptions_418": {
                "variable": {
                    "value": "options",
                    "type": "Variable",
                    "possible_values": []
                },
                "timeout_in_ms": {
                    "value": "timeout_in_ms",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(os.environ['TIMEOUT_IN_MS']) if 'TIMEOUT_IN_MS' in os.environ else 10 * 60 * 1000",
                            "IfExp"
                        ],
                        [
                            "600 * 60 * 1000",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "60000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "RunOptions_429": {
                "variable": {
                    "value": "options",
                    "type": "Variable",
                    "possible_values": []
                },
                "timeout_in_ms": {
                    "value": "timeout_in_ms",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(os.environ['TIMEOUT_IN_MS']) if 'TIMEOUT_IN_MS' in os.environ else 10 * 60 * 1000",
                            "IfExp"
                        ],
                        [
                            "600 * 60 * 1000",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "60000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "RunOptions_436": {
                "variable": {
                    "value": "options",
                    "type": "Variable",
                    "possible_values": []
                },
                "timeout_in_ms": {
                    "value": "timeout_in_ms",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(os.environ['TIMEOUT_IN_MS']) if 'TIMEOUT_IN_MS' in os.environ else 10 * 60 * 1000",
                            "IfExp"
                        ],
                        [
                            "600 * 60 * 1000",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "60000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "RunOptions_456": {
                "variable": {
                    "value": "options",
                    "type": "Variable",
                    "possible_values": []
                },
                "timeout_in_ms": {
                    "value": "timeout_in_ms",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(os.environ['TIMEOUT_IN_MS']) if 'TIMEOUT_IN_MS' in os.environ else 10 * 60 * 1000",
                            "IfExp"
                        ],
                        [
                            "600 * 60 * 1000",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "60000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ClusterSpec_225": {
                "cluster": {
                    "value": "r",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "str(x)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "dict()",
                            "Call"
                        ]
                    ]
                }
            },
            "initialize_system_228": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConfigProto_318": {
                "variable": {
                    "value": "config",
                    "type": "Variable",
                    "possible_values": []
                },
                "operation_timeout_in_ms": {
                    "value": "timeout_in_ms",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(os.environ['TIMEOUT_IN_MS']) if 'TIMEOUT_IN_MS' in os.environ else 10 * 60 * 1000",
                            "IfExp"
                        ],
                        [
                            "600 * 60 * 1000",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "60000",
                            "MethodArgument"
                        ]
                    ]
                },
                "graph_options": {
                    "value": "tf.GraphOptions(rewrite_options=rewriter_config_pb2.RewriterConfig(disable_meta_optimizer=True))",
                    "type": "Call",
                    "possible_values": []
                },
                "isolate_session_state": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "trainable_variables_462": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_471": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_478": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_491": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_534": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_552": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_559": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_955": {
                "device_name": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "device_960": {
                "device_name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "variable_name(variable).split(':')[0]",
                            "Subscript"
                        ],
                        [
                            "os.path.join(tf.get_variable_scope().name, name)",
                            "Call"
                        ],
                        [
                            "variable_name(variable)",
                            "Call"
                        ],
                        [
                            "cmd",
                            "Name"
                        ],
                        [
                            "cmd[0]",
                            "Subscript"
                        ],
                        [
                            "fn.__qualname__",
                            "Attribute"
                        ],
                        [
                            "name.replace('.<locals>.', '_command_')",
                            "Call"
                        ],
                        [
                            "'save'",
                            "Constant"
                        ],
                        [
                            "name.replace('___', '/')",
                            "Call"
                        ],
                        [
                            "'%s-%d.hdf5' % (save_path, global_step)",
                            "BinOp"
                        ],
                        [
                            "'%s.hdf5' % save_path",
                            "BinOp"
                        ],
                        [
                            "''",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_default_session_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_graph_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GraphOptions_231": {
                "rewrite_options": {
                    "value": "rewriter_config_pb2.RewriterConfig(disable_meta_optimizer=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_scope_470": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cast_518": {
                "variable": {
                    "value": "op",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "variable",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "vs",
                            "Name"
                        ],
                        [
                            "variables",
                            "Name"
                        ],
                        [
                            "get_variable(name)",
                            "Call"
                        ],
                        [
                            "variables",
                            "Name"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_943": {
                "device_name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "variable_name(variable).split(':')[0]",
                            "Subscript"
                        ],
                        [
                            "os.path.join(tf.get_variable_scope().name, name)",
                            "Call"
                        ],
                        [
                            "variable_name(variable)",
                            "Call"
                        ],
                        [
                            "cmd",
                            "Name"
                        ],
                        [
                            "cmd[0]",
                            "Subscript"
                        ],
                        [
                            "fn.__qualname__",
                            "Attribute"
                        ],
                        [
                            "name.replace('.<locals>.', '_command_')",
                            "Call"
                        ],
                        [
                            "'save'",
                            "Constant"
                        ],
                        [
                            "name.replace('___', '/')",
                            "Call"
                        ],
                        [
                            "'%s-%d.hdf5' % (save_path, global_step)",
                            "BinOp"
                        ],
                        [
                            "'%s.hdf5' % save_path",
                            "BinOp"
                        ],
                        [
                            "''",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "device_946": {
                "device_name": {
                    "value": "get_cores()[i].name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_949": {
                "device_name": {
                    "value": "device_for_tpu_core(core=i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_952": {
                "device_name": {
                    "value": "get_cpus()[i].name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_958": {
                "device_name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "variable_name(variable).split(':')[0]",
                            "Subscript"
                        ],
                        [
                            "os.path.join(tf.get_variable_scope().name, name)",
                            "Call"
                        ],
                        [
                            "variable_name(variable)",
                            "Call"
                        ],
                        [
                            "cmd",
                            "Name"
                        ],
                        [
                            "cmd[0]",
                            "Subscript"
                        ],
                        [
                            "fn.__qualname__",
                            "Attribute"
                        ],
                        [
                            "name.replace('.<locals>.', '_command_')",
                            "Call"
                        ],
                        [
                            "'save'",
                            "Constant"
                        ],
                        [
                            "name.replace('___', '/')",
                            "Call"
                        ],
                        [
                            "'%s-%d.hdf5' % (save_path, global_step)",
                            "BinOp"
                        ],
                        [
                            "'%s.hdf5' % save_path",
                            "BinOp"
                        ],
                        [
                            "''",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "GraphOptions_319": {
                "rewrite_options": {
                    "value": "rewriter_config_pb2.RewriterConfig(disable_meta_optimizer=True)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "training/dataset.py": {
        "tensorflow": {
            "parse_single_example_196": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "serialized": {
                    "value": "record",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "{'shape': tf.FixedLenFeature([3], tf.int64), 'data': tf.FixedLenFeature([], tf.string)}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "decode_raw_199": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_bytes": {
                    "value": "features['data']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_type": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Example_211": {
                "variable": {
                    "value": "ex",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "IsDirectory_68": {
                "dirname": {
                    "value": "self.tfrecord_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_200": {
                "tensor": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.decode_raw(features['data'], tf.uint8)",
                            "Call"
                        ],
                        [
                            "ex.features.feature['data'].bytes_list.value[0]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "features['shape']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cast_206": {
                "x": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "TFRecordDataset.parse_tfrecord_tf(record)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "glob_69": {
                "pattern": {
                    "value": "os.path.join(self.tfrecord_dir, '*.tfrecords')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "name_scope_181": {
                "name": {
                    "value": "Dataset",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_185": {
                "shape": {
                    "value": "[minibatch_size, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.label_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "glob_86": {
                "pattern": {
                    "value": "os.path.join(self.tfrecord_dir, '*.labels')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exists_89": {
                "path": {
                    "value": "self.label_file",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exists_91": {
                "path": {
                    "value": "guess",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sorted(tf.io.gfile.glob(os.path.join(self.tfrecord_dir, '*.labels')))",
                            "Call"
                        ],
                        [
                            "os.path.join(self.tfrecord_dir, self.label_file)",
                            "Call"
                        ]
                    ]
                }
            },
            "GFile_109": {
                "name": {
                    "value": "self.label_file",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "rb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_122": {
                "name": {
                    "value": "Dataset",
                    "type": "str",
                    "possible_values": []
                }
            },
            "TFRecordDataset_130": {
                "variable": {
                    "value": "dset",
                    "type": "Variable",
                    "possible_values": []
                },
                "filenames": {
                    "value": "tfr_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tfr_files",
                            "Name"
                        ]
                    ]
                },
                "compression_type": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "buffer_size": {
                    "value": "buffer_mb << 20",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "name_scope_170": {
                "name": {
                    "value": "Dataset",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_123": {
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "minibatch_in",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "control_dependencies_125": {
                "control_inputs": {
                    "value": "[self._tf_labels_init]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_184": {
                "params": {
                    "value": "self._tf_labels_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.random_uniform([minibatch_size], 0, self._np_labels.shape[0], dtype=tf.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "FixedLenFeature_197": {
                "shape": {
                    "value": "[3]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_198": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_op_146": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "training/imagenet_input.py": {
        "tensorflow": {
            "equal_90": {
                "variable": {
                    "value": "match",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cast_91": {
                "variable": {
                    "value": "match",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "match",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.equal(a, b)",
                            "Call"
                        ],
                        [
                            "tf.cast(match, tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_97": {
                "variable": {
                    "value": "bbox",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[0.0, 0.0, 1.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 1, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "decode_image_111": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "image_bytes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(parsed['image/encoded'], shape=[])",
                            "Call"
                        ],
                        [
                            "tf.reshape(parsed['image/encoded'], shape=[])",
                            "Call"
                        ],
                        [
                            "tf.io.decode_image(image_bytes, channels=3)",
                            "Call"
                        ]
                    ]
                },
                "channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_112": {
                "variable": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.crop_to_bounding_box(image_bytes, offset_y, offset_x, target_height, target_width)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_and_crop_jpeg(image_bytes, crop_window, channels=3)",
                            "Call"
                        ],
                        [
                            "distorted_bounding_box_crop(image_bytes, bbox, min_object_covered=0.1, aspect_ratio_range=(3.0 / 4, 4.0 / 3.0), area_range=(0.08, 1.0), max_attempts=10, scope=None)",
                            "Call"
                        ],
                        [
                            "tf.io.decode_image(image_bytes, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.random_crop(image, [padded_center_crop_size, padded_center_crop_size, channels])",
                            "Call"
                        ],
                        [
                            "tf.image.crop_to_bounding_box(image, offset_height, offset_width, padded_center_crop_size, padded_center_crop_size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_area([image], [image_size, image_size])[0]",
                            "Subscript"
                        ],
                        [
                            "tf.io.decode_image(image_bytes, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_area([image], [image_size, image_size])[0]",
                            "Subscript"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "_decode_and_random_crop(image_bytes, image_size)",
                            "Call"
                        ],
                        [
                            "_flip(image)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [image_size, image_size, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.bfloat16 if use_bfloat16 else tf.float32)",
                            "Call"
                        ],
                        [
                            "_decode_and_center_crop(image_bytes, image_size)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [image_size, image_size, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.bfloat16 if use_bfloat16 else tf.float32)",
                            "Call"
                        ],
                        [
                            "preprocess_image(image_bytes=image_bytes, is_training=False)",
                            "Call"
                        ],
                        [
                            "tf.cond(label < 0, lambda : self._get_null_input(None), lambda : self.image_preprocessing_fn(image_bytes=image_bytes, is_training=self.is_training, image_size=self.image_size, use_bfloat16=self.use_bfloat16))",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_118": {
                "variable": {
                    "value": "padded_center_crop_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image_size / (image_size + crop_padding) * tf.cast(tf.minimum(image_height, image_width), tf.float32)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "random_flip_left_right_147": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.crop_to_bounding_box(image_bytes, offset_y, offset_x, target_height, target_width)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_and_crop_jpeg(image_bytes, crop_window, channels=3)",
                            "Call"
                        ],
                        [
                            "distorted_bounding_box_crop(image_bytes, bbox, min_object_covered=0.1, aspect_ratio_range=(3.0 / 4, 4.0 / 3.0), area_range=(0.08, 1.0), max_attempts=10, scope=None)",
                            "Call"
                        ],
                        [
                            "tf.io.decode_image(image_bytes, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.random_crop(image, [padded_center_crop_size, padded_center_crop_size, channels])",
                            "Call"
                        ],
                        [
                            "tf.image.crop_to_bounding_box(image, offset_height, offset_width, padded_center_crop_size, padded_center_crop_size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_area([image], [image_size, image_size])[0]",
                            "Subscript"
                        ],
                        [
                            "tf.io.decode_image(image_bytes, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_area([image], [image_size, image_size])[0]",
                            "Subscript"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "_decode_and_random_crop(image_bytes, image_size)",
                            "Call"
                        ],
                        [
                            "_flip(image)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [image_size, image_size, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.bfloat16 if use_bfloat16 else tf.float32)",
                            "Call"
                        ],
                        [
                            "_decode_and_center_crop(image_bytes, image_size)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [image_size, image_size, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.bfloat16 if use_bfloat16 else tf.float32)",
                            "Call"
                        ],
                        [
                            "preprocess_image(image_bytes=image_bytes, is_training=False)",
                            "Call"
                        ],
                        [
                            "tf.cond(label < 0, lambda : self._get_null_input(None), lambda : self.image_preprocessing_fn(image_bytes=image_bytes, is_training=self.is_training, image_size=self.image_size, use_bfloat16=self.use_bfloat16))",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_164": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.crop_to_bounding_box(image_bytes, offset_y, offset_x, target_height, target_width)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_and_crop_jpeg(image_bytes, crop_window, channels=3)",
                            "Call"
                        ],
                        [
                            "distorted_bounding_box_crop(image_bytes, bbox, min_object_covered=0.1, aspect_ratio_range=(3.0 / 4, 4.0 / 3.0), area_range=(0.08, 1.0), max_attempts=10, scope=None)",
                            "Call"
                        ],
                        [
                            "tf.io.decode_image(image_bytes, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.random_crop(image, [padded_center_crop_size, padded_center_crop_size, channels])",
                            "Call"
                        ],
                        [
                            "tf.image.crop_to_bounding_box(image, offset_height, offset_width, padded_center_crop_size, padded_center_crop_size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_area([image], [image_size, image_size])[0]",
                            "Subscript"
                        ],
                        [
                            "tf.io.decode_image(image_bytes, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_area([image], [image_size, image_size])[0]",
                            "Subscript"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "_decode_and_random_crop(image_bytes, image_size)",
                            "Call"
                        ],
                        [
                            "_flip(image)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [image_size, image_size, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.bfloat16 if use_bfloat16 else tf.float32)",
                            "Call"
                        ],
                        [
                            "_decode_and_center_crop(image_bytes, image_size)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [image_size, image_size, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.bfloat16 if use_bfloat16 else tf.float32)",
                            "Call"
                        ],
                        [
                            "preprocess_image(image_bytes=image_bytes, is_training=False)",
                            "Call"
                        ],
                        [
                            "tf.cond(label < 0, lambda : self._get_null_input(None), lambda : self.image_preprocessing_fn(image_bytes=image_bytes, is_training=self.is_training, image_size=self.image_size, use_bfloat16=self.use_bfloat16))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[image_size, image_size, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "convert_image_dtype_165": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.crop_to_bounding_box(image_bytes, offset_y, offset_x, target_height, target_width)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_and_crop_jpeg(image_bytes, crop_window, channels=3)",
                            "Call"
                        ],
                        [
                            "distorted_bounding_box_crop(image_bytes, bbox, min_object_covered=0.1, aspect_ratio_range=(3.0 / 4, 4.0 / 3.0), area_range=(0.08, 1.0), max_attempts=10, scope=None)",
                            "Call"
                        ],
                        [
                            "tf.io.decode_image(image_bytes, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.random_crop(image, [padded_center_crop_size, padded_center_crop_size, channels])",
                            "Call"
                        ],
                        [
                            "tf.image.crop_to_bounding_box(image, offset_height, offset_width, padded_center_crop_size, padded_center_crop_size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_area([image], [image_size, image_size])[0]",
                            "Subscript"
                        ],
                        [
                            "tf.io.decode_image(image_bytes, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_area([image], [image_size, image_size])[0]",
                            "Subscript"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "_decode_and_random_crop(image_bytes, image_size)",
                            "Call"
                        ],
                        [
                            "_flip(image)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [image_size, image_size, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.bfloat16 if use_bfloat16 else tf.float32)",
                            "Call"
                        ],
                        [
                            "_decode_and_center_crop(image_bytes, image_size)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [image_size, image_size, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.bfloat16 if use_bfloat16 else tf.float32)",
                            "Call"
                        ],
                        [
                            "preprocess_image(image_bytes=image_bytes, is_training=False)",
                            "Call"
                        ],
                        [
                            "tf.cond(label < 0, lambda : self._get_null_input(None), lambda : self.image_preprocessing_fn(image_bytes=image_bytes, is_training=self.is_training, image_size=self.image_size, use_bfloat16=self.use_bfloat16))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.bfloat16 if use_bfloat16 else tf.float32",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "reshape_182": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.crop_to_bounding_box(image_bytes, offset_y, offset_x, target_height, target_width)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_and_crop_jpeg(image_bytes, crop_window, channels=3)",
                            "Call"
                        ],
                        [
                            "distorted_bounding_box_crop(image_bytes, bbox, min_object_covered=0.1, aspect_ratio_range=(3.0 / 4, 4.0 / 3.0), area_range=(0.08, 1.0), max_attempts=10, scope=None)",
                            "Call"
                        ],
                        [
                            "tf.io.decode_image(image_bytes, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.random_crop(image, [padded_center_crop_size, padded_center_crop_size, channels])",
                            "Call"
                        ],
                        [
                            "tf.image.crop_to_bounding_box(image, offset_height, offset_width, padded_center_crop_size, padded_center_crop_size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_area([image], [image_size, image_size])[0]",
                            "Subscript"
                        ],
                        [
                            "tf.io.decode_image(image_bytes, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_area([image], [image_size, image_size])[0]",
                            "Subscript"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "_decode_and_random_crop(image_bytes, image_size)",
                            "Call"
                        ],
                        [
                            "_flip(image)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [image_size, image_size, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.bfloat16 if use_bfloat16 else tf.float32)",
                            "Call"
                        ],
                        [
                            "_decode_and_center_crop(image_bytes, image_size)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [image_size, image_size, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.bfloat16 if use_bfloat16 else tf.float32)",
                            "Call"
                        ],
                        [
                            "preprocess_image(image_bytes=image_bytes, is_training=False)",
                            "Call"
                        ],
                        [
                            "tf.cond(label < 0, lambda : self._get_null_input(None), lambda : self.image_preprocessing_fn(image_bytes=image_bytes, is_training=self.is_training, image_size=self.image_size, use_bfloat16=self.use_bfloat16))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[image_size, image_size, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "convert_image_dtype_183": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.crop_to_bounding_box(image_bytes, offset_y, offset_x, target_height, target_width)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_and_crop_jpeg(image_bytes, crop_window, channels=3)",
                            "Call"
                        ],
                        [
                            "distorted_bounding_box_crop(image_bytes, bbox, min_object_covered=0.1, aspect_ratio_range=(3.0 / 4, 4.0 / 3.0), area_range=(0.08, 1.0), max_attempts=10, scope=None)",
                            "Call"
                        ],
                        [
                            "tf.io.decode_image(image_bytes, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.random_crop(image, [padded_center_crop_size, padded_center_crop_size, channels])",
                            "Call"
                        ],
                        [
                            "tf.image.crop_to_bounding_box(image, offset_height, offset_width, padded_center_crop_size, padded_center_crop_size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_area([image], [image_size, image_size])[0]",
                            "Subscript"
                        ],
                        [
                            "tf.io.decode_image(image_bytes, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_area([image], [image_size, image_size])[0]",
                            "Subscript"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "_decode_and_random_crop(image_bytes, image_size)",
                            "Call"
                        ],
                        [
                            "_flip(image)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [image_size, image_size, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.bfloat16 if use_bfloat16 else tf.float32)",
                            "Call"
                        ],
                        [
                            "_decode_and_center_crop(image_bytes, image_size)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [image_size, image_size, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.bfloat16 if use_bfloat16 else tf.float32)",
                            "Call"
                        ],
                        [
                            "preprocess_image(image_bytes=image_bytes, is_training=False)",
                            "Call"
                        ],
                        [
                            "tf.cond(label < 0, lambda : self._get_null_input(None), lambda : self.image_preprocessing_fn(image_bytes=image_bytes, is_training=self.is_training, image_size=self.image_size, use_bfloat16=self.use_bfloat16))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.bfloat16 if use_bfloat16 else tf.float32",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "placeholder_247": {
                "variable": {
                    "value": "image_bytes_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "map_fn_251": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "_preprocess_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "elems": {
                    "value": "image_bytes_list",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.placeholder(shape=[None], dtype=tf.string)",
                            "Call"
                        ]
                    ]
                },
                "back_prop": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Example_280": {
                "variable": {
                    "value": "example",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.train.Features(feature={'image/class/label': _int64_feature(label), 'image/encoded': _bytes_feature(image_buffer)})",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sample_distorted_bounding_box_64": {
                "variable": {
                    "value": "sample_distorted_bounding_box",
                    "type": "Variable",
                    "possible_values": []
                },
                "image_size": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.shape(image_bytes)",
                            "Call"
                        ],
                        [
                            "tf.image.extract_jpeg_shape(image_bytes)",
                            "Call"
                        ],
                        [
                            "tf.shape(image)",
                            "Call"
                        ],
                        [
                            "[None, None, None, batch_size]",
                            "List"
                        ],
                        [
                            "[None, None, batch_size, None]",
                            "List"
                        ]
                    ]
                },
                "bounding_boxes": {
                    "value": "bbox",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant([0.0, 0.0, 1.0, 1.0], dtype=tf.float32, shape=[1, 1, 4])",
                            "Call"
                        ]
                    ]
                },
                "min_object_covered": {
                    "value": "min_object_covered",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                },
                "aspect_ratio_range": {
                    "value": "aspect_ratio_range",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(0.75",
                            "MethodArgument"
                        ]
                    ]
                },
                "area_range": {
                    "value": "area_range",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(0.05",
                            "MethodArgument"
                        ]
                    ]
                },
                "max_attempts": {
                    "value": "max_attempts",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                },
                "use_image_if_no_bounding_boxes": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "unstack_75": {
                "variable": {
                    "value": "(offset_y, offset_x, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "bbox_begin",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "unstack_76": {
                "variable": {
                    "value": "(target_height, target_width, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "bbox_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "stack_77": {
                "variable": {
                    "value": "crop_window",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[offset_y, offset_x, target_height, target_width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "greater_equal_92": {
                "x": {
                    "value": "tf.reduce_sum(match)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.data.Dataset.list_files(pattern, shuffle=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "random_crop_126": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.crop_to_bounding_box(image_bytes, offset_y, offset_x, target_height, target_width)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_and_crop_jpeg(image_bytes, crop_window, channels=3)",
                            "Call"
                        ],
                        [
                            "distorted_bounding_box_crop(image_bytes, bbox, min_object_covered=0.1, aspect_ratio_range=(3.0 / 4, 4.0 / 3.0), area_range=(0.08, 1.0), max_attempts=10, scope=None)",
                            "Call"
                        ],
                        [
                            "tf.io.decode_image(image_bytes, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.random_crop(image, [padded_center_crop_size, padded_center_crop_size, channels])",
                            "Call"
                        ],
                        [
                            "tf.image.crop_to_bounding_box(image, offset_height, offset_width, padded_center_crop_size, padded_center_crop_size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_area([image], [image_size, image_size])[0]",
                            "Subscript"
                        ],
                        [
                            "tf.io.decode_image(image_bytes, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_area([image], [image_size, image_size])[0]",
                            "Subscript"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "_decode_and_random_crop(image_bytes, image_size)",
                            "Call"
                        ],
                        [
                            "_flip(image)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [image_size, image_size, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.bfloat16 if use_bfloat16 else tf.float32)",
                            "Call"
                        ],
                        [
                            "_decode_and_center_crop(image_bytes, image_size)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [image_size, image_size, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.bfloat16 if use_bfloat16 else tf.float32)",
                            "Call"
                        ],
                        [
                            "preprocess_image(image_bytes=image_bytes, is_training=False)",
                            "Call"
                        ],
                        [
                            "tf.cond(label < 0, lambda : self._get_null_input(None), lambda : self.image_preprocessing_fn(image_bytes=image_bytes, is_training=self.is_training, image_size=self.image_size, use_bfloat16=self.use_bfloat16))",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[padded_center_crop_size, padded_center_crop_size, channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "crop_to_bounding_box_128": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.crop_to_bounding_box(image_bytes, offset_y, offset_x, target_height, target_width)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_and_crop_jpeg(image_bytes, crop_window, channels=3)",
                            "Call"
                        ],
                        [
                            "distorted_bounding_box_crop(image_bytes, bbox, min_object_covered=0.1, aspect_ratio_range=(3.0 / 4, 4.0 / 3.0), area_range=(0.08, 1.0), max_attempts=10, scope=None)",
                            "Call"
                        ],
                        [
                            "tf.io.decode_image(image_bytes, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.random_crop(image, [padded_center_crop_size, padded_center_crop_size, channels])",
                            "Call"
                        ],
                        [
                            "tf.image.crop_to_bounding_box(image, offset_height, offset_width, padded_center_crop_size, padded_center_crop_size)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_area([image], [image_size, image_size])[0]",
                            "Subscript"
                        ],
                        [
                            "tf.io.decode_image(image_bytes, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_area([image], [image_size, image_size])[0]",
                            "Subscript"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "_decode_and_random_crop(image_bytes, image_size)",
                            "Call"
                        ],
                        [
                            "_flip(image)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [image_size, image_size, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.bfloat16 if use_bfloat16 else tf.float32)",
                            "Call"
                        ],
                        [
                            "_decode_and_center_crop(image_bytes, image_size)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [image_size, image_size, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.bfloat16 if use_bfloat16 else tf.float32)",
                            "Call"
                        ],
                        [
                            "preprocess_image(image_bytes=image_bytes, is_training=False)",
                            "Call"
                        ],
                        [
                            "tf.cond(label < 0, lambda : self._get_null_input(None), lambda : self.image_preprocessing_fn(image_bytes=image_bytes, is_training=self.is_training, image_size=self.image_size, use_bfloat16=self.use_bfloat16))",
                            "Call"
                        ]
                    ]
                },
                "offset_height": {
                    "value": "offset_height",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(image_height - padded_center_crop_size + 1) // 2",
                            "BinOp"
                        ]
                    ]
                },
                "offset_width": {
                    "value": "offset_width",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(image_width - padded_center_crop_size + 1) // 2",
                            "BinOp"
                        ]
                    ]
                },
                "target_height": {
                    "value": "padded_center_crop_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(image_size / (image_size + crop_padding) * tf.cast(tf.minimum(image_height, image_width), tf.float32), tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "target_width": {
                    "value": "padded_center_crop_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(image_size / (image_size + crop_padding) * tf.cast(tf.minimum(image_height, image_width), tf.float32), tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "decode_image_135": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "image_bytes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(parsed['image/encoded'], shape=[])",
                            "Call"
                        ],
                        [
                            "tf.reshape(parsed['image/encoded'], shape=[])",
                            "Call"
                        ],
                        [
                            "tf.io.decode_image(image_bytes, channels=3)",
                            "Call"
                        ]
                    ]
                },
                "channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ServingInputReceiver_253": {
                "features": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.map_fn(_preprocess_image, image_bytes_list, back_prop=False, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(images, [-1])",
                            "Call"
                        ]
                    ]
                },
                "receiver_tensors": {
                    "value": "{'image_bytes': image_bytes_list}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "Feature_261": {
                "int64_list": {
                    "value": "tf.train.Int64List(value=value)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_266": {
                "bytes_list": {
                    "value": "tf.train.BytesList(value=[value])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "parse_single_example_355": {
                "variable": {
                    "value": "parsed",
                    "type": "Variable",
                    "possible_values": []
                },
                "serialized": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[value]",
                            "List"
                        ]
                    ]
                },
                "features": {
                    "value": "keys_to_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{'image/encoded': tf.FixedLenFeature((), tf.string, ''), 'image/format': tf.FixedLenFeature((), tf.string, 'jpeg'), 'image/class/label': tf.FixedLenFeature([], tf.int64, -1), 'image/class/text': tf.FixedLenFeature([], tf.string, ''), 'image/object/bbox/xmin': tf.VarLenFeature(dtype=tf.float32), 'image/object/bbox/ymin': tf.VarLenFeature(dtype=tf.float32), 'image/object/bbox/xmax': tf.VarLenFeature(dtype=tf.float32), 'image/object/bbox/ymax': tf.VarLenFeature(dtype=tf.float32), 'image/object/class/label': tf.VarLenFeature(dtype=tf.int64)}",
                            "Dict"
                        ],
                        [
                            "{'image/encoded': tf.FixedLenFeature((), tf.string, ''), 'image/format': tf.FixedLenFeature((), tf.string, 'jpeg'), 'image/class/label': tf.FixedLenFeature([], tf.int64, -1), 'image/class/text': tf.FixedLenFeature([], tf.string, ''), 'image/object/bbox/xmin': tf.VarLenFeature(dtype=tf.float32), 'image/object/bbox/ymin': tf.VarLenFeature(dtype=tf.float32), 'image/object/bbox/xmax': tf.VarLenFeature(dtype=tf.float32), 'image/object/bbox/ymax': tf.VarLenFeature(dtype=tf.float32), 'image/object/class/label': tf.VarLenFeature(dtype=tf.int64)}",
                            "Dict"
                        ]
                    ]
                }
            },
            "reshape_356": {
                "variable": {
                    "value": "image_bytes",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "parsed['image/encoded']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cond_364": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "label < 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : self._get_null_input(None)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : self.image_preprocessing_fn(image_bytes=image_bytes, is_training=self.is_training, image_size=self.image_size, use_bfloat16=self.use_bfloat16)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "parse_single_example_397": {
                "variable": {
                    "value": "parsed",
                    "type": "Variable",
                    "possible_values": []
                },
                "serialized": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[value]",
                            "List"
                        ]
                    ]
                },
                "features": {
                    "value": "keys_to_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{'image/encoded': tf.FixedLenFeature((), tf.string, ''), 'image/format': tf.FixedLenFeature((), tf.string, 'jpeg'), 'image/class/label': tf.FixedLenFeature([], tf.int64, -1), 'image/class/text': tf.FixedLenFeature([], tf.string, ''), 'image/object/bbox/xmin': tf.VarLenFeature(dtype=tf.float32), 'image/object/bbox/ymin': tf.VarLenFeature(dtype=tf.float32), 'image/object/bbox/xmax': tf.VarLenFeature(dtype=tf.float32), 'image/object/bbox/ymax': tf.VarLenFeature(dtype=tf.float32), 'image/object/class/label': tf.VarLenFeature(dtype=tf.int64)}",
                            "Dict"
                        ],
                        [
                            "{'image/encoded': tf.FixedLenFeature((), tf.string, ''), 'image/format': tf.FixedLenFeature((), tf.string, 'jpeg'), 'image/class/label': tf.FixedLenFeature([], tf.int64, -1), 'image/class/text': tf.FixedLenFeature([], tf.string, ''), 'image/object/bbox/xmin': tf.VarLenFeature(dtype=tf.float32), 'image/object/bbox/ymin': tf.VarLenFeature(dtype=tf.float32), 'image/object/bbox/xmax': tf.VarLenFeature(dtype=tf.float32), 'image/object/bbox/ymax': tf.VarLenFeature(dtype=tf.float32), 'image/object/class/label': tf.VarLenFeature(dtype=tf.int64)}",
                            "Dict"
                        ]
                    ]
                }
            },
            "reshape_398": {
                "variable": {
                    "value": "image_bytes",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "parsed['image/encoded']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "decode_image_399": {
                "variable": {
                    "value": "image_bytes",
                    "type": "Variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "image_bytes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(parsed['image/encoded'], shape=[])",
                            "Call"
                        ],
                        [
                            "tf.reshape(parsed['image/encoded'], shape=[])",
                            "Call"
                        ],
                        [
                            "tf.io.decode_image(image_bytes, channels=3)",
                            "Call"
                        ]
                    ]
                },
                "channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Options_526": {
                "variable": {
                    "value": "options",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "name_scope_59": {
                "name": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "shape_61": {
                "variable": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image_bytes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(parsed['image/encoded'], shape=[])",
                            "Call"
                        ],
                        [
                            "tf.reshape(parsed['image/encoded'], shape=[])",
                            "Call"
                        ],
                        [
                            "tf.io.decode_image(image_bytes, channels=3)",
                            "Call"
                        ]
                    ]
                }
            },
            "extract_jpeg_shape_63": {
                "variable": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "image_bytes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(parsed['image/encoded'], shape=[])",
                            "Call"
                        ],
                        [
                            "tf.reshape(parsed['image/encoded'], shape=[])",
                            "Call"
                        ],
                        [
                            "tf.io.decode_image(image_bytes, channels=3)",
                            "Call"
                        ]
                    ]
                }
            },
            "crop_to_bounding_box_79": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image_bytes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(parsed['image/encoded'], shape=[])",
                            "Call"
                        ],
                        [
                            "tf.reshape(parsed['image/encoded'], shape=[])",
                            "Call"
                        ],
                        [
                            "tf.io.decode_image(image_bytes, channels=3)",
                            "Call"
                        ]
                    ]
                },
                "offset_height": {
                    "value": "offset_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "offset_width": {
                    "value": "offset_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "target_height": {
                    "value": "target_height",
                    "type": "Variable",
                    "possible_values": []
                },
                "target_width": {
                    "value": "target_width",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "decode_and_crop_jpeg_82": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "image_bytes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(parsed['image/encoded'], shape=[])",
                            "Call"
                        ],
                        [
                            "tf.reshape(parsed['image/encoded'], shape=[])",
                            "Call"
                        ],
                        [
                            "tf.io.decode_image(image_bytes, channels=3)",
                            "Call"
                        ]
                    ]
                },
                "crop_window": {
                    "value": "crop_window",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.stack([offset_y, offset_x, target_height, target_width])",
                            "Call"
                        ]
                    ]
                },
                "channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_92": {
                "input_tensor": {
                    "value": "match",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.equal(a, b)",
                            "Call"
                        ],
                        [
                            "tf.cast(match, tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "resize_area_106": {
                "images": {
                    "value": "[image]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[image_size, image_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "resize_area_129": {
                "images": {
                    "value": "[image]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[image_size, image_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_323": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.map_fn(_preprocess_image, image_bytes_list, back_prop=False, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(images, [-1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_600": {
                "shape": {
                    "value": "[self.image_size, self.image_size, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bfloat16 if self.use_bfloat16 else tf.float32",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "TFRecordDataset_640": {
                "variable": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "filenames": {
                    "value": "filename",
                    "type": "Variable",
                    "possible_values": []
                },
                "buffer_size": {
                    "value": "buffer_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "8 * 1024 * 1024",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cast_120": {
                "x": {
                    "value": "tf.minimum(image_height, image_width)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "resize_area_136": {
                "images": {
                    "value": "[image]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[image_size, image_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Int64List_261": {
                "value": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[value]",
                            "List"
                        ]
                    ]
                }
            },
            "BytesList_266": {
                "value": {
                    "value": "[value]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Features_281": {
                "feature": {
                    "value": "{'image/class/label': _int64_feature(label), 'image/encoded': _bytes_feature(image_buffer)}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "FixedLenFeature_344": {
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            },
            "FixedLenFeature_345": {
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "jpeg",
                    "type": "str",
                    "possible_values": []
                }
            },
            "FixedLenFeature_346": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "FixedLenFeature_347": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            },
            "VarLenFeature_348": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "VarLenFeature_349": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "VarLenFeature_350": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "VarLenFeature_351": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "VarLenFeature_352": {
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_360": {
                "x": {
                    "value": "tf.reshape(parsed['image/class/label'], shape=[])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_386": {
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            },
            "FixedLenFeature_387": {
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "jpeg",
                    "type": "str",
                    "possible_values": []
                }
            },
            "FixedLenFeature_388": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "FixedLenFeature_389": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            },
            "VarLenFeature_390": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "VarLenFeature_391": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "VarLenFeature_392": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "VarLenFeature_393": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "VarLenFeature_394": {
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_403": {
                "x": {
                    "value": "tf.reshape(parsed['image/class/label'], shape=[])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_423": {
                "value": {
                    "value": "padded_example",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_convert_to_example(str.encode(example_string), -1).SerializeToString()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_612": {
                "msg": {
                    "value": "Undefined data_dir implies null input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "repeat_613": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "parallel_interleave_645": {
                "map_func": {
                    "value": "fetch_dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "cycle_length": {
                    "value": "self.num_parallel_calls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sloppy": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "minimum_120": {
                "x": {
                    "value": "image_height",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "image_width",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "reshape_361": {
                "tensor": {
                    "value": "parsed['image/class/label']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_404": {
                "tensor": {
                    "value": "parsed['image/class/label']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "map_and_batch_493": {
                "map_func": {
                    "value": "self.dataset_parser_dynamic",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "params['batch_size']",
                            "Subscript"
                        ]
                    ]
                },
                "num_parallel_batches": {
                    "value": "self.num_cores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_remainder": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "map_and_batch_500": {
                "map_func": {
                    "value": "self.dataset_parser",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "params['batch_size']",
                            "Subscript"
                        ]
                    ]
                },
                "num_parallel_batches": {
                    "value": "self.num_cores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_remainder": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "constant_606": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shuffle_and_repeat_635": {
                "buffer_size": {
                    "value": "1024 * 16",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shuffle_and_repeat_660": {
                "buffer_size": {
                    "value": "1024 * 16",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "TensorShape_322": {
                "dims": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.shape(image_bytes)",
                            "Call"
                        ],
                        [
                            "tf.image.extract_jpeg_shape(image_bytes)",
                            "Call"
                        ],
                        [
                            "tf.shape(image)",
                            "Call"
                        ],
                        [
                            "[None, None, None, batch_size]",
                            "List"
                        ],
                        [
                            "[None, None, batch_size, None]",
                            "List"
                        ]
                    ]
                }
            },
            "TensorShape_325": {
                "dims": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_328": {
                "dims": {
                    "value": "[batch_size, None, None, None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_330": {
                "dims": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_513": {
                "a": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.map_fn(_preprocess_image, image_bytes_list, back_prop=False, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(images, [-1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "transpose_array",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[1, 2, 3, 0]",
                            "List"
                        ],
                        [
                            "[1, 2, 0, 3]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "training/loss.py": {
        "tensorflow": {
            "softplus_34": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "-fake_scores_out",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softplus_177": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "-fake_scores_out",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_69": {
                "variable": {
                    "value": "gradient_penalty",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(real_grads)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_90": {
                "variable": {
                    "value": "gradient_penalty",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(fake_grads)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sqrt_155": {
                "variable": {
                    "value": "mixed_norms",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(tf.square(mixed_grads), axis=[1, 2, 3])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_157": {
                "variable": {
                    "value": "gradient_penalty",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mixed_norms - wgan_target",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_193": {
                "variable": {
                    "value": "pl_lengths",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_mean(tf.reduce_sum(tf.square(pl_grads), axis=2), axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "assign_201": {
                "variable": {
                    "value": "pl_update",
                    "type": "Variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "pl_mean_var",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Variable(name='pl_mean', trainable=False, initial_value=0.0, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "pl_mean",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pl_mean_var + autosummary('G_logistic_ns_pathreg_01/pl_mean_delta', pl_decay * (tf.reduce_mean(pl_lengths) - pl_mean_var))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "softplus_24": {
                "features": {
                    "value": "fake_scores_out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "D.get_output_for(fake_images_out, labels, is_training=True)",
                            "Call"
                        ],
                        [
                            "D.get_output_for(fake_images_out, labels, is_training=True)",
                            "Call"
                        ],
                        [
                            "D.get_output_for(fake_images_out, labels, is_training=True)",
                            "Call"
                        ],
                        [
                            "autosummary('D_logistic_01/fake_scores', fake_scores_out)",
                            "Call"
                        ],
                        [
                            "D.get_output_for(fake_images_out, labels, is_training=True)",
                            "Call"
                        ],
                        [
                            "autosummary('D_logistic_r1_00/fake_scores', fake_scores_out)",
                            "Call"
                        ],
                        [
                            "D.get_output_for(fake_images_out, labels, is_training=True)",
                            "Call"
                        ],
                        [
                            "autosummary('D_logistic_r2_00/fake_scores', fake_scores_out)",
                            "Call"
                        ],
                        [
                            "D.get_output_for(fake_images_out, labels, is_training=True)",
                            "Call"
                        ],
                        [
                            "D.get_output_for(fake_images_out, labels, is_training=True)",
                            "Call"
                        ],
                        [
                            "autosummary('D_wgan_00/fake_score', fake_scores_out)",
                            "Call"
                        ],
                        [
                            "D.get_output_for(fake_images_out, labels, is_training=True)",
                            "Call"
                        ],
                        [
                            "autosummary('D_wgan_gp_00/fake_scores', fake_scores_out)",
                            "Call"
                        ],
                        [
                            "D.get_output_for(fake_images_out, labels, is_training=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "softplus_46": {
                "features": {
                    "value": "fake_scores_out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "D.get_output_for(fake_images_out, labels, is_training=True)",
                            "Call"
                        ],
                        [
                            "D.get_output_for(fake_images_out, labels, is_training=True)",
                            "Call"
                        ],
                        [
                            "D.get_output_for(fake_images_out, labels, is_training=True)",
                            "Call"
                        ],
                        [
                            "autosummary('D_logistic_01/fake_scores', fake_scores_out)",
                            "Call"
                        ],
                        [
                            "D.get_output_for(fake_images_out, labels, is_training=True)",
                            "Call"
                        ],
                        [
                            "autosummary('D_logistic_r1_00/fake_scores', fake_scores_out)",
                            "Call"
                        ],
                        [
                            "D.get_output_for(fake_images_out, labels, is_training=True)",
                            "Call"
                        ],
                        [
                            "autosummary('D_logistic_r2_00/fake_scores', fake_scores_out)",
                            "Call"
                        ],
                        [
                            "D.get_output_for(fake_images_out, labels, is_training=True)",
                            "Call"
                        ],
                        [
                            "D.get_output_for(fake_images_out, labels, is_training=True)",
                            "Call"
                        ],
                        [
                            "autosummary('D_wgan_00/fake_score', fake_scores_out)",
                            "Call"
                        ],
                        [
                            "D.get_output_for(fake_images_out, labels, is_training=True)",
                            "Call"
                        ],
                        [
                            "autosummary('D_wgan_gp_00/fake_scores', fake_scores_out)",
                            "Call"
                        ],
                        [
                            "D.get_output_for(fake_images_out, labels, is_training=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "softplus_47": {
                "features": {
                    "value": "-real_scores_out",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softplus_65": {
                "features": {
                    "value": "fake_scores_out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "D.get_output_for(fake_images_out, labels, is_training=True)",
                            "Call"
                        ],
                        [
                            "D.get_output_for(fake_images_out, labels, is_training=True)",
                            "Call"
                        ],
                        [
                            "D.get_output_for(fake_images_out, labels, is_training=True)",
                            "Call"
                        ],
                        [
                            "autosummary('D_logistic_01/fake_scores', fake_scores_out)",
                            "Call"
                        ],
                        [
                            "D.get_output_for(fake_images_out, labels, is_training=True)",
                            "Call"
                        ],
                        [
                            "autosummary('D_logistic_r1_00/fake_scores', fake_scores_out)",
                            "Call"
                        ],
                        [
                            "D.get_output_for(fake_images_out, labels, is_training=True)",
                            "Call"
                        ],
                        [
                            "autosummary('D_logistic_r2_00/fake_scores', fake_scores_out)",
                            "Call"
                        ],
                        [
                            "D.get_output_for(fake_images_out, labels, is_training=True)",
                            "Call"
                        ],
                        [
                            "D.get_output_for(fake_images_out, labels, is_training=True)",
                            "Call"
                        ],
                        [
                            "autosummary('D_wgan_00/fake_score', fake_scores_out)",
                            "Call"
                        ],
                        [
                            "D.get_output_for(fake_images_out, labels, is_training=True)",
                            "Call"
                        ],
                        [
                            "autosummary('D_wgan_gp_00/fake_scores', fake_scores_out)",
                            "Call"
                        ],
                        [
                            "D.get_output_for(fake_images_out, labels, is_training=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "softplus_66": {
                "features": {
                    "value": "-real_scores_out",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "name_scope_67": {
                "name": {
                    "value": "GradientPenalty",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softplus_86": {
                "features": {
                    "value": "fake_scores_out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "D.get_output_for(fake_images_out, labels, is_training=True)",
                            "Call"
                        ],
                        [
                            "D.get_output_for(fake_images_out, labels, is_training=True)",
                            "Call"
                        ],
                        [
                            "D.get_output_for(fake_images_out, labels, is_training=True)",
                            "Call"
                        ],
                        [
                            "autosummary('D_logistic_01/fake_scores', fake_scores_out)",
                            "Call"
                        ],
                        [
                            "D.get_output_for(fake_images_out, labels, is_training=True)",
                            "Call"
                        ],
                        [
                            "autosummary('D_logistic_r1_00/fake_scores', fake_scores_out)",
                            "Call"
                        ],
                        [
                            "D.get_output_for(fake_images_out, labels, is_training=True)",
                            "Call"
                        ],
                        [
                            "autosummary('D_logistic_r2_00/fake_scores', fake_scores_out)",
                            "Call"
                        ],
                        [
                            "D.get_output_for(fake_images_out, labels, is_training=True)",
                            "Call"
                        ],
                        [
                            "D.get_output_for(fake_images_out, labels, is_training=True)",
                            "Call"
                        ],
                        [
                            "autosummary('D_wgan_00/fake_score', fake_scores_out)",
                            "Call"
                        ],
                        [
                            "D.get_output_for(fake_images_out, labels, is_training=True)",
                            "Call"
                        ],
                        [
                            "autosummary('D_wgan_gp_00/fake_scores', fake_scores_out)",
                            "Call"
                        ],
                        [
                            "D.get_output_for(fake_images_out, labels, is_training=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "softplus_87": {
                "features": {
                    "value": "-real_scores_out",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "name_scope_88": {
                "name": {
                    "value": "GradientPenalty",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_123": {
                "name": {
                    "value": "EpsilonPenalty",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_145": {
                "name": {
                    "value": "EpsilonPenalty",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_149": {
                "name": {
                    "value": "GradientPenalty",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_181": {
                "name": {
                    "value": "PathReg",
                    "type": "str",
                    "possible_values": []
                }
            },
            "maximum_185": {
                "variable": {
                    "value": "pl_minibatch",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "y": {
                    "value": "minibatch_size // pl_minibatch_shrink",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Variable_198": {
                "variable": {
                    "value": "pl_mean_var",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "pl_mean",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_205": {
                "variable": {
                    "value": "pl_penalty",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "pl_lengths - pl_mean",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gradients_68": {
                "ys": {
                    "value": "tf.reduce_sum(real_scores_out)",
                    "type": "Call",
                    "possible_values": []
                },
                "xs": {
                    "value": "[reals]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "square_69": {
                "x": {
                    "value": "real_grads",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.gradients(tf.reduce_sum(real_scores_out), [reals])[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "gradients_89": {
                "ys": {
                    "value": "tf.reduce_sum(fake_scores_out)",
                    "type": "Call",
                    "possible_values": []
                },
                "xs": {
                    "value": "[fake_images_out]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "square_90": {
                "x": {
                    "value": "fake_grads",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.gradients(tf.reduce_sum(fake_scores_out), [fake_images_out])[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "square_124": {
                "x": {
                    "value": "real_scores_out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "D.get_output_for(reals, labels, is_training=True)",
                            "Call"
                        ],
                        [
                            "autosummary('D_logistic_00/real_scores', real_scores_out)",
                            "Call"
                        ],
                        [
                            "D.get_output_for(reals, labels, is_training=True)",
                            "Call"
                        ],
                        [
                            "autosummary('D_logistic_r1_01/real_scores', real_scores_out)",
                            "Call"
                        ],
                        [
                            "D.get_output_for(reals, labels, is_training=True)",
                            "Call"
                        ],
                        [
                            "autosummary('D_logistic_r2_01/real_scores', real_scores_out)",
                            "Call"
                        ],
                        [
                            "D.get_output_for(reals, labels, is_training=True)",
                            "Call"
                        ],
                        [
                            "autosummary('D_wgan_01/real_score', real_scores_out)",
                            "Call"
                        ],
                        [
                            "D.get_output_for(reals, labels, is_training=True)",
                            "Call"
                        ],
                        [
                            "autosummary('D_wgan_gp_01/real_scores', real_scores_out)",
                            "Call"
                        ]
                    ]
                }
            },
            "square_146": {
                "x": {
                    "value": "real_scores_out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "D.get_output_for(reals, labels, is_training=True)",
                            "Call"
                        ],
                        [
                            "autosummary('D_logistic_00/real_scores', real_scores_out)",
                            "Call"
                        ],
                        [
                            "D.get_output_for(reals, labels, is_training=True)",
                            "Call"
                        ],
                        [
                            "autosummary('D_logistic_r1_01/real_scores', real_scores_out)",
                            "Call"
                        ],
                        [
                            "D.get_output_for(reals, labels, is_training=True)",
                            "Call"
                        ],
                        [
                            "autosummary('D_logistic_r2_01/real_scores', real_scores_out)",
                            "Call"
                        ],
                        [
                            "D.get_output_for(reals, labels, is_training=True)",
                            "Call"
                        ],
                        [
                            "autosummary('D_wgan_01/real_score', real_scores_out)",
                            "Call"
                        ],
                        [
                            "D.get_output_for(reals, labels, is_training=True)",
                            "Call"
                        ],
                        [
                            "autosummary('D_wgan_gp_01/real_scores', real_scores_out)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_151": {
                "x": {
                    "value": "reals",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "fake_images_out.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gradients_154": {
                "ys": {
                    "value": "tf.reduce_sum(mixed_scores_out)",
                    "type": "Call",
                    "possible_values": []
                },
                "xs": {
                    "value": "[mixed_images_out]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_155": {
                "input_tensor": {
                    "value": "tf.square(mixed_grads)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gradients_192": {
                "ys": {
                    "value": "tf.reduce_sum(fake_images_out * pl_noise)",
                    "type": "Call",
                    "possible_values": []
                },
                "xs": {
                    "value": "[fake_dlatents_out]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_193": {
                "input_tensor": {
                    "value": "tf.reduce_sum(tf.square(pl_grads), axis=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "control_dependencies_197": {
                "control_inputs": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "control_dependencies_204": {
                "control_inputs": {
                    "value": "[pl_update]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_68": {
                "input_tensor": {
                    "value": "real_scores_out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "D.get_output_for(reals, labels, is_training=True)",
                            "Call"
                        ],
                        [
                            "autosummary('D_logistic_00/real_scores', real_scores_out)",
                            "Call"
                        ],
                        [
                            "D.get_output_for(reals, labels, is_training=True)",
                            "Call"
                        ],
                        [
                            "autosummary('D_logistic_r1_01/real_scores', real_scores_out)",
                            "Call"
                        ],
                        [
                            "D.get_output_for(reals, labels, is_training=True)",
                            "Call"
                        ],
                        [
                            "autosummary('D_logistic_r2_01/real_scores', real_scores_out)",
                            "Call"
                        ],
                        [
                            "D.get_output_for(reals, labels, is_training=True)",
                            "Call"
                        ],
                        [
                            "autosummary('D_wgan_01/real_score', real_scores_out)",
                            "Call"
                        ],
                        [
                            "D.get_output_for(reals, labels, is_training=True)",
                            "Call"
                        ],
                        [
                            "autosummary('D_wgan_gp_01/real_scores', real_scores_out)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_89": {
                "input_tensor": {
                    "value": "fake_scores_out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "D.get_output_for(fake_images_out, labels, is_training=True)",
                            "Call"
                        ],
                        [
                            "D.get_output_for(fake_images_out, labels, is_training=True)",
                            "Call"
                        ],
                        [
                            "D.get_output_for(fake_images_out, labels, is_training=True)",
                            "Call"
                        ],
                        [
                            "autosummary('D_logistic_01/fake_scores', fake_scores_out)",
                            "Call"
                        ],
                        [
                            "D.get_output_for(fake_images_out, labels, is_training=True)",
                            "Call"
                        ],
                        [
                            "autosummary('D_logistic_r1_00/fake_scores', fake_scores_out)",
                            "Call"
                        ],
                        [
                            "D.get_output_for(fake_images_out, labels, is_training=True)",
                            "Call"
                        ],
                        [
                            "autosummary('D_logistic_r2_00/fake_scores', fake_scores_out)",
                            "Call"
                        ],
                        [
                            "D.get_output_for(fake_images_out, labels, is_training=True)",
                            "Call"
                        ],
                        [
                            "D.get_output_for(fake_images_out, labels, is_training=True)",
                            "Call"
                        ],
                        [
                            "autosummary('D_wgan_00/fake_score', fake_scores_out)",
                            "Call"
                        ],
                        [
                            "D.get_output_for(fake_images_out, labels, is_training=True)",
                            "Call"
                        ],
                        [
                            "autosummary('D_wgan_gp_00/fake_scores', fake_scores_out)",
                            "Call"
                        ],
                        [
                            "D.get_output_for(fake_images_out, labels, is_training=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_154": {
                "input_tensor": {
                    "value": "mixed_scores_out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "D.get_output_for(mixed_images_out, labels, is_training=True)",
                            "Call"
                        ],
                        [
                            "autosummary('D_wgan_gp_03/mixed_scores', mixed_scores_out)",
                            "Call"
                        ]
                    ]
                }
            },
            "square_155": {
                "x": {
                    "value": "mixed_grads",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.gradients(tf.reduce_sum(mixed_scores_out), [mixed_images_out])[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "shape_191": {
                "input": {
                    "value": "fake_images_out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "G.get_output_for(latents, labels, is_training=True)",
                            "Call"
                        ],
                        [
                            "G.get_output_for(latents, labels, is_training=True)",
                            "Call"
                        ],
                        [
                            "G.get_output_for(latents, labels, is_training=True)",
                            "Call"
                        ],
                        [
                            "G.get_output_for(latents, labels, is_training=True)",
                            "Call"
                        ],
                        [
                            "G.get_output_for(latents, labels, is_training=True)",
                            "Call"
                        ],
                        [
                            "G.get_output_for(latents, labels, is_training=True)",
                            "Call"
                        ],
                        [
                            "G.get_output_for(latents, labels, is_training=True)",
                            "Call"
                        ],
                        [
                            "G.get_output_for(latents, labels, is_training=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_192": {
                "input_tensor": {
                    "value": "fake_images_out * pl_noise",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_193": {
                "input_tensor": {
                    "value": "tf.square(pl_grads)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "square_193": {
                "x": {
                    "value": "pl_grads",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.gradients(tf.reduce_sum(fake_images_out * pl_noise), [fake_dlatents_out])[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "reduce_mean_200": {
                "input_tensor": {
                    "value": "pl_lengths",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.sqrt(tf.reduce_mean(tf.reduce_sum(tf.square(pl_grads), axis=2), axis=1))",
                            "Call"
                        ],
                        [
                            "autosummary('G_logistic_ns_pathreg_01/pl_lengths', pl_lengths)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "training/networks_stylegan.py": {
        "tensorflow": {
            "cast_46": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "_o(tf.nn.depthwise_conv2d(_i(x), f, strides=strides, padding='SAME', data_format='NHWC'))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, orig_dtype)",
                            "Call"
                        ],
                        [
                            "x * tf.rsqrt(tf.reduce_mean(tf.square(x), axis=[2, 3], keepdims=True) + epsilon)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(x, [1, 1, 1, factor, 1, factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, np.prod([d.value for d in x.shape[1:]])])",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, orig_dtype)",
                            "Call"
                        ],
                        [
                            "latents_in",
                            "Name"
                        ],
                        [
                            "tf.concat([x, y], axis=1)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "dense(x, fmaps=fmaps, gain=gain, use_wscale=use_wscale, lrmul=mapping_lrmul)",
                            "Call"
                        ],
                        [
                            "apply_bias(x, lrmul=mapping_lrmul)",
                            "Call"
                        ],
                        [
                            "act(x)",
                            "Call"
                        ],
                        [
                            "tf.tile(x[:, np.newaxis], [1, dlatent_broadcast, 1])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('const', shape=[1, nf(1), 4, 4], initializer=tf.initializers.ones())",
                            "Call"
                        ],
                        [
                            "layer_epilogue(tf.tile(tf.cast(x, dtype), [tf.shape(dlatents_in)[0], 1, 1, 1]), 0)",
                            "Call"
                        ],
                        [
                            "dense(dlatents_in[:, 0], fmaps=nf(1) * 16, gain=gain / 4, use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(tf.reshape(x, [-1, nf(1), 4, 4]), 0)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(conv2d(x, fmaps=nf(1), kernel=3, gain=gain, use_wscale=use_wscale), 1)",
                            "Call"
                        ],
                        [
                            "block(res, x)",
                            "Call"
                        ],
                        [
                            "block(res, x)",
                            "Call"
                        ],
                        [
                            "apply_noise(x, noise_inputs[layer_idx], randomize_noise=randomize_noise)",
                            "Call"
                        ],
                        [
                            "apply_bias(x)",
                            "Call"
                        ],
                        [
                            "act(x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "instance_norm(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, dlatents_in[:, layer_idx], use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(blur(upscale2d_conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale, fused_scale=fused_scale)), res * 2 - 4)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale), res * 2 - 3)",
                            "Call"
                        ],
                        [
                            "fromrgb(images_in, resolution_log2)",
                            "Call"
                        ],
                        [
                            "fromrgb(img, resolution_log2)",
                            "Call"
                        ],
                        [
                            "block(x, res)",
                            "Call"
                        ],
                        [
                            "block(x, res)",
                            "Call"
                        ],
                        [
                            "tflib.lerp_clip(x, y, lod_in - lod)",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "minibatch_stddev_layer(x, mbstd_group_size, mbstd_num_features)",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d_downscale2d(blur(x), fmaps=nf(res - 2), kernel=3, gain=gain, use_wscale=use_wscale, fused_scale=fused_scale)))",
                            "Call"
                        ],
                        [
                            "act(apply_bias(dense(x, fmaps=nf(res - 2), gain=gain, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "apply_bias(dense(x, fmaps=max(label_size, 1), gain=1, use_wscale=use_wscale))",
                            "Call"
                        ],
                        [
                            "lambda : fromrgb(downscale2d(images_in, 2 ** lod), res)",
                            "Lambda"
                        ],
                        [
                            "cset(x, lod_in < lod, lambda : grow(res + 1, lod - 1))",
                            "Call"
                        ],
                        [
                            "block(x(), res)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_47": {
                "variable": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.array(f, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "f[:, np.newaxis] * f[np.newaxis, :]",
                            "BinOp"
                        ],
                        [
                            "f / np.sum(f)",
                            "BinOp"
                        ],
                        [
                            "f[::-1, ::-1]",
                            "Subscript"
                        ],
                        [
                            "f[:, :, np.newaxis, np.newaxis]",
                            "Subscript"
                        ],
                        [
                            "np.tile(f, [1, 1, int(x.shape[1]), 1])",
                            "Call"
                        ],
                        [
                            "tf.constant(f, dtype=x.dtype, name='filter')",
                            "Call"
                        ],
                        [
                            "[np.sqrt(gain) / factor] * factor",
                            "BinOp"
                        ],
                        [
                            "[1",
                            "MethodArgument"
                        ],
                        [
                            "[1",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "filter",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_50": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "_o(tf.nn.depthwise_conv2d(_i(x), f, strides=strides, padding='SAME', data_format='NHWC'))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, orig_dtype)",
                            "Call"
                        ],
                        [
                            "x * tf.rsqrt(tf.reduce_mean(tf.square(x), axis=[2, 3], keepdims=True) + epsilon)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(x, [1, 1, 1, factor, 1, factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, np.prod([d.value for d in x.shape[1:]])])",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, orig_dtype)",
                            "Call"
                        ],
                        [
                            "latents_in",
                            "Name"
                        ],
                        [
                            "tf.concat([x, y], axis=1)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "dense(x, fmaps=fmaps, gain=gain, use_wscale=use_wscale, lrmul=mapping_lrmul)",
                            "Call"
                        ],
                        [
                            "apply_bias(x, lrmul=mapping_lrmul)",
                            "Call"
                        ],
                        [
                            "act(x)",
                            "Call"
                        ],
                        [
                            "tf.tile(x[:, np.newaxis], [1, dlatent_broadcast, 1])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('const', shape=[1, nf(1), 4, 4], initializer=tf.initializers.ones())",
                            "Call"
                        ],
                        [
                            "layer_epilogue(tf.tile(tf.cast(x, dtype), [tf.shape(dlatents_in)[0], 1, 1, 1]), 0)",
                            "Call"
                        ],
                        [
                            "dense(dlatents_in[:, 0], fmaps=nf(1) * 16, gain=gain / 4, use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(tf.reshape(x, [-1, nf(1), 4, 4]), 0)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(conv2d(x, fmaps=nf(1), kernel=3, gain=gain, use_wscale=use_wscale), 1)",
                            "Call"
                        ],
                        [
                            "block(res, x)",
                            "Call"
                        ],
                        [
                            "block(res, x)",
                            "Call"
                        ],
                        [
                            "apply_noise(x, noise_inputs[layer_idx], randomize_noise=randomize_noise)",
                            "Call"
                        ],
                        [
                            "apply_bias(x)",
                            "Call"
                        ],
                        [
                            "act(x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "instance_norm(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, dlatents_in[:, layer_idx], use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(blur(upscale2d_conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale, fused_scale=fused_scale)), res * 2 - 4)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale), res * 2 - 3)",
                            "Call"
                        ],
                        [
                            "fromrgb(images_in, resolution_log2)",
                            "Call"
                        ],
                        [
                            "fromrgb(img, resolution_log2)",
                            "Call"
                        ],
                        [
                            "block(x, res)",
                            "Call"
                        ],
                        [
                            "block(x, res)",
                            "Call"
                        ],
                        [
                            "tflib.lerp_clip(x, y, lod_in - lod)",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "minibatch_stddev_layer(x, mbstd_group_size, mbstd_num_features)",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d_downscale2d(blur(x), fmaps=nf(res - 2), kernel=3, gain=gain, use_wscale=use_wscale, fused_scale=fused_scale)))",
                            "Call"
                        ],
                        [
                            "act(apply_bias(dense(x, fmaps=nf(res - 2), gain=gain, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "apply_bias(dense(x, fmaps=max(label_size, 1), gain=1, use_wscale=use_wscale))",
                            "Call"
                        ],
                        [
                            "lambda : fromrgb(downscale2d(images_in, 2 ** lod), res)",
                            "Lambda"
                        ],
                        [
                            "cset(x, lod_in < lod, lambda : grow(res + 1, lod - 1))",
                            "Call"
                        ],
                        [
                            "block(x(), res)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "orig_dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.dtype",
                            "Attribute"
                        ],
                        [
                            "x.dtype",
                            "Attribute"
                        ]
                    ]
                }
            },
            "reshape_67": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "_o(tf.nn.depthwise_conv2d(_i(x), f, strides=strides, padding='SAME', data_format='NHWC'))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, orig_dtype)",
                            "Call"
                        ],
                        [
                            "x * tf.rsqrt(tf.reduce_mean(tf.square(x), axis=[2, 3], keepdims=True) + epsilon)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(x, [1, 1, 1, factor, 1, factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, np.prod([d.value for d in x.shape[1:]])])",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, orig_dtype)",
                            "Call"
                        ],
                        [
                            "latents_in",
                            "Name"
                        ],
                        [
                            "tf.concat([x, y], axis=1)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "dense(x, fmaps=fmaps, gain=gain, use_wscale=use_wscale, lrmul=mapping_lrmul)",
                            "Call"
                        ],
                        [
                            "apply_bias(x, lrmul=mapping_lrmul)",
                            "Call"
                        ],
                        [
                            "act(x)",
                            "Call"
                        ],
                        [
                            "tf.tile(x[:, np.newaxis], [1, dlatent_broadcast, 1])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('const', shape=[1, nf(1), 4, 4], initializer=tf.initializers.ones())",
                            "Call"
                        ],
                        [
                            "layer_epilogue(tf.tile(tf.cast(x, dtype), [tf.shape(dlatents_in)[0], 1, 1, 1]), 0)",
                            "Call"
                        ],
                        [
                            "dense(dlatents_in[:, 0], fmaps=nf(1) * 16, gain=gain / 4, use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(tf.reshape(x, [-1, nf(1), 4, 4]), 0)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(conv2d(x, fmaps=nf(1), kernel=3, gain=gain, use_wscale=use_wscale), 1)",
                            "Call"
                        ],
                        [
                            "block(res, x)",
                            "Call"
                        ],
                        [
                            "block(res, x)",
                            "Call"
                        ],
                        [
                            "apply_noise(x, noise_inputs[layer_idx], randomize_noise=randomize_noise)",
                            "Call"
                        ],
                        [
                            "apply_bias(x)",
                            "Call"
                        ],
                        [
                            "act(x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "instance_norm(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, dlatents_in[:, layer_idx], use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(blur(upscale2d_conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale, fused_scale=fused_scale)), res * 2 - 4)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale), res * 2 - 3)",
                            "Call"
                        ],
                        [
                            "fromrgb(images_in, resolution_log2)",
                            "Call"
                        ],
                        [
                            "fromrgb(img, resolution_log2)",
                            "Call"
                        ],
                        [
                            "block(x, res)",
                            "Call"
                        ],
                        [
                            "block(x, res)",
                            "Call"
                        ],
                        [
                            "tflib.lerp_clip(x, y, lod_in - lod)",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "minibatch_stddev_layer(x, mbstd_group_size, mbstd_num_features)",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d_downscale2d(blur(x), fmaps=nf(res - 2), kernel=3, gain=gain, use_wscale=use_wscale, fused_scale=fused_scale)))",
                            "Call"
                        ],
                        [
                            "act(apply_bias(dense(x, fmaps=nf(res - 2), gain=gain, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "apply_bias(dense(x, fmaps=max(label_size, 1), gain=1, use_wscale=use_wscale))",
                            "Call"
                        ],
                        [
                            "lambda : fromrgb(downscale2d(images_in, 2 ** lod), res)",
                            "Lambda"
                        ],
                        [
                            "cset(x, lod_in < lod, lambda : grow(res + 1, lod - 1))",
                            "Call"
                        ],
                        [
                            "block(x(), res)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, s[1], s[2], 1, s[3], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_68": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "_o(tf.nn.depthwise_conv2d(_i(x), f, strides=strides, padding='SAME', data_format='NHWC'))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, orig_dtype)",
                            "Call"
                        ],
                        [
                            "x * tf.rsqrt(tf.reduce_mean(tf.square(x), axis=[2, 3], keepdims=True) + epsilon)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(x, [1, 1, 1, factor, 1, factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, np.prod([d.value for d in x.shape[1:]])])",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, orig_dtype)",
                            "Call"
                        ],
                        [
                            "latents_in",
                            "Name"
                        ],
                        [
                            "tf.concat([x, y], axis=1)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "dense(x, fmaps=fmaps, gain=gain, use_wscale=use_wscale, lrmul=mapping_lrmul)",
                            "Call"
                        ],
                        [
                            "apply_bias(x, lrmul=mapping_lrmul)",
                            "Call"
                        ],
                        [
                            "act(x)",
                            "Call"
                        ],
                        [
                            "tf.tile(x[:, np.newaxis], [1, dlatent_broadcast, 1])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('const', shape=[1, nf(1), 4, 4], initializer=tf.initializers.ones())",
                            "Call"
                        ],
                        [
                            "layer_epilogue(tf.tile(tf.cast(x, dtype), [tf.shape(dlatents_in)[0], 1, 1, 1]), 0)",
                            "Call"
                        ],
                        [
                            "dense(dlatents_in[:, 0], fmaps=nf(1) * 16, gain=gain / 4, use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(tf.reshape(x, [-1, nf(1), 4, 4]), 0)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(conv2d(x, fmaps=nf(1), kernel=3, gain=gain, use_wscale=use_wscale), 1)",
                            "Call"
                        ],
                        [
                            "block(res, x)",
                            "Call"
                        ],
                        [
                            "block(res, x)",
                            "Call"
                        ],
                        [
                            "apply_noise(x, noise_inputs[layer_idx], randomize_noise=randomize_noise)",
                            "Call"
                        ],
                        [
                            "apply_bias(x)",
                            "Call"
                        ],
                        [
                            "act(x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "instance_norm(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, dlatents_in[:, layer_idx], use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(blur(upscale2d_conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale, fused_scale=fused_scale)), res * 2 - 4)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale), res * 2 - 3)",
                            "Call"
                        ],
                        [
                            "fromrgb(images_in, resolution_log2)",
                            "Call"
                        ],
                        [
                            "fromrgb(img, resolution_log2)",
                            "Call"
                        ],
                        [
                            "block(x, res)",
                            "Call"
                        ],
                        [
                            "block(x, res)",
                            "Call"
                        ],
                        [
                            "tflib.lerp_clip(x, y, lod_in - lod)",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "minibatch_stddev_layer(x, mbstd_group_size, mbstd_num_features)",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d_downscale2d(blur(x), fmaps=nf(res - 2), kernel=3, gain=gain, use_wscale=use_wscale, fused_scale=fused_scale)))",
                            "Call"
                        ],
                        [
                            "act(apply_bias(dense(x, fmaps=nf(res - 2), gain=gain, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "apply_bias(dense(x, fmaps=max(label_size, 1), gain=1, use_wscale=use_wscale))",
                            "Call"
                        ],
                        [
                            "lambda : fromrgb(downscale2d(images_in, 2 ** lod), res)",
                            "Lambda"
                        ],
                        [
                            "cset(x, lod_in < lod, lambda : grow(res + 1, lod - 1))",
                            "Call"
                        ],
                        [
                            "block(x(), res)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, 1, 1, factor, 1, factor]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_69": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "_o(tf.nn.depthwise_conv2d(_i(x), f, strides=strides, padding='SAME', data_format='NHWC'))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, orig_dtype)",
                            "Call"
                        ],
                        [
                            "x * tf.rsqrt(tf.reduce_mean(tf.square(x), axis=[2, 3], keepdims=True) + epsilon)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(x, [1, 1, 1, factor, 1, factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, np.prod([d.value for d in x.shape[1:]])])",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, orig_dtype)",
                            "Call"
                        ],
                        [
                            "latents_in",
                            "Name"
                        ],
                        [
                            "tf.concat([x, y], axis=1)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "dense(x, fmaps=fmaps, gain=gain, use_wscale=use_wscale, lrmul=mapping_lrmul)",
                            "Call"
                        ],
                        [
                            "apply_bias(x, lrmul=mapping_lrmul)",
                            "Call"
                        ],
                        [
                            "act(x)",
                            "Call"
                        ],
                        [
                            "tf.tile(x[:, np.newaxis], [1, dlatent_broadcast, 1])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('const', shape=[1, nf(1), 4, 4], initializer=tf.initializers.ones())",
                            "Call"
                        ],
                        [
                            "layer_epilogue(tf.tile(tf.cast(x, dtype), [tf.shape(dlatents_in)[0], 1, 1, 1]), 0)",
                            "Call"
                        ],
                        [
                            "dense(dlatents_in[:, 0], fmaps=nf(1) * 16, gain=gain / 4, use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(tf.reshape(x, [-1, nf(1), 4, 4]), 0)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(conv2d(x, fmaps=nf(1), kernel=3, gain=gain, use_wscale=use_wscale), 1)",
                            "Call"
                        ],
                        [
                            "block(res, x)",
                            "Call"
                        ],
                        [
                            "block(res, x)",
                            "Call"
                        ],
                        [
                            "apply_noise(x, noise_inputs[layer_idx], randomize_noise=randomize_noise)",
                            "Call"
                        ],
                        [
                            "apply_bias(x)",
                            "Call"
                        ],
                        [
                            "act(x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "instance_norm(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, dlatents_in[:, layer_idx], use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(blur(upscale2d_conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale, fused_scale=fused_scale)), res * 2 - 4)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale), res * 2 - 3)",
                            "Call"
                        ],
                        [
                            "fromrgb(images_in, resolution_log2)",
                            "Call"
                        ],
                        [
                            "fromrgb(img, resolution_log2)",
                            "Call"
                        ],
                        [
                            "block(x, res)",
                            "Call"
                        ],
                        [
                            "block(x, res)",
                            "Call"
                        ],
                        [
                            "tflib.lerp_clip(x, y, lod_in - lod)",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "minibatch_stddev_layer(x, mbstd_group_size, mbstd_num_features)",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d_downscale2d(blur(x), fmaps=nf(res - 2), kernel=3, gain=gain, use_wscale=use_wscale, fused_scale=fused_scale)))",
                            "Call"
                        ],
                        [
                            "act(apply_bias(dense(x, fmaps=nf(res - 2), gain=gain, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "apply_bias(dense(x, fmaps=max(label_size, 1), gain=1, use_wscale=use_wscale))",
                            "Call"
                        ],
                        [
                            "lambda : fromrgb(downscale2d(images_in, 2 ** lod), res)",
                            "Lambda"
                        ],
                        [
                            "cset(x, lod_in < lod, lambda : grow(res + 1, lod - 1))",
                            "Call"
                        ],
                        [
                            "block(x(), res)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, s[1], s[2] * factor, s[3] * factor]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_160": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "get_weight([x.shape[1].value, fmaps], **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.cast(w, x.dtype)",
                            "Call"
                        ],
                        [
                            "get_weight([kernel, kernel, x.shape[1].value, fmaps], **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.cast(w, x.dtype)",
                            "Call"
                        ],
                        [
                            "get_weight([kernel, kernel, x.shape[1].value, fmaps], **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.transpose(w, [0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.pad(w, [[1, 1], [1, 1], [0, 0], [0, 0]], mode='CONSTANT')",
                            "Call"
                        ],
                        [
                            "tf.add_n([w[1:, 1:], w[:-1, 1:], w[1:, :-1], w[:-1, :-1]])",
                            "Call"
                        ],
                        [
                            "tf.cast(w, x.dtype)",
                            "Call"
                        ],
                        [
                            "get_weight([kernel, kernel, x.shape[1].value, fmaps], **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.pad(w, [[1, 1], [1, 1], [0, 0], [0, 0]], mode='CONSTANT')",
                            "Call"
                        ],
                        [
                            "tf.add_n([w[1:, 1:], w[:-1, 1:], w[1:, :-1], w[:-1, :-1]]) * 0.25",
                            "BinOp"
                        ],
                        [
                            "tf.cast(w, x.dtype)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weight', shape=[label_size, latent_size], initializer=tf.initializers.random_normal())",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_169": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "get_weight([x.shape[1].value, fmaps], **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.cast(w, x.dtype)",
                            "Call"
                        ],
                        [
                            "get_weight([kernel, kernel, x.shape[1].value, fmaps], **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.cast(w, x.dtype)",
                            "Call"
                        ],
                        [
                            "get_weight([kernel, kernel, x.shape[1].value, fmaps], **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.transpose(w, [0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.pad(w, [[1, 1], [1, 1], [0, 0], [0, 0]], mode='CONSTANT')",
                            "Call"
                        ],
                        [
                            "tf.add_n([w[1:, 1:], w[:-1, 1:], w[1:, :-1], w[:-1, :-1]])",
                            "Call"
                        ],
                        [
                            "tf.cast(w, x.dtype)",
                            "Call"
                        ],
                        [
                            "get_weight([kernel, kernel, x.shape[1].value, fmaps], **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.pad(w, [[1, 1], [1, 1], [0, 0], [0, 0]], mode='CONSTANT')",
                            "Call"
                        ],
                        [
                            "tf.add_n([w[1:, 1:], w[:-1, 1:], w[1:, :-1], w[:-1, :-1]]) * 0.25",
                            "BinOp"
                        ],
                        [
                            "tf.cast(w, x.dtype)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weight', shape=[label_size, latent_size], initializer=tf.initializers.random_normal())",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_188": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "get_weight([x.shape[1].value, fmaps], **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.cast(w, x.dtype)",
                            "Call"
                        ],
                        [
                            "get_weight([kernel, kernel, x.shape[1].value, fmaps], **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.cast(w, x.dtype)",
                            "Call"
                        ],
                        [
                            "get_weight([kernel, kernel, x.shape[1].value, fmaps], **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.transpose(w, [0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.pad(w, [[1, 1], [1, 1], [0, 0], [0, 0]], mode='CONSTANT')",
                            "Call"
                        ],
                        [
                            "tf.add_n([w[1:, 1:], w[:-1, 1:], w[1:, :-1], w[:-1, :-1]])",
                            "Call"
                        ],
                        [
                            "tf.cast(w, x.dtype)",
                            "Call"
                        ],
                        [
                            "get_weight([kernel, kernel, x.shape[1].value, fmaps], **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.pad(w, [[1, 1], [1, 1], [0, 0], [0, 0]], mode='CONSTANT')",
                            "Call"
                        ],
                        [
                            "tf.add_n([w[1:, 1:], w[:-1, 1:], w[1:, :-1], w[:-1, :-1]]) * 0.25",
                            "BinOp"
                        ],
                        [
                            "tf.cast(w, x.dtype)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weight', shape=[label_size, latent_size], initializer=tf.initializers.random_normal())",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 1, 3, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_189": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "get_weight([x.shape[1].value, fmaps], **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.cast(w, x.dtype)",
                            "Call"
                        ],
                        [
                            "get_weight([kernel, kernel, x.shape[1].value, fmaps], **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.cast(w, x.dtype)",
                            "Call"
                        ],
                        [
                            "get_weight([kernel, kernel, x.shape[1].value, fmaps], **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.transpose(w, [0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.pad(w, [[1, 1], [1, 1], [0, 0], [0, 0]], mode='CONSTANT')",
                            "Call"
                        ],
                        [
                            "tf.add_n([w[1:, 1:], w[:-1, 1:], w[1:, :-1], w[:-1, :-1]])",
                            "Call"
                        ],
                        [
                            "tf.cast(w, x.dtype)",
                            "Call"
                        ],
                        [
                            "get_weight([kernel, kernel, x.shape[1].value, fmaps], **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.pad(w, [[1, 1], [1, 1], [0, 0], [0, 0]], mode='CONSTANT')",
                            "Call"
                        ],
                        [
                            "tf.add_n([w[1:, 1:], w[:-1, 1:], w[1:, :-1], w[:-1, :-1]]) * 0.25",
                            "BinOp"
                        ],
                        [
                            "tf.cast(w, x.dtype)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weight', shape=[label_size, latent_size], initializer=tf.initializers.random_normal())",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[1, 1], [1, 1], [0, 0], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "CONSTANT",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_n_190": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[w[1:, 1:], w[:-1, 1:], w[1:, :-1], w[:-1, :-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_191": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "get_weight([x.shape[1].value, fmaps], **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.cast(w, x.dtype)",
                            "Call"
                        ],
                        [
                            "get_weight([kernel, kernel, x.shape[1].value, fmaps], **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.cast(w, x.dtype)",
                            "Call"
                        ],
                        [
                            "get_weight([kernel, kernel, x.shape[1].value, fmaps], **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.transpose(w, [0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.pad(w, [[1, 1], [1, 1], [0, 0], [0, 0]], mode='CONSTANT')",
                            "Call"
                        ],
                        [
                            "tf.add_n([w[1:, 1:], w[:-1, 1:], w[1:, :-1], w[:-1, :-1]])",
                            "Call"
                        ],
                        [
                            "tf.cast(w, x.dtype)",
                            "Call"
                        ],
                        [
                            "get_weight([kernel, kernel, x.shape[1].value, fmaps], **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.pad(w, [[1, 1], [1, 1], [0, 0], [0, 0]], mode='CONSTANT')",
                            "Call"
                        ],
                        [
                            "tf.add_n([w[1:, 1:], w[:-1, 1:], w[1:, :-1], w[:-1, :-1]]) * 0.25",
                            "BinOp"
                        ],
                        [
                            "tf.cast(w, x.dtype)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weight', shape=[label_size, latent_size], initializer=tf.initializers.random_normal())",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_207": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "get_weight([x.shape[1].value, fmaps], **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.cast(w, x.dtype)",
                            "Call"
                        ],
                        [
                            "get_weight([kernel, kernel, x.shape[1].value, fmaps], **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.cast(w, x.dtype)",
                            "Call"
                        ],
                        [
                            "get_weight([kernel, kernel, x.shape[1].value, fmaps], **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.transpose(w, [0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.pad(w, [[1, 1], [1, 1], [0, 0], [0, 0]], mode='CONSTANT')",
                            "Call"
                        ],
                        [
                            "tf.add_n([w[1:, 1:], w[:-1, 1:], w[1:, :-1], w[:-1, :-1]])",
                            "Call"
                        ],
                        [
                            "tf.cast(w, x.dtype)",
                            "Call"
                        ],
                        [
                            "get_weight([kernel, kernel, x.shape[1].value, fmaps], **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.pad(w, [[1, 1], [1, 1], [0, 0], [0, 0]], mode='CONSTANT')",
                            "Call"
                        ],
                        [
                            "tf.add_n([w[1:, 1:], w[:-1, 1:], w[1:, :-1], w[:-1, :-1]]) * 0.25",
                            "BinOp"
                        ],
                        [
                            "tf.cast(w, x.dtype)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weight', shape=[label_size, latent_size], initializer=tf.initializers.random_normal())",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[1, 1], [1, 1], [0, 0], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "CONSTANT",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_209": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "get_weight([x.shape[1].value, fmaps], **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.cast(w, x.dtype)",
                            "Call"
                        ],
                        [
                            "get_weight([kernel, kernel, x.shape[1].value, fmaps], **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.cast(w, x.dtype)",
                            "Call"
                        ],
                        [
                            "get_weight([kernel, kernel, x.shape[1].value, fmaps], **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.transpose(w, [0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.pad(w, [[1, 1], [1, 1], [0, 0], [0, 0]], mode='CONSTANT')",
                            "Call"
                        ],
                        [
                            "tf.add_n([w[1:, 1:], w[:-1, 1:], w[1:, :-1], w[:-1, :-1]])",
                            "Call"
                        ],
                        [
                            "tf.cast(w, x.dtype)",
                            "Call"
                        ],
                        [
                            "get_weight([kernel, kernel, x.shape[1].value, fmaps], **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.pad(w, [[1, 1], [1, 1], [0, 0], [0, 0]], mode='CONSTANT')",
                            "Call"
                        ],
                        [
                            "tf.add_n([w[1:, 1:], w[:-1, 1:], w[1:, :-1], w[:-1, :-1]]) * 0.25",
                            "BinOp"
                        ],
                        [
                            "tf.cast(w, x.dtype)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weight', shape=[label_size, latent_size], initializer=tf.initializers.random_normal())",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_217": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('bias', shape=[x.shape[1]], initializer=tf.initializers.zeros()) * lrmul",
                            "BinOp"
                        ],
                        [
                            "tf.cast(b, x.dtype)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_343": {
                "variable": {
                    "value": "lod_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "lod",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "np.float32(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_344": {
                "variable": {
                    "value": "dlatent_avg",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "dlatent_avg",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[dlatent_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.initializers.zeros()",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cast_407": {
                "variable": {
                    "value": "latents_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "latents_in",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(latents_in, dtype)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'float32'",
                            "MethodArgument"
                        ],
                        [
                            "'float32'",
                            "MethodArgument"
                        ],
                        [
                            "'float32'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cast_408": {
                "variable": {
                    "value": "labels_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "labels_in",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(labels_in, dtype)",
                            "Call"
                        ],
                        [
                            "tf.cast(labels_in, dtype)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'float32'",
                            "MethodArgument"
                        ],
                        [
                            "'float32'",
                            "MethodArgument"
                        ],
                        [
                            "'float32'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cast_480": {
                "variable": {
                    "value": "dlatents_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "dlatents_in",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(dlatents_in, dtype)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'float32'",
                            "MethodArgument"
                        ],
                        [
                            "'float32'",
                            "MethodArgument"
                        ],
                        [
                            "'float32'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cast_481": {
                "variable": {
                    "value": "lod_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.get_variable('lod', initializer=np.float32(0), trainable=False)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'float32'",
                            "MethodArgument"
                        ],
                        [
                            "'float32'",
                            "MethodArgument"
                        ],
                        [
                            "'float32'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cast_595": {
                "variable": {
                    "value": "images_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "images_in",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(images_in, dtype)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'float32'",
                            "MethodArgument"
                        ],
                        [
                            "'float32'",
                            "MethodArgument"
                        ],
                        [
                            "'float32'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cast_596": {
                "variable": {
                    "value": "labels_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "labels_in",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(labels_in, dtype)",
                            "Call"
                        ],
                        [
                            "tf.cast(labels_in, dtype)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'float32'",
                            "MethodArgument"
                        ],
                        [
                            "'float32'",
                            "MethodArgument"
                        ],
                        [
                            "'float32'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cast_597": {
                "variable": {
                    "value": "lod_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.get_variable('lod', initializer=np.float32(0.0), trainable=False)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'float32'",
                            "MethodArgument"
                        ],
                        [
                            "'float32'",
                            "MethodArgument"
                        ],
                        [
                            "'float32'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "identity_660": {
                "variable": {
                    "value": "scores_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores_out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "block(x, 2)",
                            "Call"
                        ],
                        [
                            "grow(2, resolution_log2 - 2)",
                            "Call"
                        ],
                        [
                            "block(x, 2)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(scores_out * labels_in, axis=1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.identity(scores_out, name='scores_out')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "scores_out",
                    "type": "str",
                    "possible_values": []
                }
            },
            "transpose_17": {
                "a": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "_o(tf.nn.depthwise_conv2d(_i(x), f, strides=strides, padding='SAME', data_format='NHWC'))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, orig_dtype)",
                            "Call"
                        ],
                        [
                            "x * tf.rsqrt(tf.reduce_mean(tf.square(x), axis=[2, 3], keepdims=True) + epsilon)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(x, [1, 1, 1, factor, 1, factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, np.prod([d.value for d in x.shape[1:]])])",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, orig_dtype)",
                            "Call"
                        ],
                        [
                            "latents_in",
                            "Name"
                        ],
                        [
                            "tf.concat([x, y], axis=1)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "dense(x, fmaps=fmaps, gain=gain, use_wscale=use_wscale, lrmul=mapping_lrmul)",
                            "Call"
                        ],
                        [
                            "apply_bias(x, lrmul=mapping_lrmul)",
                            "Call"
                        ],
                        [
                            "act(x)",
                            "Call"
                        ],
                        [
                            "tf.tile(x[:, np.newaxis], [1, dlatent_broadcast, 1])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('const', shape=[1, nf(1), 4, 4], initializer=tf.initializers.ones())",
                            "Call"
                        ],
                        [
                            "layer_epilogue(tf.tile(tf.cast(x, dtype), [tf.shape(dlatents_in)[0], 1, 1, 1]), 0)",
                            "Call"
                        ],
                        [
                            "dense(dlatents_in[:, 0], fmaps=nf(1) * 16, gain=gain / 4, use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(tf.reshape(x, [-1, nf(1), 4, 4]), 0)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(conv2d(x, fmaps=nf(1), kernel=3, gain=gain, use_wscale=use_wscale), 1)",
                            "Call"
                        ],
                        [
                            "block(res, x)",
                            "Call"
                        ],
                        [
                            "block(res, x)",
                            "Call"
                        ],
                        [
                            "apply_noise(x, noise_inputs[layer_idx], randomize_noise=randomize_noise)",
                            "Call"
                        ],
                        [
                            "apply_bias(x)",
                            "Call"
                        ],
                        [
                            "act(x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "instance_norm(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, dlatents_in[:, layer_idx], use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(blur(upscale2d_conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale, fused_scale=fused_scale)), res * 2 - 4)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale), res * 2 - 3)",
                            "Call"
                        ],
                        [
                            "fromrgb(images_in, resolution_log2)",
                            "Call"
                        ],
                        [
                            "fromrgb(img, resolution_log2)",
                            "Call"
                        ],
                        [
                            "block(x, res)",
                            "Call"
                        ],
                        [
                            "block(x, res)",
                            "Call"
                        ],
                        [
                            "tflib.lerp_clip(x, y, lod_in - lod)",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "minibatch_stddev_layer(x, mbstd_group_size, mbstd_num_features)",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d_downscale2d(blur(x), fmaps=nf(res - 2), kernel=3, gain=gain, use_wscale=use_wscale, fused_scale=fused_scale)))",
                            "Call"
                        ],
                        [
                            "act(apply_bias(dense(x, fmaps=nf(res - 2), gain=gain, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "apply_bias(dense(x, fmaps=max(label_size, 1), gain=1, use_wscale=use_wscale))",
                            "Call"
                        ],
                        [
                            "lambda : fromrgb(downscale2d(images_in, 2 ** lod), res)",
                            "Lambda"
                        ],
                        [
                            "cset(x, lod_in < lod, lambda : grow(res + 1, lod - 1))",
                            "Call"
                        ],
                        [
                            "block(x(), res)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_18": {
                "a": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "_o(tf.nn.depthwise_conv2d(_i(x), f, strides=strides, padding='SAME', data_format='NHWC'))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, orig_dtype)",
                            "Call"
                        ],
                        [
                            "x * tf.rsqrt(tf.reduce_mean(tf.square(x), axis=[2, 3], keepdims=True) + epsilon)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(x, [1, 1, 1, factor, 1, factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, np.prod([d.value for d in x.shape[1:]])])",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, orig_dtype)",
                            "Call"
                        ],
                        [
                            "latents_in",
                            "Name"
                        ],
                        [
                            "tf.concat([x, y], axis=1)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "dense(x, fmaps=fmaps, gain=gain, use_wscale=use_wscale, lrmul=mapping_lrmul)",
                            "Call"
                        ],
                        [
                            "apply_bias(x, lrmul=mapping_lrmul)",
                            "Call"
                        ],
                        [
                            "act(x)",
                            "Call"
                        ],
                        [
                            "tf.tile(x[:, np.newaxis], [1, dlatent_broadcast, 1])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('const', shape=[1, nf(1), 4, 4], initializer=tf.initializers.ones())",
                            "Call"
                        ],
                        [
                            "layer_epilogue(tf.tile(tf.cast(x, dtype), [tf.shape(dlatents_in)[0], 1, 1, 1]), 0)",
                            "Call"
                        ],
                        [
                            "dense(dlatents_in[:, 0], fmaps=nf(1) * 16, gain=gain / 4, use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(tf.reshape(x, [-1, nf(1), 4, 4]), 0)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(conv2d(x, fmaps=nf(1), kernel=3, gain=gain, use_wscale=use_wscale), 1)",
                            "Call"
                        ],
                        [
                            "block(res, x)",
                            "Call"
                        ],
                        [
                            "block(res, x)",
                            "Call"
                        ],
                        [
                            "apply_noise(x, noise_inputs[layer_idx], randomize_noise=randomize_noise)",
                            "Call"
                        ],
                        [
                            "apply_bias(x)",
                            "Call"
                        ],
                        [
                            "act(x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "instance_norm(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, dlatents_in[:, layer_idx], use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(blur(upscale2d_conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale, fused_scale=fused_scale)), res * 2 - 4)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale), res * 2 - 3)",
                            "Call"
                        ],
                        [
                            "fromrgb(images_in, resolution_log2)",
                            "Call"
                        ],
                        [
                            "fromrgb(img, resolution_log2)",
                            "Call"
                        ],
                        [
                            "block(x, res)",
                            "Call"
                        ],
                        [
                            "block(x, res)",
                            "Call"
                        ],
                        [
                            "tflib.lerp_clip(x, y, lod_in - lod)",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "minibatch_stddev_layer(x, mbstd_group_size, mbstd_num_features)",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d_downscale2d(blur(x), fmaps=nf(res - 2), kernel=3, gain=gain, use_wscale=use_wscale, fused_scale=fused_scale)))",
                            "Call"
                        ],
                        [
                            "act(apply_bias(dense(x, fmaps=nf(res - 2), gain=gain, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "apply_bias(dense(x, fmaps=max(label_size, 1), gain=1, use_wscale=use_wscale))",
                            "Call"
                        ],
                        [
                            "lambda : fromrgb(downscale2d(images_in, 2 ** lod), res)",
                            "Lambda"
                        ],
                        [
                            "cset(x, lod_in < lod, lambda : grow(res + 1, lod - 1))",
                            "Call"
                        ],
                        [
                            "block(x(), res)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_158": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "_o(tf.nn.depthwise_conv2d(_i(x), f, strides=strides, padding='SAME', data_format='NHWC'))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, orig_dtype)",
                            "Call"
                        ],
                        [
                            "x * tf.rsqrt(tf.reduce_mean(tf.square(x), axis=[2, 3], keepdims=True) + epsilon)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(x, [1, 1, 1, factor, 1, factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, np.prod([d.value for d in x.shape[1:]])])",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, orig_dtype)",
                            "Call"
                        ],
                        [
                            "latents_in",
                            "Name"
                        ],
                        [
                            "tf.concat([x, y], axis=1)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "dense(x, fmaps=fmaps, gain=gain, use_wscale=use_wscale, lrmul=mapping_lrmul)",
                            "Call"
                        ],
                        [
                            "apply_bias(x, lrmul=mapping_lrmul)",
                            "Call"
                        ],
                        [
                            "act(x)",
                            "Call"
                        ],
                        [
                            "tf.tile(x[:, np.newaxis], [1, dlatent_broadcast, 1])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('const', shape=[1, nf(1), 4, 4], initializer=tf.initializers.ones())",
                            "Call"
                        ],
                        [
                            "layer_epilogue(tf.tile(tf.cast(x, dtype), [tf.shape(dlatents_in)[0], 1, 1, 1]), 0)",
                            "Call"
                        ],
                        [
                            "dense(dlatents_in[:, 0], fmaps=nf(1) * 16, gain=gain / 4, use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(tf.reshape(x, [-1, nf(1), 4, 4]), 0)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(conv2d(x, fmaps=nf(1), kernel=3, gain=gain, use_wscale=use_wscale), 1)",
                            "Call"
                        ],
                        [
                            "block(res, x)",
                            "Call"
                        ],
                        [
                            "block(res, x)",
                            "Call"
                        ],
                        [
                            "apply_noise(x, noise_inputs[layer_idx], randomize_noise=randomize_noise)",
                            "Call"
                        ],
                        [
                            "apply_bias(x)",
                            "Call"
                        ],
                        [
                            "act(x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "instance_norm(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, dlatents_in[:, layer_idx], use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(blur(upscale2d_conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale, fused_scale=fused_scale)), res * 2 - 4)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale), res * 2 - 3)",
                            "Call"
                        ],
                        [
                            "fromrgb(images_in, resolution_log2)",
                            "Call"
                        ],
                        [
                            "fromrgb(img, resolution_log2)",
                            "Call"
                        ],
                        [
                            "block(x, res)",
                            "Call"
                        ],
                        [
                            "block(x, res)",
                            "Call"
                        ],
                        [
                            "tflib.lerp_clip(x, y, lod_in - lod)",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "minibatch_stddev_layer(x, mbstd_group_size, mbstd_num_features)",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d_downscale2d(blur(x), fmaps=nf(res - 2), kernel=3, gain=gain, use_wscale=use_wscale, fused_scale=fused_scale)))",
                            "Call"
                        ],
                        [
                            "act(apply_bias(dense(x, fmaps=nf(res - 2), gain=gain, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "apply_bias(dense(x, fmaps=max(label_size, 1), gain=1, use_wscale=use_wscale))",
                            "Call"
                        ],
                        [
                            "lambda : fromrgb(downscale2d(images_in, 2 ** lod), res)",
                            "Lambda"
                        ],
                        [
                            "cset(x, lod_in < lod, lambda : grow(res + 1, lod - 1))",
                            "Call"
                        ],
                        [
                            "block(x(), res)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, np.prod([d.value for d in x.shape[1:]])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_161": {
                "a": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "_o(tf.nn.depthwise_conv2d(_i(x), f, strides=strides, padding='SAME', data_format='NHWC'))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, orig_dtype)",
                            "Call"
                        ],
                        [
                            "x * tf.rsqrt(tf.reduce_mean(tf.square(x), axis=[2, 3], keepdims=True) + epsilon)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(x, [1, 1, 1, factor, 1, factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, np.prod([d.value for d in x.shape[1:]])])",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, orig_dtype)",
                            "Call"
                        ],
                        [
                            "latents_in",
                            "Name"
                        ],
                        [
                            "tf.concat([x, y], axis=1)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "dense(x, fmaps=fmaps, gain=gain, use_wscale=use_wscale, lrmul=mapping_lrmul)",
                            "Call"
                        ],
                        [
                            "apply_bias(x, lrmul=mapping_lrmul)",
                            "Call"
                        ],
                        [
                            "act(x)",
                            "Call"
                        ],
                        [
                            "tf.tile(x[:, np.newaxis], [1, dlatent_broadcast, 1])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('const', shape=[1, nf(1), 4, 4], initializer=tf.initializers.ones())",
                            "Call"
                        ],
                        [
                            "layer_epilogue(tf.tile(tf.cast(x, dtype), [tf.shape(dlatents_in)[0], 1, 1, 1]), 0)",
                            "Call"
                        ],
                        [
                            "dense(dlatents_in[:, 0], fmaps=nf(1) * 16, gain=gain / 4, use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(tf.reshape(x, [-1, nf(1), 4, 4]), 0)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(conv2d(x, fmaps=nf(1), kernel=3, gain=gain, use_wscale=use_wscale), 1)",
                            "Call"
                        ],
                        [
                            "block(res, x)",
                            "Call"
                        ],
                        [
                            "block(res, x)",
                            "Call"
                        ],
                        [
                            "apply_noise(x, noise_inputs[layer_idx], randomize_noise=randomize_noise)",
                            "Call"
                        ],
                        [
                            "apply_bias(x)",
                            "Call"
                        ],
                        [
                            "act(x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "instance_norm(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, dlatents_in[:, layer_idx], use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(blur(upscale2d_conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale, fused_scale=fused_scale)), res * 2 - 4)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale), res * 2 - 3)",
                            "Call"
                        ],
                        [
                            "fromrgb(images_in, resolution_log2)",
                            "Call"
                        ],
                        [
                            "fromrgb(img, resolution_log2)",
                            "Call"
                        ],
                        [
                            "block(x, res)",
                            "Call"
                        ],
                        [
                            "block(x, res)",
                            "Call"
                        ],
                        [
                            "tflib.lerp_clip(x, y, lod_in - lod)",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "minibatch_stddev_layer(x, mbstd_group_size, mbstd_num_features)",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d_downscale2d(blur(x), fmaps=nf(res - 2), kernel=3, gain=gain, use_wscale=use_wscale, fused_scale=fused_scale)))",
                            "Call"
                        ],
                        [
                            "act(apply_bias(dense(x, fmaps=nf(res - 2), gain=gain, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "apply_bias(dense(x, fmaps=max(label_size, 1), gain=1, use_wscale=use_wscale))",
                            "Call"
                        ],
                        [
                            "lambda : fromrgb(downscale2d(images_in, 2 ** lod), res)",
                            "Lambda"
                        ],
                        [
                            "cset(x, lod_in < lod, lambda : grow(res + 1, lod - 1))",
                            "Call"
                        ],
                        [
                            "block(x(), res)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "get_weight([x.shape[1].value, fmaps], **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.cast(w, x.dtype)",
                            "Call"
                        ],
                        [
                            "get_weight([kernel, kernel, x.shape[1].value, fmaps], **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.cast(w, x.dtype)",
                            "Call"
                        ],
                        [
                            "get_weight([kernel, kernel, x.shape[1].value, fmaps], **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.transpose(w, [0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.pad(w, [[1, 1], [1, 1], [0, 0], [0, 0]], mode='CONSTANT')",
                            "Call"
                        ],
                        [
                            "tf.add_n([w[1:, 1:], w[:-1, 1:], w[1:, :-1], w[:-1, :-1]])",
                            "Call"
                        ],
                        [
                            "tf.cast(w, x.dtype)",
                            "Call"
                        ],
                        [
                            "get_weight([kernel, kernel, x.shape[1].value, fmaps], **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.pad(w, [[1, 1], [1, 1], [0, 0], [0, 0]], mode='CONSTANT')",
                            "Call"
                        ],
                        [
                            "tf.add_n([w[1:, 1:], w[:-1, 1:], w[1:, :-1], w[:-1, :-1]]) * 0.25",
                            "BinOp"
                        ],
                        [
                            "tf.cast(w, x.dtype)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weight', shape=[label_size, latent_size], initializer=tf.initializers.random_normal())",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_227": {
                "variable": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant(alpha, dtype=x.dtype, name='alpha')",
                            "Call"
                        ],
                        [
                            "0.2",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "alpha",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_243": {
                "variable": {
                    "value": "epsilon",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "epsilon",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant(epsilon, dtype=x.dtype, name='epsilon')",
                            "Call"
                        ],
                        [
                            "tf.constant(epsilon, dtype=x.dtype, name='epsilon')",
                            "Call"
                        ],
                        [
                            "1e-08",
                            "MethodArgument"
                        ],
                        [
                            "1e-08",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "epsilon",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_253": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "_o(tf.nn.depthwise_conv2d(_i(x), f, strides=strides, padding='SAME', data_format='NHWC'))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, orig_dtype)",
                            "Call"
                        ],
                        [
                            "x * tf.rsqrt(tf.reduce_mean(tf.square(x), axis=[2, 3], keepdims=True) + epsilon)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(x, [1, 1, 1, factor, 1, factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, np.prod([d.value for d in x.shape[1:]])])",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, orig_dtype)",
                            "Call"
                        ],
                        [
                            "latents_in",
                            "Name"
                        ],
                        [
                            "tf.concat([x, y], axis=1)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "dense(x, fmaps=fmaps, gain=gain, use_wscale=use_wscale, lrmul=mapping_lrmul)",
                            "Call"
                        ],
                        [
                            "apply_bias(x, lrmul=mapping_lrmul)",
                            "Call"
                        ],
                        [
                            "act(x)",
                            "Call"
                        ],
                        [
                            "tf.tile(x[:, np.newaxis], [1, dlatent_broadcast, 1])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('const', shape=[1, nf(1), 4, 4], initializer=tf.initializers.ones())",
                            "Call"
                        ],
                        [
                            "layer_epilogue(tf.tile(tf.cast(x, dtype), [tf.shape(dlatents_in)[0], 1, 1, 1]), 0)",
                            "Call"
                        ],
                        [
                            "dense(dlatents_in[:, 0], fmaps=nf(1) * 16, gain=gain / 4, use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(tf.reshape(x, [-1, nf(1), 4, 4]), 0)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(conv2d(x, fmaps=nf(1), kernel=3, gain=gain, use_wscale=use_wscale), 1)",
                            "Call"
                        ],
                        [
                            "block(res, x)",
                            "Call"
                        ],
                        [
                            "block(res, x)",
                            "Call"
                        ],
                        [
                            "apply_noise(x, noise_inputs[layer_idx], randomize_noise=randomize_noise)",
                            "Call"
                        ],
                        [
                            "apply_bias(x)",
                            "Call"
                        ],
                        [
                            "act(x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "instance_norm(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, dlatents_in[:, layer_idx], use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(blur(upscale2d_conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale, fused_scale=fused_scale)), res * 2 - 4)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale), res * 2 - 3)",
                            "Call"
                        ],
                        [
                            "fromrgb(images_in, resolution_log2)",
                            "Call"
                        ],
                        [
                            "fromrgb(img, resolution_log2)",
                            "Call"
                        ],
                        [
                            "block(x, res)",
                            "Call"
                        ],
                        [
                            "block(x, res)",
                            "Call"
                        ],
                        [
                            "tflib.lerp_clip(x, y, lod_in - lod)",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "minibatch_stddev_layer(x, mbstd_group_size, mbstd_num_features)",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d_downscale2d(blur(x), fmaps=nf(res - 2), kernel=3, gain=gain, use_wscale=use_wscale, fused_scale=fused_scale)))",
                            "Call"
                        ],
                        [
                            "act(apply_bias(dense(x, fmaps=nf(res - 2), gain=gain, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "apply_bias(dense(x, fmaps=max(label_size, 1), gain=1, use_wscale=use_wscale))",
                            "Call"
                        ],
                        [
                            "lambda : fromrgb(downscale2d(images_in, 2 ** lod), res)",
                            "Lambda"
                        ],
                        [
                            "cset(x, lod_in < lod, lambda : grow(res + 1, lod - 1))",
                            "Call"
                        ],
                        [
                            "block(x(), res)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_255": {
                "variable": {
                    "value": "epsilon",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "epsilon",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant(epsilon, dtype=x.dtype, name='epsilon')",
                            "Call"
                        ],
                        [
                            "tf.constant(epsilon, dtype=x.dtype, name='epsilon')",
                            "Call"
                        ],
                        [
                            "1e-08",
                            "MethodArgument"
                        ],
                        [
                            "1e-08",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "epsilon",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_257": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "_o(tf.nn.depthwise_conv2d(_i(x), f, strides=strides, padding='SAME', data_format='NHWC'))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, orig_dtype)",
                            "Call"
                        ],
                        [
                            "x * tf.rsqrt(tf.reduce_mean(tf.square(x), axis=[2, 3], keepdims=True) + epsilon)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(x, [1, 1, 1, factor, 1, factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, np.prod([d.value for d in x.shape[1:]])])",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, orig_dtype)",
                            "Call"
                        ],
                        [
                            "latents_in",
                            "Name"
                        ],
                        [
                            "tf.concat([x, y], axis=1)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "dense(x, fmaps=fmaps, gain=gain, use_wscale=use_wscale, lrmul=mapping_lrmul)",
                            "Call"
                        ],
                        [
                            "apply_bias(x, lrmul=mapping_lrmul)",
                            "Call"
                        ],
                        [
                            "act(x)",
                            "Call"
                        ],
                        [
                            "tf.tile(x[:, np.newaxis], [1, dlatent_broadcast, 1])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('const', shape=[1, nf(1), 4, 4], initializer=tf.initializers.ones())",
                            "Call"
                        ],
                        [
                            "layer_epilogue(tf.tile(tf.cast(x, dtype), [tf.shape(dlatents_in)[0], 1, 1, 1]), 0)",
                            "Call"
                        ],
                        [
                            "dense(dlatents_in[:, 0], fmaps=nf(1) * 16, gain=gain / 4, use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(tf.reshape(x, [-1, nf(1), 4, 4]), 0)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(conv2d(x, fmaps=nf(1), kernel=3, gain=gain, use_wscale=use_wscale), 1)",
                            "Call"
                        ],
                        [
                            "block(res, x)",
                            "Call"
                        ],
                        [
                            "block(res, x)",
                            "Call"
                        ],
                        [
                            "apply_noise(x, noise_inputs[layer_idx], randomize_noise=randomize_noise)",
                            "Call"
                        ],
                        [
                            "apply_bias(x)",
                            "Call"
                        ],
                        [
                            "act(x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "instance_norm(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, dlatents_in[:, layer_idx], use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(blur(upscale2d_conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale, fused_scale=fused_scale)), res * 2 - 4)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale), res * 2 - 3)",
                            "Call"
                        ],
                        [
                            "fromrgb(images_in, resolution_log2)",
                            "Call"
                        ],
                        [
                            "fromrgb(img, resolution_log2)",
                            "Call"
                        ],
                        [
                            "block(x, res)",
                            "Call"
                        ],
                        [
                            "block(x, res)",
                            "Call"
                        ],
                        [
                            "tflib.lerp_clip(x, y, lod_in - lod)",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "minibatch_stddev_layer(x, mbstd_group_size, mbstd_num_features)",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d_downscale2d(blur(x), fmaps=nf(res - 2), kernel=3, gain=gain, use_wscale=use_wscale, fused_scale=fused_scale)))",
                            "Call"
                        ],
                        [
                            "act(apply_bias(dense(x, fmaps=nf(res - 2), gain=gain, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "apply_bias(dense(x, fmaps=max(label_size, 1), gain=1, use_wscale=use_wscale))",
                            "Call"
                        ],
                        [
                            "lambda : fromrgb(downscale2d(images_in, 2 ** lod), res)",
                            "Lambda"
                        ],
                        [
                            "cset(x, lod_in < lod, lambda : grow(res + 1, lod - 1))",
                            "Call"
                        ],
                        [
                            "block(x(), res)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "orig_dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.dtype",
                            "Attribute"
                        ],
                        [
                            "x.dtype",
                            "Attribute"
                        ]
                    ]
                }
            },
            "reshape_266": {
                "variable": {
                    "value": "style",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "style",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "apply_bias(dense(dlatent, fmaps=x.shape[1] * 2, gain=1, **kwargs))",
                            "Call"
                        ],
                        [
                            "tf.reshape(style, [-1, 2, x.shape[1]] + [1] * (len(x.shape) - 2))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 2, x.shape[1]] + [1] * (len(x.shape) - 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_variable_279": {
                "variable": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weight",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[x.shape[1].value]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.initializers.zeros()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "minimum_287": {
                "variable": {
                    "value": "group_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "group_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.minimum(group_size, tf.shape(x)[0])",
                            "Call"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.shape(x)[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reshape_289": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "_o(tf.nn.depthwise_conv2d(_i(x), f, strides=strides, padding='SAME', data_format='NHWC'))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, orig_dtype)",
                            "Call"
                        ],
                        [
                            "x * tf.rsqrt(tf.reduce_mean(tf.square(x), axis=[2, 3], keepdims=True) + epsilon)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(x, [1, 1, 1, factor, 1, factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, np.prod([d.value for d in x.shape[1:]])])",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, orig_dtype)",
                            "Call"
                        ],
                        [
                            "latents_in",
                            "Name"
                        ],
                        [
                            "tf.concat([x, y], axis=1)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "dense(x, fmaps=fmaps, gain=gain, use_wscale=use_wscale, lrmul=mapping_lrmul)",
                            "Call"
                        ],
                        [
                            "apply_bias(x, lrmul=mapping_lrmul)",
                            "Call"
                        ],
                        [
                            "act(x)",
                            "Call"
                        ],
                        [
                            "tf.tile(x[:, np.newaxis], [1, dlatent_broadcast, 1])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('const', shape=[1, nf(1), 4, 4], initializer=tf.initializers.ones())",
                            "Call"
                        ],
                        [
                            "layer_epilogue(tf.tile(tf.cast(x, dtype), [tf.shape(dlatents_in)[0], 1, 1, 1]), 0)",
                            "Call"
                        ],
                        [
                            "dense(dlatents_in[:, 0], fmaps=nf(1) * 16, gain=gain / 4, use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(tf.reshape(x, [-1, nf(1), 4, 4]), 0)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(conv2d(x, fmaps=nf(1), kernel=3, gain=gain, use_wscale=use_wscale), 1)",
                            "Call"
                        ],
                        [
                            "block(res, x)",
                            "Call"
                        ],
                        [
                            "block(res, x)",
                            "Call"
                        ],
                        [
                            "apply_noise(x, noise_inputs[layer_idx], randomize_noise=randomize_noise)",
                            "Call"
                        ],
                        [
                            "apply_bias(x)",
                            "Call"
                        ],
                        [
                            "act(x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "instance_norm(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, dlatents_in[:, layer_idx], use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(blur(upscale2d_conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale, fused_scale=fused_scale)), res * 2 - 4)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale), res * 2 - 3)",
                            "Call"
                        ],
                        [
                            "fromrgb(images_in, resolution_log2)",
                            "Call"
                        ],
                        [
                            "fromrgb(img, resolution_log2)",
                            "Call"
                        ],
                        [
                            "block(x, res)",
                            "Call"
                        ],
                        [
                            "block(x, res)",
                            "Call"
                        ],
                        [
                            "tflib.lerp_clip(x, y, lod_in - lod)",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "minibatch_stddev_layer(x, mbstd_group_size, mbstd_num_features)",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d_downscale2d(blur(x), fmaps=nf(res - 2), kernel=3, gain=gain, use_wscale=use_wscale, fused_scale=fused_scale)))",
                            "Call"
                        ],
                        [
                            "act(apply_bias(dense(x, fmaps=nf(res - 2), gain=gain, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "apply_bias(dense(x, fmaps=max(label_size, 1), gain=1, use_wscale=use_wscale))",
                            "Call"
                        ],
                        [
                            "lambda : fromrgb(downscale2d(images_in, 2 ** lod), res)",
                            "Lambda"
                        ],
                        [
                            "cset(x, lod_in < lod, lambda : grow(res + 1, lod - 1))",
                            "Call"
                        ],
                        [
                            "block(x(), res)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[group_size, -1, num_new_features, s[1] // num_new_features, s[2], s[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_290": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_blur2d(x, f, normalize)",
                            "Call"
                        ],
                        [
                            "_upscale2d(x, factor)",
                            "Call"
                        ],
                        [
                            "_downscale2d(x, factor)",
                            "Call"
                        ],
                        [
                            "tf.maximum(x, x * alpha)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [group_size, -1, num_new_features, s[1] // num_new_features, s[2], s[3]])",
                            "Call"
                        ],
                        [
                            "tf.cast(y, tf.float32)",
                            "Call"
                        ],
                        [
                            "y - tf.reduce_mean(y, axis=0, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(tf.square(y), axis=0)",
                            "Call"
                        ],
                        [
                            "tf.sqrt(y + 1e-08)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(y, axis=[2, 3, 4], keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(y, axis=[2])",
                            "Call"
                        ],
                        [
                            "tf.cast(y, x.dtype)",
                            "Call"
                        ],
                        [
                            "tf.tile(y, [group_size, 1, s[2], s[3]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(labels_in, tf.cast(w, dtype))",
                            "Call"
                        ],
                        [
                            "block(res, x)",
                            "Call"
                        ],
                        [
                            "fromrgb(img, res - 1)",
                            "Call"
                        ],
                        [
                            "lambda : x",
                            "Lambda"
                        ],
                        [
                            "cset(y, lod_in > lod, lambda : tflib.lerp(x, fromrgb(downscale2d(images_in, 2 ** (lod + 1)), res - 1), lod_in - lod))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_292": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(y)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_293": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_294": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_blur2d(x, f, normalize)",
                            "Call"
                        ],
                        [
                            "_upscale2d(x, factor)",
                            "Call"
                        ],
                        [
                            "_downscale2d(x, factor)",
                            "Call"
                        ],
                        [
                            "tf.maximum(x, x * alpha)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [group_size, -1, num_new_features, s[1] // num_new_features, s[2], s[3]])",
                            "Call"
                        ],
                        [
                            "tf.cast(y, tf.float32)",
                            "Call"
                        ],
                        [
                            "y - tf.reduce_mean(y, axis=0, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(tf.square(y), axis=0)",
                            "Call"
                        ],
                        [
                            "tf.sqrt(y + 1e-08)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(y, axis=[2, 3, 4], keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(y, axis=[2])",
                            "Call"
                        ],
                        [
                            "tf.cast(y, x.dtype)",
                            "Call"
                        ],
                        [
                            "tf.tile(y, [group_size, 1, s[2], s[3]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(labels_in, tf.cast(w, dtype))",
                            "Call"
                        ],
                        [
                            "block(res, x)",
                            "Call"
                        ],
                        [
                            "fromrgb(img, res - 1)",
                            "Call"
                        ],
                        [
                            "lambda : x",
                            "Lambda"
                        ],
                        [
                            "cset(y, lod_in > lod, lambda : tflib.lerp(x, fromrgb(downscale2d(images_in, 2 ** (lod + 1)), res - 1), lod_in - lod))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[2, 3, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_mean_295": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_blur2d(x, f, normalize)",
                            "Call"
                        ],
                        [
                            "_upscale2d(x, factor)",
                            "Call"
                        ],
                        [
                            "_downscale2d(x, factor)",
                            "Call"
                        ],
                        [
                            "tf.maximum(x, x * alpha)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [group_size, -1, num_new_features, s[1] // num_new_features, s[2], s[3]])",
                            "Call"
                        ],
                        [
                            "tf.cast(y, tf.float32)",
                            "Call"
                        ],
                        [
                            "y - tf.reduce_mean(y, axis=0, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(tf.square(y), axis=0)",
                            "Call"
                        ],
                        [
                            "tf.sqrt(y + 1e-08)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(y, axis=[2, 3, 4], keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(y, axis=[2])",
                            "Call"
                        ],
                        [
                            "tf.cast(y, x.dtype)",
                            "Call"
                        ],
                        [
                            "tf.tile(y, [group_size, 1, s[2], s[3]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(labels_in, tf.cast(w, dtype))",
                            "Call"
                        ],
                        [
                            "block(res, x)",
                            "Call"
                        ],
                        [
                            "fromrgb(img, res - 1)",
                            "Call"
                        ],
                        [
                            "lambda : x",
                            "Lambda"
                        ],
                        [
                            "cset(y, lod_in > lod, lambda : tflib.lerp(x, fromrgb(downscale2d(images_in, 2 ** (lod + 1)), res - 1), lod_in - lod))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_296": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_blur2d(x, f, normalize)",
                            "Call"
                        ],
                        [
                            "_upscale2d(x, factor)",
                            "Call"
                        ],
                        [
                            "_downscale2d(x, factor)",
                            "Call"
                        ],
                        [
                            "tf.maximum(x, x * alpha)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [group_size, -1, num_new_features, s[1] // num_new_features, s[2], s[3]])",
                            "Call"
                        ],
                        [
                            "tf.cast(y, tf.float32)",
                            "Call"
                        ],
                        [
                            "y - tf.reduce_mean(y, axis=0, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(tf.square(y), axis=0)",
                            "Call"
                        ],
                        [
                            "tf.sqrt(y + 1e-08)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(y, axis=[2, 3, 4], keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(y, axis=[2])",
                            "Call"
                        ],
                        [
                            "tf.cast(y, x.dtype)",
                            "Call"
                        ],
                        [
                            "tf.tile(y, [group_size, 1, s[2], s[3]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(labels_in, tf.cast(w, dtype))",
                            "Call"
                        ],
                        [
                            "block(res, x)",
                            "Call"
                        ],
                        [
                            "fromrgb(img, res - 1)",
                            "Call"
                        ],
                        [
                            "lambda : x",
                            "Lambda"
                        ],
                        [
                            "cset(y, lod_in > lod, lambda : tflib.lerp(x, fromrgb(downscale2d(images_in, 2 ** (lod + 1)), res - 1), lod_in - lod))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tile_297": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_blur2d(x, f, normalize)",
                            "Call"
                        ],
                        [
                            "_upscale2d(x, factor)",
                            "Call"
                        ],
                        [
                            "_downscale2d(x, factor)",
                            "Call"
                        ],
                        [
                            "tf.maximum(x, x * alpha)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [group_size, -1, num_new_features, s[1] // num_new_features, s[2], s[3]])",
                            "Call"
                        ],
                        [
                            "tf.cast(y, tf.float32)",
                            "Call"
                        ],
                        [
                            "y - tf.reduce_mean(y, axis=0, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(tf.square(y), axis=0)",
                            "Call"
                        ],
                        [
                            "tf.sqrt(y + 1e-08)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(y, axis=[2, 3, 4], keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(y, axis=[2])",
                            "Call"
                        ],
                        [
                            "tf.cast(y, x.dtype)",
                            "Call"
                        ],
                        [
                            "tf.tile(y, [group_size, 1, s[2], s[3]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(labels_in, tf.cast(w, dtype))",
                            "Call"
                        ],
                        [
                            "block(res, x)",
                            "Call"
                        ],
                        [
                            "fromrgb(img, res - 1)",
                            "Call"
                        ],
                        [
                            "lambda : x",
                            "Lambda"
                        ],
                        [
                            "cset(y, lod_in > lod, lambda : tflib.lerp(x, fromrgb(downscale2d(images_in, 2 ** (lod + 1)), res - 1), lod_in - lod))",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[group_size, 1, s[2], s[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "identity_381": {
                "input": {
                    "value": "images_out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "components.synthesis.get_output_for(dlatents, force_clean_graph=is_template_graph, **kwargs)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "torgb(resolution_log2, x)",
                            "Call"
                        ],
                        [
                            "torgb(2, x)",
                            "Call"
                        ],
                        [
                            "grow(x, 3, resolution_log2 - 3)",
                            "Call"
                        ],
                        [
                            "upscale2d(images_out)",
                            "Call"
                        ],
                        [
                            "tflib.lerp_clip(img, images_out, lod_in - lod)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "images_out",
                    "type": "str",
                    "possible_values": []
                }
            },
            "identity_437": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "_o(tf.nn.depthwise_conv2d(_i(x), f, strides=strides, padding='SAME', data_format='NHWC'))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, orig_dtype)",
                            "Call"
                        ],
                        [
                            "x * tf.rsqrt(tf.reduce_mean(tf.square(x), axis=[2, 3], keepdims=True) + epsilon)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(x, [1, 1, 1, factor, 1, factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, np.prod([d.value for d in x.shape[1:]])])",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, orig_dtype)",
                            "Call"
                        ],
                        [
                            "latents_in",
                            "Name"
                        ],
                        [
                            "tf.concat([x, y], axis=1)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "dense(x, fmaps=fmaps, gain=gain, use_wscale=use_wscale, lrmul=mapping_lrmul)",
                            "Call"
                        ],
                        [
                            "apply_bias(x, lrmul=mapping_lrmul)",
                            "Call"
                        ],
                        [
                            "act(x)",
                            "Call"
                        ],
                        [
                            "tf.tile(x[:, np.newaxis], [1, dlatent_broadcast, 1])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('const', shape=[1, nf(1), 4, 4], initializer=tf.initializers.ones())",
                            "Call"
                        ],
                        [
                            "layer_epilogue(tf.tile(tf.cast(x, dtype), [tf.shape(dlatents_in)[0], 1, 1, 1]), 0)",
                            "Call"
                        ],
                        [
                            "dense(dlatents_in[:, 0], fmaps=nf(1) * 16, gain=gain / 4, use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(tf.reshape(x, [-1, nf(1), 4, 4]), 0)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(conv2d(x, fmaps=nf(1), kernel=3, gain=gain, use_wscale=use_wscale), 1)",
                            "Call"
                        ],
                        [
                            "block(res, x)",
                            "Call"
                        ],
                        [
                            "block(res, x)",
                            "Call"
                        ],
                        [
                            "apply_noise(x, noise_inputs[layer_idx], randomize_noise=randomize_noise)",
                            "Call"
                        ],
                        [
                            "apply_bias(x)",
                            "Call"
                        ],
                        [
                            "act(x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "instance_norm(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, dlatents_in[:, layer_idx], use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(blur(upscale2d_conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale, fused_scale=fused_scale)), res * 2 - 4)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale), res * 2 - 3)",
                            "Call"
                        ],
                        [
                            "fromrgb(images_in, resolution_log2)",
                            "Call"
                        ],
                        [
                            "fromrgb(img, resolution_log2)",
                            "Call"
                        ],
                        [
                            "block(x, res)",
                            "Call"
                        ],
                        [
                            "block(x, res)",
                            "Call"
                        ],
                        [
                            "tflib.lerp_clip(x, y, lod_in - lod)",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "minibatch_stddev_layer(x, mbstd_group_size, mbstd_num_features)",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d_downscale2d(blur(x), fmaps=nf(res - 2), kernel=3, gain=gain, use_wscale=use_wscale, fused_scale=fused_scale)))",
                            "Call"
                        ],
                        [
                            "act(apply_bias(dense(x, fmaps=nf(res - 2), gain=gain, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "apply_bias(dense(x, fmaps=max(label_size, 1), gain=1, use_wscale=use_wscale))",
                            "Call"
                        ],
                        [
                            "lambda : fromrgb(downscale2d(images_in, 2 ** lod), res)",
                            "Lambda"
                        ],
                        [
                            "cset(x, lod_in < lod, lambda : grow(res + 1, lod - 1))",
                            "Call"
                        ],
                        [
                            "block(x(), res)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "dlatents_out",
                    "type": "str",
                    "possible_values": []
                }
            },
            "identity_561": {
                "input": {
                    "value": "images_out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "components.synthesis.get_output_for(dlatents, force_clean_graph=is_template_graph, **kwargs)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "torgb(resolution_log2, x)",
                            "Call"
                        ],
                        [
                            "torgb(2, x)",
                            "Call"
                        ],
                        [
                            "grow(x, 3, resolution_log2 - 3)",
                            "Call"
                        ],
                        [
                            "upscale2d(images_out)",
                            "Call"
                        ],
                        [
                            "tflib.lerp_clip(img, images_out, lod_in - lod)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "images_out",
                    "type": "str",
                    "possible_values": []
                }
            },
            "depthwise_conv2d_49": {
                "input": {
                    "value": "_i(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "filter": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.array(f, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "f[:, np.newaxis] * f[np.newaxis, :]",
                            "BinOp"
                        ],
                        [
                            "f / np.sum(f)",
                            "BinOp"
                        ],
                        [
                            "f[::-1, ::-1]",
                            "Subscript"
                        ],
                        [
                            "f[:, :, np.newaxis, np.newaxis]",
                            "Subscript"
                        ],
                        [
                            "np.tile(f, [1, 1, int(x.shape[1]), 1])",
                            "Call"
                        ],
                        [
                            "tf.constant(f, dtype=x.dtype, name='filter')",
                            "Call"
                        ],
                        [
                            "[np.sqrt(gain) / factor] * factor",
                            "BinOp"
                        ],
                        [
                            "[1",
                            "MethodArgument"
                        ],
                        [
                            "[1",
                            "MethodArgument"
                        ]
                    ]
                },
                "strides": {
                    "value": "strides",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[1, stride, stride, 1]",
                            "List"
                        ]
                    ]
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "NHWC",
                    "type": "str",
                    "possible_values": []
                }
            },
            "avg_pool_92": {
                "input": {
                    "value": "_i(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "ksize": {
                    "value": "ksize",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[1, factor, factor, 1]",
                            "List"
                        ]
                    ]
                },
                "strides": {
                    "value": "ksize",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[1, factor, factor, 1]",
                            "List"
                        ]
                    ]
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "NHWC",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_99": {
                "name_or_scope": {
                    "value": "Blur2D",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_111": {
                "name_or_scope": {
                    "value": "Upscale2D",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_123": {
                "name_or_scope": {
                    "value": "Downscale2D",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_151": {
                "name": {
                    "value": "weight",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[1, use_noise, 2 ** res, 2 ** res]",
                            "List"
                        ]
                    ]
                },
                "initializer": {
                    "value": "init",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.initializers.random_normal(0, init_std)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_170": {
                "input": {
                    "value": "_i(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "filters": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "get_weight([x.shape[1].value, fmaps], **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.cast(w, x.dtype)",
                            "Call"
                        ],
                        [
                            "get_weight([kernel, kernel, x.shape[1].value, fmaps], **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.cast(w, x.dtype)",
                            "Call"
                        ],
                        [
                            "get_weight([kernel, kernel, x.shape[1].value, fmaps], **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.transpose(w, [0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.pad(w, [[1, 1], [1, 1], [0, 0], [0, 0]], mode='CONSTANT')",
                            "Call"
                        ],
                        [
                            "tf.add_n([w[1:, 1:], w[:-1, 1:], w[1:, :-1], w[:-1, :-1]])",
                            "Call"
                        ],
                        [
                            "tf.cast(w, x.dtype)",
                            "Call"
                        ],
                        [
                            "get_weight([kernel, kernel, x.shape[1].value, fmaps], **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.pad(w, [[1, 1], [1, 1], [0, 0], [0, 0]], mode='CONSTANT')",
                            "Call"
                        ],
                        [
                            "tf.add_n([w[1:, 1:], w[:-1, 1:], w[1:, :-1], w[:-1, :-1]]) * 0.25",
                            "BinOp"
                        ],
                        [
                            "tf.cast(w, x.dtype)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weight', shape=[label_size, latent_size], initializer=tf.initializers.random_normal())",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "NHWC",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_transpose_193": {
                "input": {
                    "value": "_i(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "filters": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "get_weight([x.shape[1].value, fmaps], **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.cast(w, x.dtype)",
                            "Call"
                        ],
                        [
                            "get_weight([kernel, kernel, x.shape[1].value, fmaps], **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.cast(w, x.dtype)",
                            "Call"
                        ],
                        [
                            "get_weight([kernel, kernel, x.shape[1].value, fmaps], **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.transpose(w, [0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.pad(w, [[1, 1], [1, 1], [0, 0], [0, 0]], mode='CONSTANT')",
                            "Call"
                        ],
                        [
                            "tf.add_n([w[1:, 1:], w[:-1, 1:], w[1:, :-1], w[:-1, :-1]])",
                            "Call"
                        ],
                        [
                            "tf.cast(w, x.dtype)",
                            "Call"
                        ],
                        [
                            "get_weight([kernel, kernel, x.shape[1].value, fmaps], **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.pad(w, [[1, 1], [1, 1], [0, 0], [0, 0]], mode='CONSTANT')",
                            "Call"
                        ],
                        [
                            "tf.add_n([w[1:, 1:], w[:-1, 1:], w[1:, :-1], w[:-1, :-1]]) * 0.25",
                            "BinOp"
                        ],
                        [
                            "tf.cast(w, x.dtype)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weight', shape=[label_size, latent_size], initializer=tf.initializers.random_normal())",
                            "Call"
                        ]
                    ]
                },
                "output_shape": {
                    "value": "os",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[tf.shape(x)[0], x.shape[2] * 2, x.shape[3] * 2, fmaps]",
                            "List"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "NHWC",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_n_208": {
                "inputs": {
                    "value": "[w[1:, 1:], w[:-1, 1:], w[1:, :-1], w[:-1, :-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_210": {
                "input": {
                    "value": "_i(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "filters": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "get_weight([x.shape[1].value, fmaps], **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.cast(w, x.dtype)",
                            "Call"
                        ],
                        [
                            "get_weight([kernel, kernel, x.shape[1].value, fmaps], **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.cast(w, x.dtype)",
                            "Call"
                        ],
                        [
                            "get_weight([kernel, kernel, x.shape[1].value, fmaps], **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.transpose(w, [0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.pad(w, [[1, 1], [1, 1], [0, 0], [0, 0]], mode='CONSTANT')",
                            "Call"
                        ],
                        [
                            "tf.add_n([w[1:, 1:], w[:-1, 1:], w[1:, :-1], w[:-1, :-1]])",
                            "Call"
                        ],
                        [
                            "tf.cast(w, x.dtype)",
                            "Call"
                        ],
                        [
                            "get_weight([kernel, kernel, x.shape[1].value, fmaps], **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.pad(w, [[1, 1], [1, 1], [0, 0], [0, 0]], mode='CONSTANT')",
                            "Call"
                        ],
                        [
                            "tf.add_n([w[1:, 1:], w[:-1, 1:], w[1:, :-1], w[:-1, :-1]]) * 0.25",
                            "BinOp"
                        ],
                        [
                            "tf.cast(w, x.dtype)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weight', shape=[label_size, latent_size], initializer=tf.initializers.random_normal())",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "NHWC",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_216": {
                "name": {
                    "value": "bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[x.shape[1]]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.initializers.zeros()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_220": {
                "tensor": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('bias', shape=[x.shape[1]], initializer=tf.initializers.zeros()) * lrmul",
                            "BinOp"
                        ],
                        [
                            "tf.cast(b, x.dtype)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, -1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_226": {
                "name_or_scope": {
                    "value": "LeakyReLU",
                    "type": "str",
                    "possible_values": []
                }
            },
            "maximum_230": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "_o(tf.nn.depthwise_conv2d(_i(x), f, strides=strides, padding='SAME', data_format='NHWC'))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, orig_dtype)",
                            "Call"
                        ],
                        [
                            "x * tf.rsqrt(tf.reduce_mean(tf.square(x), axis=[2, 3], keepdims=True) + epsilon)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(x, [1, 1, 1, factor, 1, factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, np.prod([d.value for d in x.shape[1:]])])",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, orig_dtype)",
                            "Call"
                        ],
                        [
                            "latents_in",
                            "Name"
                        ],
                        [
                            "tf.concat([x, y], axis=1)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "dense(x, fmaps=fmaps, gain=gain, use_wscale=use_wscale, lrmul=mapping_lrmul)",
                            "Call"
                        ],
                        [
                            "apply_bias(x, lrmul=mapping_lrmul)",
                            "Call"
                        ],
                        [
                            "act(x)",
                            "Call"
                        ],
                        [
                            "tf.tile(x[:, np.newaxis], [1, dlatent_broadcast, 1])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('const', shape=[1, nf(1), 4, 4], initializer=tf.initializers.ones())",
                            "Call"
                        ],
                        [
                            "layer_epilogue(tf.tile(tf.cast(x, dtype), [tf.shape(dlatents_in)[0], 1, 1, 1]), 0)",
                            "Call"
                        ],
                        [
                            "dense(dlatents_in[:, 0], fmaps=nf(1) * 16, gain=gain / 4, use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(tf.reshape(x, [-1, nf(1), 4, 4]), 0)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(conv2d(x, fmaps=nf(1), kernel=3, gain=gain, use_wscale=use_wscale), 1)",
                            "Call"
                        ],
                        [
                            "block(res, x)",
                            "Call"
                        ],
                        [
                            "block(res, x)",
                            "Call"
                        ],
                        [
                            "apply_noise(x, noise_inputs[layer_idx], randomize_noise=randomize_noise)",
                            "Call"
                        ],
                        [
                            "apply_bias(x)",
                            "Call"
                        ],
                        [
                            "act(x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "instance_norm(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, dlatents_in[:, layer_idx], use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(blur(upscale2d_conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale, fused_scale=fused_scale)), res * 2 - 4)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale), res * 2 - 3)",
                            "Call"
                        ],
                        [
                            "fromrgb(images_in, resolution_log2)",
                            "Call"
                        ],
                        [
                            "fromrgb(img, resolution_log2)",
                            "Call"
                        ],
                        [
                            "block(x, res)",
                            "Call"
                        ],
                        [
                            "block(x, res)",
                            "Call"
                        ],
                        [
                            "tflib.lerp_clip(x, y, lod_in - lod)",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "minibatch_stddev_layer(x, mbstd_group_size, mbstd_num_features)",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d_downscale2d(blur(x), fmaps=nf(res - 2), kernel=3, gain=gain, use_wscale=use_wscale, fused_scale=fused_scale)))",
                            "Call"
                        ],
                        [
                            "act(apply_bias(dense(x, fmaps=nf(res - 2), gain=gain, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "apply_bias(dense(x, fmaps=max(label_size, 1), gain=1, use_wscale=use_wscale))",
                            "Call"
                        ],
                        [
                            "lambda : fromrgb(downscale2d(images_in, 2 ** lod), res)",
                            "Lambda"
                        ],
                        [
                            "cset(x, lod_in < lod, lambda : grow(res + 1, lod - 1))",
                            "Call"
                        ],
                        [
                            "block(x(), res)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "x * alpha",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_242": {
                "name_or_scope": {
                    "value": "PixelNorm",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_251": {
                "name_or_scope": {
                    "value": "InstanceNorm",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_254": {
                "input_tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "_o(tf.nn.depthwise_conv2d(_i(x), f, strides=strides, padding='SAME', data_format='NHWC'))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, orig_dtype)",
                            "Call"
                        ],
                        [
                            "x * tf.rsqrt(tf.reduce_mean(tf.square(x), axis=[2, 3], keepdims=True) + epsilon)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(x, [1, 1, 1, factor, 1, factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, np.prod([d.value for d in x.shape[1:]])])",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, orig_dtype)",
                            "Call"
                        ],
                        [
                            "latents_in",
                            "Name"
                        ],
                        [
                            "tf.concat([x, y], axis=1)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "dense(x, fmaps=fmaps, gain=gain, use_wscale=use_wscale, lrmul=mapping_lrmul)",
                            "Call"
                        ],
                        [
                            "apply_bias(x, lrmul=mapping_lrmul)",
                            "Call"
                        ],
                        [
                            "act(x)",
                            "Call"
                        ],
                        [
                            "tf.tile(x[:, np.newaxis], [1, dlatent_broadcast, 1])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('const', shape=[1, nf(1), 4, 4], initializer=tf.initializers.ones())",
                            "Call"
                        ],
                        [
                            "layer_epilogue(tf.tile(tf.cast(x, dtype), [tf.shape(dlatents_in)[0], 1, 1, 1]), 0)",
                            "Call"
                        ],
                        [
                            "dense(dlatents_in[:, 0], fmaps=nf(1) * 16, gain=gain / 4, use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(tf.reshape(x, [-1, nf(1), 4, 4]), 0)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(conv2d(x, fmaps=nf(1), kernel=3, gain=gain, use_wscale=use_wscale), 1)",
                            "Call"
                        ],
                        [
                            "block(res, x)",
                            "Call"
                        ],
                        [
                            "block(res, x)",
                            "Call"
                        ],
                        [
                            "apply_noise(x, noise_inputs[layer_idx], randomize_noise=randomize_noise)",
                            "Call"
                        ],
                        [
                            "apply_bias(x)",
                            "Call"
                        ],
                        [
                            "act(x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "instance_norm(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, dlatents_in[:, layer_idx], use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(blur(upscale2d_conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale, fused_scale=fused_scale)), res * 2 - 4)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale), res * 2 - 3)",
                            "Call"
                        ],
                        [
                            "fromrgb(images_in, resolution_log2)",
                            "Call"
                        ],
                        [
                            "fromrgb(img, resolution_log2)",
                            "Call"
                        ],
                        [
                            "block(x, res)",
                            "Call"
                        ],
                        [
                            "block(x, res)",
                            "Call"
                        ],
                        [
                            "tflib.lerp_clip(x, y, lod_in - lod)",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "minibatch_stddev_layer(x, mbstd_group_size, mbstd_num_features)",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d_downscale2d(blur(x), fmaps=nf(res - 2), kernel=3, gain=gain, use_wscale=use_wscale, fused_scale=fused_scale)))",
                            "Call"
                        ],
                        [
                            "act(apply_bias(dense(x, fmaps=nf(res - 2), gain=gain, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "apply_bias(dense(x, fmaps=max(label_size, 1), gain=1, use_wscale=use_wscale))",
                            "Call"
                        ],
                        [
                            "lambda : fromrgb(downscale2d(images_in, 2 ** lod), res)",
                            "Lambda"
                        ],
                        [
                            "cset(x, lod_in < lod, lambda : grow(res + 1, lod - 1))",
                            "Call"
                        ],
                        [
                            "block(x(), res)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rsqrt_256": {
                "x": {
                    "value": "tf.reduce_mean(tf.square(x), axis=[2, 3], keepdims=True) + epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_264": {
                "name_or_scope": {
                    "value": "StyleMod",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_274": {
                "name_or_scope": {
                    "value": "Noise",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_278": {
                "variable": {
                    "value": "noise",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "noise_var",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_286": {
                "name_or_scope": {
                    "value": "MinibatchStddev",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_291": {
                "input_tensor": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_blur2d(x, f, normalize)",
                            "Call"
                        ],
                        [
                            "_upscale2d(x, factor)",
                            "Call"
                        ],
                        [
                            "_downscale2d(x, factor)",
                            "Call"
                        ],
                        [
                            "tf.maximum(x, x * alpha)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [group_size, -1, num_new_features, s[1] // num_new_features, s[2], s[3]])",
                            "Call"
                        ],
                        [
                            "tf.cast(y, tf.float32)",
                            "Call"
                        ],
                        [
                            "y - tf.reduce_mean(y, axis=0, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(tf.square(y), axis=0)",
                            "Call"
                        ],
                        [
                            "tf.sqrt(y + 1e-08)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(y, axis=[2, 3, 4], keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(y, axis=[2])",
                            "Call"
                        ],
                        [
                            "tf.cast(y, x.dtype)",
                            "Call"
                        ],
                        [
                            "tf.tile(y, [group_size, 1, s[2], s[3]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(labels_in, tf.cast(w, dtype))",
                            "Call"
                        ],
                        [
                            "block(res, x)",
                            "Call"
                        ],
                        [
                            "fromrgb(img, res - 1)",
                            "Call"
                        ],
                        [
                            "lambda : x",
                            "Lambda"
                        ],
                        [
                            "cset(y, lod_in > lod, lambda : tflib.lerp(x, fromrgb(downscale2d(images_in, 2 ** (lod + 1)), res - 1), lod_in - lod))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "concat_298": {
                "values": {
                    "value": "[x, y]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_352": {
                "variable": {
                    "value": "batch_avg",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "dlatents[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "assign_353": {
                "variable": {
                    "value": "update_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "dlatent_avg",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('dlatent_avg', shape=[dlatent_size], initializer=tf.initializers.zeros(), trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "tflib.lerp(batch_avg, dlatent_avg, dlatent_avg_beta)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cond_364": {
                "variable": {
                    "value": "mixing_cutoff",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.random_uniform([], 0.0, 1.0) < style_mixing_prob",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : tf.random_uniform([], 1, cur_layers, dtype=tf.int32)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : cur_layers",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "where_368": {
                "variable": {
                    "value": "dlatents",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.broadcast_to(layer_idx < mixing_cutoff, tf.shape(dlatents))",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "dlatents",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "components.mapping.get_output_for(latents_in, labels_in, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.identity(dlatents)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.broadcast_to(layer_idx < mixing_cutoff, tf.shape(dlatents)), dlatents, dlatents2)",
                            "Call"
                        ],
                        [
                            "tflib.lerp(dlatent_avg, dlatents, coefs)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "dlatents2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "components.mapping.get_output_for(latents2, labels_in, **kwargs)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_375": {
                "variable": {
                    "value": "coefs",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "layer_idx < truncation_cutoff",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "truncation_psi * ones",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "ones",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.ones(layer_idx.shape, dtype=np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "control_dependencies_379": {
                "control_inputs": {
                    "value": "[tf.assign(components.synthesis.find_var('lod'), lod_in)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_414": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weight",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[label_size, latent_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.initializers.random_normal()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_415": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "labels_in",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(labels_in, dtype)",
                            "Call"
                        ],
                        [
                            "tf.cast(labels_in, dtype)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.cast(w, dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_416": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[x, y]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_433": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x[:, np.newaxis]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, dlatent_broadcast, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "as_dtype_436": {
                "type_value": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'float32'",
                            "MethodArgument"
                        ],
                        [
                            "'float32'",
                            "MethodArgument"
                        ],
                        [
                            "'float32'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_variable_481": {
                "name": {
                    "value": "lod",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "np.float32(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_506": {
                "name_or_scope": {
                    "value": "4x4",
                    "type": "str",
                    "possible_values": []
                }
            },
            "as_dtype_560": {
                "type_value": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'float32'",
                            "MethodArgument"
                        ],
                        [
                            "'float32'",
                            "MethodArgument"
                        ],
                        [
                            "'float32'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_variable_597": {
                "name": {
                    "value": "lod",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "np.float32(0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_657": {
                "variable": {
                    "value": "scores_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "scores_out * labels_in",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "as_dtype_659": {
                "type_value": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'float32'",
                            "MethodArgument"
                        ],
                        [
                            "'float32'",
                            "MethodArgument"
                        ],
                        [
                            "'float32'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "shape_192": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "_o(tf.nn.depthwise_conv2d(_i(x), f, strides=strides, padding='SAME', data_format='NHWC'))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, orig_dtype)",
                            "Call"
                        ],
                        [
                            "x * tf.rsqrt(tf.reduce_mean(tf.square(x), axis=[2, 3], keepdims=True) + epsilon)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(x, [1, 1, 1, factor, 1, factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, np.prod([d.value for d in x.shape[1:]])])",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, orig_dtype)",
                            "Call"
                        ],
                        [
                            "latents_in",
                            "Name"
                        ],
                        [
                            "tf.concat([x, y], axis=1)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "dense(x, fmaps=fmaps, gain=gain, use_wscale=use_wscale, lrmul=mapping_lrmul)",
                            "Call"
                        ],
                        [
                            "apply_bias(x, lrmul=mapping_lrmul)",
                            "Call"
                        ],
                        [
                            "act(x)",
                            "Call"
                        ],
                        [
                            "tf.tile(x[:, np.newaxis], [1, dlatent_broadcast, 1])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('const', shape=[1, nf(1), 4, 4], initializer=tf.initializers.ones())",
                            "Call"
                        ],
                        [
                            "layer_epilogue(tf.tile(tf.cast(x, dtype), [tf.shape(dlatents_in)[0], 1, 1, 1]), 0)",
                            "Call"
                        ],
                        [
                            "dense(dlatents_in[:, 0], fmaps=nf(1) * 16, gain=gain / 4, use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(tf.reshape(x, [-1, nf(1), 4, 4]), 0)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(conv2d(x, fmaps=nf(1), kernel=3, gain=gain, use_wscale=use_wscale), 1)",
                            "Call"
                        ],
                        [
                            "block(res, x)",
                            "Call"
                        ],
                        [
                            "block(res, x)",
                            "Call"
                        ],
                        [
                            "apply_noise(x, noise_inputs[layer_idx], randomize_noise=randomize_noise)",
                            "Call"
                        ],
                        [
                            "apply_bias(x)",
                            "Call"
                        ],
                        [
                            "act(x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "instance_norm(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, dlatents_in[:, layer_idx], use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(blur(upscale2d_conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale, fused_scale=fused_scale)), res * 2 - 4)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale), res * 2 - 3)",
                            "Call"
                        ],
                        [
                            "fromrgb(images_in, resolution_log2)",
                            "Call"
                        ],
                        [
                            "fromrgb(img, resolution_log2)",
                            "Call"
                        ],
                        [
                            "block(x, res)",
                            "Call"
                        ],
                        [
                            "block(x, res)",
                            "Call"
                        ],
                        [
                            "tflib.lerp_clip(x, y, lod_in - lod)",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "minibatch_stddev_layer(x, mbstd_group_size, mbstd_num_features)",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d_downscale2d(blur(x), fmaps=nf(res - 2), kernel=3, gain=gain, use_wscale=use_wscale, fused_scale=fused_scale)))",
                            "Call"
                        ],
                        [
                            "act(apply_bias(dense(x, fmaps=nf(res - 2), gain=gain, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "apply_bias(dense(x, fmaps=max(label_size, 1), gain=1, use_wscale=use_wscale))",
                            "Call"
                        ],
                        [
                            "lambda : fromrgb(downscale2d(images_in, 2 ** lod), res)",
                            "Lambda"
                        ],
                        [
                            "cset(x, lod_in < lod, lambda : grow(res + 1, lod - 1))",
                            "Call"
                        ],
                        [
                            "block(x(), res)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_233": {
                "variable": {
                    "value": "dx",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "y >= 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "dy",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "dy * alpha",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rsqrt_244": {
                "x": {
                    "value": "tf.reduce_mean(tf.square(x), axis=1, keepdims=True) + epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_292": {
                "x": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_blur2d(x, f, normalize)",
                            "Call"
                        ],
                        [
                            "_upscale2d(x, factor)",
                            "Call"
                        ],
                        [
                            "_downscale2d(x, factor)",
                            "Call"
                        ],
                        [
                            "tf.maximum(x, x * alpha)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [group_size, -1, num_new_features, s[1] // num_new_features, s[2], s[3]])",
                            "Call"
                        ],
                        [
                            "tf.cast(y, tf.float32)",
                            "Call"
                        ],
                        [
                            "y - tf.reduce_mean(y, axis=0, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(tf.square(y), axis=0)",
                            "Call"
                        ],
                        [
                            "tf.sqrt(y + 1e-08)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(y, axis=[2, 3, 4], keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(y, axis=[2])",
                            "Call"
                        ],
                        [
                            "tf.cast(y, x.dtype)",
                            "Call"
                        ],
                        [
                            "tf.tile(y, [group_size, 1, s[2], s[3]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(labels_in, tf.cast(w, dtype))",
                            "Call"
                        ],
                        [
                            "block(res, x)",
                            "Call"
                        ],
                        [
                            "fromrgb(img, res - 1)",
                            "Call"
                        ],
                        [
                            "lambda : x",
                            "Lambda"
                        ],
                        [
                            "cset(y, lod_in > lod, lambda : tflib.lerp(x, fromrgb(downscale2d(images_in, 2 ** (lod + 1)), res - 1), lod_in - lod))",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_344": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_351": {
                "name_or_scope": {
                    "value": "DlatentAvg",
                    "type": "str",
                    "possible_values": []
                }
            },
            "identity_355": {
                "variable": {
                    "value": "dlatents",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dlatents",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "components.mapping.get_output_for(latents_in, labels_in, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.identity(dlatents)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.broadcast_to(layer_idx < mixing_cutoff, tf.shape(dlatents)), dlatents, dlatents2)",
                            "Call"
                        ],
                        [
                            "tflib.lerp(dlatent_avg, dlatents, coefs)",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_359": {
                "name": {
                    "value": "StyleMix",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_372": {
                "name_or_scope": {
                    "value": "Truncation",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_413": {
                "name_or_scope": {
                    "value": "LabelConcat",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_424": {
                "name_or_scope": {
                    "value": "'Dense%d' % layer_idx",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_432": {
                "name_or_scope": {
                    "value": "Broadcast",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_509": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "const",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, nf(1), 4, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.initializers.ones()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_515": {
                "name_or_scope": {
                    "value": "Conv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_520": {
                "name_or_scope": {
                    "value": "'%dx%d' % (2 ** res, 2 ** res)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_528": {
                "name_or_scope": {
                    "value": "'ToRGB_lod%d' % lod",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_602": {
                "name_or_scope": {
                    "value": "'FromRGB_lod%d' % (resolution_log2 - res)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_605": {
                "name_or_scope": {
                    "value": "'%dx%d' % (2 ** res, 2 ** res)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_656": {
                "name_or_scope": {
                    "value": "LabelSwitch",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_216": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_mean_256": {
                "input_tensor": {
                    "value": "tf.square(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_279": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reshape_280": {
                "tensor": {
                    "value": "tf.cast(weight, x.dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, -1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_287": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "_o(tf.nn.depthwise_conv2d(_i(x), f, strides=strides, padding='SAME', data_format='NHWC'))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, orig_dtype)",
                            "Call"
                        ],
                        [
                            "x * tf.rsqrt(tf.reduce_mean(tf.square(x), axis=[2, 3], keepdims=True) + epsilon)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(x, [1, 1, 1, factor, 1, factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, np.prod([d.value for d in x.shape[1:]])])",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, orig_dtype)",
                            "Call"
                        ],
                        [
                            "latents_in",
                            "Name"
                        ],
                        [
                            "tf.concat([x, y], axis=1)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "dense(x, fmaps=fmaps, gain=gain, use_wscale=use_wscale, lrmul=mapping_lrmul)",
                            "Call"
                        ],
                        [
                            "apply_bias(x, lrmul=mapping_lrmul)",
                            "Call"
                        ],
                        [
                            "act(x)",
                            "Call"
                        ],
                        [
                            "tf.tile(x[:, np.newaxis], [1, dlatent_broadcast, 1])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('const', shape=[1, nf(1), 4, 4], initializer=tf.initializers.ones())",
                            "Call"
                        ],
                        [
                            "layer_epilogue(tf.tile(tf.cast(x, dtype), [tf.shape(dlatents_in)[0], 1, 1, 1]), 0)",
                            "Call"
                        ],
                        [
                            "dense(dlatents_in[:, 0], fmaps=nf(1) * 16, gain=gain / 4, use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(tf.reshape(x, [-1, nf(1), 4, 4]), 0)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(conv2d(x, fmaps=nf(1), kernel=3, gain=gain, use_wscale=use_wscale), 1)",
                            "Call"
                        ],
                        [
                            "block(res, x)",
                            "Call"
                        ],
                        [
                            "block(res, x)",
                            "Call"
                        ],
                        [
                            "apply_noise(x, noise_inputs[layer_idx], randomize_noise=randomize_noise)",
                            "Call"
                        ],
                        [
                            "apply_bias(x)",
                            "Call"
                        ],
                        [
                            "act(x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "instance_norm(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, dlatents_in[:, layer_idx], use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(blur(upscale2d_conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale, fused_scale=fused_scale)), res * 2 - 4)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale), res * 2 - 3)",
                            "Call"
                        ],
                        [
                            "fromrgb(images_in, resolution_log2)",
                            "Call"
                        ],
                        [
                            "fromrgb(img, resolution_log2)",
                            "Call"
                        ],
                        [
                            "block(x, res)",
                            "Call"
                        ],
                        [
                            "block(x, res)",
                            "Call"
                        ],
                        [
                            "tflib.lerp_clip(x, y, lod_in - lod)",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "minibatch_stddev_layer(x, mbstd_group_size, mbstd_num_features)",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d_downscale2d(blur(x), fmaps=nf(res - 2), kernel=3, gain=gain, use_wscale=use_wscale, fused_scale=fused_scale)))",
                            "Call"
                        ],
                        [
                            "act(apply_bias(dense(x, fmaps=nf(res - 2), gain=gain, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "apply_bias(dense(x, fmaps=max(label_size, 1), gain=1, use_wscale=use_wscale))",
                            "Call"
                        ],
                        [
                            "lambda : fromrgb(downscale2d(images_in, 2 ** lod), res)",
                            "Lambda"
                        ],
                        [
                            "cset(x, lod_in < lod, lambda : grow(res + 1, lod - 1))",
                            "Call"
                        ],
                        [
                            "block(x(), res)",
                            "Call"
                        ]
                    ]
                }
            },
            "control_dependencies_354": {
                "control_inputs": {
                    "value": "[update_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_360": {
                "input": {
                    "value": "latents_in",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(latents_in, dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "broadcast_to_368": {
                "input": {
                    "value": "layer_idx < mixing_cutoff",
                    "type": "Compare",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.shape(dlatents)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "assign_379": {
                "ref": {
                    "value": "components.synthesis.find_var('lod')",
                    "type": "Call",
                    "possible_values": []
                },
                "value": {
                    "value": "lod_in",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('lod', initializer=np.float32(0), trainable=False)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.get_variable('lod', initializer=np.float32(0), trainable=False), dtype)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.get_variable('lod', initializer=np.float32(0.0), trainable=False), dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_415": {
                "x": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "get_weight([x.shape[1].value, fmaps], **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.cast(w, x.dtype)",
                            "Call"
                        ],
                        [
                            "get_weight([kernel, kernel, x.shape[1].value, fmaps], **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.cast(w, x.dtype)",
                            "Call"
                        ],
                        [
                            "get_weight([kernel, kernel, x.shape[1].value, fmaps], **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.transpose(w, [0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.pad(w, [[1, 1], [1, 1], [0, 0], [0, 0]], mode='CONSTANT')",
                            "Call"
                        ],
                        [
                            "tf.add_n([w[1:, 1:], w[:-1, 1:], w[1:, :-1], w[:-1, :-1]])",
                            "Call"
                        ],
                        [
                            "tf.cast(w, x.dtype)",
                            "Call"
                        ],
                        [
                            "get_weight([kernel, kernel, x.shape[1].value, fmaps], **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.pad(w, [[1, 1], [1, 1], [0, 0], [0, 0]], mode='CONSTANT')",
                            "Call"
                        ],
                        [
                            "tf.add_n([w[1:, 1:], w[:-1, 1:], w[1:, :-1], w[:-1, :-1]]) * 0.25",
                            "BinOp"
                        ],
                        [
                            "tf.cast(w, x.dtype)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weight', shape=[label_size, latent_size], initializer=tf.initializers.random_normal())",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'float32'",
                            "MethodArgument"
                        ],
                        [
                            "'float32'",
                            "MethodArgument"
                        ],
                        [
                            "'float32'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_variable_489": {
                "name": {
                    "value": "'noise%d' % layer_idx",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[1, use_noise, 2 ** res, 2 ** res]",
                            "List"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.initializers.random_normal()",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_508": {
                "name_or_scope": {
                    "value": "Const",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_512": {
                "name_or_scope": {
                    "value": "Dense",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_521": {
                "name_or_scope": {
                    "value": "Conv0_up",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_523": {
                "name_or_scope": {
                    "value": "Conv1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_545": {
                "name_or_scope": {
                    "value": "'Grow_lod%d' % lod",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cond_551": {
                "pred": {
                    "value": "new_cond",
                    "type": "Variable",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "new_lambda",
                    "type": "Variable",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "cur_lambda",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "variable_scope_638": {
                "name_or_scope": {
                    "value": "'Grow_lod%d' % lod",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cond_645": {
                "pred": {
                    "value": "new_cond",
                    "type": "Variable",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "new_lambda",
                    "type": "Variable",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "cur_lambda",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reduce_mean_244": {
                "input_tensor": {
                    "value": "tf.square(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "square_256": {
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "_o(tf.nn.depthwise_conv2d(_i(x), f, strides=strides, padding='SAME', data_format='NHWC'))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, orig_dtype)",
                            "Call"
                        ],
                        [
                            "x * tf.rsqrt(tf.reduce_mean(tf.square(x), axis=[2, 3], keepdims=True) + epsilon)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(x, [1, 1, 1, factor, 1, factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, np.prod([d.value for d in x.shape[1:]])])",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, orig_dtype)",
                            "Call"
                        ],
                        [
                            "latents_in",
                            "Name"
                        ],
                        [
                            "tf.concat([x, y], axis=1)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "dense(x, fmaps=fmaps, gain=gain, use_wscale=use_wscale, lrmul=mapping_lrmul)",
                            "Call"
                        ],
                        [
                            "apply_bias(x, lrmul=mapping_lrmul)",
                            "Call"
                        ],
                        [
                            "act(x)",
                            "Call"
                        ],
                        [
                            "tf.tile(x[:, np.newaxis], [1, dlatent_broadcast, 1])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('const', shape=[1, nf(1), 4, 4], initializer=tf.initializers.ones())",
                            "Call"
                        ],
                        [
                            "layer_epilogue(tf.tile(tf.cast(x, dtype), [tf.shape(dlatents_in)[0], 1, 1, 1]), 0)",
                            "Call"
                        ],
                        [
                            "dense(dlatents_in[:, 0], fmaps=nf(1) * 16, gain=gain / 4, use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(tf.reshape(x, [-1, nf(1), 4, 4]), 0)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(conv2d(x, fmaps=nf(1), kernel=3, gain=gain, use_wscale=use_wscale), 1)",
                            "Call"
                        ],
                        [
                            "block(res, x)",
                            "Call"
                        ],
                        [
                            "block(res, x)",
                            "Call"
                        ],
                        [
                            "apply_noise(x, noise_inputs[layer_idx], randomize_noise=randomize_noise)",
                            "Call"
                        ],
                        [
                            "apply_bias(x)",
                            "Call"
                        ],
                        [
                            "act(x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "instance_norm(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, dlatents_in[:, layer_idx], use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(blur(upscale2d_conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale, fused_scale=fused_scale)), res * 2 - 4)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale), res * 2 - 3)",
                            "Call"
                        ],
                        [
                            "fromrgb(images_in, resolution_log2)",
                            "Call"
                        ],
                        [
                            "fromrgb(img, resolution_log2)",
                            "Call"
                        ],
                        [
                            "block(x, res)",
                            "Call"
                        ],
                        [
                            "block(x, res)",
                            "Call"
                        ],
                        [
                            "tflib.lerp_clip(x, y, lod_in - lod)",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "minibatch_stddev_layer(x, mbstd_group_size, mbstd_num_features)",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d_downscale2d(blur(x), fmaps=nf(res - 2), kernel=3, gain=gain, use_wscale=use_wscale, fused_scale=fused_scale)))",
                            "Call"
                        ],
                        [
                            "act(apply_bias(dense(x, fmaps=nf(res - 2), gain=gain, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "apply_bias(dense(x, fmaps=max(label_size, 1), gain=1, use_wscale=use_wscale))",
                            "Call"
                        ],
                        [
                            "lambda : fromrgb(downscale2d(images_in, 2 ** lod), res)",
                            "Lambda"
                        ],
                        [
                            "cset(x, lod_in < lod, lambda : grow(res + 1, lod - 1))",
                            "Call"
                        ],
                        [
                            "block(x(), res)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_280": {
                "x": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('weight', shape=[x.shape[1].value], initializer=tf.initializers.zeros())",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_363": {
                "x": {
                    "value": "lod_in",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('lod', initializer=np.float32(0), trainable=False)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.get_variable('lod', initializer=np.float32(0), trainable=False), dtype)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.get_variable('lod', initializer=np.float32(0.0), trainable=False), dtype)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_368": {
                "input": {
                    "value": "dlatents",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "components.mapping.get_output_for(latents_in, labels_in, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.identity(dlatents)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.broadcast_to(layer_idx < mixing_cutoff, tf.shape(dlatents)), dlatents, dlatents2)",
                            "Call"
                        ],
                        [
                            "tflib.lerp(dlatent_avg, dlatents, coefs)",
                            "Call"
                        ]
                    ]
                }
            },
            "tile_510": {
                "input": {
                    "value": "tf.cast(x, dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[tf.shape(dlatents_in)[0], 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_514": {
                "tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "_o(tf.nn.depthwise_conv2d(_i(x), f, strides=strides, padding='SAME', data_format='NHWC'))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, orig_dtype)",
                            "Call"
                        ],
                        [
                            "x * tf.rsqrt(tf.reduce_mean(tf.square(x), axis=[2, 3], keepdims=True) + epsilon)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(x, [1, 1, 1, factor, 1, factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, np.prod([d.value for d in x.shape[1:]])])",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, orig_dtype)",
                            "Call"
                        ],
                        [
                            "latents_in",
                            "Name"
                        ],
                        [
                            "tf.concat([x, y], axis=1)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "dense(x, fmaps=fmaps, gain=gain, use_wscale=use_wscale, lrmul=mapping_lrmul)",
                            "Call"
                        ],
                        [
                            "apply_bias(x, lrmul=mapping_lrmul)",
                            "Call"
                        ],
                        [
                            "act(x)",
                            "Call"
                        ],
                        [
                            "tf.tile(x[:, np.newaxis], [1, dlatent_broadcast, 1])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('const', shape=[1, nf(1), 4, 4], initializer=tf.initializers.ones())",
                            "Call"
                        ],
                        [
                            "layer_epilogue(tf.tile(tf.cast(x, dtype), [tf.shape(dlatents_in)[0], 1, 1, 1]), 0)",
                            "Call"
                        ],
                        [
                            "dense(dlatents_in[:, 0], fmaps=nf(1) * 16, gain=gain / 4, use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(tf.reshape(x, [-1, nf(1), 4, 4]), 0)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(conv2d(x, fmaps=nf(1), kernel=3, gain=gain, use_wscale=use_wscale), 1)",
                            "Call"
                        ],
                        [
                            "block(res, x)",
                            "Call"
                        ],
                        [
                            "block(res, x)",
                            "Call"
                        ],
                        [
                            "apply_noise(x, noise_inputs[layer_idx], randomize_noise=randomize_noise)",
                            "Call"
                        ],
                        [
                            "apply_bias(x)",
                            "Call"
                        ],
                        [
                            "act(x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "instance_norm(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, dlatents_in[:, layer_idx], use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(blur(upscale2d_conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale, fused_scale=fused_scale)), res * 2 - 4)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale), res * 2 - 3)",
                            "Call"
                        ],
                        [
                            "fromrgb(images_in, resolution_log2)",
                            "Call"
                        ],
                        [
                            "fromrgb(img, resolution_log2)",
                            "Call"
                        ],
                        [
                            "block(x, res)",
                            "Call"
                        ],
                        [
                            "block(x, res)",
                            "Call"
                        ],
                        [
                            "tflib.lerp_clip(x, y, lod_in - lod)",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "minibatch_stddev_layer(x, mbstd_group_size, mbstd_num_features)",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d_downscale2d(blur(x), fmaps=nf(res - 2), kernel=3, gain=gain, use_wscale=use_wscale, fused_scale=fused_scale)))",
                            "Call"
                        ],
                        [
                            "act(apply_bias(dense(x, fmaps=nf(res - 2), gain=gain, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "apply_bias(dense(x, fmaps=max(label_size, 1), gain=1, use_wscale=use_wscale))",
                            "Call"
                        ],
                        [
                            "lambda : fromrgb(downscale2d(images_in, 2 ** lod), res)",
                            "Lambda"
                        ],
                        [
                            "cset(x, lod_in < lod, lambda : grow(res + 1, lod - 1))",
                            "Call"
                        ],
                        [
                            "block(x(), res)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, nf(1), 4, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_607": {
                "name_or_scope": {
                    "value": "Conv0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_609": {
                "name_or_scope": {
                    "value": "Conv1_down",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_614": {
                "name_or_scope": {
                    "value": "Conv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_616": {
                "name_or_scope": {
                    "value": "Dense0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_618": {
                "name_or_scope": {
                    "value": "Dense1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "where_234": {
                "condition": {
                    "value": "y >= 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "ddx",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "ddx * alpha",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_244": {
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "_o(tf.nn.depthwise_conv2d(_i(x), f, strides=strides, padding='SAME', data_format='NHWC'))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, orig_dtype)",
                            "Call"
                        ],
                        [
                            "x * tf.rsqrt(tf.reduce_mean(tf.square(x), axis=[2, 3], keepdims=True) + epsilon)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(x, [1, 1, 1, factor, 1, factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, np.prod([d.value for d in x.shape[1:]])])",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, orig_dtype)",
                            "Call"
                        ],
                        [
                            "latents_in",
                            "Name"
                        ],
                        [
                            "tf.concat([x, y], axis=1)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "dense(x, fmaps=fmaps, gain=gain, use_wscale=use_wscale, lrmul=mapping_lrmul)",
                            "Call"
                        ],
                        [
                            "apply_bias(x, lrmul=mapping_lrmul)",
                            "Call"
                        ],
                        [
                            "act(x)",
                            "Call"
                        ],
                        [
                            "tf.tile(x[:, np.newaxis], [1, dlatent_broadcast, 1])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('const', shape=[1, nf(1), 4, 4], initializer=tf.initializers.ones())",
                            "Call"
                        ],
                        [
                            "layer_epilogue(tf.tile(tf.cast(x, dtype), [tf.shape(dlatents_in)[0], 1, 1, 1]), 0)",
                            "Call"
                        ],
                        [
                            "dense(dlatents_in[:, 0], fmaps=nf(1) * 16, gain=gain / 4, use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(tf.reshape(x, [-1, nf(1), 4, 4]), 0)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(conv2d(x, fmaps=nf(1), kernel=3, gain=gain, use_wscale=use_wscale), 1)",
                            "Call"
                        ],
                        [
                            "block(res, x)",
                            "Call"
                        ],
                        [
                            "block(res, x)",
                            "Call"
                        ],
                        [
                            "apply_noise(x, noise_inputs[layer_idx], randomize_noise=randomize_noise)",
                            "Call"
                        ],
                        [
                            "apply_bias(x)",
                            "Call"
                        ],
                        [
                            "act(x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "instance_norm(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, dlatents_in[:, layer_idx], use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(blur(upscale2d_conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale, fused_scale=fused_scale)), res * 2 - 4)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale), res * 2 - 3)",
                            "Call"
                        ],
                        [
                            "fromrgb(images_in, resolution_log2)",
                            "Call"
                        ],
                        [
                            "fromrgb(img, resolution_log2)",
                            "Call"
                        ],
                        [
                            "block(x, res)",
                            "Call"
                        ],
                        [
                            "block(x, res)",
                            "Call"
                        ],
                        [
                            "tflib.lerp_clip(x, y, lod_in - lod)",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "minibatch_stddev_layer(x, mbstd_group_size, mbstd_num_features)",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d_downscale2d(blur(x), fmaps=nf(res - 2), kernel=3, gain=gain, use_wscale=use_wscale, fused_scale=fused_scale)))",
                            "Call"
                        ],
                        [
                            "act(apply_bias(dense(x, fmaps=nf(res - 2), gain=gain, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "apply_bias(dense(x, fmaps=max(label_size, 1), gain=1, use_wscale=use_wscale))",
                            "Call"
                        ],
                        [
                            "lambda : fromrgb(downscale2d(images_in, 2 ** lod), res)",
                            "Lambda"
                        ],
                        [
                            "cset(x, lod_in < lod, lambda : grow(res + 1, lod - 1))",
                            "Call"
                        ],
                        [
                            "block(x(), res)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_276": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "_o(tf.nn.depthwise_conv2d(_i(x), f, strides=strides, padding='SAME', data_format='NHWC'))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, orig_dtype)",
                            "Call"
                        ],
                        [
                            "x * tf.rsqrt(tf.reduce_mean(tf.square(x), axis=[2, 3], keepdims=True) + epsilon)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(x, [1, 1, 1, factor, 1, factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, np.prod([d.value for d in x.shape[1:]])])",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, orig_dtype)",
                            "Call"
                        ],
                        [
                            "latents_in",
                            "Name"
                        ],
                        [
                            "tf.concat([x, y], axis=1)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "dense(x, fmaps=fmaps, gain=gain, use_wscale=use_wscale, lrmul=mapping_lrmul)",
                            "Call"
                        ],
                        [
                            "apply_bias(x, lrmul=mapping_lrmul)",
                            "Call"
                        ],
                        [
                            "act(x)",
                            "Call"
                        ],
                        [
                            "tf.tile(x[:, np.newaxis], [1, dlatent_broadcast, 1])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('const', shape=[1, nf(1), 4, 4], initializer=tf.initializers.ones())",
                            "Call"
                        ],
                        [
                            "layer_epilogue(tf.tile(tf.cast(x, dtype), [tf.shape(dlatents_in)[0], 1, 1, 1]), 0)",
                            "Call"
                        ],
                        [
                            "dense(dlatents_in[:, 0], fmaps=nf(1) * 16, gain=gain / 4, use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(tf.reshape(x, [-1, nf(1), 4, 4]), 0)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(conv2d(x, fmaps=nf(1), kernel=3, gain=gain, use_wscale=use_wscale), 1)",
                            "Call"
                        ],
                        [
                            "block(res, x)",
                            "Call"
                        ],
                        [
                            "block(res, x)",
                            "Call"
                        ],
                        [
                            "apply_noise(x, noise_inputs[layer_idx], randomize_noise=randomize_noise)",
                            "Call"
                        ],
                        [
                            "apply_bias(x)",
                            "Call"
                        ],
                        [
                            "act(x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "instance_norm(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, dlatents_in[:, layer_idx], use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(blur(upscale2d_conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale, fused_scale=fused_scale)), res * 2 - 4)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale), res * 2 - 3)",
                            "Call"
                        ],
                        [
                            "fromrgb(images_in, resolution_log2)",
                            "Call"
                        ],
                        [
                            "fromrgb(img, resolution_log2)",
                            "Call"
                        ],
                        [
                            "block(x, res)",
                            "Call"
                        ],
                        [
                            "block(x, res)",
                            "Call"
                        ],
                        [
                            "tflib.lerp_clip(x, y, lod_in - lod)",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "minibatch_stddev_layer(x, mbstd_group_size, mbstd_num_features)",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d_downscale2d(blur(x), fmaps=nf(res - 2), kernel=3, gain=gain, use_wscale=use_wscale, fused_scale=fused_scale)))",
                            "Call"
                        ],
                        [
                            "act(apply_bias(dense(x, fmaps=nf(res - 2), gain=gain, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "apply_bias(dense(x, fmaps=max(label_size, 1), gain=1, use_wscale=use_wscale))",
                            "Call"
                        ],
                        [
                            "lambda : fromrgb(downscale2d(images_in, 2 ** lod), res)",
                            "Lambda"
                        ],
                        [
                            "cset(x, lod_in < lod, lambda : grow(res + 1, lod - 1))",
                            "Call"
                        ],
                        [
                            "block(x(), res)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_509": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cast_510": {
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "_o(tf.nn.depthwise_conv2d(_i(x), f, strides=strides, padding='SAME', data_format='NHWC'))",
                            "Call"
                        ],
                        [
                            "tf.cast(x, orig_dtype)",
                            "Call"
                        ],
                        [
                            "x * tf.rsqrt(tf.reduce_mean(tf.square(x), axis=[2, 3], keepdims=True) + epsilon)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(x, [1, 1, 1, factor, 1, factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, np.prod([d.value for d in x.shape[1:]])])",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, orig_dtype)",
                            "Call"
                        ],
                        [
                            "latents_in",
                            "Name"
                        ],
                        [
                            "tf.concat([x, y], axis=1)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "dense(x, fmaps=fmaps, gain=gain, use_wscale=use_wscale, lrmul=mapping_lrmul)",
                            "Call"
                        ],
                        [
                            "apply_bias(x, lrmul=mapping_lrmul)",
                            "Call"
                        ],
                        [
                            "act(x)",
                            "Call"
                        ],
                        [
                            "tf.tile(x[:, np.newaxis], [1, dlatent_broadcast, 1])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('const', shape=[1, nf(1), 4, 4], initializer=tf.initializers.ones())",
                            "Call"
                        ],
                        [
                            "layer_epilogue(tf.tile(tf.cast(x, dtype), [tf.shape(dlatents_in)[0], 1, 1, 1]), 0)",
                            "Call"
                        ],
                        [
                            "dense(dlatents_in[:, 0], fmaps=nf(1) * 16, gain=gain / 4, use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(tf.reshape(x, [-1, nf(1), 4, 4]), 0)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(conv2d(x, fmaps=nf(1), kernel=3, gain=gain, use_wscale=use_wscale), 1)",
                            "Call"
                        ],
                        [
                            "block(res, x)",
                            "Call"
                        ],
                        [
                            "block(res, x)",
                            "Call"
                        ],
                        [
                            "apply_noise(x, noise_inputs[layer_idx], randomize_noise=randomize_noise)",
                            "Call"
                        ],
                        [
                            "apply_bias(x)",
                            "Call"
                        ],
                        [
                            "act(x)",
                            "Call"
                        ],
                        [
                            "pixel_norm(x)",
                            "Call"
                        ],
                        [
                            "instance_norm(x)",
                            "Call"
                        ],
                        [
                            "style_mod(x, dlatents_in[:, layer_idx], use_wscale=use_wscale)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(blur(upscale2d_conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale, fused_scale=fused_scale)), res * 2 - 4)",
                            "Call"
                        ],
                        [
                            "layer_epilogue(conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale), res * 2 - 3)",
                            "Call"
                        ],
                        [
                            "fromrgb(images_in, resolution_log2)",
                            "Call"
                        ],
                        [
                            "fromrgb(img, resolution_log2)",
                            "Call"
                        ],
                        [
                            "block(x, res)",
                            "Call"
                        ],
                        [
                            "block(x, res)",
                            "Call"
                        ],
                        [
                            "tflib.lerp_clip(x, y, lod_in - lod)",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "minibatch_stddev_layer(x, mbstd_group_size, mbstd_num_features)",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d(x, fmaps=nf(res - 1), kernel=3, gain=gain, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "act(apply_bias(conv2d_downscale2d(blur(x), fmaps=nf(res - 2), kernel=3, gain=gain, use_wscale=use_wscale, fused_scale=fused_scale)))",
                            "Call"
                        ],
                        [
                            "act(apply_bias(dense(x, fmaps=nf(res - 2), gain=gain, use_wscale=use_wscale)))",
                            "Call"
                        ],
                        [
                            "apply_bias(dense(x, fmaps=max(label_size, 1), gain=1, use_wscale=use_wscale))",
                            "Call"
                        ],
                        [
                            "lambda : fromrgb(downscale2d(images_in, 2 ** lod), res)",
                            "Lambda"
                        ],
                        [
                            "cset(x, lod_in < lod, lambda : grow(res + 1, lod - 1))",
                            "Call"
                        ],
                        [
                            "block(x(), res)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'float32'",
                            "MethodArgument"
                        ],
                        [
                            "'float32'",
                            "MethodArgument"
                        ],
                        [
                            "'float32'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "shape_510": {
                "input": {
                    "value": "dlatents_in",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(dlatents_in, dtype)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "training/networks_stylegan2.py": {
        "tensorflow": {}
    },
    "training/train_runner.py": {
        "tensorflow": {
            "while_loop_57": {
                "cond": {
                    "value": "lambda i: tf.less(i, n)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "body": {
                    "value": "computation",
                    "type": "Variable",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "[tf.constant(0)]",
                    "type": "List",
                    "possible_values": []
                },
                "parallel_iterations": {
                    "value": "parallel_iterations",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Graph_94": {
                "variable": {
                    "value": "self.input_graph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_95": {
                "variable": {
                    "value": "self.init_graph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "shutdown_system_98": {
                "variable": {
                    "value": "self.tpu_shutdown",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "TPUClusterResolver_99": {
                "variable": {
                    "value": "self.cluster_resolver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tpu": {
                    "value": "FLAGS.tpu or FLAGS.master",
                    "type": "BoolOp",
                    "possible_values": []
                },
                "zone": {
                    "value": "FLAGS.tpu_zone",
                    "type": "Attribute",
                    "possible_values": []
                },
                "project": {
                    "value": "FLAGS.gcp_project",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ConfigProto_103": {
                "variable": {
                    "value": "self.config",
                    "type": "Attribute",
                    "possible_values": []
                },
                "operation_timeout_in_ms": {
                    "value": "600 * 60 * 1000",
                    "type": "BinOp",
                    "possible_values": []
                },
                "graph_options": {
                    "value": "tf.GraphOptions(rewrite_options=rewriter_config_pb2.RewriterConfig(disable_meta_optimizer=True))",
                    "type": "Call",
                    "possible_values": []
                },
                "isolate_session_state": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "shard_224": {
                "variable": {
                    "value": "(self.loss,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "num_shards": {
                    "value": "FLAGS.num_cores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "outputs_from_all_shards": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "global_variables_initializer_230": {
                "variable": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_242": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "var_list": {
                    "value": "self.var_list",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_81": {
                "msg": {
                    "value": "TrainRunner: constructor",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_179": {
                "msg": {
                    "value": "TrainRunner: initialize method",
                    "type": "str",
                    "possible_values": []
                }
            },
            "write_graph_231": {
                "graph_or_graph_def": {
                    "value": "tf.Graph().as_graph_def(add_shapes=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "logdir": {
                    "value": "FLAGS.model_dir",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "graph.pbtxt",
                    "type": "str",
                    "possible_values": []
                }
            },
            "latest_checkpoint_246": {
                "variable": {
                    "value": "ckpt",
                    "type": "Variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "FLAGS.restore_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "latest_checkpoint_249": {
                "variable": {
                    "value": "ckpt",
                    "type": "Variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "FLAGS.model_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_278": {
                "msg": {
                    "value": "TrainRunner: step %d",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "cur_step",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "cur_step + self.iterations",
                            "BinOp"
                        ]
                    ]
                }
            },
            "control_dependencies_54": {
                "control_inputs": {
                    "value": "ops",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "op_fn()",
                            "Call"
                        ],
                        [
                            "[ops]",
                            "List"
                        ]
                    ]
                }
            },
            "less_58": {
                "x": {
                    "value": "i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "i + 1",
                            "BinOp"
                        ],
                        [
                            "range(num_threads)",
                            "Call"
                        ],
                        [
                            "range(num_threads)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "constant_59": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pack_sequence_as_205": {
                "variable": {
                    "value": "unflattened_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "self.feature_structure",
                    "type": "Attribute",
                    "possible_values": []
                },
                "flat_sequence": {
                    "value": "values",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.infeed_queue[0].generate_dequeue_op(tpu_device=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "repeat_222": {
                "input": {
                    "value": "self.iterations",
                    "type": "Attribute",
                    "possible_values": []
                },
                "repeats": {
                    "value": "tpu_step",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "get_tpu_step(params)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[_INITIAL_LOSS]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Graph_231": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "info_253": {
                "msg": {
                    "value": "TrainRunner: Saving initial model...",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_257": {
                "msg": {
                    "value": "'TrainRunner: Restoring %s' % ckpt",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_284": {
                "msg": {
                    "value": "TrainRunner: start next %d steps",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.iterations",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_302": {
                "msg": {
                    "value": "'TrainRunner: step {} kex {:.3f} loss {} step time {:.2f}s total {:.2f}s {:.2f} examples/sec'.format(cur_step, self.cur_ex / 1000.0, loss, end - start, end - begin, self.iterations * FLAGS.train_batch_size / (end - start))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "initialize_system_97": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GraphOptions_104": {
                "rewrite_options": {
                    "value": "rewriter_config_pb2.RewriterConfig(disable_meta_optimizer=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_163": {
                "device_name": {
                    "value": "self.device_for_host(host_id)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "global_variables_240": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_144": {
                "device_name": {
                    "value": "self.device_for_host(task=host_id)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "flatten_150": {
                "variable": {
                    "value": "flattened_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "self.feature_structure",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_212": {
                "device_name": {
                    "value": "device_for_tpu_core()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_290": {
                "msg": {
                    "value": "TrainRunner: waiting for checkpoint thread....",
                    "type": "str",
                    "possible_values": []
                }
            },
            "control_dependencies_213": {
                "control_inputs": {
                    "value": "[train_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "identity_214": {
                "input": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.sess.run([self.loss])",
                            "Call"
                        ]
                    ]
                }
            },
            "control_dependencies_146": {
                "control_inputs": {
                    "value": "control_deps",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "training/training_loop.py": {
        "tensorflow": {
            "cast_183": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "misc.adjust_dynamic_range(x, drange_data, drange_net)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.random_uniform([tf.shape(x)[0]]) < 0.5, x, tf.reverse(x, [3]))",
                            "Call"
                        ],
                        [
                            "tflib.lerp(x, y, lod - tf.floor(lod))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(x, [1, 1, 1, factor, 1, factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "tf_rand(*args, **kws)",
                            "Call"
                        ],
                        [
                            "x + tf_rand(*args, **kws)",
                            "BinOp"
                        ],
                        [
                            "tf.cast(x, tf.float32) / bias",
                            "BinOp"
                        ],
                        [
                            "tf.cast(x, dtype)",
                            "Call"
                        ],
                        [
                            "x['data'][0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "kws.pop('dtype') if 'dtype' in kws else tf.float32",
                            "IfExp"
                        ]
                    ]
                }
            },
            "extract_jpeg_shape_217": {
                "variable": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "image_bytes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cast_221": {
                "variable": {
                    "value": "padded_center_crop_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image_size / (image_size + crop_padding) * tf.cast(tf.minimum(image_height, image_width), tf.float32)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_228": {
                "variable": {
                    "value": "crop_window",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[offset_height, offset_width, padded_center_crop_size, padded_center_crop_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "decode_and_crop_jpeg_230": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "image_bytes",
                    "type": "Variable",
                    "possible_values": []
                },
                "crop_window": {
                    "value": "crop_window",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.stack([offset_height, offset_width, padded_center_crop_size, padded_center_crop_size])",
                            "Call"
                        ]
                    ]
                },
                "channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "make_csv_dataset_277": {
                "variable": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "file_pattern": {
                    "value": "path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.environ['IMAGENET_TFRECORD_DATASET']",
                            "Subscript"
                        ],
                        [
                            "paths",
                            "Name"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "column_names": {
                    "value": "'name,width,height,channels,format,data'.split(',')",
                    "type": "Call",
                    "possible_values": []
                },
                "column_defaults": {
                    "value": "[dtypes.string]",
                    "type": "List",
                    "possible_values": []
                },
                "select_columns": {
                    "value": "['data']",
                    "type": "List",
                    "possible_values": []
                },
                "header": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "shuffle_seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "sloppy": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_parallel_reads": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "ignore_errors": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "RunConfig_643": {
                "variable": {
                    "value": "run_config",
                    "type": "Variable",
                    "possible_values": []
                },
                "model_dir": {
                    "value": "model_dir",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.environ['MODEL_DIR'] if 'MODEL_DIR' in os.environ else 'gs://danbooru-euw4a/test/run30/'",
                            "IfExp"
                        ]
                    ]
                },
                "save_checkpoints_secs": {
                    "value": "600 // 5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "keep_checkpoint_max": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "keep_checkpoint_every_n_hours": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "cluster": {
                    "value": "tpu_cluster_resolver",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tflex.get_tpu_resolver()",
                            "Call"
                        ]
                    ]
                },
                "tpu_config": {
                    "value": "tf.contrib.tpu.TPUConfig(iterations_per_loop=256)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TPUEstimator_657": {
                "variable": {
                    "value": "estimator",
                    "type": "Variable",
                    "possible_values": []
                },
                "config": {
                    "value": "run_config",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.contrib.tpu.RunConfig(model_dir=model_dir, save_checkpoints_secs=600 // 5, keep_checkpoint_max=10, keep_checkpoint_every_n_hours=1, cluster=tpu_cluster_resolver, tpu_config=tf.contrib.tpu.TPUConfig(iterations_per_loop=256))",
                            "Call"
                        ]
                    ]
                },
                "use_tpu": {
                    "value": "use_tpu",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "Constant"
                        ]
                    ]
                },
                "model_fn": {
                    "value": "model_fn",
                    "type": "Variable",
                    "possible_values": []
                },
                "train_batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "params['batch_size']",
                            "Subscript"
                        ],
                        [
                            "sched_args.minibatch_size_base",
                            "Attribute"
                        ]
                    ]
                }
            },
            "group_826": {
                "variable": {
                    "value": "data_fetch_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "*data_fetch_ops",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "FileWriter_847": {
                "variable": {
                    "value": "summary_log",
                    "type": "Variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "dnnlib.make_run_dir_path()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_29": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "misc.adjust_dynamic_range(x, drange_data, drange_net)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.random_uniform([tf.shape(x)[0]]) < 0.5, x, tf.reverse(x, [3]))",
                            "Call"
                        ],
                        [
                            "tflib.lerp(x, y, lod - tf.floor(lod))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(x, [1, 1, 1, factor, 1, factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "tf_rand(*args, **kws)",
                            "Call"
                        ],
                        [
                            "x + tf_rand(*args, **kws)",
                            "BinOp"
                        ],
                        [
                            "tf.cast(x, tf.float32) / bias",
                            "BinOp"
                        ],
                        [
                            "tf.cast(x, dtype)",
                            "Call"
                        ],
                        [
                            "x['data'][0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_126": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(features, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_127": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(labels, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_143": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(images, [-1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "uniform_163": {
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "minval": {
                    "value": "lo",
                    "type": "Variable",
                    "possible_values": []
                },
                "maxval": {
                    "value": "hi",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "uniform_173": {
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "minval": {
                    "value": "lo",
                    "type": "Variable",
                    "possible_values": []
                },
                "maxval": {
                    "value": "hi",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "extract_jpeg_shape_196": {
                "variable": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "image_bytes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cond_202": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "w > h",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : tf.image.decode_and_crop_jpeg(image_bytes, tf.stack([x + tf_between(w - h, seed=seed), y, h, h]), channels=n)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.cond(h > w, lambda : tf.image.decode_and_crop_jpeg(image_bytes, tf.stack([x, y + tf_between(h - w, seed=seed), w, w]), channels=n), lambda : tf.image.decode_jpeg(image_bytes, channels=n))",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "make_csv_dataset_272": {
                "file_pattern": {
                    "value": "path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.environ['IMAGENET_TFRECORD_DATASET']",
                            "Subscript"
                        ],
                        [
                            "paths",
                            "Name"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "column_names": {
                    "value": "column_names",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None if spec is None else [x[0] for x in columns]",
                            "IfExp"
                        ]
                    ]
                },
                "column_defaults": {
                    "value": "column_types",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None if spec is None else [x[1] for x in columns]",
                            "IfExp"
                        ]
                    ]
                }
            },
            "decode_base64_282": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "misc.adjust_dynamic_range(x, drange_data, drange_net)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.random_uniform([tf.shape(x)[0]]) < 0.5, x, tf.reverse(x, [3]))",
                            "Call"
                        ],
                        [
                            "tflib.lerp(x, y, lod - tf.floor(lod))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(x, [1, 1, 1, factor, 1, factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "tf_rand(*args, **kws)",
                            "Call"
                        ],
                        [
                            "x + tf_rand(*args, **kws)",
                            "BinOp"
                        ],
                        [
                            "tf.cast(x, tf.float32) / bias",
                            "BinOp"
                        ],
                        [
                            "tf.cast(x, dtype)",
                            "Call"
                        ],
                        [
                            "x['data'][0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "transpose_285": {
                "variable": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(img, [0, 3, 1, 2])[0]",
                            "Subscript"
                        ],
                        [
                            "tf.concat([img, [c]], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.concat([img, [c]], axis=0)",
                            "Call"
                        ],
                        [
                            "_decode_and_center_crop(data, resize)",
                            "Call"
                        ],
                        [
                            "tf.transpose(img, [2, 0, 1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[2, 0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_286": {
                "variable": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "set_verbosity_520": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_578": {
                "variable": {
                    "value": "G_loss_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "G_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "G_loss + G_reg",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_mean_579": {
                "variable": {
                    "value": "D_loss_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "D_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "D_loss + D_reg",
                            "BinOp"
                        ]
                    ]
                }
            },
            "assign_add_582": {
                "variable": {
                    "value": "inc_global_step",
                    "type": "Variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "tf.train.get_or_create_global_step()",
                    "type": "Call",
                    "possible_values": []
                },
                "value": {
                    "value": "minibatch_gpu_in",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int32, name='minibatch_gpu_in', shape=[])",
                            "Call"
                        ],
                        [
                            "params['batch_size']",
                            "Subscript"
                        ]
                    ]
                },
                "name": {
                    "value": "inc_global_step",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_722": {
                "variable": {
                    "value": "lod_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "lod_in",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_723": {
                "variable": {
                    "value": "lrate_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "lrate_in",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_724": {
                "variable": {
                    "value": "minibatch_size_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "minibatch_size_in",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_725": {
                "variable": {
                    "value": "minibatch_gpu_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "minibatch_gpu_in",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "name_scope_28": {
                "name": {
                    "value": "DynamicRange",
                    "type": "str",
                    "possible_values": []
                }
            },
            "where_33": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.random_uniform([tf.shape(x)[0]]) < 0.5",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "misc.adjust_dynamic_range(x, drange_data, drange_net)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.random_uniform([tf.shape(x)[0]]) < 0.5, x, tf.reverse(x, [3]))",
                            "Call"
                        ],
                        [
                            "tflib.lerp(x, y, lod - tf.floor(lod))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(x, [1, 1, 1, factor, 1, factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "tf_rand(*args, **kws)",
                            "Call"
                        ],
                        [
                            "x + tf_rand(*args, **kws)",
                            "BinOp"
                        ],
                        [
                            "tf.cast(x, tf.float32) / bias",
                            "BinOp"
                        ],
                        [
                            "tf.cast(x, dtype)",
                            "Call"
                        ],
                        [
                            "x['data'][0]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.reverse(x, [3])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_37": {
                "variable": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "misc.adjust_dynamic_range(x, drange_data, drange_net)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.random_uniform([tf.shape(x)[0]]) < 0.5, x, tf.reverse(x, [3]))",
                            "Call"
                        ],
                        [
                            "tflib.lerp(x, y, lod - tf.floor(lod))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(x, [1, 1, 1, factor, 1, factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "tf_rand(*args, **kws)",
                            "Call"
                        ],
                        [
                            "x + tf_rand(*args, **kws)",
                            "BinOp"
                        ],
                        [
                            "tf.cast(x, tf.float32) / bias",
                            "BinOp"
                        ],
                        [
                            "tf.cast(x, dtype)",
                            "Call"
                        ],
                        [
                            "x['data'][0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "reshape_38": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "misc.adjust_dynamic_range(x, drange_data, drange_net)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.random_uniform([tf.shape(x)[0]]) < 0.5, x, tf.reverse(x, [3]))",
                            "Call"
                        ],
                        [
                            "tflib.lerp(x, y, lod - tf.floor(lod))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(x, [1, 1, 1, factor, 1, factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "tf_rand(*args, **kws)",
                            "Call"
                        ],
                        [
                            "x + tf_rand(*args, **kws)",
                            "BinOp"
                        ],
                        [
                            "tf.cast(x, tf.float32) / bias",
                            "BinOp"
                        ],
                        [
                            "tf.cast(x, dtype)",
                            "Call"
                        ],
                        [
                            "x['data'][0]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, s[1], s[2] // 2, 2, s[3] // 2, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_39": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, s[1], s[2] // 2, 2, s[3] // 2, 2])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(y, axis=[3, 5], keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.tile(y, [1, 1, 1, 2, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [-1, s[1], s[2], s[3]])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[3, 5]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tile_40": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, s[1], s[2] // 2, 2, s[3] // 2, 2])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(y, axis=[3, 5], keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.tile(y, [1, 1, 1, 2, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [-1, s[1], s[2], s[3]])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, 1, 1, 2, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_41": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, s[1], s[2] // 2, 2, s[3] // 2, 2])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(y, axis=[3, 5], keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.tile(y, [1, 1, 1, 2, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [-1, s[1], s[2], s[3]])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, s[1], s[2], s[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_44": {
                "variable": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "misc.adjust_dynamic_range(x, drange_data, drange_net)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.random_uniform([tf.shape(x)[0]]) < 0.5, x, tf.reverse(x, [3]))",
                            "Call"
                        ],
                        [
                            "tflib.lerp(x, y, lod - tf.floor(lod))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(x, [1, 1, 1, factor, 1, factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "tf_rand(*args, **kws)",
                            "Call"
                        ],
                        [
                            "x + tf_rand(*args, **kws)",
                            "BinOp"
                        ],
                        [
                            "tf.cast(x, tf.float32) / bias",
                            "BinOp"
                        ],
                        [
                            "tf.cast(x, dtype)",
                            "Call"
                        ],
                        [
                            "x['data'][0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cast_45": {
                "variable": {
                    "value": "factor",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "2 ** tf.floor(lod)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_46": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "misc.adjust_dynamic_range(x, drange_data, drange_net)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.random_uniform([tf.shape(x)[0]]) < 0.5, x, tf.reverse(x, [3]))",
                            "Call"
                        ],
                        [
                            "tflib.lerp(x, y, lod - tf.floor(lod))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(x, [1, 1, 1, factor, 1, factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "tf_rand(*args, **kws)",
                            "Call"
                        ],
                        [
                            "x + tf_rand(*args, **kws)",
                            "BinOp"
                        ],
                        [
                            "tf.cast(x, tf.float32) / bias",
                            "BinOp"
                        ],
                        [
                            "tf.cast(x, dtype)",
                            "Call"
                        ],
                        [
                            "x['data'][0]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, s[1], s[2], 1, s[3], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_47": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "misc.adjust_dynamic_range(x, drange_data, drange_net)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.random_uniform([tf.shape(x)[0]]) < 0.5, x, tf.reverse(x, [3]))",
                            "Call"
                        ],
                        [
                            "tflib.lerp(x, y, lod - tf.floor(lod))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(x, [1, 1, 1, factor, 1, factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "tf_rand(*args, **kws)",
                            "Call"
                        ],
                        [
                            "x + tf_rand(*args, **kws)",
                            "BinOp"
                        ],
                        [
                            "tf.cast(x, tf.float32) / bias",
                            "BinOp"
                        ],
                        [
                            "tf.cast(x, dtype)",
                            "Call"
                        ],
                        [
                            "x['data'][0]",
                            "Subscript"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, 1, 1, factor, 1, factor]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_48": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "misc.adjust_dynamic_range(x, drange_data, drange_net)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.random_uniform([tf.shape(x)[0]]) < 0.5, x, tf.reverse(x, [3]))",
                            "Call"
                        ],
                        [
                            "tflib.lerp(x, y, lod - tf.floor(lod))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(x, [1, 1, 1, factor, 1, factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "tf_rand(*args, **kws)",
                            "Call"
                        ],
                        [
                            "x + tf_rand(*args, **kws)",
                            "BinOp"
                        ],
                        [
                            "tf.cast(x, tf.float32) / bias",
                            "BinOp"
                        ],
                        [
                            "tf.cast(x, dtype)",
                            "Call"
                        ],
                        [
                            "x['data'][0]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, s[1], s[2] * factor, s[3] * factor]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_182": {
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "misc.adjust_dynamic_range(x, drange_data, drange_net)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.random_uniform([tf.shape(x)[0]]) < 0.5, x, tf.reverse(x, [3]))",
                            "Call"
                        ],
                        [
                            "tflib.lerp(x, y, lod - tf.floor(lod))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(x, [1, 1, 1, factor, 1, factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "tf_rand(*args, **kws)",
                            "Call"
                        ],
                        [
                            "x + tf_rand(*args, **kws)",
                            "BinOp"
                        ],
                        [
                            "tf.cast(x, tf.float32) / bias",
                            "BinOp"
                        ],
                        [
                            "tf.cast(x, dtype)",
                            "Call"
                        ],
                        [
                            "x['data'][0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_195": {
                "name": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "resize_area_231": {
                "images": {
                    "value": "[image]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[image_size, image_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_266": {
                "value": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtypes.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TPUEstimatorSpec_631": {
                "mode": {
                    "value": "mode",
                    "type": "Variable",
                    "possible_values": []
                },
                "host_call": {
                    "value": "get_tpu_summary().get_host_call()",
                    "type": "Call",
                    "possible_values": []
                },
                "loss": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "G_loss_op + D_loss_op",
                            "BinOp"
                        ],
                        [
                            "loss + D_reg_loss",
                            "BinOp"
                        ]
                    ]
                },
                "train_op": {
                    "value": "train_op",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.group(Gs_update_op, name='train_op')",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_721": {
                "name": {
                    "value": "Inputs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_32": {
                "name": {
                    "value": "MirrorAugment",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_36": {
                "name": {
                    "value": "FadeLOD",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_43": {
                "name": {
                    "value": "UpscaleLOD",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_223": {
                "x": {
                    "value": "tf.minimum(image_height, image_width)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_265": {
                "value": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "type_map[kind]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "IsDirectory_308": {
                "dirname": {
                    "value": "tfrecord_dir",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cast_479": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(features, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_480": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(labels, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_557": {
                "name": {
                    "value": "G_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_560": {
                "name": {
                    "value": "D_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_574": {
                "variable": {
                    "value": "G_reg_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "G_reg * G_reg_interval",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_575": {
                "variable": {
                    "value": "D_reg_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "D_reg * D_reg_interval",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_or_create_global_step_582": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cond_612": {
                "variable": {
                    "value": "G_reg_train_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "lambda : tf.equal(tf.mod(tf.train.get_or_create_global_step(), G_reg_interval), tf.constant(0, tf.int64))",
                    "type": "Lambda",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "G_fn",
                    "type": "Variable",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "G_else",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cond_613": {
                "variable": {
                    "value": "D_reg_train_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "lambda : tf.equal(tf.mod(tf.train.get_or_create_global_step(), D_reg_interval), tf.constant(0, tf.int64))",
                    "type": "Lambda",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "D_fn",
                    "type": "Variable",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "D_else",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "control_dependencies_624": {
                "control_inputs": {
                    "value": "[inc_global_step]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TPUConfig_650": {
                "iterations_per_loop": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "name_scope_756": {
                "name": {
                    "value": "'GPU%d' % gpu",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "name_scope_778": {
                "name": {
                    "value": "'GPU%d' % gpu",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Variable_792": {
                "variable": {
                    "value": "reals_var",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "reals",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([sched.minibatch_gpu] + training_set.shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_793": {
                "variable": {
                    "value": "labels_var",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "labels",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([sched.minibatch_gpu, training_set.label_size])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_796": {
                "variable": {
                    "value": "reals_write",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[reals_write, reals_var[minibatch_gpu_in:]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_797": {
                "variable": {
                    "value": "labels_write",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[labels_write, labels_var[minibatch_gpu_in:]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_default_graph_849": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reverse_33": {
                "tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "misc.adjust_dynamic_range(x, drange_data, drange_net)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.random_uniform([tf.shape(x)[0]]) < 0.5, x, tf.reverse(x, [3]))",
                            "Call"
                        ],
                        [
                            "tflib.lerp(x, y, lod - tf.floor(lod))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(x, [1, 1, 1, factor, 1, factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "tf_rand(*args, **kws)",
                            "Call"
                        ],
                        [
                            "x + tf_rand(*args, **kws)",
                            "BinOp"
                        ],
                        [
                            "tf.cast(x, tf.float32) / bias",
                            "BinOp"
                        ],
                        [
                            "tf.cast(x, dtype)",
                            "Call"
                        ],
                        [
                            "x['data'][0]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "[3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_142": {
                "dims": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[resolution, resolution, num_channels, batch_size]",
                            "List"
                        ],
                        [
                            "[resolution, resolution, batch_size, num_channels]",
                            "List"
                        ],
                        [
                            "tf.image.extract_jpeg_shape(image_bytes)",
                            "Call"
                        ],
                        [
                            "tf.image.extract_jpeg_shape(image_bytes)",
                            "Call"
                        ]
                    ]
                }
            },
            "TensorShape_145": {
                "dims": {
                    "value": "[batch_size, label_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_148": {
                "dims": {
                    "value": "[batch_size, num_channels, resolution, resolution]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_150": {
                "dims": {
                    "value": "[batch_size, label_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "decode_and_crop_jpeg_203": {
                "contents": {
                    "value": "image_bytes",
                    "type": "Variable",
                    "possible_values": []
                },
                "crop_window": {
                    "value": "tf.stack([x + tf_between(w - h, seed=seed), y, h, h])",
                    "type": "Call",
                    "possible_values": []
                },
                "channels": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                }
            },
            "cond_206": {
                "pred": {
                    "value": "h > w",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : tf.image.decode_and_crop_jpeg(image_bytes, tf.stack([x, y + tf_between(h - w, seed=seed), w, w]), channels=n)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.image.decode_jpeg(image_bytes, channels=n)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "resize_212": {
                "images": {
                    "value": "[image]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "image_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[resize, resize] if isinstance(resize, int) or isinstance(resize, float) else resize",
                            "IfExp"
                        ]
                    ]
                },
                "method": {
                    "value": "method",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.image.ResizeMethod.AREA",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "minimum_223": {
                "x": {
                    "value": "image_height",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "image_width",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "glob_309": {
                "pattern": {
                    "value": "os.path.join(tfrecord_dir, '*-r%02d.tfrecords' % resolution_log2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_op_615": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_op_616": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "div_619": {
                "x": {
                    "value": "tf.cast(minibatch_size_in, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "G_smoothing_kimg * 1000.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "control_dependencies_625": {
                "control_inputs": {
                    "value": "[G_train_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "div_727": {
                "x": {
                    "value": "tf.cast(minibatch_size_in, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "G_smoothing_kimg * 1000.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "name_scope_790": {
                "name": {
                    "value": "DataFetch",
                    "type": "str",
                    "possible_values": []
                }
            },
            "control_dependencies_807": {
                "control_inputs": {
                    "value": "lod_assign_ops",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "lod_assign_ops + [tf.assign(D_gpu.vars['lod'], lod_in)]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_mean_820": {
                "input_tensor": {
                    "value": "G_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "G_loss + G_reg",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_mean_821": {
                "input_tensor": {
                    "value": "D_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "D_loss + D_reg",
                            "BinOp"
                        ]
                    ]
                }
            },
            "constant_841": {
                "variable": {
                    "value": "peak_gpu_mem_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "floor_42": {
                "x": {
                    "value": "lod",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "floor_45": {
                "x": {
                    "value": "lod",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "stack_204": {
                "values": {
                    "value": "[x + tf_between(w - h, seed=seed), y, h, h]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "map_and_batch_332": {
                "map_func": {
                    "value": "dataset_parser_dynamic",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "params['batch_size']",
                            "Subscript"
                        ],
                        [
                            "sched_args.minibatch_size_base",
                            "Attribute"
                        ]
                    ]
                },
                "num_parallel_batches": {
                    "value": "tf.data.experimental.AUTOTUNE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_remainder": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cond_587": {
                "pred": {
                    "value": "lambda : tf.cast(tf.mod(tf.train.get_global_step(), G_reg_interval), tf.bool)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : G_reg_opt._shared_optimizers[''].minimize(G_reg_loss, var_list=G_gpu.trainables)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.no_op()",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "no_op_590": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cond_591": {
                "pred": {
                    "value": "lambda : tf.cast(tf.mod(tf.train.get_global_step(), D_reg_interval), tf.bool)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : D_reg_opt._shared_optimizers[''].minimize(D_reg_loss, var_list=D_gpu.trainables)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.no_op()",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "no_op_594": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cast_619": {
                "x": {
                    "value": "minibatch_size_in",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int32, name='minibatch_size_in', shape=[])",
                            "Call"
                        ],
                        [
                            "batch_size",
                            "Name"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "control_dependencies_626": {
                "control_inputs": {
                    "value": "[G_reg_train_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_727": {
                "x": {
                    "value": "minibatch_size_in",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int32, name='minibatch_size_in', shape=[])",
                            "Call"
                        ],
                        [
                            "batch_size",
                            "Name"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "group_798": {
                "*inputs": {
                    "value": "tf.assign(reals_var, reals_write)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "fetch_reals",
                    "type": "str",
                    "possible_values": []
                }
            },
            "group_799": {
                "*inputs": {
                    "value": "tf.assign(labels_var, labels_write)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "fetch_labels",
                    "type": "str",
                    "possible_values": []
                }
            },
            "assign_805": {
                "ref": {
                    "value": "G_gpu.vars['lod']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "lod_in",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, name='lod_in', shape=[])",
                            "Call"
                        ]
                    ]
                }
            },
            "assign_806": {
                "ref": {
                    "value": "D_gpu.vars['lod']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "lod_in",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, name='lod_in', shape=[])",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_808": {
                "name": {
                    "value": "G_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_810": {
                "name": {
                    "value": "D_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "decode_and_crop_jpeg_207": {
                "contents": {
                    "value": "image_bytes",
                    "type": "Variable",
                    "possible_values": []
                },
                "crop_window": {
                    "value": "tf.stack([x, y + tf_between(h - w, seed=seed), w, w])",
                    "type": "Call",
                    "possible_values": []
                },
                "channels": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                }
            },
            "decode_jpeg_209": {
                "contents": {
                    "value": "image_bytes",
                    "type": "Variable",
                    "possible_values": []
                },
                "channels": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                }
            },
            "parallel_interleave_361": {
                "map_func": {
                    "value": "tf.data.TFRecordDataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "cycle_length": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "sloppy": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "map_and_batch_452": {
                "map_func": {
                    "value": "dataset_parser_dynamic",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "params['batch_size']",
                            "Subscript"
                        ],
                        [
                            "sched_args.minibatch_size_base",
                            "Attribute"
                        ]
                    ]
                },
                "num_parallel_batches": {
                    "value": "tf.data.experimental.AUTOTUNE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_remainder": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "control_dependencies_599": {
                "control_inputs": {
                    "value": "[tf.train.get_or_create_global_step()]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "control_dependencies_603": {
                "control_inputs": {
                    "value": "[tf.train.get_or_create_global_step()]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "control_dependencies_607": {
                "control_inputs": {
                    "value": "[tf.train.get_or_create_global_step()]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "no_op_608": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "control_dependencies_610": {
                "control_inputs": {
                    "value": "[tf.train.get_or_create_global_step()]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "no_op_611": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "equal_612": {
                "x": {
                    "value": "tf.mod(tf.train.get_or_create_global_step(), G_reg_interval)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.constant(0, tf.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_613": {
                "x": {
                    "value": "tf.mod(tf.train.get_or_create_global_step(), D_reg_interval)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.constant(0, tf.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "control_dependencies_627": {
                "control_inputs": {
                    "value": "[D_train_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_792": {
                "shape": {
                    "value": "[sched.minibatch_gpu] + training_set.shape",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_793": {
                "shape": {
                    "value": "[sched.minibatch_gpu, training_set.label_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "assign_798": {
                "ref": {
                    "value": "reals_var",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Variable(name='reals', trainable=False, initial_value=tf.zeros([sched.minibatch_gpu] + training_set.shape))",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "reals_write",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat([reals_write, reals_var[minibatch_gpu_in:]], axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "assign_799": {
                "ref": {
                    "value": "labels_var",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Variable(name='labels', trainable=False, initial_value=tf.zeros([sched.minibatch_gpu, training_set.label_size]))",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "labels_write",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat([labels_write, labels_var[minibatch_gpu_in:]], axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_818": {
                "input_tensor": {
                    "value": "G_reg * G_reg_interval",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_819": {
                "input_tensor": {
                    "value": "D_reg * D_reg_interval",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_207": {
                "values": {
                    "value": "[x, y + tf_between(h - w, seed=seed), w, w]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "control_dependencies_364": {
                "control_inputs": {
                    "value": "[training_set._tf_labels_init]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_396": {
                "variable": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "one_hot_412": {
                "variable": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "label[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "depth": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_588": {
                "x": {
                    "value": "tf.mod(tf.train.get_global_step(), G_reg_interval)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_592": {
                "x": {
                    "value": "tf.mod(tf.train.get_global_step(), D_reg_interval)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mod_612": {
                "x1": {
                    "value": "tf.train.get_or_create_global_step()",
                    "type": "Call",
                    "possible_values": []
                },
                "x2": {
                    "value": "G_reg_interval",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "constant_612": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mod_613": {
                "x1": {
                    "value": "tf.train.get_or_create_global_step()",
                    "type": "Call",
                    "possible_values": []
                },
                "x2": {
                    "value": "D_reg_interval",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "16",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "constant_613": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "control_dependencies_628": {
                "control_inputs": {
                    "value": "[D_reg_train_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "group_630": {
                "variable": {
                    "value": "train_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "Gs_update_op",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Gs.setup_as_moving_average_of(G, beta=Gs_beta)",
                            "Call"
                        ],
                        [
                            "Gs.setup_as_moving_average_of(G, beta=Gs_beta)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "train_op",
                    "type": "str",
                    "possible_values": []
                }
            },
            "shape_33": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "misc.adjust_dynamic_range(x, drange_data, drange_net)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.random_uniform([tf.shape(x)[0]]) < 0.5, x, tf.reverse(x, [3]))",
                            "Call"
                        ],
                        [
                            "tflib.lerp(x, y, lod - tf.floor(lod))",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2], 1, s[3], 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(x, [1, 1, 1, factor, 1, factor])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, s[1], s[2] * factor, s[3] * factor])",
                            "Call"
                        ],
                        [
                            "tf_rand(*args, **kws)",
                            "Call"
                        ],
                        [
                            "x + tf_rand(*args, **kws)",
                            "BinOp"
                        ],
                        [
                            "tf.cast(x, tf.float32) / bias",
                            "BinOp"
                        ],
                        [
                            "tf.cast(x, dtype)",
                            "Call"
                        ],
                        [
                            "x['data'][0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "transpose_394": {
                "a": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(img, [0, 3, 1, 2])[0]",
                            "Subscript"
                        ],
                        [
                            "tf.concat([img, [c]], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.concat([img, [c]], axis=0)",
                            "Call"
                        ],
                        [
                            "_decode_and_center_crop(data, resize)",
                            "Call"
                        ],
                        [
                            "tf.transpose(img, [2, 0, 1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_400": {
                "variable": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.tile(tf.tile(tf.constant(0, dtype=tf.float32), [tf.math.ceil(r / n)])[0:r], [r])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[r, r]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_401": {
                "variable": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[img, [c]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_410": {
                "variable": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.tile(tf.tile(label / label_size, [tf.math.ceil(r / n)])[0:r], [r])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[r, r]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_411": {
                "variable": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[img, [c]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mod_588": {
                "x1": {
                    "value": "tf.train.get_global_step()",
                    "type": "Call",
                    "possible_values": []
                },
                "x2": {
                    "value": "G_reg_interval",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "mod_592": {
                "x1": {
                    "value": "tf.train.get_global_step()",
                    "type": "Call",
                    "possible_values": []
                },
                "x2": {
                    "value": "D_reg_interval",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "16",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_or_create_global_step_599": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_or_create_global_step_603": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_or_create_global_step_607": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_or_create_global_step_610": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_or_create_global_step_612": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_or_create_global_step_613": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "control_dependencies_629": {
                "control_inputs": {
                    "value": "tf.get_collection(tf.GraphKeys.UPDATE_OPS)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "control_dependencies_381": {
                "control_inputs": {
                    "value": "[training_set._tf_labels_init]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_global_step_588": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_global_step_592": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_collection_629": {
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tile_400": {
                "input": {
                    "value": "tf.constant(0, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[tf.math.ceil(r / n)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_410": {
                "input": {
                    "value": "label / label_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[tf.math.ceil(r / n)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_400": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ceil_400": {
                "x": {
                    "value": "r / n",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ceil_410": {
                "x": {
                    "value": "r / n",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "view.py": {
        "tensorflow": {
            "get_default_session_35": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_93": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "latest_checkpoint_96": {
                "variable": {
                    "value": "ckpt",
                    "type": "Variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "checkpoints_iterator_205": {
                "checkpoint_dir": {
                    "value": "model_dir",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.environ['MODEL_DIR']",
                            "Subscript"
                        ]
                    ]
                },
                "min_interval_secs": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "global_variables_initializer_89": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}