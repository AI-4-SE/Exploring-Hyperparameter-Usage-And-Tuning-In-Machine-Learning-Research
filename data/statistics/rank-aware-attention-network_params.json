{
    "dataset.py": {
        "torch": {}
    },
    "losses.py": {
        "torch": {}
    },
    "model.py": {
        "torch": {
            "ModuleList_16": {
                "variable": {
                    "value": "self.att_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_25": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.input_size, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_44": {
                "variable": {
                    "value": "all_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_35": {
                "variable": {
                    "value": "all_atts",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "att_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mul_41": {
                "variable": {
                    "value": "tmp_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.view(-1, self.num_features, self.input_size)",
                            "Call"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "all_atts[:, :, i, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_26": {
                "in_features": {
                    "value": "self.input_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tanh_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_19": {
                "*args": {
                    "value": "nn.Linear(self.input_size, self.fc_output)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_37": {
                "*size": {
                    "value": "(input.size(0), self.num_features, self.num_filters, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_20": {
                "in_features": {
                    "value": "self.input_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.fc_output",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_22": {
                "in_features": {
                    "value": "self.fc_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Softmax_23": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "DataLoader_35": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "SkillDataSet(args.root_path, args.train_list, ftr_tmpl='{}_{}.npz')",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_42": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "SkillDataSet(args.root_path, args.val_list, ftr_tmpl='{}_{}.npz')",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MarginRankingLoss_49": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "margin": {
                    "value": "args.m1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gt_349": {
                "variable": {
                    "value": "correct",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output1",
                            "variable"
                        ]
                    ]
                },
                "other": {
                    "value": "pred2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output2",
                            "variable"
                        ]
                    ]
                }
            },
            "transpose_353": {
                "variable": {
                    "value": "attention_t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attention",
                            "Method Argument"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_360": {
                "variable": {
                    "value": "(inter1, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "input_a_1 - input_a_2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_363": {
                "variable": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.zeros(input_a_1.size(0)).cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_402": {
                "variable": {
                    "value": "input_var1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_var1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.autograd.Variable(input1.cuda(), requires_grad=True)",
                            "Call"
                        ],
                        [
                            "data_augmentation(input_var1, input_var2)",
                            "Call"
                        ],
                        [
                            "torch.autograd.Variable(input1.cuda(), requires_grad=True)",
                            "Call"
                        ],
                        [
                            "data_augmentation(input_var1, input_var2)",
                            "Call"
                        ],
                        [
                            "torch.autograd.Variable(input1.cuda())",
                            "Call"
                        ],
                        [
                            "torch.add(input_var1, noise)",
                            "Call"
                        ],
                        [
                            "input_var1",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.autograd.Variable(torch.normal(torch.zeros(input_var1.size()[1], input_var1.size()[2]), 0.01)).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "add_403": {
                "variable": {
                    "value": "input_var2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_var2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.autograd.Variable(input2.cuda(), requires_grad=True)",
                            "Call"
                        ],
                        [
                            "data_augmentation(input_var1, input_var2)",
                            "Call"
                        ],
                        [
                            "torch.autograd.Variable(input2.cuda(), requires_grad=True)",
                            "Call"
                        ],
                        [
                            "data_augmentation(input_var1, input_var2)",
                            "Call"
                        ],
                        [
                            "torch.autograd.Variable(input2.cuda())",
                            "Call"
                        ],
                        [
                            "torch.add(input_var2, noise)",
                            "Call"
                        ],
                        [
                            "input_var2",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.autograd.Variable(torch.normal(torch.zeros(input_var1.size()[1], input_var1.size()[2]), 0.01)).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_60": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "list(model_uniform.parameters()) + model_params",
                    "type": "BinOp",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_61": {
                "variable": {
                    "value": "optimizer_attention",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "attention_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "lr": {
                    "value": "args.lr * 0.1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Adam_63": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_108": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input1.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_169": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input1.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_211": {
                "variable": {
                    "value": "output1_all",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "output1[list(models.keys())[0]].data.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_212": {
                "variable": {
                    "value": "output2_all",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "output2[list(models.keys())[0]].data.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_275": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input1.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_291": {
                "variable": {
                    "value": "output1_all",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "output1[list(models.keys())[0]].data.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_292": {
                "variable": {
                    "value": "output2_all",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "output2[list(models.keys())[0]].data.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_323": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'_'.join((args.snapshot_pref, 'attention', str(args.attention), 'filters', str(args.num_filters), 'diversity', str(args.diversity_loss), 'disparity', str(args.disparity_loss), 'rank_aware', str(args.rank_aware_loss), str(args.lambda_param), 'lr', str(args.lr), filename))",
                            "Call"
                        ],
                        [
                            "'checkpoint.pth.tar'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_355": {
                "input": {
                    "value": "attention_t.view(-1, args.num_filters, num_features)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "attention.view(-1, num_features, args.num_filters)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eye_355": {
                "n": {
                    "value": "args.num_filters",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "norm_357": {
                "input": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(attention_t.view(-1, args.num_filters, num_features), attention.view(-1, num_features, args.num_filters)) - torch.eye(args.num_filters).cuda()",
                            "BinOp"
                        ],
                        [
                            "res.view(-1, args.num_filters * args.num_filters)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_357": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_363": {
                "*size": {
                    "value": "input_a_1.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_362": {
                "*size": {
                    "value": "input_a_1.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "normal_399": {
                "mean": {
                    "value": "torch.zeros(input_var1.size()[1], input_var1.size()[2])",
                    "type": "Call",
                    "possible_values": []
                },
                "std": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_399": {
                "*size": {
                    "value": "input_var1.size()[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "input_var1.size()[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    }
}