{
    "demos/play.py": {
        "tensorflow": {
            "ConfigProto_52": {
                "variable": {
                    "value": "tf_config",
                    "type": "Variable",
                    "possible_values": []
                },
                "inter_op_parallelism_threads": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "intra_op_parallelism_threads": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Session_55": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "config": {
                    "value": "tf_config",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.ConfigProto(inter_op_parallelism_threads=1, intra_op_parallelism_threads=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "variables_initializer_68": {
                "var_list": {
                    "value": "tf.global_variables()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "global_variables_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "robosumo/policy_zoo/policy.py": {
        "tensorflow": {
            "get_default_session_82": {
                "variable": {
                    "value": "(a, v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_82": {
                "variable": {
                    "value": "(a, v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "main": {
                    "value": "outputs",
                    "type": "List",
                    "possible_values": [
                        [
                            "[self.sampled_action, self.vpred]",
                            "List"
                        ],
                        [
                            "[self.sampled_action, self.vpred, self.state_out]",
                            "List"
                        ]
                    ]
                },
                "argv": {
                    "value": "feed_dict",
                    "type": "Dict",
                    "possible_values": [
                        [
                            "{self.observation_ph: observation[None], self.stochastic_ph: stochastic}",
                            "Dict"
                        ],
                        [
                            "{self.observation_ph: observation[None, None], self.state_in_ph: list(self.state[:, None, :]), self.stochastic_ph: stochastic}",
                            "Dict"
                        ]
                    ]
                }
            },
            "get_default_session_187": {
                "variable": {
                    "value": "(a, v, s)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_187": {
                "variable": {
                    "value": "(a, v, s)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "main": {
                    "value": "outputs",
                    "type": "List",
                    "possible_values": [
                        [
                            "[self.sampled_action, self.vpred]",
                            "List"
                        ],
                        [
                            "[self.sampled_action, self.vpred, self.state_out]",
                            "List"
                        ]
                    ]
                },
                "argv": {
                    "value": "feed_dict",
                    "type": "Dict",
                    "possible_values": [
                        [
                            "{self.observation_ph: observation[None], self.stochastic_ph: stochastic}",
                            "Dict"
                        ],
                        [
                            "{self.observation_ph: observation[None, None], self.state_in_ph: list(self.state[:, None, :]), self.stochastic_ph: stochastic}",
                            "Dict"
                        ]
                    ]
                }
            },
            "placeholder_33": {
                "variable": {
                    "value": "self.observation_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None] + list(ob_space.shape)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "observation",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_35": {
                "variable": {
                    "value": "self.taken_action_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, ac_space.shape[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "taken_action",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_37": {
                "variable": {
                    "value": "self.stochastic_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "stochastic",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_67": {
                "variable": {
                    "value": "logstd",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "logstd",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, ac_space.shape[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_collection_86": {
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_98": {
                "variable": {
                    "value": "self.observation_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None] + list(ob_space.shape)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "observation",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_101": {
                "variable": {
                    "value": "self.taken_action_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None, ac_space.shape[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "taken_action",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_104": {
                "variable": {
                    "value": "self.stochastic_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "stochastic",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BasicLSTMCell_128": {
                "variable": {
                    "value": "cell",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_units": {
                    "value": "hiddens[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LSTMStateTuple_136": {
                "variable": {
                    "value": "initial_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "c": {
                    "value": "self.state_in_ph[-2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "h": {
                    "value": "self.state_in_ph[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "dynamic_rnn_138": {
                "variable": {
                    "value": "(last_out, state_out)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "cell",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.BasicLSTMCell(hiddens[-1], reuse=reuse)",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.BasicLSTMCell(hiddens[-1], reuse=reuse)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "last_out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "obz",
                            "Name"
                        ],
                        [
                            "tf.nn.tanh(dense(last_out, hid_size, 'vffc%i' % (i + 1)))",
                            "Call"
                        ],
                        [
                            "obz",
                            "Name"
                        ],
                        [
                            "tf.nn.tanh(dense(last_out, hid_size, 'polfc%i' % (i + 1)))",
                            "Call"
                        ],
                        [
                            "obz",
                            "Name"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(last_out, hidden)",
                            "Call"
                        ],
                        [
                            "obz",
                            "Name"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(last_out, hidden)",
                            "Call"
                        ]
                    ]
                },
                "initial_state": {
                    "value": "initial_state",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.LSTMStateTuple(self.state_in_ph[-2], self.state_in_ph[-1])",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.LSTMStateTuple(self.state_in_ph[-2], self.state_in_ph[-1])",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "lstmv",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BasicLSTMCell_151": {
                "variable": {
                    "value": "cell",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_units": {
                    "value": "hiddens[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LSTMStateTuple_159": {
                "variable": {
                    "value": "initial_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "c": {
                    "value": "self.state_in_ph[-2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "h": {
                    "value": "self.state_in_ph[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "dynamic_rnn_161": {
                "variable": {
                    "value": "(last_out, state_out)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "cell",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.BasicLSTMCell(hiddens[-1], reuse=reuse)",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.BasicLSTMCell(hiddens[-1], reuse=reuse)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "last_out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "obz",
                            "Name"
                        ],
                        [
                            "tf.nn.tanh(dense(last_out, hid_size, 'vffc%i' % (i + 1)))",
                            "Call"
                        ],
                        [
                            "obz",
                            "Name"
                        ],
                        [
                            "tf.nn.tanh(dense(last_out, hid_size, 'polfc%i' % (i + 1)))",
                            "Call"
                        ],
                        [
                            "obz",
                            "Name"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(last_out, hidden)",
                            "Call"
                        ],
                        [
                            "obz",
                            "Name"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(last_out, hidden)",
                            "Call"
                        ]
                    ]
                },
                "initial_state": {
                    "value": "initial_state",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.LSTMStateTuple(self.state_in_ph[-2], self.state_in_ph[-1])",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.LSTMStateTuple(self.state_in_ph[-2], self.state_in_ph[-1])",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "lstmp",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_167": {
                "variable": {
                    "value": "logstd",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "logstd",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, ac_space.shape[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_collection_196": {
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_30": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "clip_by_value_48": {
                "variable": {
                    "value": "obz",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "(self.observation_ph - self.ob_rms.mean) / self.ob_rms.std",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "-5.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "5.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tanh_53": {
                "variable": {
                    "value": "last_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "dense(last_out, hid_size, 'vffc%i' % (i + 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_64": {
                "variable": {
                    "value": "last_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "dense(last_out, hid_size, 'polfc%i' % (i + 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_95": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "clip_by_value_116": {
                "variable": {
                    "value": "obz",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "(self.observation_ph - self.ob_rms.mean) / self.ob_rms.std",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "-5.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "5.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_scope_31": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_scope_96": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_133": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, size.c]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "lstmv_c",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_135": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, size.h]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "lstmv_h",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_156": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, size.c]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "lstmp_c",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_158": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, size.h]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "lstmp_h",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_initializer_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_170": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "robosumo/policy_zoo/utils.py": {
        "tensorflow": {
            "get_variable_48": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name + '/w'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[x.get_shape()[1], size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "weight_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "matmul_50": {
                "variable": {
                    "value": "ret",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cond(tf.cast(condition, 'bool'), lambda : if_exp, lambda : else_exp)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable(name + '/w', [x.get_shape()[1], size], initializer=weight_init)",
                            "Call"
                        ]
                    ]
                }
            },
            "cond_60": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.cast(condition, 'bool')",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : if_exp",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : else_exp",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "placeholder_74": {
                "variable": {
                    "value": "theta",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[total_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "group_82": {
                "variable": {
                    "value": "op",
                    "type": "Variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "*assigns",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "exp_38": {
                "variable": {
                    "value": "self.std",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "logstd",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "get_variable_52": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name + '/b'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "assign_79": {
                "variable": {
                    "value": "assign",
                    "type": "Variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.reshape(theta[start:start + size], shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_default_session_83": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_83": {
                "main": {
                    "value": "op",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.group(*assigns)",
                            "Call"
                        ]
                    ]
                },
                "argv": {
                    "value": "{theta: flat_params}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "get_variable_12": {
                "variable": {
                    "value": "self._sum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "()",
                            "MethodArgument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "sum",
                    "type": "Constant",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_17": {
                "variable": {
                    "value": "self._sumsq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "()",
                            "MethodArgument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.constant_initializer(epsilon)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "sumsq",
                    "type": "Constant",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_22": {
                "variable": {
                    "value": "self._count",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(epsilon)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "count",
                    "type": "Constant",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "to_float_29": {
                "variable": {
                    "value": "self.mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self._sum / self._count",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_31": {
                "variable": {
                    "value": "self.std",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.maximum(var_est, 0.01)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_60": {
                "x": {
                    "value": "condition",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "bool",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_11": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'running'",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reshape_79": {
                "tensor": {
                    "value": "theta[start:start + size]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "()",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "to_float_30": {
                "x": {
                    "value": "self._sumsq / self._count",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_30": {
                "x": {
                    "value": "self.mean",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "maximum_31": {
                "x": {
                    "value": "var_est",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.to_float(self._sumsq / self._count) - tf.square(self.mean)",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "0.01",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_initializer_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_initializer_15": {
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_20": {
                "value": {
                    "value": "epsilon",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.01",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "constant_initializer_25": {
                "value": {
                    "value": "epsilon",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.01",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "shape_41": {
                "input": {
                    "value": "self.mean",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}