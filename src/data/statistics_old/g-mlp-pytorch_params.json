{
    "g_mlp_pytorch/autoregressive_wrapper.py": {
        "torch": {
            "topk_20": {
                "variable": {
                    "value": "(val, ind)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.net(x, **kwargs)[:, -1, :]",
                            "Subscript"
                        ]
                    ]
                },
                "k": {
                    "value": "k",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int((1 - thres) * logits.shape[-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "full_like_21": {
                "variable": {
                    "value": "probs",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.net(x, **kwargs)[:, -1, :]",
                            "Subscript"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "float('-inf')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cross_entropy_72": {
                "variable": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "out.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "xo",
                    "type": "Name",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "self.ignore_index",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_53": {
                "variable": {
                    "value": "probs",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "filtered_logits / temperature",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "multinomial_55": {
                "variable": {
                    "value": "sample",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.full_like(logits, float('-inf'))",
                            "Call"
                        ],
                        [
                            "F.softmax(filtered_logits / temperature, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_57": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out, sample)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "g_mlp_pytorch/g_mlp_pytorch.py": {
        "torch": {
            "pad_35": {
                "input": {
                    "value": "t",
                    "type": "Name",
                    "possible_values": []
                },
                "pad": {
                    "value": "(0, 0, amount, -amount)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_63": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(*segments_to_shift, *rest)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "LayerNorm_70": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Linear_82": {
                "variable": {
                    "value": "self.to_qkv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_in",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim_inner * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_83": {
                "variable": {
                    "value": "self.to_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_inner",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim_out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dim // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "einsum_95": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "equation": {
                    "value": "b i j, b j d -> b i d",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "attn",
                    "type": "Name",
                    "possible_values": [
                        [
                            "sim.softmax(dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "LayerNorm_113": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "dim_out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dim // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_125": {
                "variable": {
                    "value": "weight",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(heads, dim_seq) if circulant_matrix else (heads, dim_seq, dim_seq)",
                            "IfExp"
                        ]
                    ]
                }
            },
            "Parameter_127": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "weight",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.zeros(shape)",
                            "Call"
                        ],
                        [
                            "F.pad(weight, (0, dim_seq), value=0)",
                            "Call"
                        ],
                        [
                            "repeat(weight, '... n -> ... (r n)', r=dim_seq)",
                            "Call"
                        ],
                        [
                            "weight[:, :-dim_seq].reshape(h, dim_seq, 2 * dim_seq - 1)",
                            "Call"
                        ],
                        [
                            "weight[:, :, dim_seq - 1:]",
                            "Subscript"
                        ],
                        [
                            "weight * rearrange(pos_x, 'h i -> h i ()') * rearrange(pos_y, 'h j -> h () j')",
                            "BinOp"
                        ],
                        [
                            "weight.masked_fill(mask, 0.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_131": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(heads, dim_seq)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "einsum_163": {
                "variable": {
                    "value": "gate",
                    "type": "Name",
                    "possible_values": []
                },
                "equation": {
                    "value": "b h n d, h m n -> b h m d",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "gate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.norm(gate)",
                            "Call"
                        ],
                        [
                            "rearrange(gate, 'b n (h d) -> b h n d', h=h)",
                            "Call"
                        ],
                        [
                            "einsum('b h n d, h m n -> b h m d', gate, weight)",
                            "Call"
                        ],
                        [
                            "gate + rearrange(bias, 'h n -> () h n ()')",
                            "BinOp"
                        ],
                        [
                            "rearrange(gate, 'b h n d -> b n (h d)')",
                            "Call"
                        ],
                        [
                            "gate + gate_res",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Sequential_187": {
                "variable": {
                    "value": "self.proj_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(dim, dim_ff)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_195": {
                "variable": {
                    "value": "self.proj_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_ff // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "ModuleList_233": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Residual(PreNorm(dim, PreShiftTokens(token_shifts, gMLPBlock(dim=dim, heads=heads, dim_ff=dim_ff, seq_len=seq_len, attn_dim=attn_dim, causal=causal, act=act, circulant_matrix=circulant_matrix)))) for i in range(depth)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Sequential_271": {
                "variable": {
                    "value": "self.to_patch_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Rearrange('b c (h p1) (w p2) -> b (h w) (c p1 p2)', p1=patch_height, p2=patch_width)",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_278": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Residual(PreNorm(dim, gMLPBlock(dim=dim, heads=heads, dim_ff=dim_ff, seq_len=num_patches, attn_dim=attn_dim))) for i in range(depth)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Sequential_280": {
                "variable": {
                    "value": "self.to_logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.LayerNorm(dim)",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_22": {
                "*size": {
                    "value": "num_layers",
                    "type": "Name",
                    "possible_values": [
                        [
                            "len(layers)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_91": {
                "variable": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "sim.shape[-2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "triu_91": {
                "variable": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Identity_104": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_120": {
                "variable": {
                    "value": "self.circulant_pos_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(heads, dim_seq)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_121": {
                "variable": {
                    "value": "self.circulant_pos_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(heads, dim_seq)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_145": {
                "variable": {
                    "value": "weight",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "weight",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.zeros(shape)",
                            "Call"
                        ],
                        [
                            "F.pad(weight, (0, dim_seq), value=0)",
                            "Call"
                        ],
                        [
                            "repeat(weight, '... n -> ... (r n)', r=dim_seq)",
                            "Call"
                        ],
                        [
                            "weight[:, :-dim_seq].reshape(h, dim_seq, 2 * dim_seq - 1)",
                            "Call"
                        ],
                        [
                            "weight[:, :, dim_seq - 1:]",
                            "Subscript"
                        ],
                        [
                            "weight * rearrange(pos_x, 'h i -> h i ()') * rearrange(pos_y, 'h j -> h () j')",
                            "BinOp"
                        ],
                        [
                            "weight.masked_fill(mask, 0.0)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, dim_seq)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_157": {
                "variable": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "weight.shape[-2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Identity_183": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_221": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "einsum_88": {
                "equation": {
                    "value": "b i d, b j d -> b i j",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "q",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "ones_131": {
                "*size": {
                    "value": "heads",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "dim_seq",
                    "type": "Name",
                    "possible_values": [
                        [
                            "weight.shape[-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Linear_188": {
                "in_features": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim_ff",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dim * ff_mult",
                            "BinOp"
                        ],
                        [
                            "dim * ff_mult",
                            "BinOp"
                        ]
                    ]
                }
            },
            "GELU_189": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Embedding_230": {
                "num_embeddings": {
                    "value": "num_tokens",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Identity_230": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_235": {
                "*args": {
                    "value": "nn.LayerNorm(dim)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_238": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_243": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_273": {
                "in_features": {
                    "value": "channels * patch_height * patch_width",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "LayerNorm_281": {
                "normalized_shape": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Linear_283": {
                "in_features": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Sequential_289": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_120": {
                "*size": {
                    "value": "heads",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "dim_seq",
                    "type": "Name",
                    "possible_values": [
                        [
                            "weight.shape[-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ones_121": {
                "*size": {
                    "value": "heads",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "dim_seq",
                    "type": "Name",
                    "possible_values": [
                        [
                            "weight.shape[-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "LayerNorm_236": {
                "normalized_shape": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Linear_237": {
                "in_features": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_tokens",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "Adam_78": {
                "variable": {
                    "value": "optim",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "LEARNING_RATE",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.0002",
                            "Constant"
                        ]
                    ]
                }
            },
            "randint_64": {
                "variable": {
                    "value": "rand_start",
                    "type": "Name",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "high": {
                    "value": "self.data.size(0) - self.seq_len - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "DataLoader_73": {
                "dataset": {
                    "value": "train_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "TextSamplerDataset(data_train, SEQ_LEN)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "BATCH_SIZE",
                    "type": "Name",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                }
            },
            "DataLoader_74": {
                "dataset": {
                    "value": "val_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "TextSamplerDataset(data_val, SEQ_LEN)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "BATCH_SIZE",
                    "type": "Name",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                }
            },
            "clip_grad_norm__90": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_55": {
                "ndarray": {
                    "value": "vaX",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "no_grad_96": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}