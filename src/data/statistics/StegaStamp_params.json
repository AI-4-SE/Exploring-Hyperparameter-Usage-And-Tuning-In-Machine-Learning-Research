{
    "decode_image.py": {
        "tensorflow": {
            "InteractiveSession_30": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "graph": {
                    "value": "tf.Graph()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_32": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "export_dir": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.InteractiveSession(graph=tf.Graph())",
                            "Call"
                        ]
                    ]
                },
                "tags": {
                    "value": "[tag_constants.SERVING]",
                    "type": "List",
                    "possible_values": []
                },
                "options": {
                    "value": "args.model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_default_graph_35": {
                "variable": {
                    "value": "input_image",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_graph_38": {
                "variable": {
                    "value": "output_secret",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "detector.py": {
        "tensorflow": {
            "ConfigProto_49": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_51": {
                "variable": {
                    "value": "detector_graph",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_52": {
                "variable": {
                    "value": "decoder_graph",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_55": {
                "variable": {
                    "value": "detector_sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_56": {
                "variable": {
                    "value": "detector_model",
                    "type": "variable",
                    "possible_values": []
                },
                "export_dir": {
                    "value": "detector_sess",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Session()",
                            "Call"
                        ]
                    ]
                },
                "tags": {
                    "value": "[tag_constants.SERVING]",
                    "type": "List",
                    "possible_values": []
                },
                "options": {
                    "value": "args.detector_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_65": {
                "variable": {
                    "value": "decoder_sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_66": {
                "variable": {
                    "value": "decoder_model",
                    "type": "variable",
                    "possible_values": []
                },
                "export_dir": {
                    "value": "decoder_sess",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Session()",
                            "Call"
                        ]
                    ]
                },
                "tags": {
                    "value": "[tag_constants.SERVING]",
                    "type": "List",
                    "possible_values": []
                },
                "options": {
                    "value": "args.decoder_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "encode_image.py": {
        "tensorflow": {
            "InteractiveSession_32": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "graph": {
                    "value": "tf.Graph()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_34": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "export_dir": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.InteractiveSession(graph=tf.Graph())",
                            "Call"
                        ]
                    ]
                },
                "tags": {
                    "value": "[tag_constants.SERVING]",
                    "type": "List",
                    "possible_values": []
                },
                "options": {
                    "value": "args.model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_default_graph_38": {
                "variable": {
                    "value": "input_secret",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_graph_39": {
                "variable": {
                    "value": "input_image",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_graph_43": {
                "variable": {
                    "value": "output_stegastamp",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_graph_44": {
                "variable": {
                    "value": "output_residual",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models.py": {
        "tensorflow": {
            "shape_120": {
                "variable": {
                    "value": "sh",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "encoded_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(encoded_image, f, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "encoded_image + noise",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(encoded_image, 0, 1)",
                            "Call"
                        ],
                        [
                            "encoded_image * contrast_scale",
                            "BinOp"
                        ],
                        [
                            "encoded_image + rnd_brightness",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(encoded_image, 0, 1)",
                            "Call"
                        ],
                        [
                            "(1 - rnd_sat) * encoded_image + rnd_sat * encoded_image_lum",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(encoded_image, [-1, 400, 400, 3])",
                            "Call"
                        ],
                        [
                            "utils.jpeg_compress_decompress(encoded_image, rounding=utils.round_only_at_0, factor=jpeg_factor, downsample_c=True)",
                            "Call"
                        ],
                        [
                            "image_input + residual",
                            "BinOp"
                        ],
                        [
                            "residual_warped + input_warped",
                            "BinOp"
                        ],
                        [
                            "tf.contrib.image.transform(encoded_image, M[:, 0, :], interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "residual_warped + input_warped",
                            "BinOp"
                        ],
                        [
                            "tf.contrib.image.transform(encoded_image, M[:, 0, :], interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "encoded_image + (1 - mask) * tf.manip.roll(image_input, shift=1, axis=0)",
                            "BinOp"
                        ],
                        [
                            "residual_warped + input_warped",
                            "BinOp"
                        ],
                        [
                            "tf.contrib.image.transform(encoded_image, M[:, 0, :], interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "residual_warped + input_warped",
                            "BinOp"
                        ],
                        [
                            "tf.contrib.image.transform(encoded_image, M[:, 0, :], interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "residual + image_input",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(encoded_image, 0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_142": {
                "variable": {
                    "value": "encoded_image",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "encoded_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(encoded_image, f, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "encoded_image + noise",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(encoded_image, 0, 1)",
                            "Call"
                        ],
                        [
                            "encoded_image * contrast_scale",
                            "BinOp"
                        ],
                        [
                            "encoded_image + rnd_brightness",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(encoded_image, 0, 1)",
                            "Call"
                        ],
                        [
                            "(1 - rnd_sat) * encoded_image + rnd_sat * encoded_image_lum",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(encoded_image, [-1, 400, 400, 3])",
                            "Call"
                        ],
                        [
                            "utils.jpeg_compress_decompress(encoded_image, rounding=utils.round_only_at_0, factor=jpeg_factor, downsample_c=True)",
                            "Call"
                        ],
                        [
                            "image_input + residual",
                            "BinOp"
                        ],
                        [
                            "residual_warped + input_warped",
                            "BinOp"
                        ],
                        [
                            "tf.contrib.image.transform(encoded_image, M[:, 0, :], interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "residual_warped + input_warped",
                            "BinOp"
                        ],
                        [
                            "tf.contrib.image.transform(encoded_image, M[:, 0, :], interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "encoded_image + (1 - mask) * tf.manip.roll(image_input, shift=1, axis=0)",
                            "BinOp"
                        ],
                        [
                            "residual_warped + input_warped",
                            "BinOp"
                        ],
                        [
                            "tf.contrib.image.transform(encoded_image, M[:, 0, :], interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "residual_warped + input_warped",
                            "BinOp"
                        ],
                        [
                            "tf.contrib.image.transform(encoded_image, M[:, 0, :], interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "residual + image_input",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(encoded_image, 0, 1)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.random_blur_kernel(probs=[0.25, 0.25], N_blur=7, sigrange_gauss=[1.0, 3.0], sigrange_line=[0.25, 1.0], wmin_line=3)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "clip_by_value_146": {
                "variable": {
                    "value": "encoded_image",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "encoded_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(encoded_image, f, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "encoded_image + noise",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(encoded_image, 0, 1)",
                            "Call"
                        ],
                        [
                            "encoded_image * contrast_scale",
                            "BinOp"
                        ],
                        [
                            "encoded_image + rnd_brightness",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(encoded_image, 0, 1)",
                            "Call"
                        ],
                        [
                            "(1 - rnd_sat) * encoded_image + rnd_sat * encoded_image_lum",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(encoded_image, [-1, 400, 400, 3])",
                            "Call"
                        ],
                        [
                            "utils.jpeg_compress_decompress(encoded_image, rounding=utils.round_only_at_0, factor=jpeg_factor, downsample_c=True)",
                            "Call"
                        ],
                        [
                            "image_input + residual",
                            "BinOp"
                        ],
                        [
                            "residual_warped + input_warped",
                            "BinOp"
                        ],
                        [
                            "tf.contrib.image.transform(encoded_image, M[:, 0, :], interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "residual_warped + input_warped",
                            "BinOp"
                        ],
                        [
                            "tf.contrib.image.transform(encoded_image, M[:, 0, :], interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "encoded_image + (1 - mask) * tf.manip.roll(image_input, shift=1, axis=0)",
                            "BinOp"
                        ],
                        [
                            "residual_warped + input_warped",
                            "BinOp"
                        ],
                        [
                            "tf.contrib.image.transform(encoded_image, M[:, 0, :], interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "residual_warped + input_warped",
                            "BinOp"
                        ],
                        [
                            "tf.contrib.image.transform(encoded_image, M[:, 0, :], interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "residual + image_input",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(encoded_image, 0, 1)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_149": {
                "variable": {
                    "value": "contrast_scale",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "contrast_scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform(shape=[tf.shape(encoded_image)[0]], minval=contrast_params[0], maxval=contrast_params[1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(contrast_scale, shape=[tf.shape(encoded_image)[0], 1, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[tf.shape(encoded_image)[0], 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "clip_by_value_153": {
                "variable": {
                    "value": "encoded_image",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "encoded_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(encoded_image, f, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "encoded_image + noise",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(encoded_image, 0, 1)",
                            "Call"
                        ],
                        [
                            "encoded_image * contrast_scale",
                            "BinOp"
                        ],
                        [
                            "encoded_image + rnd_brightness",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(encoded_image, 0, 1)",
                            "Call"
                        ],
                        [
                            "(1 - rnd_sat) * encoded_image + rnd_sat * encoded_image_lum",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(encoded_image, [-1, 400, 400, 3])",
                            "Call"
                        ],
                        [
                            "utils.jpeg_compress_decompress(encoded_image, rounding=utils.round_only_at_0, factor=jpeg_factor, downsample_c=True)",
                            "Call"
                        ],
                        [
                            "image_input + residual",
                            "BinOp"
                        ],
                        [
                            "residual_warped + input_warped",
                            "BinOp"
                        ],
                        [
                            "tf.contrib.image.transform(encoded_image, M[:, 0, :], interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "residual_warped + input_warped",
                            "BinOp"
                        ],
                        [
                            "tf.contrib.image.transform(encoded_image, M[:, 0, :], interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "encoded_image + (1 - mask) * tf.manip.roll(image_input, shift=1, axis=0)",
                            "BinOp"
                        ],
                        [
                            "residual_warped + input_warped",
                            "BinOp"
                        ],
                        [
                            "tf.contrib.image.transform(encoded_image, M[:, 0, :], interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "residual_warped + input_warped",
                            "BinOp"
                        ],
                        [
                            "tf.contrib.image.transform(encoded_image, M[:, 0, :], interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "residual + image_input",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(encoded_image, 0, 1)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_156": {
                "variable": {
                    "value": "encoded_image_lum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reduce_sum(encoded_image * tf.constant([0.3, 0.6, 0.1]), axis=3)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_159": {
                "variable": {
                    "value": "encoded_image",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "encoded_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(encoded_image, f, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "encoded_image + noise",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(encoded_image, 0, 1)",
                            "Call"
                        ],
                        [
                            "encoded_image * contrast_scale",
                            "BinOp"
                        ],
                        [
                            "encoded_image + rnd_brightness",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(encoded_image, 0, 1)",
                            "Call"
                        ],
                        [
                            "(1 - rnd_sat) * encoded_image + rnd_sat * encoded_image_lum",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(encoded_image, [-1, 400, 400, 3])",
                            "Call"
                        ],
                        [
                            "utils.jpeg_compress_decompress(encoded_image, rounding=utils.round_only_at_0, factor=jpeg_factor, downsample_c=True)",
                            "Call"
                        ],
                        [
                            "image_input + residual",
                            "BinOp"
                        ],
                        [
                            "residual_warped + input_warped",
                            "BinOp"
                        ],
                        [
                            "tf.contrib.image.transform(encoded_image, M[:, 0, :], interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "residual_warped + input_warped",
                            "BinOp"
                        ],
                        [
                            "tf.contrib.image.transform(encoded_image, M[:, 0, :], interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "encoded_image + (1 - mask) * tf.manip.roll(image_input, shift=1, axis=0)",
                            "BinOp"
                        ],
                        [
                            "residual_warped + input_warped",
                            "BinOp"
                        ],
                        [
                            "tf.contrib.image.transform(encoded_image, M[:, 0, :], interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "residual_warped + input_warped",
                            "BinOp"
                        ],
                        [
                            "tf.contrib.image.transform(encoded_image, M[:, 0, :], interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "residual + image_input",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(encoded_image, 0, 1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 400, 400, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_244": {
                "variable": {
                    "value": "lpips_loss_op",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "lpips_tf.lpips(image_input, encoded_image)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_245": {
                "variable": {
                    "value": "secret_loss_op",
                    "type": "variable",
                    "possible_values": []
                },
                "multi_class_labels": {
                    "value": "secret_input",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "decoded_secret",
                    "type": "variable",
                    "possible_values": [
                        [
                            "decoder(transformed_image)",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_to_tensor_258": {
                "variable": {
                    "value": "falloff_im",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "falloff_im",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.ones(size)",
                            "Call"
                        ],
                        [
                            "1 - falloff_im",
                            "BinOp"
                        ],
                        [
                            "tf.convert_to_tensor(falloff_im, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "falloff_im * l2_edge_gain",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rgb_to_yuv_261": {
                "variable": {
                    "value": "encoded_image_yuv",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "encoded_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(encoded_image, f, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "encoded_image + noise",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(encoded_image, 0, 1)",
                            "Call"
                        ],
                        [
                            "encoded_image * contrast_scale",
                            "BinOp"
                        ],
                        [
                            "encoded_image + rnd_brightness",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(encoded_image, 0, 1)",
                            "Call"
                        ],
                        [
                            "(1 - rnd_sat) * encoded_image + rnd_sat * encoded_image_lum",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(encoded_image, [-1, 400, 400, 3])",
                            "Call"
                        ],
                        [
                            "utils.jpeg_compress_decompress(encoded_image, rounding=utils.round_only_at_0, factor=jpeg_factor, downsample_c=True)",
                            "Call"
                        ],
                        [
                            "image_input + residual",
                            "BinOp"
                        ],
                        [
                            "residual_warped + input_warped",
                            "BinOp"
                        ],
                        [
                            "tf.contrib.image.transform(encoded_image, M[:, 0, :], interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "residual_warped + input_warped",
                            "BinOp"
                        ],
                        [
                            "tf.contrib.image.transform(encoded_image, M[:, 0, :], interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "encoded_image + (1 - mask) * tf.manip.roll(image_input, shift=1, axis=0)",
                            "BinOp"
                        ],
                        [
                            "residual_warped + input_warped",
                            "BinOp"
                        ],
                        [
                            "tf.contrib.image.transform(encoded_image, M[:, 0, :], interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "residual_warped + input_warped",
                            "BinOp"
                        ],
                        [
                            "tf.contrib.image.transform(encoded_image, M[:, 0, :], interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "residual + image_input",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(encoded_image, 0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "rgb_to_yuv_262": {
                "variable": {
                    "value": "image_input_yuv",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "image_input",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_mean_265": {
                "variable": {
                    "value": "yuv_loss_op",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(im_diff)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[0, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensordot_266": {
                "variable": {
                    "value": "image_loss_op",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "yuv_loss_op",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.square(im_diff), axis=[0, 1, 2])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "yuv_scales",
                    "type": "variable",
                    "possible_values": []
                },
                "axes": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "merge_275": {
                "variable": {
                    "value": "summary_op",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[tf.summary.scalar('bit_acc', bit_acc, family='train'), tf.summary.scalar('str_acc', str_acc, family='train'), tf.summary.scalar('loss', loss_op, family='train'), tf.summary.scalar('image_loss', image_loss_op, family='train'), tf.summary.scalar('lpip_loss', lpips_loss_op, family='train'), tf.summary.scalar('G_loss', G_loss, family='train'), tf.summary.scalar('secret_loss', secret_loss_op, family='train'), tf.summary.scalar('dis_loss', D_loss, family='train'), tf.summary.scalar('Y_loss', yuv_loss_op[0], family='color_loss'), tf.summary.scalar('U_loss', yuv_loss_op[1], family='color_loss'), tf.summary.scalar('V_loss', yuv_loss_op[2], family='color_loss')] + transform_summaries",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "merge_289": {
                "variable": {
                    "value": "image_summary_op",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[image_to_summary(image_input, 'image_input', family='input'), image_to_summary(input_warped, 'image_warped', family='input'), image_to_summary(encoded_warped, 'encoded_warped', family='encoded'), image_to_summary(residual_warped + 0.5, 'residual', family='encoded'), image_to_summary(encoded_image, 'encoded_image', family='encoded'), image_to_summary(transformed_image, 'transformed_image', family='transformed'), image_to_summary(D_heatmap, 'discriminator', family='losses')]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "clip_by_value_302": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(image, 0, 1)",
                            "Call"
                        ],
                        [
                            "tf.cast(image * 255, dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "image - 0.5",
                            "BinOp"
                        ],
                        [
                            "image - 0.5",
                            "BinOp"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_303": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image * 255",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "image_304": {
                "variable": {
                    "value": "summary",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.clip_by_value(image, 0, 1)",
                            "Call"
                        ],
                        [
                            "tf.cast(image * 255, dtype=tf.uint8)",
                            "Call"
                        ],
                        [
                            "image - 0.5",
                            "BinOp"
                        ],
                        [
                            "image - 0.5",
                            "BinOp"
                        ]
                    ]
                },
                "max_outputs": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "family": {
                    "value": "family",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'train'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clip_by_value_311": {
                "variable": {
                    "value": "encoded_image",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "encoded_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(encoded_image, f, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "encoded_image + noise",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(encoded_image, 0, 1)",
                            "Call"
                        ],
                        [
                            "encoded_image * contrast_scale",
                            "BinOp"
                        ],
                        [
                            "encoded_image + rnd_brightness",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(encoded_image, 0, 1)",
                            "Call"
                        ],
                        [
                            "(1 - rnd_sat) * encoded_image + rnd_sat * encoded_image_lum",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(encoded_image, [-1, 400, 400, 3])",
                            "Call"
                        ],
                        [
                            "utils.jpeg_compress_decompress(encoded_image, rounding=utils.round_only_at_0, factor=jpeg_factor, downsample_c=True)",
                            "Call"
                        ],
                        [
                            "image_input + residual",
                            "BinOp"
                        ],
                        [
                            "residual_warped + input_warped",
                            "BinOp"
                        ],
                        [
                            "tf.contrib.image.transform(encoded_image, M[:, 0, :], interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "residual_warped + input_warped",
                            "BinOp"
                        ],
                        [
                            "tf.contrib.image.transform(encoded_image, M[:, 0, :], interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "encoded_image + (1 - mask) * tf.manip.roll(image_input, shift=1, axis=0)",
                            "BinOp"
                        ],
                        [
                            "residual_warped + input_warped",
                            "BinOp"
                        ],
                        [
                            "tf.contrib.image.transform(encoded_image, M[:, 0, :], interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "residual_warped + input_warped",
                            "BinOp"
                        ],
                        [
                            "tf.contrib.image.transform(encoded_image, M[:, 0, :], interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "residual + image_input",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(encoded_image, 0, 1)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Variable_79": {
                "variable": {
                    "value": "self.W_fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([128, 6])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "W_fc1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_80": {
                "variable": {
                    "value": "self.b_fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([[1.0, 0, 0], [0, 1.0, 0]])",
                            "Call"
                        ],
                        [
                            "initial.astype('float32').flatten()",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "b_fc1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_116": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(stn_params, self.W_fc1) + self.b_fc1",
                            "BinOp"
                        ],
                        [
                            "image - 0.5",
                            "BinOp"
                        ],
                        [
                            "self.model(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "round_176": {
                "variable": {
                    "value": "secret_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.sigmoid(secret_pred)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "round_318": {
                "x": {
                    "value": "tf.sigmoid(decoded_secret)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "minimum_122": {
                "x": {
                    "value": "tf.to_float(global_step) / ramp",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reduce_sum_156": {
                "input_tensor": {
                    "value": "encoded_image * tf.constant([0.3, 0.6, 0.1])",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "scalar_163": {
                "name": {
                    "value": "transformer/rnd_bri",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "rnd_bri",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ramp_fn(args.rnd_bri_ramp) * args.rnd_bri",
                            "BinOp"
                        ]
                    ]
                }
            },
            "scalar_164": {
                "name": {
                    "value": "transformer/rnd_sat",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "rnd_sat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random.uniform([]) * ramp_fn(args.rnd_sat_ramp) * args.rnd_sat",
                            "BinOp"
                        ]
                    ]
                }
            },
            "scalar_165": {
                "name": {
                    "value": "transformer/rnd_hue",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "rnd_hue",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ramp_fn(args.rnd_hue_ramp) * args.rnd_hue",
                            "BinOp"
                        ]
                    ]
                }
            },
            "scalar_166": {
                "name": {
                    "value": "transformer/rnd_noise",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "rnd_noise",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random.uniform([]) * ramp_fn(args.rnd_noise_ramp) * args.rnd_noise",
                            "BinOp"
                        ]
                    ]
                }
            },
            "scalar_167": {
                "name": {
                    "value": "transformer/contrast_low",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "contrast_low",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 - (1.0 - args.contrast_low) * ramp_fn(args.contrast_ramp)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "scalar_168": {
                "name": {
                    "value": "transformer/contrast_high",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "contrast_high",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 + (args.contrast_high - 1.0) * ramp_fn(args.contrast_ramp)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "scalar_169": {
                "name": {
                    "value": "transformer/jpeg_quality",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "jpeg_quality",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100.0 - tf.random.uniform([]) * ramp_fn(args.jpeg_quality_ramp) * (100.0 - args.jpeg_quality)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "variable_scope_175": {
                "name_or_scope": {
                    "value": "acc",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ones_like_199": {
                "input": {
                    "value": "input_warped",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.image.transform(image_input, M[:, 1, :], interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "input_warped + (1 - mask_warped) * image_input",
                            "BinOp"
                        ]
                    ]
                }
            },
            "expand_dims_264": {
                "input": {
                    "value": "falloff_im",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.ones(size)",
                            "Call"
                        ],
                        [
                            "1 - falloff_im",
                            "BinOp"
                        ],
                        [
                            "tf.convert_to_tensor(falloff_im, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "falloff_im * l2_edge_gain",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "square_265": {
                "x": {
                    "value": "im_diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "encoded_image_yuv - image_input_yuv",
                            "BinOp"
                        ],
                        [
                            "im_diff + im_diff * tf.expand_dims(falloff_im, axis=[-1])",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sigmoid_318": {
                "x": {
                    "value": "decoded_secret",
                    "type": "variable",
                    "possible_values": [
                        [
                            "decoder(transformed_image)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_79": {
                "shape": {
                    "value": "[128, 6]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_98": {
                "a": {
                    "value": "stn_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.stn_params(image)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.W_fc1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cond_129": {
                "pred": {
                    "value": "tf.less(jpeg_quality, 50)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : 5000.0 / jpeg_quality",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : 200.0 - jpeg_quality * 2",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "uniform_131": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "uniform_137": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_144": {
                "input": {
                    "value": "encoded_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(encoded_image, f, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "encoded_image + noise",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(encoded_image, 0, 1)",
                            "Call"
                        ],
                        [
                            "encoded_image * contrast_scale",
                            "BinOp"
                        ],
                        [
                            "encoded_image + rnd_brightness",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(encoded_image, 0, 1)",
                            "Call"
                        ],
                        [
                            "(1 - rnd_sat) * encoded_image + rnd_sat * encoded_image_lum",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(encoded_image, [-1, 400, 400, 3])",
                            "Call"
                        ],
                        [
                            "utils.jpeg_compress_decompress(encoded_image, rounding=utils.round_only_at_0, factor=jpeg_factor, downsample_c=True)",
                            "Call"
                        ],
                        [
                            "image_input + residual",
                            "BinOp"
                        ],
                        [
                            "residual_warped + input_warped",
                            "BinOp"
                        ],
                        [
                            "tf.contrib.image.transform(encoded_image, M[:, 0, :], interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "residual_warped + input_warped",
                            "BinOp"
                        ],
                        [
                            "tf.contrib.image.transform(encoded_image, M[:, 0, :], interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "encoded_image + (1 - mask) * tf.manip.roll(image_input, shift=1, axis=0)",
                            "BinOp"
                        ],
                        [
                            "residual_warped + input_warped",
                            "BinOp"
                        ],
                        [
                            "tf.contrib.image.transform(encoded_image, M[:, 0, :], interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "residual_warped + input_warped",
                            "BinOp"
                        ],
                        [
                            "tf.contrib.image.transform(encoded_image, M[:, 0, :], interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "residual + image_input",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(encoded_image, 0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_176": {
                "x": {
                    "value": "secret_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.round(tf.sigmoid(secret_pred))",
                            "Call"
                        ]
                    ]
                }
            },
            "to_int64_177": {
                "x": {
                    "value": "tf.shape(secret_pred)[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "count_nonzero_177": {
                "input": {
                    "value": "secret_pred - secret_true",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_181": {
                "input_tensor": {
                    "value": "correct_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_int64(tf.shape(secret_pred)[1]) - tf.count_nonzero(secret_pred - secret_true, axis=1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "size_181": {
                "input": {
                    "value": "secret_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.round(tf.sigmoid(secret_pred))",
                            "Call"
                        ]
                    ]
                },
                "out_type": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_float_122": {
                "x": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "uniform_128": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "less_129": {
                "x": {
                    "value": "jpeg_quality",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100.0 - tf.random.uniform([]) * ramp_fn(args.jpeg_quality_ramp) * (100.0 - args.jpeg_quality)",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_156": {
                "value": {
                    "value": "[0.3, 0.6, 0.1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "count_nonzero_179": {
                "input": {
                    "value": "correct_pred - tf.to_int64(tf.shape(secret_pred)[1])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "size_179": {
                "input": {
                    "value": "correct_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_int64(tf.shape(secret_pred)[1]) - tf.count_nonzero(secret_pred - secret_true, axis=1)",
                            "BinOp"
                        ]
                    ]
                },
                "out_type": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_276": {
                "name": {
                    "value": "bit_acc",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "bit_acc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(correct_pred) / tf.size(secret_pred, out_type=tf.int64)",
                            "BinOp"
                        ]
                    ]
                },
                "family": {
                    "value": "train",
                    "type": "str",
                    "possible_values": []
                }
            },
            "scalar_277": {
                "name": {
                    "value": "str_acc",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "str_acc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 - tf.count_nonzero(correct_pred - tf.to_int64(tf.shape(secret_pred)[1])) / tf.size(correct_pred, out_type=tf.int64)",
                            "BinOp"
                        ]
                    ]
                },
                "family": {
                    "value": "train",
                    "type": "str",
                    "possible_values": []
                }
            },
            "scalar_278": {
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "loss_op",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss_scales[0] * image_loss_op + loss_scales[1] * lpips_loss_op + loss_scales[2] * secret_loss_op",
                            "BinOp"
                        ],
                        [
                            "loss_op + loss_scales[3] * G_loss",
                            "BinOp"
                        ]
                    ]
                },
                "family": {
                    "value": "train",
                    "type": "str",
                    "possible_values": []
                }
            },
            "scalar_279": {
                "name": {
                    "value": "image_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "image_loss_op",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tensordot(yuv_loss_op, yuv_scales, axes=1)",
                            "Call"
                        ]
                    ]
                },
                "family": {
                    "value": "train",
                    "type": "str",
                    "possible_values": []
                }
            },
            "scalar_280": {
                "name": {
                    "value": "lpip_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "lpips_loss_op",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(lpips_tf.lpips(image_input, encoded_image))",
                            "Call"
                        ]
                    ]
                },
                "family": {
                    "value": "train",
                    "type": "str",
                    "possible_values": []
                }
            },
            "scalar_281": {
                "name": {
                    "value": "G_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "G_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "D_output_fake",
                            "variable"
                        ]
                    ]
                },
                "family": {
                    "value": "train",
                    "type": "str",
                    "possible_values": []
                }
            },
            "scalar_282": {
                "name": {
                    "value": "secret_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "secret_loss_op",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.losses.sigmoid_cross_entropy(secret_input, decoded_secret)",
                            "Call"
                        ]
                    ]
                },
                "family": {
                    "value": "train",
                    "type": "str",
                    "possible_values": []
                }
            },
            "scalar_283": {
                "name": {
                    "value": "dis_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "D_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "D_output_real - D_output_fake",
                            "BinOp"
                        ]
                    ]
                },
                "family": {
                    "value": "train",
                    "type": "str",
                    "possible_values": []
                }
            },
            "scalar_284": {
                "name": {
                    "value": "Y_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "yuv_loss_op[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "family": {
                    "value": "color_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "scalar_285": {
                "name": {
                    "value": "U_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "yuv_loss_op[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "family": {
                    "value": "color_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "scalar_286": {
                "name": {
                    "value": "V_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "yuv_loss_op[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "family": {
                    "value": "color_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "shape_148": {
                "input": {
                    "value": "encoded_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(encoded_image, f, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "encoded_image + noise",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(encoded_image, 0, 1)",
                            "Call"
                        ],
                        [
                            "encoded_image * contrast_scale",
                            "BinOp"
                        ],
                        [
                            "encoded_image + rnd_brightness",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(encoded_image, 0, 1)",
                            "Call"
                        ],
                        [
                            "(1 - rnd_sat) * encoded_image + rnd_sat * encoded_image_lum",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(encoded_image, [-1, 400, 400, 3])",
                            "Call"
                        ],
                        [
                            "utils.jpeg_compress_decompress(encoded_image, rounding=utils.round_only_at_0, factor=jpeg_factor, downsample_c=True)",
                            "Call"
                        ],
                        [
                            "image_input + residual",
                            "BinOp"
                        ],
                        [
                            "residual_warped + input_warped",
                            "BinOp"
                        ],
                        [
                            "tf.contrib.image.transform(encoded_image, M[:, 0, :], interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "residual_warped + input_warped",
                            "BinOp"
                        ],
                        [
                            "tf.contrib.image.transform(encoded_image, M[:, 0, :], interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "encoded_image + (1 - mask) * tf.manip.roll(image_input, shift=1, axis=0)",
                            "BinOp"
                        ],
                        [
                            "residual_warped + input_warped",
                            "BinOp"
                        ],
                        [
                            "tf.contrib.image.transform(encoded_image, M[:, 0, :], interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "residual_warped + input_warped",
                            "BinOp"
                        ],
                        [
                            "tf.contrib.image.transform(encoded_image, M[:, 0, :], interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "residual + image_input",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(encoded_image, 0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_149": {
                "input": {
                    "value": "encoded_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(encoded_image, f, [1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "encoded_image + noise",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(encoded_image, 0, 1)",
                            "Call"
                        ],
                        [
                            "encoded_image * contrast_scale",
                            "BinOp"
                        ],
                        [
                            "encoded_image + rnd_brightness",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(encoded_image, 0, 1)",
                            "Call"
                        ],
                        [
                            "(1 - rnd_sat) * encoded_image + rnd_sat * encoded_image_lum",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(encoded_image, [-1, 400, 400, 3])",
                            "Call"
                        ],
                        [
                            "utils.jpeg_compress_decompress(encoded_image, rounding=utils.round_only_at_0, factor=jpeg_factor, downsample_c=True)",
                            "Call"
                        ],
                        [
                            "image_input + residual",
                            "BinOp"
                        ],
                        [
                            "residual_warped + input_warped",
                            "BinOp"
                        ],
                        [
                            "tf.contrib.image.transform(encoded_image, M[:, 0, :], interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "residual_warped + input_warped",
                            "BinOp"
                        ],
                        [
                            "tf.contrib.image.transform(encoded_image, M[:, 0, :], interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "encoded_image + (1 - mask) * tf.manip.roll(image_input, shift=1, axis=0)",
                            "BinOp"
                        ],
                        [
                            "residual_warped + input_warped",
                            "BinOp"
                        ],
                        [
                            "tf.contrib.image.transform(encoded_image, M[:, 0, :], interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "residual_warped + input_warped",
                            "BinOp"
                        ],
                        [
                            "tf.contrib.image.transform(encoded_image, M[:, 0, :], interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "residual + image_input",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(encoded_image, 0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_177": {
                "input": {
                    "value": "secret_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.round(tf.sigmoid(secret_pred))",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_213": {
                "input": {
                    "value": "residual",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.image.transform(residual_warped, M[:, 0, :], interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "encoder((secret_input, image_input))",
                            "Call"
                        ],
                        [
                            "self.residual(conv9)",
                            "Call"
                        ]
                    ]
                }
            },
            "uniform_218": {
                "shape": {
                    "value": "[ch]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_int64_179": {
                "x": {
                    "value": "tf.shape(secret_pred)[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_like_218": {
                "input": {
                    "value": "residual",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.image.transform(residual_warped, M[:, 0, :], interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "encoder((secret_input, image_input))",
                            "Call"
                        ],
                        [
                            "self.residual(conv9)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_220": {
                "input": {
                    "value": "residual",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.image.transform(residual_warped, M[:, 0, :], interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "encoder((secret_input, image_input))",
                            "Call"
                        ],
                        [
                            "self.residual(conv9)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_224": {
                "input": {
                    "value": "residual",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.image.transform(residual_warped, M[:, 0, :], interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "encoder((secret_input, image_input))",
                            "Call"
                        ],
                        [
                            "self.residual(conv9)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_226": {
                "input": {
                    "value": "residual",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.image.transform(residual_warped, M[:, 0, :], interpolation='BILINEAR')",
                            "Call"
                        ],
                        [
                            "encoder((secret_input, image_input))",
                            "Call"
                        ],
                        [
                            "self.residual(conv9)",
                            "Call"
                        ]
                    ]
                }
            },
            "roll_229": {
                "input": {
                    "value": "image_input",
                    "type": "variable",
                    "possible_values": []
                },
                "shift": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_179": {
                "input": {
                    "value": "secret_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.round(tf.sigmoid(secret_pred))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "train.py": {
        "tensorflow": {
            "ConfigProto_91": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_93": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_98": {
                "variable": {
                    "value": "secret_pl",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, args.secret_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "input_prep",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_99": {
                "variable": {
                    "value": "image_pl",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, height, width, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "input_hide",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_100": {
                "variable": {
                    "value": "M_pl",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 2, 8]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "input_transform",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_101": {
                "variable": {
                    "value": "global_step_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_102": {
                "variable": {
                    "value": "loss_scales_pl",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[4]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "input_loss_scales",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_103": {
                "variable": {
                    "value": "l2_edge_gain_pl",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "input_edge_gain",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_104": {
                "variable": {
                    "value": "yuv_scales_pl",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[3]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "input_yuv_scales",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_106": {
                "variable": {
                    "value": "log_decode_mod_pl",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "input_log_decode_mod",
                    "type": "str",
                    "possible_values": []
                }
            },
            "trainable_variables_127": {
                "variable": {
                    "value": "tvars",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdamOptimizer_135": {
                "variable": {
                    "value": "train_op",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_136": {
                "variable": {
                    "value": "train_secret_op",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RMSPropOptimizer_137": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Saver_145": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "tf.trainable_variables()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "keep_checkpoint_every_n_hours": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "FileWriter_151": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "join(LOGS_Path, EXP_NAME)",
                    "type": "Call",
                    "possible_values": []
                },
                "graph": {
                    "value": "sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_variables_to_constants_210": {
                "variable": {
                    "value": "constant_graph_def",
                    "type": "variable",
                    "possible_values": []
                },
                "sess": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Session(config=config)",
                            "Call"
                        ]
                    ]
                },
                "input_graph_def": {
                    "value": "sess.graph.as_graph_def()",
                    "type": "Call",
                    "possible_values": []
                },
                "output_node_names": {
                    "value": "[deploy_hide_image_op.name[:-2], residual_op.name[:-2], deploy_decoder_op.name[:-2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "trainable_variables_145": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_146": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_214": {
                "graph": {
                    "value": "tf.Graph()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "import_graph_def_215": {
                "graph_def": {
                    "value": "constant_graph_def",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.graph_util.convert_variables_to_constants(sess, sess.graph.as_graph_def(), [deploy_hide_image_op.name[:-2], residual_op.name[:-2], deploy_decoder_op.name[:-2]])",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            },
            "simple_save_216": {
                "session": {
                    "value": "session",
                    "type": "variable",
                    "possible_values": []
                },
                "export_dir": {
                    "value": "SAVED_MODELS + '/' + EXP_NAME",
                    "type": "BinOp",
                    "possible_values": []
                },
                "inputs": {
                    "value": "{'secret': secret_pl, 'image': image_pl}",
                    "type": "Dict",
                    "possible_values": []
                },
                "outputs": {
                    "value": "{'stegastamp': deploy_hide_image_op, 'residual': residual_op, 'decoded': deploy_decoder_op}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "clip_by_value_133": {
                "t": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "-0.01",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clip_by_value_139": {
                "t": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "-0.25",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "0.25",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Summary_192": {
                "variable": {
                    "value": "summary",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[tf.Summary.Value(tag='transformer/rnd_tran', simple_value=rnd_tran), tf.Summary.Value(tag='loss_scales/l2_loss_scale', simple_value=l2_loss_scale), tf.Summary.Value(tag='loss_scales/lpips_loss_scale', simple_value=lpips_loss_scale), tf.Summary.Value(tag='loss_scales/secret_loss_scale', simple_value=secret_loss_scale), tf.Summary.Value(tag='loss_scales/y_scale', simple_value=args.y_scale), tf.Summary.Value(tag='loss_scales/u_scale', simple_value=args.u_scale), tf.Summary.Value(tag='loss_scales/v_scale', simple_value=args.v_scale), tf.Summary.Value(tag='loss_scales/G_loss_scale', simple_value=G_loss_scale), tf.Summary.Value(tag='loss_scales/L2_edge_gain', simple_value=l2_edge_gain)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Graph_214": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils.py": {
        "tensorflow": {
            "reduce_sum_12": {
                "variable": {
                    "value": "manhat",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.abs(coords)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "to_float_16": {
                "variable": {
                    "value": "vals_nothing",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "manhat < 0.5",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "uniform_20": {
                "variable": {
                    "value": "sig_gauss",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "minval": {
                    "value": "sigrange_gauss[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "maxval": {
                    "value": "sigrange_gauss[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "exp_21": {
                "variable": {
                    "value": "vals_gauss",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "-tf.reduce_sum(coords ** 2, -1) / 2.0 / sig_gauss ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "convert_to_tensor_26": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[tf.cos(theta), tf.sin(theta)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_27": {
                "variable": {
                    "value": "dists",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "coords * v",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "uniform_29": {
                "variable": {
                    "value": "sig_line",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "minval": {
                    "value": "sigrange_line[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "maxval": {
                    "value": "sigrange_line[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "uniform_30": {
                "variable": {
                    "value": "w_line",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "minval": {
                    "value": "wmin_line",
                    "type": "variable",
                    "possible_values": []
                },
                "maxval": {
                    "value": "0.5 * (N - 1) + 0.1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cond_36": {
                "variable": {
                    "value": "vals",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "t < probs[0] + probs[1]",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : vals_line",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : vals",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_37": {
                "variable": {
                    "value": "vals",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "t < probs[0]",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : vals_gauss",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : vals",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "zeros_like_40": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor([tf.cos(theta), tf.sin(theta)])",
                            "Call"
                        ],
                        [
                            "vals / tf.reduce_sum(vals)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_41": {
                "variable": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.stack([v, z, z, z, v, z, z, z, v], -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[N, N, 3, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "uniform_78": {
                "variable": {
                    "value": "rnd_hue",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, 1, 1, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "minval": {
                    "value": "-rnd_hue",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "maxval": {
                    "value": "rnd_hue",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random.uniform((batch_size, 1, 1, 3), -rnd_hue, rnd_hue)",
                            "Call"
                        ]
                    ]
                }
            },
            "uniform_79": {
                "variable": {
                    "value": "rnd_brightness",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "minval": {
                    "value": "-rnd_bri",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "maxval": {
                    "value": "rnd_bri",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "split_118": {
                "variable": {
                    "value": "(y, cb, cr)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image - 128",
                            "BinOp"
                        ],
                        [
                            "image - 128",
                            "BinOp"
                        ],
                        [
                            "image / (y_table * factor)",
                            "BinOp"
                        ],
                        [
                            "rounding(image)",
                            "Call"
                        ],
                        [
                            "image / (c_table * factor)",
                            "BinOp"
                        ],
                        [
                            "rounding(image)",
                            "Call"
                        ],
                        [
                            "image * alpha",
                            "BinOp"
                        ],
                        [
                            "image * alpha",
                            "BinOp"
                        ],
                        [
                            "image / 255",
                            "BinOp"
                        ],
                        [
                            "tf.pad(image, [[0, 0], [0, vpad], [0, wpad], [0, 0]], 'SYMMETRIC')",
                            "Call"
                        ],
                        [
                            "rgb_to_ycbcr_jpeg(image)",
                            "Call"
                        ],
                        [
                            "upsampling_420(y, cb, cr)",
                            "Call"
                        ],
                        [
                            "tf.stack((y, cb, cr), axis=-1)",
                            "Call"
                        ],
                        [
                            "ycbcr_to_rgb_jpeg(image)",
                            "Call"
                        ],
                        [
                            "image[:, :-vpad, :-wpad]",
                            "Subscript"
                        ],
                        [
                            "tf.minimum(255.0, tf.maximum(0.0, image))",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "avg_pool_119": {
                "variable": {
                    "value": "cb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.avg_pool(cb, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "repeat(cb)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "avg_pool_121": {
                "variable": {
                    "value": "cr",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.avg_pool(cr, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "repeat(cr)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_137": {
                "variable": {
                    "value": "image_reshaped",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image - 128",
                            "BinOp"
                        ],
                        [
                            "image - 128",
                            "BinOp"
                        ],
                        [
                            "image / (y_table * factor)",
                            "BinOp"
                        ],
                        [
                            "rounding(image)",
                            "Call"
                        ],
                        [
                            "image / (c_table * factor)",
                            "BinOp"
                        ],
                        [
                            "rounding(image)",
                            "Call"
                        ],
                        [
                            "image * alpha",
                            "BinOp"
                        ],
                        [
                            "image * alpha",
                            "BinOp"
                        ],
                        [
                            "image / 255",
                            "BinOp"
                        ],
                        [
                            "tf.pad(image, [[0, 0], [0, vpad], [0, wpad], [0, 0]], 'SYMMETRIC')",
                            "Call"
                        ],
                        [
                            "rgb_to_ycbcr_jpeg(image)",
                            "Call"
                        ],
                        [
                            "upsampling_420(y, cb, cr)",
                            "Call"
                        ],
                        [
                            "tf.stack((y, cb, cr), axis=-1)",
                            "Call"
                        ],
                        [
                            "ycbcr_to_rgb_jpeg(image)",
                            "Call"
                        ],
                        [
                            "image[:, :-vpad, :-wpad]",
                            "Subscript"
                        ],
                        [
                            "tf.minimum(255.0, tf.maximum(0.0, image))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, height // k, k, -1, k]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_138": {
                "variable": {
                    "value": "image_transposed",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "image_reshaped",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(image, [batch_size, height // k, k, -1, k])",
                            "Call"
                        ],
                        [
                            "tf.reshape(patches, [batch_size, height // k, width // k, k, k])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 1, 3, 2, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_241": {
                "variable": {
                    "value": "image_reshaped",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "patches",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, height // k, width // k, k, k]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_243": {
                "variable": {
                    "value": "image_transposed",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "image_reshaped",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(image, [batch_size, height // k, k, -1, k])",
                            "Call"
                        ],
                        [
                            "tf.reshape(patches, [batch_size, height // k, width // k, k, k])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 1, 3, 2, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensordot_286": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "image + shift",
                    "type": "BinOp",
                    "possible_values": []
                },
                "b": {
                    "value": "matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([[65.481, 128.553, 24.966], [-37.797, -74.203, 112.0], [112.0, -93.786, -18.214]], dtype=np.float32).T / 255",
                            "BinOp"
                        ],
                        [
                            "np.array([[0.299, 0.587, 0.114], [-0.168736, -0.331264, 0.5], [0.5, -0.418688, -0.081312]], dtype=np.float32).T",
                            "Attribute"
                        ],
                        [
                            "np.array([[298.082, 0, 408.583], [298.082, -100.291, -208.12], [298.082, 516.412, 0]], dtype=np.float32).T / 256",
                            "BinOp"
                        ],
                        [
                            "np.array([[1.0, 0.0, 1.402], [1, -0.344136, -0.714136], [1, 1.772, 0]], dtype=np.float32).T",
                            "Attribute"
                        ]
                    ]
                },
                "axes": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_294": {
                "variable": {
                    "value": "cond",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.abs(x) < 0.5",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "minimum_367": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "255.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.maximum(0.0, image)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_139": {
                "tensor": {
                    "value": "image_transposed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(image_reshaped, [0, 1, 3, 2, 4])",
                            "Call"
                        ],
                        [
                            "tf.transpose(image_reshaped, [0, 1, 3, 2, 4])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, -1, k, k]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_244": {
                "tensor": {
                    "value": "image_transposed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(image_reshaped, [0, 1, 3, 2, 4])",
                            "Call"
                        ],
                        [
                            "tf.transpose(image_reshaped, [0, 1, 3, 2, 4])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, height, width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_257": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "tf.tile(x, [1, 1, k, k])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, height * k, width * k])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tile_258": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "tf.tile(x, [1, 1, k, k])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, height * k, width * k])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, 1, k, k]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_259": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "tf.tile(x, [1, 1, k, k])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, height * k, width * k])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, height * k, width * k]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_264": {
                "values": {
                    "value": "(y, cb, cr)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "pad_317": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image - 128",
                            "BinOp"
                        ],
                        [
                            "image - 128",
                            "BinOp"
                        ],
                        [
                            "image / (y_table * factor)",
                            "BinOp"
                        ],
                        [
                            "rounding(image)",
                            "Call"
                        ],
                        [
                            "image / (c_table * factor)",
                            "BinOp"
                        ],
                        [
                            "rounding(image)",
                            "Call"
                        ],
                        [
                            "image * alpha",
                            "BinOp"
                        ],
                        [
                            "image * alpha",
                            "BinOp"
                        ],
                        [
                            "image / 255",
                            "BinOp"
                        ],
                        [
                            "tf.pad(image, [[0, 0], [0, vpad], [0, wpad], [0, 0]], 'SYMMETRIC')",
                            "Call"
                        ],
                        [
                            "rgb_to_ycbcr_jpeg(image)",
                            "Call"
                        ],
                        [
                            "upsampling_420(y, cb, cr)",
                            "Call"
                        ],
                        [
                            "tf.stack((y, cb, cr), axis=-1)",
                            "Call"
                        ],
                        [
                            "ycbcr_to_rgb_jpeg(image)",
                            "Call"
                        ],
                        [
                            "image[:, :-vpad, :-wpad]",
                            "Subscript"
                        ],
                        [
                            "tf.minimum(255.0, tf.maximum(0.0, image))",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [0, vpad], [0, wpad], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "SYMMETRIC",
                    "type": "str",
                    "possible_values": []
                }
            },
            "split_324": {
                "variable": {
                    "value": "(y, cb, cr)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image - 128",
                            "BinOp"
                        ],
                        [
                            "image - 128",
                            "BinOp"
                        ],
                        [
                            "image / (y_table * factor)",
                            "BinOp"
                        ],
                        [
                            "rounding(image)",
                            "Call"
                        ],
                        [
                            "image / (c_table * factor)",
                            "BinOp"
                        ],
                        [
                            "rounding(image)",
                            "Call"
                        ],
                        [
                            "image * alpha",
                            "BinOp"
                        ],
                        [
                            "image * alpha",
                            "BinOp"
                        ],
                        [
                            "image / 255",
                            "BinOp"
                        ],
                        [
                            "tf.pad(image, [[0, 0], [0, vpad], [0, wpad], [0, 0]], 'SYMMETRIC')",
                            "Call"
                        ],
                        [
                            "rgb_to_ycbcr_jpeg(image)",
                            "Call"
                        ],
                        [
                            "upsampling_420(y, cb, cr)",
                            "Call"
                        ],
                        [
                            "tf.stack((y, cb, cr), axis=-1)",
                            "Call"
                        ],
                        [
                            "ycbcr_to_rgb_jpeg(image)",
                            "Call"
                        ],
                        [
                            "image[:, :-vpad, :-wpad]",
                            "Subscript"
                        ],
                        [
                            "tf.minimum(255.0, tf.maximum(0.0, image))",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_354": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(y, cb, cr)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "to_float_10": {
                "x": {
                    "value": "tf.stack(tf.meshgrid(tf.range(N_blur), tf.range(N_blur), indexing='ij'), -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_12": {
                "x": {
                    "value": "coords",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(tf.stack(tf.meshgrid(tf.range(N_blur), tf.range(N_blur), indexing='ij'), -1)) - 0.5 * (N - 1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "exp_32": {
                "x": {
                    "value": "-dists ** 2 / 2.0 / sig_line ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "to_float_32": {
                "x": {
                    "value": "manhat < w_line",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "reduce_sum_39": {
                "input_tensor": {
                    "value": "vals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vals_nothing",
                            "variable"
                        ],
                        [
                            "tf.cond(t < probs[0] + probs[1], lambda : vals_line, lambda : vals)",
                            "Call"
                        ],
                        [
                            "tf.cond(t < probs[0], lambda : vals_gauss, lambda : vals)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_41": {
                "values": {
                    "value": "[v, z, z, z, v, z, z, z, v]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensordot_94": {
                "a": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image - 128",
                            "BinOp"
                        ],
                        [
                            "image - 128",
                            "BinOp"
                        ],
                        [
                            "image / (y_table * factor)",
                            "BinOp"
                        ],
                        [
                            "rounding(image)",
                            "Call"
                        ],
                        [
                            "image / (c_table * factor)",
                            "BinOp"
                        ],
                        [
                            "rounding(image)",
                            "Call"
                        ],
                        [
                            "image * alpha",
                            "BinOp"
                        ],
                        [
                            "image * alpha",
                            "BinOp"
                        ],
                        [
                            "image / 255",
                            "BinOp"
                        ],
                        [
                            "tf.pad(image, [[0, 0], [0, vpad], [0, wpad], [0, 0]], 'SYMMETRIC')",
                            "Call"
                        ],
                        [
                            "rgb_to_ycbcr_jpeg(image)",
                            "Call"
                        ],
                        [
                            "upsampling_420(y, cb, cr)",
                            "Call"
                        ],
                        [
                            "tf.stack((y, cb, cr), axis=-1)",
                            "Call"
                        ],
                        [
                            "ycbcr_to_rgb_jpeg(image)",
                            "Call"
                        ],
                        [
                            "image[:, :-vpad, :-wpad]",
                            "Subscript"
                        ],
                        [
                            "tf.minimum(255.0, tf.maximum(0.0, image))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([[65.481, 128.553, 24.966], [-37.797, -74.203, 112.0], [112.0, -93.786, -18.214]], dtype=np.float32).T / 255",
                            "BinOp"
                        ],
                        [
                            "np.array([[0.299, 0.587, 0.114], [-0.168736, -0.331264, 0.5], [0.5, -0.418688, -0.081312]], dtype=np.float32).T",
                            "Attribute"
                        ],
                        [
                            "np.array([[298.082, 0, 408.583], [298.082, -100.291, -208.12], [298.082, 516.412, 0]], dtype=np.float32).T / 256",
                            "BinOp"
                        ],
                        [
                            "np.array([[1.0, 0.0, 1.402], [1, -0.344136, -0.714136], [1, 1.772, 0]], dtype=np.float32).T",
                            "Attribute"
                        ]
                    ]
                },
                "axes": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensordot_106": {
                "a": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image - 128",
                            "BinOp"
                        ],
                        [
                            "image - 128",
                            "BinOp"
                        ],
                        [
                            "image / (y_table * factor)",
                            "BinOp"
                        ],
                        [
                            "rounding(image)",
                            "Call"
                        ],
                        [
                            "image / (c_table * factor)",
                            "BinOp"
                        ],
                        [
                            "rounding(image)",
                            "Call"
                        ],
                        [
                            "image * alpha",
                            "BinOp"
                        ],
                        [
                            "image * alpha",
                            "BinOp"
                        ],
                        [
                            "image / 255",
                            "BinOp"
                        ],
                        [
                            "tf.pad(image, [[0, 0], [0, vpad], [0, wpad], [0, 0]], 'SYMMETRIC')",
                            "Call"
                        ],
                        [
                            "rgb_to_ycbcr_jpeg(image)",
                            "Call"
                        ],
                        [
                            "upsampling_420(y, cb, cr)",
                            "Call"
                        ],
                        [
                            "tf.stack((y, cb, cr), axis=-1)",
                            "Call"
                        ],
                        [
                            "ycbcr_to_rgb_jpeg(image)",
                            "Call"
                        ],
                        [
                            "image[:, :-vpad, :-wpad]",
                            "Subscript"
                        ],
                        [
                            "tf.minimum(255.0, tf.maximum(0.0, image))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([[65.481, 128.553, 24.966], [-37.797, -74.203, 112.0], [112.0, -93.786, -18.214]], dtype=np.float32).T / 255",
                            "BinOp"
                        ],
                        [
                            "np.array([[0.299, 0.587, 0.114], [-0.168736, -0.331264, 0.5], [0.5, -0.418688, -0.081312]], dtype=np.float32).T",
                            "Attribute"
                        ],
                        [
                            "np.array([[298.082, 0, 408.583], [298.082, -100.291, -208.12], [298.082, 516.412, 0]], dtype=np.float32).T / 256",
                            "BinOp"
                        ],
                        [
                            "np.array([[1.0, 0.0, 1.402], [1, -0.344136, -0.714136], [1, 1.772, 0]], dtype=np.float32).T",
                            "Attribute"
                        ]
                    ]
                },
                "axes": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_123": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "squeeze_124": {
                "input": {
                    "value": "cb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.avg_pool(cb, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "repeat(cb)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "squeeze_125": {
                "input": {
                    "value": "cr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.avg_pool(cr, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "repeat(cr)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "shape_136": {
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image - 128",
                            "BinOp"
                        ],
                        [
                            "image - 128",
                            "BinOp"
                        ],
                        [
                            "image / (y_table * factor)",
                            "BinOp"
                        ],
                        [
                            "rounding(image)",
                            "Call"
                        ],
                        [
                            "image / (c_table * factor)",
                            "BinOp"
                        ],
                        [
                            "rounding(image)",
                            "Call"
                        ],
                        [
                            "image * alpha",
                            "BinOp"
                        ],
                        [
                            "image * alpha",
                            "BinOp"
                        ],
                        [
                            "image / 255",
                            "BinOp"
                        ],
                        [
                            "tf.pad(image, [[0, 0], [0, vpad], [0, wpad], [0, 0]], 'SYMMETRIC')",
                            "Call"
                        ],
                        [
                            "rgb_to_ycbcr_jpeg(image)",
                            "Call"
                        ],
                        [
                            "upsampling_420(y, cb, cr)",
                            "Call"
                        ],
                        [
                            "tf.stack((y, cb, cr), axis=-1)",
                            "Call"
                        ],
                        [
                            "ycbcr_to_rgb_jpeg(image)",
                            "Call"
                        ],
                        [
                            "image[:, :-vpad, :-wpad]",
                            "Subscript"
                        ],
                        [
                            "tf.minimum(255.0, tf.maximum(0.0, image))",
                            "Call"
                        ]
                    ]
                }
            },
            "tensordot_165": {
                "a": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image - 128",
                            "BinOp"
                        ],
                        [
                            "image - 128",
                            "BinOp"
                        ],
                        [
                            "image / (y_table * factor)",
                            "BinOp"
                        ],
                        [
                            "rounding(image)",
                            "Call"
                        ],
                        [
                            "image / (c_table * factor)",
                            "BinOp"
                        ],
                        [
                            "rounding(image)",
                            "Call"
                        ],
                        [
                            "image * alpha",
                            "BinOp"
                        ],
                        [
                            "image * alpha",
                            "BinOp"
                        ],
                        [
                            "image / 255",
                            "BinOp"
                        ],
                        [
                            "tf.pad(image, [[0, 0], [0, vpad], [0, wpad], [0, 0]], 'SYMMETRIC')",
                            "Call"
                        ],
                        [
                            "rgb_to_ycbcr_jpeg(image)",
                            "Call"
                        ],
                        [
                            "upsampling_420(y, cb, cr)",
                            "Call"
                        ],
                        [
                            "tf.stack((y, cb, cr), axis=-1)",
                            "Call"
                        ],
                        [
                            "ycbcr_to_rgb_jpeg(image)",
                            "Call"
                        ],
                        [
                            "image[:, :-vpad, :-wpad]",
                            "Subscript"
                        ],
                        [
                            "tf.minimum(255.0, tf.maximum(0.0, image))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((8, 8, 8, 8), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.zeros((8, 8, 8, 8), dtype=np.float32)",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_240": {
                "input": {
                    "value": "patches",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensordot_275": {
                "a": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image - 128",
                            "BinOp"
                        ],
                        [
                            "image - 128",
                            "BinOp"
                        ],
                        [
                            "image / (y_table * factor)",
                            "BinOp"
                        ],
                        [
                            "rounding(image)",
                            "Call"
                        ],
                        [
                            "image / (c_table * factor)",
                            "BinOp"
                        ],
                        [
                            "rounding(image)",
                            "Call"
                        ],
                        [
                            "image * alpha",
                            "BinOp"
                        ],
                        [
                            "image * alpha",
                            "BinOp"
                        ],
                        [
                            "image / 255",
                            "BinOp"
                        ],
                        [
                            "tf.pad(image, [[0, 0], [0, vpad], [0, wpad], [0, 0]], 'SYMMETRIC')",
                            "Call"
                        ],
                        [
                            "rgb_to_ycbcr_jpeg(image)",
                            "Call"
                        ],
                        [
                            "upsampling_420(y, cb, cr)",
                            "Call"
                        ],
                        [
                            "tf.stack((y, cb, cr), axis=-1)",
                            "Call"
                        ],
                        [
                            "ycbcr_to_rgb_jpeg(image)",
                            "Call"
                        ],
                        [
                            "image[:, :-vpad, :-wpad]",
                            "Subscript"
                        ],
                        [
                            "tf.minimum(255.0, tf.maximum(0.0, image))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([[65.481, 128.553, 24.966], [-37.797, -74.203, 112.0], [112.0, -93.786, -18.214]], dtype=np.float32).T / 255",
                            "BinOp"
                        ],
                        [
                            "np.array([[0.299, 0.587, 0.114], [-0.168736, -0.331264, 0.5], [0.5, -0.418688, -0.081312]], dtype=np.float32).T",
                            "Attribute"
                        ],
                        [
                            "np.array([[298.082, 0, 408.583], [298.082, -100.291, -208.12], [298.082, 516.412, 0]], dtype=np.float32).T / 256",
                            "BinOp"
                        ],
                        [
                            "np.array([[1.0, 0.0, 1.402], [1, -0.344136, -0.714136], [1, 1.772, 0]], dtype=np.float32).T",
                            "Attribute"
                        ]
                    ]
                },
                "axes": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "round_291": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "tf.tile(x, [1, 1, k, k])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, height * k, width * k])",
                            "Call"
                        ]
                    ]
                }
            },
            "maximum_367": {
                "x": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image - 128",
                            "BinOp"
                        ],
                        [
                            "image - 128",
                            "BinOp"
                        ],
                        [
                            "image / (y_table * factor)",
                            "BinOp"
                        ],
                        [
                            "rounding(image)",
                            "Call"
                        ],
                        [
                            "image / (c_table * factor)",
                            "BinOp"
                        ],
                        [
                            "rounding(image)",
                            "Call"
                        ],
                        [
                            "image * alpha",
                            "BinOp"
                        ],
                        [
                            "image * alpha",
                            "BinOp"
                        ],
                        [
                            "image / 255",
                            "BinOp"
                        ],
                        [
                            "tf.pad(image, [[0, 0], [0, vpad], [0, wpad], [0, 0]], 'SYMMETRIC')",
                            "Call"
                        ],
                        [
                            "rgb_to_ycbcr_jpeg(image)",
                            "Call"
                        ],
                        [
                            "upsampling_420(y, cb, cr)",
                            "Call"
                        ],
                        [
                            "tf.stack((y, cb, cr), axis=-1)",
                            "Call"
                        ],
                        [
                            "ycbcr_to_rgb_jpeg(image)",
                            "Call"
                        ],
                        [
                            "image[:, :-vpad, :-wpad]",
                            "Subscript"
                        ],
                        [
                            "tf.minimum(255.0, tf.maximum(0.0, image))",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_10": {
                "values": {
                    "value": "tf.meshgrid(tf.range(N_blur), tf.range(N_blur), indexing='ij')",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cos_26": {
                "x": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform([], 0, 2.0 * np.pi)",
                            "Call"
                        ]
                    ]
                }
            },
            "sin_26": {
                "x": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform([], 0, 2.0 * np.pi)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensordot_230": {
                "a": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image - 128",
                            "BinOp"
                        ],
                        [
                            "image - 128",
                            "BinOp"
                        ],
                        [
                            "image / (y_table * factor)",
                            "BinOp"
                        ],
                        [
                            "rounding(image)",
                            "Call"
                        ],
                        [
                            "image / (c_table * factor)",
                            "BinOp"
                        ],
                        [
                            "rounding(image)",
                            "Call"
                        ],
                        [
                            "image * alpha",
                            "BinOp"
                        ],
                        [
                            "image * alpha",
                            "BinOp"
                        ],
                        [
                            "image / 255",
                            "BinOp"
                        ],
                        [
                            "tf.pad(image, [[0, 0], [0, vpad], [0, wpad], [0, 0]], 'SYMMETRIC')",
                            "Call"
                        ],
                        [
                            "rgb_to_ycbcr_jpeg(image)",
                            "Call"
                        ],
                        [
                            "upsampling_420(y, cb, cr)",
                            "Call"
                        ],
                        [
                            "tf.stack((y, cb, cr), axis=-1)",
                            "Call"
                        ],
                        [
                            "ycbcr_to_rgb_jpeg(image)",
                            "Call"
                        ],
                        [
                            "image[:, :-vpad, :-wpad]",
                            "Subscript"
                        ],
                        [
                            "tf.minimum(255.0, tf.maximum(0.0, image))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((8, 8, 8, 8), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.zeros((8, 8, 8, 8), dtype=np.float32)",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_294": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(x, -1)",
                            "Call"
                        ],
                        [
                            "tf.tile(x, [1, 1, k, k])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, height * k, width * k])",
                            "Call"
                        ]
                    ]
                }
            },
            "meshgrid_10": {
                "*args": {
                    "value": "tf.range(N_blur)",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "tf.range(N_blur)",
                    "type": "Call",
                    "possible_values": []
                },
                "indexing": {
                    "value": "ij",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_21": {
                "input_tensor": {
                    "value": "coords ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    }
}