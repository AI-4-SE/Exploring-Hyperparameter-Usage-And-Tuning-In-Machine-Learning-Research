{
    "dataset.py": {
        "torch": {
            "tensor_60": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "float(score)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_97": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "float(score)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_109": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(img, img, img)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_like_108": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Image.open(os.path.join(self.path, 'Image', img_name))",
                            "Call"
                        ],
                        [
                            "self.transform(img)",
                            "Call"
                        ],
                        [
                            "Image.open(os.path.join(self.path, 'Image', img_name))",
                            "Call"
                        ],
                        [
                            "self.transform(img)",
                            "Call"
                        ],
                        [
                            "self.Norm(img)",
                            "Call"
                        ],
                        [
                            "torch.cat((img, img, img))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "model/loss.py": {
        "torch": {
            "cross_entropy_35": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "predict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "predict.transpose(1, 2).transpose(2, 3).contiguous()",
                            "Call"
                        ],
                        [
                            "predict[target_mask.view(n, h, w, 1).repeat(1, 1, 1, c)].view(-1, c)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.squeeze()",
                            "Call"
                        ],
                        [
                            "target[target_mask].to(torch.long)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "reduction": {
                    "value": "self.size_average",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_59": {
                "variable": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(p)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_32": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "model/quality_model.py": {
        "torch": {
            "randn_131": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "640",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "480",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_27": {
                "variable": {
                    "value": "self.b0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(1280, 128, 1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_29": {
                "variable": {
                    "value": "self.b1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.AdaptiveAvgPool2d((1, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_35": {
                "variable": {
                    "value": "self.project",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nclass",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_36": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nclass",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_58": {
                "variable": {
                    "value": "feat2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feat2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.b1(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(feat2, size, mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.shape[2:]",
                            "Subscript"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_73": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(1280, 512, True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_116": {
                "variable": {
                    "value": "att_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.softmax(mask, 1)[:, 1, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_117": {
                "variable": {
                    "value": "out_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.decoder(high_fea, low_fea)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(input.shape[2] // 4, input.shape[3] // 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_27": {
                "in_channels": {
                    "value": "1280",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_28": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_28": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_30": {
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_31": {
                "in_channels": {
                    "value": "1280",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sigmoid_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_62": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.shortcut(y)",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.shape[2:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Linear_74": {
                "in_features": {
                    "value": "1280",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_75": {
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReLU_76": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_77": {
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_78": {
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReLU_79": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_80": {
                "in_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_122": {
                "input": {
                    "value": "high_fea * att_mask",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "(2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "softmax_116": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.decoder(high_fea, low_fea)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_123": {
                "input": {
                    "value": "att_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(torch.softmax(mask, 1)[:, 1, :, :], 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "(2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "test.py": {
        "torch": {
            "DataLoader_63": {
                "variable": {
                    "value": "test_data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "monoSimDataset(path=cfg.dataset_path, mode='test', seed=cfg.seed, debug_data=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "cfg.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "cfg.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_51": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cfg.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_55": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_74": {
                "variable": {
                    "value": "cp_data",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "cfg.model_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device(cfg.device)",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device(cfg.device)",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "device_115": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cfg.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_119": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_136": {
                "variable": {
                    "value": "cp_data",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "cfg.model_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device(cfg.device)",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "torch.device(cfg.device)",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_50": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_86": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_114": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_149": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_53": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mse_loss_97": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.to(device)",
                            "Call"
                        ],
                        [
                            "target.to(device)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "is_available_117": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_158": {
                "input": {
                    "value": "heatmap",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.softmax(heatmap, 0)[1, :, :].cpu().numpy()",
                            "Call"
                        ],
                        [
                            "Image.fromarray(heatmap)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "DataLoader_88": {
                "variable": {
                    "value": "train_data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "monoSimDataset(path=cfg.dataset_path, mode='train', seed=cfg.seed, debug_data=cfg.debug)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "cfg.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "cfg.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_97": {
                "variable": {
                    "value": "val_data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "monoSimDataset(path=cfg.dataset_path, mode='val', seed=cfg.seed, debug_data=cfg.debug)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "cfg.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "cfg.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_120": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "cfg.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "cfg.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_125": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(filter(lambda p: p.requires_grad, model.parameters()), lr=cfg.lr, weight_decay=cfg.weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "min",
                    "type": "str",
                    "possible_values": []
                },
                "factor": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "verbose": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MSELoss_130": {
                "variable": {
                    "value": "pred_criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_76": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cfg.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_80": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_109": {
                "variable": {
                    "value": "cp_data",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "cfg.cp_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device(cfg.device)",
                            "Call"
                        ],
                        [
                            "torch.device('cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "SummaryWriter_149": {
                "variable": {
                    "value": "log_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "os.path.join('log', train_name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_75": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_78": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_200": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_259": {
                "obj": {
                    "value": "cp_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(cfg.cp_path, map_location=device)",
                            "Call"
                        ],
                        [
                            "dict(cfg=str(cfg), model=model.state_dict())",
                            "Call"
                        ],
                        [
                            "dict(cfg=str(cfg), model=model.state_dict())",
                            "Call"
                        ],
                        [
                            "dict(cfg=str(cfg), model=model.state_dict())",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "best_cp_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.normcase(os.path.join(cp_dir_path, cp_name))",
                            "Call"
                        ],
                        [
                            "os.path.normcase(os.path.join(cp_dir_path, cp_name))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_283": {
                "obj": {
                    "value": "cp_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(cfg.cp_path, map_location=device)",
                            "Call"
                        ],
                        [
                            "dict(cfg=str(cfg), model=model.state_dict())",
                            "Call"
                        ],
                        [
                            "dict(cfg=str(cfg), model=model.state_dict())",
                            "Call"
                        ],
                        [
                            "dict(cfg=str(cfg), model=model.state_dict())",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "history_cp_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.normcase(os.path.join(history_dir_path, cp_name))",
                            "Call"
                        ]
                    ]
                }
            },
            "mse_loss_213": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.to(device)",
                            "Call"
                        ],
                        [
                            "target.to(device)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_273": {
                "obj": {
                    "value": "cp_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(cfg.cp_path, map_location=device)",
                            "Call"
                        ],
                        [
                            "dict(cfg=str(cfg), model=model.state_dict())",
                            "Call"
                        ],
                        [
                            "dict(cfg=str(cfg), model=model.state_dict())",
                            "Call"
                        ],
                        [
                            "dict(cfg=str(cfg), model=model.state_dict())",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "best_cp_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.normcase(os.path.join(cp_dir_path, cp_name))",
                            "Call"
                        ],
                        [
                            "os.path.normcase(os.path.join(cp_dir_path, cp_name))",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_230": {
                "input": {
                    "value": "heatmap",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_236": {
                "input": {
                    "value": "mask[idx]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "squeeze_240": {
                "input": {
                    "value": "heatmap_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.softmax(heatmap, 1)[idx, 1, :, :]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    }
}