{
    "h36m_dataset.py": {
        "torch": {}
    },
    "mocap_dataset.py": {
        "torch": {
            "device_4": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "is_available_4": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_102": {
                "variable": {
                    "value": "rotations",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "action['rotations'].astype('float32')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_102": {
                "variable": {
                    "value": "rotations",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_103": {
                "variable": {
                    "value": "trajectory",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "action['trajectory'].astype('float32')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_103": {
                "variable": {
                    "value": "trajectory",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_113": {
                "variable": {
                    "value": "rotations",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "action['rotations_exp'].astype('float32')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_113": {
                "variable": {
                    "value": "rotations",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_114": {
                "variable": {
                    "value": "trajectory",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "action['trajectory'].astype('float32')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_114": {
                "variable": {
                    "value": "trajectory",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_126": {
                "variable": {
                    "value": "rotations",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "action['rotations'].astype('float32')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_126": {
                "variable": {
                    "value": "rotations",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_127": {
                "variable": {
                    "value": "trajectory",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "action['trajectory'].astype('float32')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_127": {
                "variable": {
                    "value": "trajectory",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "model.py": {
        "torch": {
            "cat_61": {
                "variable": {
                    "value": "motions_recon_flip",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "motions_recon_flip",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(motions_recon_flip, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_62": {
                "variable": {
                    "value": "motions_recon_vel_flip",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "motions_recon_vel_flip",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(motions_recon_vel_flip, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_88": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Sequential_98": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.model",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "GRU_161": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "num_units",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params['num_units']",
                            "Subscript"
                        ]
                    ]
                },
                "num_layers": {
                    "value": "n_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params['n_layers']",
                            "Subscript"
                        ]
                    ]
                },
                "dropout": {
                    "value": "rnn_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params['rnn_dropout']",
                            "Subscript"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_165": {
                "variable": {
                    "value": "self.h0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(n_layers, 1, num_units).normal_(std=0.01)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_200": {
                "variable": {
                    "value": "self.h0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(n_layers, 1, num_units).normal_(std=0.01)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_302": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "bool"
                        ]
                    ]
                }
            },
            "GRU_190": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "input_size + z_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "num_units",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params['num_units']",
                            "Subscript"
                        ]
                    ]
                },
                "num_layers": {
                    "value": "n_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params['n_layers']",
                            "Subscript"
                        ]
                    ]
                },
                "dropout": {
                    "value": "rnn_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params['rnn_dropout']",
                            "Subscript"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GRU_193": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "num_units",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params['num_units']",
                            "Subscript"
                        ]
                    ]
                },
                "num_layers": {
                    "value": "n_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params['n_layers']",
                            "Subscript"
                        ]
                    ]
                },
                "dropout": {
                    "value": "rnn_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params['rnn_dropout']",
                            "Subscript"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_209": {
                "variable": {
                    "value": "x_concat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, z.unsqueeze(1).expand(-1, x.shape[1], -1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_217": {
                "variable": {
                    "value": "x_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fc_rnn2out(x_out)",
                            "Call"
                        ],
                        [
                            "torch.add(x_out, x)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "self.pad(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.norm(x)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "ReflectionPad1d_232": {
                "variable": {
                    "value": "self.pad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_245": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "norm_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_dim",
                            "variable"
                        ],
                        [
                            "output_dim",
                            "variable"
                        ]
                    ]
                }
            },
            "ReLU_257": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_273": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "self.use_bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv1d_276": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.use_bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm1d_307": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "norm_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_dim",
                            "variable"
                        ],
                        [
                            "output_dim",
                            "variable"
                        ]
                    ]
                }
            },
            "ReLU_319": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_47": {
                "*size": {
                    "value": "z.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.input_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv1d_97": {
                "in_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params['dim']",
                            "Subscript"
                        ],
                        [
                            "dim * 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_165": {
                "*size": {
                    "value": "n_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params['n_layers']",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "num_units",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params['num_units']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_200": {
                "*size": {
                    "value": "n_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params['n_layers']",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "num_units",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params['num_units']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ReplicationPad1d_234": {
                "variable": {
                    "value": "self.pad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "InstanceNorm1d_247": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "norm_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_dim",
                            "variable"
                        ],
                        [
                            "output_dim",
                            "variable"
                        ]
                    ]
                }
            },
            "LeakyReLU_259": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "InstanceNorm1d_309": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "norm_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_dim",
                            "variable"
                        ],
                        [
                            "output_dim",
                            "variable"
                        ]
                    ]
                }
            },
            "LeakyReLU_321": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "from_numpy_364": {
                "ndarray": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.multivariate_normal(mean, cov, batch_size).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(s))",
                            "Call"
                        ],
                        [
                            "np.random.multivariate_normal(mean, cov, batch_size).astype(np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_133": {
                "input": {
                    "value": "(out0 - 1) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "LayerNorm_249": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "norm_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_dim",
                            "variable"
                        ],
                        [
                            "output_dim",
                            "variable"
                        ]
                    ]
                }
            },
            "PReLU_261": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LayerNorm_311": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "norm_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_dim",
                            "variable"
                        ],
                        [
                            "output_dim",
                            "variable"
                        ]
                    ]
                }
            },
            "PReLU_323": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_117": {
                "input": {
                    "value": "(out1 - 1) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_121": {
                "input": {
                    "value": "F.binary_cross_entropy(F.sigmoid(out0), all0) + F.binary_cross_entropy(F.sigmoid(out1), all1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_136": {
                "input": {
                    "value": "F.binary_cross_entropy(F.sigmoid(out0), all1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "SELU_263": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SELU_325": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_like_119": {
                "input": {
                    "value": "out0.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_120": {
                "input": {
                    "value": "out1.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_135": {
                "input": {
                    "value": "out0.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_136": {
                "input": {
                    "value": "F.sigmoid(out0)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "all1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(torch.ones_like(out1.data).cuda(), requires_grad=False)",
                            "Call"
                        ],
                        [
                            "Variable(torch.ones_like(out0.data).cuda(), requires_grad=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "Tanh_265": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_327": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "binary_cross_entropy_121": {
                "input": {
                    "value": "F.sigmoid(out0)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "all0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(torch.zeros_like(out0.data).cuda(), requires_grad=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "binary_cross_entropy_122": {
                "input": {
                    "value": "F.sigmoid(out1)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "all1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(torch.ones_like(out1.data).cuda(), requires_grad=False)",
                            "Call"
                        ],
                        [
                            "Variable(torch.ones_like(out0.data).cuda(), requires_grad=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_136": {
                "input": {
                    "value": "out0",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sigmoid_121": {
                "input": {
                    "value": "out0",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sigmoid_122": {
                "input": {
                    "value": "out1",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "random_sample.py": {
        "torch": {}
    },
    "reconstruction.py": {
        "torch": {
            "DataLoader_40": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "H36MDataset('test', config)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "60",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "skeleton.py": {
        "torch": {
            "device_4": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "is_available_4": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_94": {
                "tensors": {
                    "value": "positions_world",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "permute_94": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_116": {
                "variable": {
                    "value": "root_positions",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "angles.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "angles.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_141": {
                "tensors": {
                    "value": "positions_world",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "permute_141": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_192": {
                "tensors": {
                    "value": "transformations_mat_world",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "permute_192": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_168": {
                "variable": {
                    "value": "tr_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(rot_mat, tl_mat)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_189": {
                "variable": {
                    "value": "tr_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(rot_world, tl_mat)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "bmm_181": {
                "variable": {
                    "value": "rot_world",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rot_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "quat2rotmat(rot)",
                            "Call"
                        ],
                        [
                            "quat2rotmat(rot).view(-1, 3, 3)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "rotations_world[self._parents[i]].view(-1, 3, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eye_187": {
                "variable": {
                    "value": "rot_world",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_176": {
                "input": {
                    "value": "offset_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "expanded_offsets[:, :, i].view(-1, 1, 3)",
                            "Call"
                        ],
                        [
                            "expanded_offsets[:, :, i].view(-1, 1, 3)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "rotations_world[self._parents[i]].view(-1, 3, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_132": {
                "input": {
                    "value": "offset_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "expanded_offsets[:, :, i].view(-1, 1, 3)",
                            "Call"
                        ],
                        [
                            "expanded_offsets[:, :, i].view(-1, 1, 3)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "rotations_world[self._parents[i]].view(-1, 3, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_135": {
                "input": {
                    "value": "thisRotation_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "thisRotation.view(-1, 3, 3)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "rotations_world[self._parents[i]].view(-1, 3, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "SummaryWriter_26": {
                "variable": {
                    "value": "train_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "os.path.join(config['tb_dir'], 'train')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_39": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "H36MDataset('train', config)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['batch_size']",
                            "Subscript"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['num_workers']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "DataLoader_42": {
                "variable": {
                    "value": "valid_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_valid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "H36MDataset('valid', config)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['batch_size']",
                            "Subscript"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['num_workers']",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "trainer.py": {
        "torch": {
            "Adam_35": {
                "variable": {
                    "value": "self.gen_opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "[p for p in gen_params if p.requires_grad]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_36": {
                "variable": {
                    "value": "self.dis_opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "[p for p in dis_params if p.requires_grad]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ExponentialLR_38": {
                "variable": {
                    "value": "self.gen_scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.gen_opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.999",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ExponentialLR_39": {
                "variable": {
                    "value": "self.dis_scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.dis_opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.999",
                    "type": "float",
                    "possible_values": []
                }
            },
            "device_41": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "div_76": {
                "variable": {
                    "value": "nm_input_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_pos - pos_mean",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "pos_std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(pos_std).to(self.device).detach()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(pos_std).to(self.device).detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_83": {
                "variable": {
                    "value": "loss_fk",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(nm_input_pos - nm_target_pos).norm(dim=3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_95": {
                "variable": {
                    "value": "z_dot_z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sample_Pz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p_z.sample(z.size(0))",
                            "Call"
                        ],
                        [
                            "sample_Pz.to(self.device)",
                            "Call"
                        ],
                        [
                            "p_z.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "sample_Pz.to(self.device)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "sample_Pz.transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_96": {
                "variable": {
                    "value": "z_tilde_dot_z_tilde",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.gen.encode(m)",
                            "Call"
                        ],
                        [
                            "self.gen.encode(m_exp)",
                            "Call"
                        ],
                        [
                            "self.gen.encode(motions_exp)",
                            "Call"
                        ],
                        [
                            "self.gen.encode(m_exp)",
                            "Call"
                        ],
                        [
                            "self.gen.encode(m_)",
                            "Call"
                        ],
                        [
                            "self.gen.encode(m_noise)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "z.transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_97": {
                "variable": {
                    "value": "z_dot_z_tilde",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sample_Pz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p_z.sample(z.size(0))",
                            "Call"
                        ],
                        [
                            "sample_Pz.to(self.device)",
                            "Call"
                        ],
                        [
                            "p_z.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "sample_Pz.to(self.device)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "z.transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_144": {
                "variable": {
                    "value": "exp_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "exp_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(exp_mean).to(self.device).detach()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(exp_mean).to(self.device).detach()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(exp_mean).to(self.device).detach()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(exp_mean).to(self.device).detach()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(exp_mean).to(self.device).detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_145": {
                "variable": {
                    "value": "exp_std",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "exp_std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(exp_std).to(self.device).detach()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(exp_std).to(self.device).detach()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(exp_std).to(self.device).detach()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(exp_std).to(self.device).detach()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(exp_std).to(self.device).detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_146": {
                "variable": {
                    "value": "pos_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pos_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(pos_mean).to(self.device).detach()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(pos_mean).to(self.device).detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_147": {
                "variable": {
                    "value": "pos_std",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pos_std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(pos_std).to(self.device).detach()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(pos_std).to(self.device).detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "load_436": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_model_list(model_dir, 'gen')",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_55": {
                "input": {
                    "value": "(input_seq.view(input_seq.shape[0], input_seq.shape[1], -1, 3) - target_seq.view(target_seq.shape[0], target_seq.shape[1], -1, 3)).norm(dim=3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_235": {
                "variable": {
                    "value": "exp_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "exp_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(exp_mean).to(self.device).detach()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(exp_mean).to(self.device).detach()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(exp_mean).to(self.device).detach()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(exp_mean).to(self.device).detach()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(exp_mean).to(self.device).detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_236": {
                "variable": {
                    "value": "exp_std",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "exp_std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(exp_std).to(self.device).detach()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(exp_std).to(self.device).detach()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(exp_std).to(self.device).detach()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(exp_std).to(self.device).detach()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(exp_std).to(self.device).detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_237": {
                "variable": {
                    "value": "pos_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pos_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(pos_mean).to(self.device).detach()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(pos_mean).to(self.device).detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_238": {
                "variable": {
                    "value": "pos_std",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pos_std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(pos_std).to(self.device).detach()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(pos_std).to(self.device).detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_261": {
                "variable": {
                    "value": "losses_gen[loss_gen_z_recon]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(z_recon - z)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_262": {
                "variable": {
                    "value": "losses_gen[loss_gen_z_recon_vel]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(z_recon_vel - z)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_274": {
                "variable": {
                    "value": "exp_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "exp_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(exp_mean).to(self.device).detach()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(exp_mean).to(self.device).detach()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(exp_mean).to(self.device).detach()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(exp_mean).to(self.device).detach()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(exp_mean).to(self.device).detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_275": {
                "variable": {
                    "value": "exp_std",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "exp_std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(exp_std).to(self.device).detach()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(exp_std).to(self.device).detach()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(exp_std).to(self.device).detach()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(exp_std).to(self.device).detach()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(exp_std).to(self.device).detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_337": {
                "variable": {
                    "value": "exp_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "exp_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(exp_mean).to(self.device).detach()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(exp_mean).to(self.device).detach()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(exp_mean).to(self.device).detach()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(exp_mean).to(self.device).detach()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(exp_mean).to(self.device).detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_338": {
                "variable": {
                    "value": "exp_std",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "exp_std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(exp_std).to(self.device).detach()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(exp_std).to(self.device).detach()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(exp_std).to(self.device).detach()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(exp_std).to(self.device).detach()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(exp_std).to(self.device).detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "randint_370": {
                "variable": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "m_.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_377": {
                "variable": {
                    "value": "exp_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "exp_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(exp_mean).to(self.device).detach()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(exp_mean).to(self.device).detach()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(exp_mean).to(self.device).detach()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(exp_mean).to(self.device).detach()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(exp_mean).to(self.device).detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_378": {
                "variable": {
                    "value": "exp_std",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "exp_std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(exp_std).to(self.device).detach()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(exp_std).to(self.device).detach()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(exp_std).to(self.device).detach()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(exp_std).to(self.device).detach()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(exp_std).to(self.device).detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "save_427": {
                "obj": {
                    "value": "{'gen': self.gen.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "gen_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.model_dir, 'gen_%04d.pt' % epoch)",
                            "Call"
                        ]
                    ]
                }
            },
            "flip_156": {
                "input": {
                    "value": "m_exp_recon_flip",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "flip_157": {
                "input": {
                    "value": "m_exp_recon_vel_flip",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "no_grad_227": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_268": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_335": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_368": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "unsqueeze_99": {
                "input": {
                    "value": "torch.diagonal(z_dot_z, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_100": {
                "input": {
                    "value": "torch.diagonal(z_dot_z, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_103": {
                "input": {
                    "value": "torch.diagonal(z_tilde_dot_z_tilde, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_104": {
                "input": {
                    "value": "torch.diagonal(z_tilde_dot_z_tilde, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_107": {
                "input": {
                    "value": "torch.diagonal(z_dot_z, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_108": {
                "input": {
                    "value": "torch.diagonal(z_tilde_dot_z_tilde, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_176": {
                "input": {
                    "value": "torch.abs(z_recon - z)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_177": {
                "input": {
                    "value": "torch.abs(z_recon_vel - z)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "flip_247": {
                "input": {
                    "value": "m_exp_recon_flip",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "flip_248": {
                "input": {
                    "value": "m_exp_recon_vel_flip",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "abs_261": {
                "input": {
                    "value": "z_recon - z",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_262": {
                "input": {
                    "value": "z_recon_vel - z",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "diagonal_99": {
                "input": {
                    "value": "z_dot_z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(sample_Pz, sample_Pz.transpose(0, 1))",
                            "Call"
                        ]
                    ]
                },
                "offset": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "diagonal_100": {
                "input": {
                    "value": "z_dot_z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(sample_Pz, sample_Pz.transpose(0, 1))",
                            "Call"
                        ]
                    ]
                },
                "offset": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "diagonal_103": {
                "input": {
                    "value": "z_tilde_dot_z_tilde",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(z, z.transpose(0, 1))",
                            "Call"
                        ]
                    ]
                },
                "offset": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "diagonal_104": {
                "input": {
                    "value": "z_tilde_dot_z_tilde",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(z, z.transpose(0, 1))",
                            "Call"
                        ]
                    ]
                },
                "offset": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "diagonal_107": {
                "input": {
                    "value": "z_dot_z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(sample_Pz, sample_Pz.transpose(0, 1))",
                            "Call"
                        ]
                    ]
                },
                "offset": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "diagonal_108": {
                "input": {
                    "value": "z_tilde_dot_z_tilde",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(z, z.transpose(0, 1))",
                            "Call"
                        ]
                    ]
                },
                "offset": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_125": {
                "input": {
                    "value": "k_z_z_tilde",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C / (C + dist_z_z_tilde + 1e-08)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "abs_176": {
                "input": {
                    "value": "z_recon - z",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_177": {
                "input": {
                    "value": "z_recon_vel - z",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_123": {
                "input": {
                    "value": "k_z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C / (C + dist_z_z + 1e-08)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_124": {
                "input": {
                    "value": "k_z_tilde",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C / (C + dist_z_tilde_z_tilde + 1e-08)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "utils.py": {
        "torch": {
            "device_11": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "bmm_28": {
                "variable": {
                    "value": "terms",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "r.view(-1, 4, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "q.view(-1, 1, 4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cross_52": {
                "variable": {
                    "value": "uv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "qvec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q[:, 1:]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v.view(-1, 3)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(v).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cross_53": {
                "variable": {
                    "value": "uuv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "qvec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q[:, 1:]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "uv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cross(qvec, v, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_127": {
                "variable": {
                    "value": "sinhalftheta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q[:, 1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "div_129": {
                "variable": {
                    "value": "r0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q[:, 1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "(sinhalftheta + epsilon).view(-1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "remainder_131": {
                "variable": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "theta + 2 * np.pi",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "2 * np.pi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mul_141": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "r0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.div(q[:, 1:], (sinhalftheta + epsilon).view(-1, 1))",
                            "Call"
                        ],
                        [
                            "np.divide(q[1:], np.linalg.norm(q[1:]) + np.finfo(np.float32).eps)",
                            "Call"
                        ],
                        [
                            "-r0",
                            "UnaryOp"
                        ],
                        [
                            "np.divide(r, np.linalg.norm(r) + np.finfo(np.float32).eps)",
                            "Call"
                        ],
                        [
                            "np.divide(r, theta + np.finfo(np.float32).eps)",
                            "Call"
                        ],
                        [
                            "np.divide(r, theta + np.finfo(np.float32).eps)",
                            "Call"
                        ],
                        [
                            "torch.div(r, theta)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "theta.view(-1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_146": {
                "variable": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q.view(-1, 4)",
                            "Call"
                        ],
                        [
                            "q.view(-1, 4)",
                            "Call"
                        ],
                        [
                            "q.view(-1, 4)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(q).contiguous()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(q).contiguous()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(q).cuda()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(q).contiguous()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(q).cuda()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(q).contiguous()",
                            "Call"
                        ],
                        [
                            "q.reshape(-1, 4)",
                            "Call"
                        ],
                        [
                            "np.zeros(4)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_147": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mul(r0, theta.view(-1, 1))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(r).contiguous()",
                            "Call"
                        ],
                        [
                            "r0 * theta",
                            "BinOp"
                        ],
                        [
                            "rx",
                            "variable"
                        ],
                        [
                            "ry",
                            "variable"
                        ],
                        [
                            "rz",
                            "variable"
                        ],
                        [
                            "np.zeros(3)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_151": {
                "variable": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q.view(-1, 4)",
                            "Call"
                        ],
                        [
                            "q.view(-1, 4)",
                            "Call"
                        ],
                        [
                            "q.view(-1, 4)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(q).contiguous()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(q).contiguous()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(q).cuda()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(q).contiguous()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(q).cuda()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(q).contiguous()",
                            "Call"
                        ],
                        [
                            "q.reshape(-1, 4)",
                            "Call"
                        ],
                        [
                            "np.zeros(4)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_152": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v.view(-1, 3)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(v).contiguous()",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_237": {
                "variable": {
                    "value": "rotMat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[w2 + x2 - y2 - z2, 2 * wz + 2 * xy, 2 * xz - 2 * wy, 2 * xy - 2 * wz, w2 - x2 + y2 - z2, 2 * wx + 2 * yz, 2 * wy + 2 * xz, 2 * yz - 2 * wx, w2 - x2 - y2 + z2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_237": {
                "variable": {
                    "value": "rotMat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "original_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q.shape",
                            "Attribute"
                        ],
                        [
                            "list(v.shape)",
                            "Call"
                        ],
                        [
                            "list(q.shape)",
                            "Call"
                        ],
                        [
                            "list(q.shape)",
                            "Call"
                        ],
                        [
                            "list(e.shape)",
                            "Call"
                        ],
                        [
                            "list(q.size())",
                            "Call"
                        ],
                        [
                            "list(e.shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_442": {
                "variable": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mul(r0, theta.view(-1, 1))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(r).contiguous()",
                            "Call"
                        ],
                        [
                            "r0 * theta",
                            "BinOp"
                        ],
                        [
                            "rx",
                            "variable"
                        ],
                        [
                            "ry",
                            "variable"
                        ],
                        [
                            "rz",
                            "variable"
                        ],
                        [
                            "np.zeros(3)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "div_446": {
                "variable": {
                    "value": "r0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mul(r0, theta.view(-1, 1))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(r).contiguous()",
                            "Call"
                        ],
                        [
                            "r0 * theta",
                            "BinOp"
                        ],
                        [
                            "rx",
                            "variable"
                        ],
                        [
                            "ry",
                            "variable"
                        ],
                        [
                            "rz",
                            "variable"
                        ],
                        [
                            "np.zeros(3)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * torch.atan2(sinhalftheta, coshalftheta)",
                            "BinOp"
                        ],
                        [
                            "torch.remainder(theta + 2 * np.pi, 2 * np.pi)",
                            "Call"
                        ],
                        [
                            "np.linalg.norm(e, axis=1).reshape(-1, 1)",
                            "Call"
                        ],
                        [
                            "2 * np.arctan2(sinhalftheta, coshalftheta)",
                            "BinOp"
                        ],
                        [
                            "np.mod(theta + 2 * np.pi, 2 * np.pi)",
                            "Call"
                        ],
                        [
                            "2 * np.pi - theta",
                            "BinOp"
                        ],
                        [
                            "np.arctan2(sintheta, costheta)",
                            "Call"
                        ],
                        [
                            "np.linalg.norm(r)",
                            "Call"
                        ],
                        [
                            "np.linalg.norm(r, axis=1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "torch.norm(r, 2, 2)",
                            "Call"
                        ],
                        [
                            "(theta + eps).unsqueeze(2)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_449": {
                "variable": {
                    "value": "r0x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "theta.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "theta.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "9",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_463": {
                "variable": {
                    "value": "mm_r0x_r0x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "theta.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "theta.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "9",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_474": {
                "variable": {
                    "value": "eye",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "theta.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "theta.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "9",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_34": {
                "tensors": {
                    "value": "(w, x, y, z)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "atan2_74": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2 * (q0 * q1 - q2 * q3)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "1 - 2 * (q1 * q1 + q2 * q2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "asin_75": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.clamp(2 * (q1 * q3 + q0 * q2), -1 + epsilon, 1 - epsilon)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "atan2_76": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2 * (q0 * q3 - q1 * q2)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "1 - 2 * (q2 * q2 + q3 * q3)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_100": {
                "tensors": {
                    "value": "(x, y, z)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_157": {
                "variable": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q.view(-1, 4)",
                            "Call"
                        ],
                        [
                            "q.view(-1, 4)",
                            "Call"
                        ],
                        [
                            "q.view(-1, 4)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(q).contiguous()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(q).contiguous()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(q).cuda()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(q).contiguous()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(q).cuda()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(q).contiguous()",
                            "Call"
                        ],
                        [
                            "q.reshape(-1, 4)",
                            "Call"
                        ],
                        [
                            "np.zeros(4)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_160": {
                "variable": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q.view(-1, 4)",
                            "Call"
                        ],
                        [
                            "q.view(-1, 4)",
                            "Call"
                        ],
                        [
                            "q.view(-1, 4)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(q).contiguous()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(q).contiguous()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(q).cuda()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(q).contiguous()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(q).cuda()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(q).contiguous()",
                            "Call"
                        ],
                        [
                            "q.reshape(-1, 4)",
                            "Call"
                        ],
                        [
                            "np.zeros(4)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_165": {
                "variable": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q.view(-1, 4)",
                            "Call"
                        ],
                        [
                            "q.view(-1, 4)",
                            "Call"
                        ],
                        [
                            "q.view(-1, 4)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(q).contiguous()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(q).contiguous()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(q).cuda()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(q).contiguous()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(q).cuda()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(q).contiguous()",
                            "Call"
                        ],
                        [
                            "q.reshape(-1, 4)",
                            "Call"
                        ],
                        [
                            "np.zeros(4)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_168": {
                "variable": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q.view(-1, 4)",
                            "Call"
                        ],
                        [
                            "q.view(-1, 4)",
                            "Call"
                        ],
                        [
                            "q.view(-1, 4)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(q).contiguous()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(q).contiguous()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(q).cuda()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(q).contiguous()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(q).cuda()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(q).contiguous()",
                            "Call"
                        ],
                        [
                            "q.reshape(-1, 4)",
                            "Call"
                        ],
                        [
                            "np.zeros(4)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_581": {
                "variable": {
                    "value": "origData",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "normalizedData.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": [
                        [
                            "normalizedData.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_mean.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "stack_659": {
                "tensors": {
                    "value": "bone_vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "permute_659": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_667": {
                "variable": {
                    "value": "dot_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bone_vector[:, :, i + 1].view(-1, 1, 3)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "bone_vector[:, :, i].view(-1, 3, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "norm_670": {
                "variable": {
                    "value": "norm_v1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bone_vector[:, :, i].view(-1, 3)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_671": {
                "variable": {
                    "value": "norm_v2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bone_vector[:, :, i + 1].view(-1, 3)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_675": {
                "tensors": {
                    "value": "local_angle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_681": {
                "variable": {
                    "value": "dot_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bone_vector1[:, :, i].view(-1, 1, 3)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "bone_vector2[:, :, i].view(-1, 3, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "norm_684": {
                "variable": {
                    "value": "norm_v1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bone_vector1[:, :, i].view(-1, 3)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_685": {
                "variable": {
                    "value": "norm_v2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bone_vector2[:, :, i].view(-1, 3)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_689": {
                "tensors": {
                    "value": "global_angle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_771": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "manual_seed_all_772": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_available_11": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "atan2_78": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2 * (q0 * q1 - q2 * q3)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "1 - 2 * (q1 * q1 + q3 * q3)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "atan2_79": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2 * (q0 * q2 - q1 * q3)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "1 - 2 * (q2 * q2 + q3 * q3)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "asin_80": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.clamp(2 * (q1 * q2 + q0 * q3), -1 + epsilon, 1 - epsilon)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "atan2_130": {
                "input": {
                    "value": "sinhalftheta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(q[:, 1:], 2, 1)",
                            "Call"
                        ],
                        [
                            "np.linalg.norm(q[1:])",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "coshalftheta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q[:, 0]",
                            "Subscript"
                        ],
                        [
                            "q[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "norm_218": {
                "input": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q.view(-1, 4)",
                            "Call"
                        ],
                        [
                            "q.view(-1, 4)",
                            "Call"
                        ],
                        [
                            "q.view(-1, 4)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(q).contiguous()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(q).contiguous()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(q).cuda()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(q).contiguous()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(q).cuda()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(q).contiguous()",
                            "Call"
                        ],
                        [
                            "q.reshape(-1, 4)",
                            "Call"
                        ],
                        [
                            "np.zeros(4)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "StepLR_613": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "step_size": {
                    "value": "hyperparameters['step_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "gamma": {
                    "value": "hyperparameters['gamma']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "last_epoch": {
                    "value": "iterations",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clamp_75": {
                "input": {
                    "value": "2 * (q1 * q3 + q0 * q2)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "-1 + epsilon",
                    "type": "BinOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1 - epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "asin_82": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.clamp(2 * (q0 * q1 + q2 * q3), -1 + epsilon, 1 - epsilon)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "atan2_83": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2 * (q0 * q2 - q1 * q3)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "1 - 2 * (q1 * q1 + q2 * q2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "atan2_84": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2 * (q0 * q3 - q1 * q2)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "1 - 2 * (q1 * q1 + q3 * q3)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "nonzero_219": {
                "input": {
                    "value": "check > 0.001",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "acos_673": {
                "input": {
                    "value": "dot_batch / (norm_v1 * norm_v2 + eps)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "acos_687": {
                "input": {
                    "value": "dot_batch / (norm_v1 * norm_v2 + eps)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_80": {
                "input": {
                    "value": "2 * (q1 * q2 + q0 * q3)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "-1 + epsilon",
                    "type": "BinOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1 - epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "atan2_86": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2 * (q0 * q1 + q2 * q3)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "1 - 2 * (q1 * q1 + q3 * q3)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "atan2_87": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2 * (q0 * q2 + q1 * q3)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "1 - 2 * (q2 * q2 + q3 * q3)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "asin_88": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.clamp(2 * (q0 * q3 - q1 * q2), -1 + epsilon, 1 - epsilon)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sin_480": {
                "input": {
                    "value": "expanded_theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.repeat(theta, 9, axis=1)",
                            "Call"
                        ],
                        [
                            "theta.expand(theta.shape[0], theta.shape[1], 9)",
                            "Call"
                        ]
                    ]
                }
            },
            "cos_480": {
                "input": {
                    "value": "expanded_theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.repeat(theta, 9, axis=1)",
                            "Call"
                        ],
                        [
                            "theta.expand(theta.shape[0], theta.shape[1], 9)",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_82": {
                "input": {
                    "value": "2 * (q0 * q1 + q2 * q3)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "-1 + epsilon",
                    "type": "BinOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1 - epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "asin_90": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.clamp(2 * (q0 * q1 - q2 * q3), -1 + epsilon, 1 - epsilon)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "atan2_91": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2 * (q1 * q3 + q0 * q2)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "1 - 2 * (q1 * q1 + q2 * q2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "atan2_92": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2 * (q1 * q2 + q0 * q3)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "1 - 2 * (q1 * q1 + q3 * q3)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_88": {
                "input": {
                    "value": "2 * (q0 * q3 - q1 * q2)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "-1 + epsilon",
                    "type": "BinOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1 - epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "atan2_94": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2 * (q0 * q1 + q2 * q3)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "1 - 2 * (q1 * q1 + q2 * q2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "asin_95": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.clamp(2 * (q0 * q2 - q1 * q3), -1 + epsilon, 1 - epsilon)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "atan2_96": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2 * (q0 * q3 + q1 * q2)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "1 - 2 * (q2 * q2 + q3 * q3)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_119": {
                "input": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q.view(-1, 4)",
                            "Call"
                        ],
                        [
                            "q.view(-1, 4)",
                            "Call"
                        ],
                        [
                            "q.view(-1, 4)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(q).contiguous()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(q).contiguous()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(q).cuda()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(q).contiguous()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(q).cuda()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(q).contiguous()",
                            "Call"
                        ],
                        [
                            "q.reshape(-1, 4)",
                            "Call"
                        ],
                        [
                            "np.zeros(4)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_90": {
                "input": {
                    "value": "2 * (q0 * q1 - q2 * q3)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "-1 + epsilon",
                    "type": "BinOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1 - epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_95": {
                "input": {
                    "value": "2 * (q0 * q2 - q1 * q3)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "-1 + epsilon",
                    "type": "BinOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1 - epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "visualization.py": {
        "torch": {
            "max_26": {
                "input": {
                    "value": "skeleton.offsets()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    }
}