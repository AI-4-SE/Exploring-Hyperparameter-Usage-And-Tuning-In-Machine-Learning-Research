{
    "main.py": {
        "sklearn": {
            "train_test_split_427": {
                "variable": {
                    "value": "(X, X_val, y, y_val)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "1 / 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "random_state": {
                    "value": "splitseed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args[5]",
                            "Subscript"
                        ],
                        [
                            "random.randint(0, 1024)",
                            "Call"
                        ],
                        [
                            "random.randint(0, 1024)",
                            "Call"
                        ],
                        [
                            "random.randint(0, 1024)",
                            "Call"
                        ],
                        [
                            "args[5]",
                            "Subscript"
                        ],
                        [
                            "random.randint(0, 1024)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "StandardScaler_429": {
                "variable": {
                    "value": "scaler",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "train_test_split_572": {
                "variable": {
                    "value": "(X, X_val, y, y_val)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "1 / 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "random_state": {
                    "value": "splitseed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args[5]",
                            "Subscript"
                        ],
                        [
                            "random.randint(0, 1024)",
                            "Call"
                        ],
                        [
                            "random.randint(0, 1024)",
                            "Call"
                        ],
                        [
                            "random.randint(0, 1024)",
                            "Call"
                        ],
                        [
                            "args[5]",
                            "Subscript"
                        ],
                        [
                            "random.randint(0, 1024)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LogisticRegression_435": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "C": {
                    "value": "Ci",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C",
                            "variable"
                        ]
                    ]
                }
            },
            "train_test_split_468": {
                "variable": {
                    "value": "(_, index)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "range(len(aid))",
                    "type": "Call",
                    "possible_values": []
                },
                "test_size": {
                    "value": "test_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 / 2",
                            "Method Argument"
                        ],
                        [
                            "1 / 2",
                            "Method Argument"
                        ]
                    ]
                },
                "random_state": {
                    "value": "splitseed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args[5]",
                            "Subscript"
                        ],
                        [
                            "random.randint(0, 1024)",
                            "Call"
                        ],
                        [
                            "random.randint(0, 1024)",
                            "Call"
                        ],
                        [
                            "random.randint(0, 1024)",
                            "Call"
                        ],
                        [
                            "args[5]",
                            "Subscript"
                        ],
                        [
                            "random.randint(0, 1024)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "train_test_split_481": {
                "variable": {
                    "value": "(_, data)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "test_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 / 2",
                            "Method Argument"
                        ],
                        [
                            "1 / 2",
                            "Method Argument"
                        ]
                    ]
                },
                "random_state": {
                    "value": "splitseed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args[5]",
                            "Subscript"
                        ],
                        [
                            "random.randint(0, 1024)",
                            "Call"
                        ],
                        [
                            "random.randint(0, 1024)",
                            "Call"
                        ],
                        [
                            "random.randint(0, 1024)",
                            "Call"
                        ],
                        [
                            "args[5]",
                            "Subscript"
                        ],
                        [
                            "random.randint(0, 1024)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "v_measure_score_574": {
                "labels_true": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "labels_pred": {
                    "value": "indices(X)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "load_330": {
                "variable": {
                    "value": "oldnet",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "best_net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_path_best_net(modeldir)",
                            "Call"
                        ],
                        [
                            "get_path_best_net(modeldir)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "manual_seed_24": {
                "seed": {
                    "value": "RS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "123",
                            "int"
                        ]
                    ]
                }
            },
            "load_460": {
                "variable": {
                    "value": "trans_sim_full",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "Path(cached_datadir) / 'trans_sim.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_463": {
                "variable": {
                    "value": "trans_sim_full",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "U.pairwise(S.stringsim, trans)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_484": {
                "obj": {
                    "value": "emb_sim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - torch.tensor(U.pairwise(dtw, embedding)).double().cpu()",
                            "BinOp"
                        ]
                    ]
                },
                "f": {
                    "value": "f\"{directory}{('/trigrams/' if input == 'trigrams' else '')}/emb_sim_{mode}.{test_size}.pt\"",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "load_974": {
                "variable": {
                    "value": "sim",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "f\"experiments/{arch}-{size}{('' if arch == 'vn' else '-q1')}-r0/{('trigrams' if input == 'trigrams' else '')}/{filename}\"",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "load_196": {
                "variable": {
                    "value": "oldnet",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "best_net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_path_best_net(modeldir)",
                            "Call"
                        ],
                        [
                            "get_path_best_net(modeldir)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_464": {
                "obj": {
                    "value": "trans_sim_full",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(Path(cached_datadir) / 'trans_sim.pt')",
                            "Call"
                        ],
                        [
                            "torch.tensor(U.pairwise(S.stringsim, trans)).double().to(device)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "Path(cached_datadir) / 'trans_sim.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_483": {
                "data": {
                    "value": "U.pairwise(dtw, embedding)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "speaker.py": {
        "sklearn": {
            "StandardScaler_115": {
                "variable": {
                    "value": "scaler",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "train_test_split_74": {
                "variable": {
                    "value": "(y, y_val, X, X_val)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "speakers",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "act",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "test_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 / 2",
                            "Method Argument"
                        ]
                    ]
                },
                "random_state": {
                    "value": "splitseed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "random.randint(0, 1024)",
                            "Call"
                        ]
                    ]
                }
            },
            "LogisticRegression_77": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "C": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "Method Argument"
                        ]
                    ]
                },
                "max_iter": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "train_test_split_92": {
                "variable": {
                    "value": "(X, X_val)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "act",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "test_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 / 2",
                            "Method Argument"
                        ]
                    ]
                },
                "random_state": {
                    "value": "splitseed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "random.randint(0, 1024)",
                            "Call"
                        ]
                    ]
                }
            },
            "LogisticRegression_93": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "C": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "Method Argument"
                        ]
                    ]
                },
                "max_iter": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "manual_seed_16": {
                "seed": {
                    "value": "SEED",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1234",
                            "int"
                        ]
                    ]
                }
            },
            "pad_sequence_102": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.utils.rnn.pad_sequence(x, batch_first=True, padding_value=0)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_103": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(y)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "manyruns.py": {
        "torch": {
            "set_device_13": {
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "prepare_flickr8k.py": {
        "torch": {
            "DataLoader_335": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "audio",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[sent['audio'] for sent in val if sent['audio_id'] in sentids]",
                            "ListComp"
                        ],
                        [
                            "pickle.load(open(f'{alignment_fpath}_cached_audio.pkl', 'rb'))",
                            "Call"
                        ],
                        [
                            "audio_features(paths, config)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "dataset.batch_audio",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_570": {
                "variable": {
                    "value": "oldnet",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}/net.{}.pt'.format(modeldir, best)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    }
}