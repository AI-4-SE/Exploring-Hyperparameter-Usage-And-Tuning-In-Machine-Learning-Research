{
    "CAEWrapper.py": {
        "tensorflow": {
            "placeholder_39": {
                "variable": {
                    "value": "input_x_ph",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[None, self.hparams.image_w, self.hparams.image_w, self.hparams.nb_img_channels]",
                            "List"
                        ]
                    ]
                },
                "name": {
                    "value": "input_x",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_40": {
                "variable": {
                    "value": "input_y_ph",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[None, self.hparams.image_w, self.hparams.image_w, self.hparams.nb_img_channels]",
                            "List"
                        ]
                    ]
                },
                "name": {
                    "value": "input_y",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_41": {
                "variable": {
                    "value": "dropout_ph",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "dropout_ph",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_42": {
                "variable": {
                    "value": "phase_train_ph",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "phase_train_ph",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_51": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.squared_difference(cae, input_y_ph)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "GPUOptions_58": {
                "variable": {
                    "value": "gpu_options",
                    "type": "variable",
                    "possible_values": []
                },
                "per_process_gpu_memory_fraction": {
                    "value": "self.hparams.gpu_mem_fraction",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_59": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "tf.ConfigProto(gpu_options=gpu_options)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Saver_65": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "self.hparams.max_to_keep",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GPUOptions_259": {
                "variable": {
                    "value": "gpu_options",
                    "type": "variable",
                    "possible_values": []
                },
                "per_process_gpu_memory_fraction": {
                    "value": "self.hparams.gpu_mem_fraction",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_260": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "tf.ConfigProto(gpu_options=gpu_options)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "import_meta_graph_338": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "meta_graph_or_file": {
                    "value": "checkpoint_file_path + '.meta'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_default_graph_344": {
                "variable": {
                    "value": "graph",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "squared_difference_51": {
                "x": {
                    "value": "cae",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cae_nn(input_x=input_x_ph, drop_rate=dropout_ph, phase_train=phase_train_ph)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "input_y_ph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(dtype=tf.float32, shape=input_shape, name='input_y')",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_62": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_collection_360": {
                "key": {
                    "value": "opt_name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ConfigProto_59": {
                "gpu_options": {
                    "value": "gpu_options",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.GPUOptions(per_process_gpu_memory_fraction=self.hparams.gpu_mem_fraction)",
                            "Call"
                        ],
                        [
                            "tf.GPUOptions(per_process_gpu_memory_fraction=self.hparams.gpu_mem_fraction)",
                            "Call"
                        ]
                    ]
                }
            },
            "ConfigProto_260": {
                "gpu_options": {
                    "value": "gpu_options",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.GPUOptions(per_process_gpu_memory_fraction=self.hparams.gpu_mem_fraction)",
                            "Call"
                        ],
                        [
                            "tf.GPUOptions(per_process_gpu_memory_fraction=self.hparams.gpu_mem_fraction)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "optimization_utils/optimizer_loss_options.py": {
        "tensorflow": {
            "GradientDescentOptimizer_64": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_mean_35": {
                "input_tensor": {
                    "value": "tf.squared_difference(y_pred, y_true)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_38": {
                "input_tensor": {
                    "value": "tf.abs(y_pred - y_true)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_50": {
                "multi_class_labels": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "RMSPropOptimizer_66": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "AdamOptimizer_68": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_mean_7": {
                "input_tensor": {
                    "value": "tf.squared_difference(y_pred, y_true)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_17": {
                "input_tensor": {
                    "value": "tf.squared_difference(y_pred, y_true)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squared_difference_35": {
                "x": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "abs_38": {
                "x": {
                    "value": "y_pred - y_true",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squared_difference_7": {
                "x": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "squared_difference_17": {
                "x": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_mean_22": {
                "input_tensor": {
                    "value": "tf.squared_difference(y_pred, y_true)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_27": {
                "input_tensor": {
                    "value": "tf.squared_difference(y_pred, y_true)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_41": {
                "input_tensor": {
                    "value": "tf.squared_difference(y_pred, y_true)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squared_difference_22": {
                "x": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "squared_difference_27": {
                "x": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "squared_difference_41": {
                "x": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "optimization_utils/perceptual_losses/loss_tester.py": {
        "tensorflow": {
            "Session_18": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_21": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, IM_SIZE, IM_SIZE, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "x",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_22": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, IM_SIZE, IM_SIZE, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "y",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_46": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "optimization_utils/perceptual_losses/lp_rnn_loss.py": {
        "tensorflow": {
            "constant_6": {
                "variable": {
                    "value": "GAUSS_FILTER",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "FILTER",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.asarray([[0.05, 0.25, 0.4, 0.25, 0.05]])",
                            "Call"
                        ],
                        [
                            "np.dot(FILTER.T, FILTER).reshape(5, 5, 1).astype(np.float32)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(5, 5, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_32": {
                "input_tensor": {
                    "value": "means",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "reduce_mean_44": {
                "input_tensor": {
                    "value": "means",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "conv2d_54": {
                "variable": {
                    "value": "blurred_img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prior_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "images - residual_img",
                            "BinOp"
                        ]
                    ]
                },
                "filters": {
                    "value": "filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "GAUSS_FILTER",
                            "Name"
                        ],
                        [
                            "sobel_filters()",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_69": {
                "value": {
                    "value": "filter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.asarray([left, right]).reshape(3, 3, 2, 1).astype(np.float32)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(3, 3, 2, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_30": {
                "input_tensor": {
                    "value": "tf.squared_difference(y_true_map, y_pred_map)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_42": {
                "input_tensor": {
                    "value": "tf.abs(tf.subtract(y_true_map, y_pred_map))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squared_difference_30": {
                "x": {
                    "value": "y_true_map",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "y_pred_map",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "abs_42": {
                "x": {
                    "value": "tf.subtract(y_true_map, y_pred_map)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "subtract_42": {
                "x": {
                    "value": "y_true_map",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "y_pred_map",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "optimization_utils/perceptual_losses/nlp_loss.py": {
        "tensorflow": {
            "constant_17": {
                "variable": {
                    "value": "GAUSS_FILTER",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "FILTER",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.asarray([[0.05, 0.25, 0.4, 0.25, 0.05]])",
                            "Call"
                        ],
                        [
                            "np.dot(FILTER.T, FILTER).reshape(5, 5, 1).astype(np.float32)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(5, 5, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pow_32": {
                "variable": {
                    "value": "y_true_pwr",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 / 2.6",
                            "BinOp"
                        ]
                    ]
                }
            },
            "pow_33": {
                "variable": {
                    "value": "y_pred_pwr",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 / 2.6",
                            "BinOp"
                        ]
                    ]
                }
            },
            "constant_36": {
                "variable": {
                    "value": "DN_filts",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "_dn_filters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_48": {
                "variable": {
                    "value": "DMOS_Lap_dn2",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "rr_aux",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "constant_84": {
                "variable": {
                    "value": "down_filter",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "FILTER",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.asarray([[0.05, 0.25, 0.4, 0.25, 0.05]])",
                            "Call"
                        ],
                        [
                            "np.dot(FILTER.T, FILTER).reshape(5, 5, 1).astype(np.float32)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(5, 5, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "conv2d_71": {
                "variable": {
                    "value": "a2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.abs(pyramid_level)",
                    "type": "Call",
                    "possible_values": []
                },
                "filters": {
                    "value": "dn_filter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dn_filts[level_i]",
                            "Subscript"
                        ]
                    ]
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "conv2d_94": {
                "variable": {
                    "value": "down_sampled",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "j",
                    "type": "variable",
                    "possible_values": [
                        [
                            "im",
                            "Name"
                        ],
                        [
                            "down_sampled",
                            "Name"
                        ]
                    ]
                },
                "filters": {
                    "value": "down_filter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(FILTER, shape=(5, 5, 1, 1))",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_98": {
                "variable": {
                    "value": "up_i",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "up_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "UpSampling2D(trainable=False)(down_sampled)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(up_i, down_filter, strides=[1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "down_filter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(FILTER, shape=(5, 5, 1, 1))",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_45": {
                "input_tensor": {
                    "value": "tf.squared_difference(y_ori_i, y_dist_i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_71": {
                "x": {
                    "value": "pyramid_level",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lap_pyramid[level_i]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "squared_difference_45": {
                "x": {
                    "value": "y_ori_i",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "y_dist_i",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "optimization_utils/perceptual_losses/vgg_loss.py": {
        "tensorflow": {
            "concat_64": {
                "variable": {
                    "value": "y_true_3_channel",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[y_true, y_true, y_true]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_65": {
                "variable": {
                    "value": "y_pred_3_channel",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[y_pred, y_pred, y_pred]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "conv2d_102": {
                "variable": {
                    "value": "conv_kernel_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "bias_add_103": {
                "variable": {
                    "value": "bias_layer_1",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "conv_kernel_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(input, w, [1, 2, 2, 1], padding='VALID')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Session_221": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_225": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, IM_SIZE, IM_SIZE, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "x",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_226": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, IM_SIZE, IM_SIZE, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "y",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_84": {
                "input_tensor": {
                    "value": "tf.squared_difference(vgg_y_true, vgg_y_pred)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squared_difference_84": {
                "x": {
                    "value": "vgg_y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_root_vgg_tf(y_true_3_channel, LAYER_BREAK) * rescale_factor",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "vgg_y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_root_vgg_tf(y_pred_3_channel, LAYER_BREAK) * rescale_factor",
                            "BinOp"
                        ]
                    ]
                }
            },
            "device_235": {
                "device_name": {
                    "value": "cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "tf_models/CAE.py": {
        "tensorflow": {
            "conv2d_17": {
                "variable": {
                    "value": "enc_1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "nn_input",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "batch_normalization_18": {
                "variable": {
                    "value": "enc_1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "enc_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(inputs=nn_input, filters=64, kernel_size=7, strides=[2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(inputs=enc_1, training=phase_train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(features=enc_1)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "phase_train",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "relu_19": {
                "variable": {
                    "value": "enc_1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "enc_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(inputs=nn_input, filters=64, kernel_size=7, strides=[2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(inputs=enc_1, training=phase_train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(features=enc_1)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_22": {
                "variable": {
                    "value": "enc_2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "enc_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(inputs=nn_input, filters=64, kernel_size=7, strides=[2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(inputs=enc_1, training=phase_train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(features=enc_1)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "batch_normalization_23": {
                "variable": {
                    "value": "enc_2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "enc_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(inputs=enc_1, filters=128, kernel_size=5, strides=[2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(inputs=enc_2, training=phase_train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(features=enc_2)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=enc_2, rate=drop_rate)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "phase_train",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "relu_24": {
                "variable": {
                    "value": "enc_2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "enc_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(inputs=enc_1, filters=128, kernel_size=5, strides=[2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(inputs=enc_2, training=phase_train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(features=enc_2)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=enc_2, rate=drop_rate)",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_25": {
                "variable": {
                    "value": "enc_2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "enc_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(inputs=enc_1, filters=128, kernel_size=5, strides=[2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(inputs=enc_2, training=phase_train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(features=enc_2)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=enc_2, rate=drop_rate)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "drop_rate",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "conv2d_28": {
                "variable": {
                    "value": "enc_3",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "enc_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(inputs=enc_1, filters=128, kernel_size=5, strides=[2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(inputs=enc_2, training=phase_train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(features=enc_2)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=enc_2, rate=drop_rate)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "batch_normalization_29": {
                "variable": {
                    "value": "enc_3",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "enc_3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(inputs=enc_2, filters=256, kernel_size=3, strides=[2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(inputs=enc_3, training=phase_train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(features=enc_3)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=enc_3, rate=drop_rate)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "phase_train",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "relu_30": {
                "variable": {
                    "value": "enc_3",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "enc_3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(inputs=enc_2, filters=256, kernel_size=3, strides=[2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(inputs=enc_3, training=phase_train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(features=enc_3)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=enc_3, rate=drop_rate)",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_31": {
                "variable": {
                    "value": "enc_3",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "enc_3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(inputs=enc_2, filters=256, kernel_size=3, strides=[2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(inputs=enc_3, training=phase_train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(features=enc_3)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=enc_3, rate=drop_rate)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "drop_rate",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "conv2d_34": {
                "variable": {
                    "value": "enc_4",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "enc_3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(inputs=enc_2, filters=256, kernel_size=3, strides=[2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(inputs=enc_3, training=phase_train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(features=enc_3)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=enc_3, rate=drop_rate)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "batch_normalization_35": {
                "variable": {
                    "value": "enc_4",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "enc_4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(inputs=enc_3, filters=256, kernel_size=3, strides=[2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(inputs=enc_4, training=phase_train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(features=enc_4)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=enc_4, rate=drop_rate, name='encoder_out')",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "phase_train",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "relu_36": {
                "variable": {
                    "value": "enc_4",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "enc_4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(inputs=enc_3, filters=256, kernel_size=3, strides=[2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(inputs=enc_4, training=phase_train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(features=enc_4)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=enc_4, rate=drop_rate, name='encoder_out')",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_37": {
                "variable": {
                    "value": "enc_4",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "enc_4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(inputs=enc_3, filters=256, kernel_size=3, strides=[2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(inputs=enc_4, training=phase_train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(features=enc_4)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=enc_4, rate=drop_rate, name='encoder_out')",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "drop_rate",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "encoder_out",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_47": {
                "variable": {
                    "value": "dec_1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "dec_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "UpSampling2D(size=(2, 2), data_format='channels_last')(enc_n)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=dec_1, filters=256, kernel_size=3, strides=[1, 1], padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(inputs=dec_1, training=phase_train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(features=dec_1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=dec_1, rate=drop_rate)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "batch_normalization_48": {
                "variable": {
                    "value": "dec_1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "dec_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "UpSampling2D(size=(2, 2), data_format='channels_last')(enc_n)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=dec_1, filters=256, kernel_size=3, strides=[1, 1], padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(inputs=dec_1, training=phase_train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(features=dec_1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=dec_1, rate=drop_rate)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "phase_train",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "relu_49": {
                "variable": {
                    "value": "dec_1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "dec_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "UpSampling2D(size=(2, 2), data_format='channels_last')(enc_n)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=dec_1, filters=256, kernel_size=3, strides=[1, 1], padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(inputs=dec_1, training=phase_train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(features=dec_1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=dec_1, rate=drop_rate)",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_50": {
                "variable": {
                    "value": "dec_1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "dec_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "UpSampling2D(size=(2, 2), data_format='channels_last')(enc_n)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=dec_1, filters=256, kernel_size=3, strides=[1, 1], padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(inputs=dec_1, training=phase_train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(features=dec_1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=dec_1, rate=drop_rate)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "drop_rate",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "conv2d_54": {
                "variable": {
                    "value": "dec_2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "dec_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "UpSampling2D(size=(2, 2), data_format='channels_last')(dec_1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=dec_2, filters=128, kernel_size=3, strides=[1, 1], padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(inputs=dec_2, training=phase_train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(features=dec_2)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=dec_2, rate=drop_rate)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "batch_normalization_55": {
                "variable": {
                    "value": "dec_2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "dec_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "UpSampling2D(size=(2, 2), data_format='channels_last')(dec_1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=dec_2, filters=128, kernel_size=3, strides=[1, 1], padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(inputs=dec_2, training=phase_train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(features=dec_2)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=dec_2, rate=drop_rate)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "phase_train",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "relu_56": {
                "variable": {
                    "value": "dec_2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "dec_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "UpSampling2D(size=(2, 2), data_format='channels_last')(dec_1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=dec_2, filters=128, kernel_size=3, strides=[1, 1], padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(inputs=dec_2, training=phase_train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(features=dec_2)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=dec_2, rate=drop_rate)",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_57": {
                "variable": {
                    "value": "dec_2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "dec_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "UpSampling2D(size=(2, 2), data_format='channels_last')(dec_1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=dec_2, filters=128, kernel_size=3, strides=[1, 1], padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(inputs=dec_2, training=phase_train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(features=dec_2)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=dec_2, rate=drop_rate)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "drop_rate",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "conv2d_61": {
                "variable": {
                    "value": "dec_3",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "dec_3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "UpSampling2D(size=(2, 2), data_format='channels_last')(dec_2)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=dec_3, filters=64, kernel_size=5, strides=[1, 1], padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(inputs=dec_3, training=phase_train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(features=dec_3)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=dec_3, rate=drop_rate)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "batch_normalization_62": {
                "variable": {
                    "value": "dec_3",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "dec_3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "UpSampling2D(size=(2, 2), data_format='channels_last')(dec_2)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=dec_3, filters=64, kernel_size=5, strides=[1, 1], padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(inputs=dec_3, training=phase_train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(features=dec_3)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=dec_3, rate=drop_rate)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "phase_train",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "relu_63": {
                "variable": {
                    "value": "dec_3",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "dec_3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "UpSampling2D(size=(2, 2), data_format='channels_last')(dec_2)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=dec_3, filters=64, kernel_size=5, strides=[1, 1], padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(inputs=dec_3, training=phase_train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(features=dec_3)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=dec_3, rate=drop_rate)",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_64": {
                "variable": {
                    "value": "dec_3",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "dec_3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "UpSampling2D(size=(2, 2), data_format='channels_last')(dec_2)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=dec_3, filters=64, kernel_size=5, strides=[1, 1], padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(inputs=dec_3, training=phase_train)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(features=dec_3)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(inputs=dec_3, rate=drop_rate)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "drop_rate",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "conv2d_68": {
                "variable": {
                    "value": "dec_4",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "dec_4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "UpSampling2D(size=(2, 2), data_format='channels_last')(dec_3)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=dec_4, filters=1, kernel_size=7, strides=[1, 1], padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(inputs=dec_4, name='cae_out', training=phase_train)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "batch_normalization_71": {
                "variable": {
                    "value": "dec_4",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "dec_4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "UpSampling2D(size=(2, 2), data_format='channels_last')(dec_3)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=dec_4, filters=1, kernel_size=7, strides=[1, 1], padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(inputs=dec_4, name='cae_out', training=phase_train)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "cae_out",
                    "type": "str",
                    "possible_values": []
                },
                "training": {
                    "value": "phase_train",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_15": {
                "name_or_scope": {
                    "value": "encoder_nn",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_43": {
                "name_or_scope": {
                    "value": "decoder_nn",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_to_collection_72": {
                "name": {
                    "value": "predict_opt",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "dec_4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "UpSampling2D(size=(2, 2), data_format='channels_last')(dec_3)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=dec_4, filters=1, kernel_size=7, strides=[1, 1], padding='same')",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(inputs=dec_4, name='cae_out', training=phase_train)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}