{
    "src/components/action_selectors.py": {
        "torch": {
            "rand_like_60": {
                "variable": {
                    "value": "random_numbers",
                    "possible_values": []
                },
                "input": {
                    "value": "agent_inputs[:, :, 0]",
                    "possible_values": []
                }
            },
            "Categorical_62": {
                "variable": {
                    "value": "random_actions",
                    "possible_values": []
                },
                "probs": {
                    "value": "avail_actions.float()",
                    "possible_values": []
                }
            },
            "Categorical_27": {
                "variable": {
                    "value": "picked_actions",
                    "possible_values": []
                },
                "probs": {
                    "value": "masked_policies",
                    "possible_values": [
                        [
                            "agent_inputs.clone()",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_29": {
                "input": {
                    "value": "avail_actions",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "possible_values": []
                },
                "index": {
                    "value": "picked_actions.unsqueeze(2)",
                    "possible_values": []
                }
            },
            "gather_65": {
                "input": {
                    "value": "avail_actions",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "possible_values": []
                },
                "index": {
                    "value": "picked_actions.unsqueeze(2)",
                    "possible_values": []
                }
            },
            "gather_66": {
                "input": {
                    "value": "avail_actions",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "possible_values": []
                },
                "index": {
                    "value": "random_actions.unsqueeze(2)",
                    "possible_values": []
                }
            },
            "gather_67": {
                "input": {
                    "value": "avail_actions",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "possible_values": []
                },
                "index": {
                    "value": "masked_q_values.max(dim=2)[1].unsqueeze(2)",
                    "possible_values": []
                }
            },
            "gather_68": {
                "input": {
                    "value": "avail_actions",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "possible_values": []
                },
                "index": {
                    "value": "picked_actions.unsqueeze(2)",
                    "possible_values": []
                }
            }
        }
    },
    "src/components/episode_buffer.py": {
        "torch": {
            "tensor_103": {
                "variable": {
                    "value": "v",
                    "possible_values": []
                },
                "data": {
                    "value": "v",
                    "possible_values": [
                        [
                            "th.tensor(v, dtype=dtype, device=self.device)",
                            "Call"
                        ],
                        [
                            "target[k][_slices]",
                            "Subscript"
                        ],
                        [
                            "transform.transform(v)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "possible_values": [
                        [
                            "self.scheme[k]['dtype']",
                            "Subscript"
                        ],
                        [
                            "field_info.get('dtype', th.float32)",
                            "Call"
                        ],
                        [
                            "self.scheme[k].get('dtype', th.float32)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "self.device",
                    "possible_values": []
                }
            },
            "zeros_73": {
                "variable": {
                    "value": "self.data.episode_data[field_key]",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, *shape)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "possible_values": [
                        [
                            "self.scheme[k]['dtype']",
                            "Subscript"
                        ],
                        [
                            "field_info.get('dtype', th.float32)",
                            "Call"
                        ],
                        [
                            "self.scheme[k].get('dtype', th.float32)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "self.device",
                    "possible_values": []
                }
            },
            "zeros_75": {
                "variable": {
                    "value": "self.data.transition_data[field_key]",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, max_seq_length, *shape)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "possible_values": [
                        [
                            "self.scheme[k]['dtype']",
                            "Subscript"
                        ],
                        [
                            "field_info.get('dtype', th.float32)",
                            "Call"
                        ],
                        [
                            "self.scheme[k].get('dtype', th.float32)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "self.device",
                    "possible_values": []
                }
            },
            "sum_198": {
                "input": {
                    "value": "self.data.transition_data['filled']",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "max_198": {
                "input": {
                    "value": "0",
                    "possible_values": []
                }
            }
        }
    },
    "src/components/transforms.py": {
        "torch": {}
    },
    "src/controllers/basic_controller.py": {
        "torch": {
            "cat_91": {
                "variable": {
                    "value": "inputs",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x.reshape(bs * self.n_agents, -1) for x in inputs]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "softmax_39": {
                "variable": {
                    "value": "agent_outs",
                    "possible_values": []
                },
                "input": {
                    "value": "agent_outs",
                    "possible_values": [
                        [
                            "th.nn.functional.softmax(agent_outs, dim=-1)",
                            "Call"
                        ],
                        [
                            "(1 - self.action_selector.epsilon) * agent_outs + th.ones_like(agent_outs) * self.action_selector.epsilon / epsilon_action_num",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "save_69": {
                "obj": {
                    "value": "self.agent.state_dict()",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}/agent.th'.format(path)",
                    "possible_values": []
                }
            },
            "load_72": {
                "f": {
                    "value": "'{}/agent.th'.format(path)",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "possible_values": []
                }
            },
            "eye_89": {
                "n": {
                    "value": "self.n_agents",
                    "possible_values": []
                },
                "device": {
                    "value": "batch.device",
                    "possible_values": []
                }
            },
            "unsqueeze_89": {
                "input": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "zeros_like_85": {
                "input": {
                    "value": "batch['actions_onehot'][:, t]",
                    "possible_values": []
                }
            },
            "ones_like_48": {
                "input": {
                    "value": "agent_outs",
                    "possible_values": [
                        [
                            "th.nn.functional.softmax(agent_outs, dim=-1)",
                            "Call"
                        ],
                        [
                            "(1 - self.action_selector.epsilon) * agent_outs + th.ones_like(agent_outs) * self.action_selector.epsilon / epsilon_action_num",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "src/controllers/separate_controller.py": {
        "torch": {
            "cat_112": {
                "variable": {
                    "value": "inputs",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x.reshape(bs * self.n_agents, -1) for x in inputs]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "softmax_49": {
                "variable": {
                    "value": "agent_outs",
                    "possible_values": []
                },
                "input": {
                    "value": "agent_outs",
                    "possible_values": [
                        [
                            "th.nn.functional.softmax(agent_outs, dim=-1)",
                            "Call"
                        ],
                        [
                            "(1 - self.action_selector.epsilon) * agent_outs + th.ones_like(agent_outs) * self.action_selector.epsilon / epsilon_action_num",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "zeros_69": {
                "variable": {
                    "value": "self.hidden_states",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "possible_values": []
                },
                "out": {
                    "value": "self.n_agents",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.args.rnn_hidden_dim",
                    "possible_values": []
                }
            },
            "zeros_72": {
                "variable": {
                    "value": "self.hidden_states",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "possible_values": []
                },
                "out": {
                    "value": "self.n_agents",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.args.rnn_hidden_dim",
                    "possible_values": []
                }
            },
            "save_89": {
                "obj": {
                    "value": "self.agent.state_dict()",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}/agent.th'.format(path)",
                    "possible_values": []
                }
            },
            "load_92": {
                "f": {
                    "value": "'{}/agent.th'.format(path)",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "possible_values": []
                }
            },
            "eye_109": {
                "n": {
                    "value": "self.n_agents",
                    "possible_values": []
                },
                "device": {
                    "value": "batch.device",
                    "possible_values": []
                }
            },
            "unsqueeze_109": {
                "input": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "zeros_like_104": {
                "input": {
                    "value": "batch['actions_onehot'][:, t]",
                    "possible_values": []
                }
            },
            "ones_like_58": {
                "input": {
                    "value": "agent_outs",
                    "possible_values": [
                        [
                            "th.nn.functional.softmax(agent_outs, dim=-1)",
                            "Call"
                        ],
                        [
                            "(1 - self.action_selector.epsilon) * agent_outs + th.ones_like(agent_outs) * self.action_selector.epsilon / epsilon_action_num",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "src/learners/coma_learner.py": {
        "torch": {
            "RMSprop_29": {
                "variable": {
                    "value": "self.agent_optimiser",
                    "possible_values": []
                },
                "params": {
                    "value": "self.agent_params",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "possible_values": []
                },
                "alpha": {
                    "value": "args.optim_alpha",
                    "possible_values": []
                },
                "eps": {
                    "value": "args.optim_eps",
                    "possible_values": []
                }
            },
            "RMSprop_30": {
                "variable": {
                    "value": "self.critic_optimiser",
                    "possible_values": []
                },
                "params": {
                    "value": "self.critic_params",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.critic_lr",
                    "possible_values": []
                },
                "alpha": {
                    "value": "args.optim_alpha",
                    "possible_values": []
                },
                "eps": {
                    "value": "args.optim_eps",
                    "possible_values": []
                }
            },
            "stack_57": {
                "variable": {
                    "value": "mac_out",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mac_out",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "th.stack(mac_out, dim=1)",
                            "Call"
                        ],
                        [
                            "mac_out / mac_out.sum(dim=-1, keepdim=True)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "gather_70": {
                "variable": {
                    "value": "q_taken",
                    "possible_values": []
                },
                "input": {
                    "value": "q_vals",
                    "possible_values": [
                        [
                            "q_vals.reshape(-1, self.n_actions)",
                            "Call"
                        ],
                        [
                            "th.zeros_like(target_q_vals)[:, :-1]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "index": {
                    "value": "actions.reshape(-1, 1)",
                    "possible_values": []
                }
            },
            "squeeze_70": {
                "variable": {
                    "value": "q_taken",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "gather_71": {
                "variable": {
                    "value": "pi_taken",
                    "possible_values": []
                },
                "input": {
                    "value": "pi",
                    "possible_values": [
                        [
                            "mac_out.view(-1, self.n_actions)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "index": {
                    "value": "actions.reshape(-1, 1)",
                    "possible_values": []
                }
            },
            "squeeze_71": {
                "variable": {
                    "value": "pi_taken",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "log_73": {
                "variable": {
                    "value": "log_pi_taken",
                    "possible_values": []
                },
                "input": {
                    "value": "pi_taken",
                    "possible_values": [
                        [
                            "th.gather(pi, dim=1, index=actions.reshape(-1, 1)).squeeze(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_grad_norm__82": {
                "variable": {
                    "value": "grad_norm",
                    "possible_values": []
                },
                "parameters": {
                    "value": "self.agent_params",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.args.grad_norm_clip",
                    "possible_values": []
                }
            },
            "gather_103": {
                "variable": {
                    "value": "targets_taken",
                    "possible_values": []
                },
                "input": {
                    "value": "target_q_vals",
                    "possible_values": [
                        [
                            "self.target_critic(batch)[:, :]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "possible_values": []
                },
                "index": {
                    "value": "actions",
                    "possible_values": [
                        [
                            "batch['actions'][:, :]",
                            "Subscript"
                        ],
                        [
                            "actions[:, :-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "squeeze_103": {
                "variable": {
                    "value": "targets_taken",
                    "possible_values": []
                },
                "input": {
                    "value": "3",
                    "possible_values": []
                }
            },
            "gather_125": {
                "variable": {
                    "value": "q_taken",
                    "possible_values": []
                },
                "input": {
                    "value": "q_t",
                    "possible_values": [
                        [
                            "self.critic(batch, t)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "possible_values": []
                },
                "index": {
                    "value": "actions[:, t:t + 1]",
                    "possible_values": [
                        [
                            "batch['actions'][:, :]",
                            "Subscript"
                        ],
                        [
                            "actions[:, :-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "squeeze_125": {
                "variable": {
                    "value": "q_taken",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "clip_grad_norm__137": {
                "variable": {
                    "value": "grad_norm",
                    "possible_values": []
                },
                "parameters": {
                    "value": "self.critic_params",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.args.grad_norm_clip",
                    "possible_values": []
                }
            },
            "save_161": {
                "obj": {
                    "value": "self.critic.state_dict()",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}/critic.th'.format(path)",
                    "possible_values": []
                }
            },
            "save_162": {
                "obj": {
                    "value": "self.agent_optimiser.state_dict()",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}/agent_opt.th'.format(path)",
                    "possible_values": []
                }
            },
            "save_163": {
                "obj": {
                    "value": "self.critic_optimiser.state_dict()",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}/critic_opt.th'.format(path)",
                    "possible_values": []
                }
            },
            "zeros_like_108": {
                "input": {
                    "value": "target_q_vals",
                    "possible_values": [
                        [
                            "self.target_critic(batch)[:, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "load_167": {
                "f": {
                    "value": "'{}/critic.th'.format(path)",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "possible_values": []
                }
            },
            "load_170": {
                "f": {
                    "value": "'{}/agent_opt.th'.format(path)",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "possible_values": []
                }
            },
            "load_171": {
                "f": {
                    "value": "'{}/critic_opt.th'.format(path)",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "possible_values": []
                }
            }
        }
    },
    "src/learners/latent_q_learner.py": {
        "torch": {
            "RMSprop_36": {
                "variable": {
                    "value": "self.optimiser",
                    "possible_values": []
                },
                "params": {
                    "value": "self.params",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "possible_values": []
                },
                "alpha": {
                    "value": "args.optim_alpha",
                    "possible_values": []
                },
                "eps": {
                    "value": "args.optim_eps",
                    "possible_values": []
                }
            },
            "stack_76": {
                "variable": {
                    "value": "mac_out",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mac_out",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "th.stack(mac_out, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "gather_84": {
                "variable": {
                    "value": "chosen_action_qvals",
                    "possible_values": []
                },
                "input": {
                    "value": "mac_out[:, :-1]",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "possible_values": []
                },
                "index": {
                    "value": "actions",
                    "possible_values": [
                        [
                            "batch['actions'][:, :-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "squeeze_84": {
                "variable": {
                    "value": "chosen_action_qvals",
                    "possible_values": []
                },
                "input": {
                    "value": "3",
                    "possible_values": []
                }
            },
            "stack_98": {
                "variable": {
                    "value": "target_mac_out",
                    "possible_values": []
                },
                "tensors": {
                    "value": "target_mac_out[1:]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "clip_grad_norm__147": {
                "variable": {
                    "value": "grad_norm",
                    "possible_values": []
                },
                "parameters": {
                    "value": "self.params",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.args.grad_norm_clip",
                    "possible_values": []
                }
            },
            "gather_112": {
                "variable": {
                    "value": "target_max_qvals",
                    "possible_values": []
                },
                "input": {
                    "value": "target_mac_out",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "th.stack(target_mac_out[1:], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "possible_values": []
                },
                "index": {
                    "value": "cur_max_actions",
                    "possible_values": [
                        [
                            "mac_out_detach[:, 1:].max(dim=3, keepdim=True)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "squeeze_112": {
                "variable": {
                    "value": "target_max_qvals",
                    "possible_values": []
                },
                "input": {
                    "value": "3",
                    "possible_values": []
                }
            },
            "save_213": {
                "obj": {
                    "value": "self.optimiser.state_dict()",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}/opt.th'.format(path)",
                    "possible_values": []
                }
            },
            "save_212": {
                "obj": {
                    "value": "self.mixer.state_dict()",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}/mixer.th'.format(path)",
                    "possible_values": []
                }
            },
            "load_221": {
                "f": {
                    "value": "'{}/opt.th'.format(path)",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "possible_values": []
                }
            },
            "load_220": {
                "f": {
                    "value": "'{}/mixer.th'.format(path)",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "possible_values": []
                }
            }
        }
    },
    "src/learners/q_learner.py": {
        "torch": {
            "RMSprop_30": {
                "variable": {
                    "value": "self.optimiser",
                    "possible_values": []
                },
                "params": {
                    "value": "self.params",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "possible_values": []
                },
                "alpha": {
                    "value": "args.optim_alpha",
                    "possible_values": []
                },
                "eps": {
                    "value": "args.optim_eps",
                    "possible_values": []
                }
            },
            "stack_54": {
                "variable": {
                    "value": "mac_out",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mac_out",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "th.stack(mac_out, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "gather_58": {
                "variable": {
                    "value": "chosen_action_qvals",
                    "possible_values": []
                },
                "input": {
                    "value": "mac_out[:, :-1]",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "possible_values": []
                },
                "index": {
                    "value": "actions",
                    "possible_values": [
                        [
                            "batch['actions'][:, :-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "squeeze_58": {
                "variable": {
                    "value": "chosen_action_qvals",
                    "possible_values": []
                },
                "input": {
                    "value": "3",
                    "possible_values": []
                }
            },
            "stack_71": {
                "variable": {
                    "value": "target_mac_out",
                    "possible_values": []
                },
                "tensors": {
                    "value": "target_mac_out[1:]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "clip_grad_norm__114": {
                "variable": {
                    "value": "grad_norm",
                    "possible_values": []
                },
                "parameters": {
                    "value": "self.params",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.args.grad_norm_clip",
                    "possible_values": []
                }
            },
            "gather_85": {
                "variable": {
                    "value": "target_max_qvals",
                    "possible_values": []
                },
                "input": {
                    "value": "target_mac_out",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "th.stack(target_mac_out[1:], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "possible_values": []
                },
                "index": {
                    "value": "cur_max_actions",
                    "possible_values": [
                        [
                            "mac_out_detach[:, 1:].max(dim=3, keepdim=True)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "squeeze_85": {
                "variable": {
                    "value": "target_max_qvals",
                    "possible_values": []
                },
                "input": {
                    "value": "3",
                    "possible_values": []
                }
            },
            "save_147": {
                "obj": {
                    "value": "self.optimiser.state_dict()",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}/opt.th'.format(path)",
                    "possible_values": []
                }
            },
            "save_146": {
                "obj": {
                    "value": "self.mixer.state_dict()",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}/mixer.th'.format(path)",
                    "possible_values": []
                }
            },
            "load_155": {
                "f": {
                    "value": "'{}/opt.th'.format(path)",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "possible_values": []
                }
            },
            "load_154": {
                "f": {
                    "value": "'{}/mixer.th'.format(path)",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "possible_values": []
                }
            }
        }
    },
    "src/main.py": {
        "torch": {
            "manual_seed_30": {
                "seed": {
                    "value": "config['seed']",
                    "possible_values": []
                }
            }
        }
    },
    "src/modules/agents/latent_ce_dis_rnn_agent.py": {
        "torch": {
            "LatentCEDisRNNAgent_11": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.args": {
                    "value": "args",
                    "possible_values": []
                },
                "self.input_shape": {
                    "value": "input_shape",
                    "possible_values": []
                },
                "self.embed_fc_input_size": {
                    "value": "input_shape",
                    "possible_values": []
                },
                "LeakyReLU_24": {
                    "variable": {
                        "value": "activation_func",
                        "possible_values": []
                    },
                    "params": {
                        "value": "default",
                        "possible_values": []
                    }
                },
                "Sequential_26": {
                    "variable": {
                        "value": "self.embed_net",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "nn.Linear(self.embed_fc_input_size, NN_HIDDEN_SIZE)",
                        "possible_values": []
                    }
                },
                "Sequential_31": {
                    "variable": {
                        "value": "self.inference_net",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "nn.Linear(args.rnn_hidden_dim + input_shape, NN_HIDDEN_SIZE)",
                        "possible_values": []
                    }
                },
                "rand_36": {
                    "variable": {
                        "value": "self.latent",
                        "possible_values": []
                    },
                    "*size": {
                        "value": "args.n_agents",
                        "possible_values": []
                    },
                    "out": {
                        "value": "args.latent_dim * 2",
                        "possible_values": []
                    }
                },
                "rand_37": {
                    "variable": {
                        "value": "self.latent_infer",
                        "possible_values": []
                    },
                    "*size": {
                        "value": "args.n_agents",
                        "possible_values": []
                    },
                    "out": {
                        "value": "args.latent_dim * 2",
                        "possible_values": []
                    }
                },
                "Sequential_39": {
                    "variable": {
                        "value": "self.latent_net",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "nn.Linear(args.latent_dim, NN_HIDDEN_SIZE)",
                        "possible_values": []
                    }
                },
                "Linear_43": {
                    "variable": {
                        "value": "self.fc1",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "input_shape",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "args.rnn_hidden_dim",
                        "possible_values": []
                    }
                },
                "GRUCell_44": {
                    "variable": {
                        "value": "self.rnn",
                        "possible_values": []
                    },
                    "input_size": {
                        "value": "args.rnn_hidden_dim",
                        "possible_values": []
                    },
                    "hidden_size": {
                        "value": "args.rnn_hidden_dim",
                        "possible_values": []
                    }
                },
                "Linear_46": {
                    "variable": {
                        "value": "self.fc2_w_nn",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "NN_HIDDEN_SIZE",
                        "possible_values": [
                            [
                                "args.NN_HIDDEN_SIZE",
                                "Attribute"
                            ]
                        ]
                    },
                    "out_features": {
                        "value": "args.rnn_hidden_dim * args.n_actions",
                        "possible_values": []
                    }
                },
                "Linear_47": {
                    "variable": {
                        "value": "self.fc2_b_nn",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "NN_HIDDEN_SIZE",
                        "possible_values": [
                            [
                                "args.NN_HIDDEN_SIZE",
                                "Attribute"
                            ]
                        ]
                    },
                    "out_features": {
                        "value": "args.n_actions",
                        "possible_values": []
                    }
                },
                "Sequential_50": {
                    "variable": {
                        "value": "self.dis_net",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "nn.Linear(args.latent_dim * 2, NN_HIDDEN_SIZE)",
                        "possible_values": []
                    }
                },
                "rand_55": {
                    "variable": {
                        "value": "self.mi",
                        "possible_values": []
                    },
                    "*size": {
                        "value": "args.n_agents * args.n_agents",
                        "possible_values": []
                    }
                },
                "rand_56": {
                    "variable": {
                        "value": "self.dissimilarity",
                        "possible_values": []
                    },
                    "*size": {
                        "value": "args.n_agents * args.n_agents",
                        "possible_values": []
                    }
                }
            },
            "clamp_90": {
                "variable": {
                    "value": "self.latent[:, -self.latent_dim:]",
                    "possible_values": []
                },
                "input": {
                    "value": "th.exp(self.latent[:, -self.latent_dim:])",
                    "possible_values": []
                },
                "min": {
                    "value": "self.args.var_floor",
                    "possible_values": []
                }
            },
            "Normal_96": {
                "variable": {
                    "value": "gaussian_embed",
                    "possible_values": []
                },
                "loc": {
                    "value": "latent_embed[:, :self.latent_dim]",
                    "possible_values": []
                },
                "scale": {
                    "value": "latent_embed[:, self.latent_dim:] ** (1 / 2)",
                    "possible_values": []
                }
            },
            "tensor_99": {
                "variable": {
                    "value": "c_dis_loss",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "possible_values": []
                }
            },
            "tensor_100": {
                "variable": {
                    "value": "ce_loss",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "possible_values": []
                }
            },
            "tensor_101": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "possible_values": []
                }
            },
            "relu_179": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(inputs)",
                    "possible_values": []
                }
            },
            "clamp_108": {
                "variable": {
                    "value": "self.latent_infer[:, -self.latent_dim:]",
                    "possible_values": []
                },
                "input": {
                    "value": "th.exp(self.latent_infer[:, -self.latent_dim:])",
                    "possible_values": []
                },
                "min": {
                    "value": "self.args.var_floor",
                    "possible_values": []
                }
            },
            "Normal_110": {
                "variable": {
                    "value": "gaussian_infer",
                    "possible_values": []
                },
                "loc": {
                    "value": "self.latent_infer[:, :self.latent_dim]",
                    "possible_values": []
                },
                "scale": {
                    "value": "self.latent_infer[:, self.latent_dim:] ** (1 / 2)",
                    "possible_values": []
                }
            },
            "clamp_114": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "th.tensor(0.0).to(self.args.device)",
                            "Call"
                        ],
                        [
                            "gaussian_embed.entropy().sum(dim=-1).mean() * self.args.h_loss_weight + kl_divergence(gaussian_embed, gaussian_infer).sum(dim=-1).mean() * self.args.kl_loss_weight",
                            "BinOp"
                        ],
                        [
                            "th.clamp(loss, max=2000.0)",
                            "Call"
                        ],
                        [
                            "ce_loss",
                            "Name"
                        ],
                        [
                            "ce_loss + c_dis_loss",
                            "BinOp"
                        ]
                    ]
                },
                "max": {
                    "value": "2000.0",
                    "possible_values": []
                }
            },
            "log_116": {
                "variable": {
                    "value": "ce_loss",
                    "possible_values": []
                },
                "input": {
                    "value": "1 + th.exp(loss)",
                    "possible_values": []
                }
            },
            "Linear_26": {
                "in_features": {
                    "value": "self.embed_fc_input_size",
                    "possible_values": []
                },
                "out_features": {
                    "value": "NN_HIDDEN_SIZE",
                    "possible_values": [
                        [
                            "args.NN_HIDDEN_SIZE",
                            "Attribute"
                        ]
                    ]
                }
            },
            "BatchNorm1d_27": {
                "num_features": {
                    "value": "NN_HIDDEN_SIZE",
                    "possible_values": [
                        [
                            "args.NN_HIDDEN_SIZE",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Linear_29": {
                "in_features": {
                    "value": "NN_HIDDEN_SIZE",
                    "possible_values": [
                        [
                            "args.NN_HIDDEN_SIZE",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "args.latent_dim * 2",
                    "possible_values": []
                }
            },
            "Linear_31": {
                "in_features": {
                    "value": "args.rnn_hidden_dim + input_shape",
                    "possible_values": []
                },
                "out_features": {
                    "value": "NN_HIDDEN_SIZE",
                    "possible_values": [
                        [
                            "args.NN_HIDDEN_SIZE",
                            "Attribute"
                        ]
                    ]
                }
            },
            "BatchNorm1d_32": {
                "num_features": {
                    "value": "NN_HIDDEN_SIZE",
                    "possible_values": [
                        [
                            "args.NN_HIDDEN_SIZE",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Linear_34": {
                "in_features": {
                    "value": "NN_HIDDEN_SIZE",
                    "possible_values": [
                        [
                            "args.NN_HIDDEN_SIZE",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "args.latent_dim * 2",
                    "possible_values": []
                }
            },
            "Linear_39": {
                "in_features": {
                    "value": "args.latent_dim",
                    "possible_values": []
                },
                "out_features": {
                    "value": "NN_HIDDEN_SIZE",
                    "possible_values": [
                        [
                            "args.NN_HIDDEN_SIZE",
                            "Attribute"
                        ]
                    ]
                }
            },
            "BatchNorm1d_40": {
                "num_features": {
                    "value": "NN_HIDDEN_SIZE",
                    "possible_values": [
                        [
                            "args.NN_HIDDEN_SIZE",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Linear_50": {
                "in_features": {
                    "value": "args.latent_dim * 2",
                    "possible_values": []
                },
                "out_features": {
                    "value": "NN_HIDDEN_SIZE",
                    "possible_values": [
                        [
                            "args.NN_HIDDEN_SIZE",
                            "Attribute"
                        ]
                    ]
                }
            },
            "BatchNorm1d_51": {
                "num_features": {
                    "value": "NN_HIDDEN_SIZE",
                    "possible_values": [
                        [
                            "args.NN_HIDDEN_SIZE",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Linear_53": {
                "in_features": {
                    "value": "NN_HIDDEN_SIZE",
                    "possible_values": [
                        [
                            "args.NN_HIDDEN_SIZE",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "exp_90": {
                "input": {
                    "value": "self.latent[:, -self.latent_dim:]",
                    "possible_values": []
                }
            },
            "zeros_like_167": {
                "variable": {
                    "value": "c_dis_loss",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "th.tensor(0.0).to(self.args.device)",
                            "Call"
                        ],
                        [
                            "gaussian_embed.entropy().sum(dim=-1).mean() * self.args.h_loss_weight + kl_divergence(gaussian_embed, gaussian_infer).sum(dim=-1).mean() * self.args.kl_loss_weight",
                            "BinOp"
                        ],
                        [
                            "th.clamp(loss, max=2000.0)",
                            "Call"
                        ],
                        [
                            "ce_loss",
                            "Name"
                        ],
                        [
                            "ce_loss + c_dis_loss",
                            "BinOp"
                        ]
                    ]
                }
            },
            "bmm_182": {
                "input": {
                    "value": "h",
                    "possible_values": [
                        [
                            "self.rnn(x, h_in)",
                            "Call"
                        ],
                        [
                            "h.reshape(-1, 1, self.args.rnn_hidden_dim)",
                            "Call"
                        ],
                        [
                            "h.reshape(-1, self.args.rnn_hidden_dim)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "fc2_w",
                    "possible_values": [
                        [
                            "self.fc2_w_nn(latent)",
                            "Call"
                        ],
                        [
                            "fc2_w.reshape(-1, self.args.rnn_hidden_dim, self.args.n_actions)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_107": {
                "tensors": {
                    "value": "[h_in.detach(), inputs]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "exp_108": {
                "input": {
                    "value": "self.latent_infer[:, -self.latent_dim:]",
                    "possible_values": []
                }
            },
            "cat_127": {
                "variable": {
                    "value": "latent_move",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[latent_move[:, -1, :].unsqueeze(1), latent_move[:, :-1, :]]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_129": {
                "variable": {
                    "value": "latent_dis_pair",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[latent_dis[:, :, :self.latent_dim], latent_move[:, :, :self.latent_dim]]",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "abs_135": {
                "variable": {
                    "value": "dissimilarity",
                    "possible_values": []
                },
                "input": {
                    "value": "self.dis_net(latent_dis_pair.view(-1, 2 * self.latent_dim))",
                    "possible_values": []
                }
            },
            "sum_113": {
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "mean_113": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "exp_116": {
                "input": {
                    "value": "loss",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "th.tensor(0.0).to(self.args.device)",
                            "Call"
                        ],
                        [
                            "gaussian_embed.entropy().sum(dim=-1).mean() * self.args.h_loss_weight + kl_divergence(gaussian_embed, gaussian_infer).sum(dim=-1).mean() * self.args.kl_loss_weight",
                            "BinOp"
                        ],
                        [
                            "th.clamp(loss, max=2000.0)",
                            "Call"
                        ],
                        [
                            "ce_loss",
                            "Name"
                        ],
                        [
                            "ce_loss + c_dis_loss",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_140": {
                "variable": {
                    "value": "dissimilarity_cat",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[dissimilarity_cat, dissimilarity.view(self.bs, -1)]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_144": {
                "variable": {
                    "value": "mi_cat",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mi_cat, mi.view(self.bs, -1)]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "clamp_133": {
                "input": {
                    "value": "gaussian_embed.log_prob(latent_move.view(self.bs * self.n_agents, -1)) + 13.9",
                    "possible_values": []
                },
                "min": {
                    "value": "-13.9",
                    "possible_values": []
                }
            },
            "sum_133": {
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "norm_158": {
                "input": {
                    "value": "dissimilarity_cat",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "(dissimilarity_cat - di_min) / (di_max - di_min + 1e-12)",
                            "BinOp"
                        ],
                        [
                            "dissimilarity.view(self.bs, -1).clone()",
                            "Call"
                        ],
                        [
                            "th.cat([dissimilarity_cat, dissimilarity.view(self.bs, -1)], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "1",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "sum_158": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "clamp_156": {
                "input": {
                    "value": "mi_cat + dissimilarity_cat",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "possible_values": []
                }
            },
            "sum_156": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "src/modules/agents/rnn_agent.py": {
        "torch": {
            "RNNAgent_5": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.args": {
                    "value": "args",
                    "possible_values": []
                },
                "Linear_10": {
                    "variable": {
                        "value": "self.fc1",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "input_shape",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "args.rnn_hidden_dim",
                        "possible_values": []
                    }
                },
                "GRUCell_11": {
                    "variable": {
                        "value": "self.rnn",
                        "possible_values": []
                    },
                    "input_size": {
                        "value": "args.rnn_hidden_dim",
                        "possible_values": []
                    },
                    "hidden_size": {
                        "value": "args.rnn_hidden_dim",
                        "possible_values": []
                    }
                },
                "Linear_13": {
                    "variable": {
                        "value": "self.fc2",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "args.rnn_hidden_dim",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "args.n_actions",
                        "possible_values": []
                    }
                }
            },
            "relu_20": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(inputs)",
                    "possible_values": []
                }
            }
        }
    },
    "src/modules/critics/coma.py": {
        "torch": {
            "COMACritic_6": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.args": {
                    "value": "args",
                    "possible_values": []
                },
                "Linear_18": {
                    "variable": {
                        "value": "self.fc1",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "input_shape",
                        "possible_values": [
                            [
                                "self._get_input_shape(scheme)",
                                "Call"
                            ],
                            [
                                "scheme['state']['vshape']",
                                "Subscript"
                            ],
                            [
                                "input_shape + self.n_agents",
                                "BinOp"
                            ]
                        ]
                    },
                    "out_features": {
                        "value": "128",
                        "possible_values": []
                    }
                },
                "Linear_19": {
                    "variable": {
                        "value": "self.fc2",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "128",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "128",
                        "possible_values": []
                    }
                },
                "Linear_20": {
                    "variable": {
                        "value": "self.fc3",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "128",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "self.n_actions",
                        "possible_values": []
                    }
                }
            },
            "relu_24": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(inputs)",
                    "possible_values": []
                }
            },
            "relu_25": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc2(x)",
                    "possible_values": []
                }
            },
            "cat_58": {
                "variable": {
                    "value": "inputs",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x.reshape(bs, max_t, self.n_agents, -1) for x in inputs]",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "eye_42": {
                "n": {
                    "value": "self.n_agents",
                    "possible_values": []
                },
                "device": {
                    "value": "batch.device",
                    "possible_values": []
                }
            },
            "cat_52": {
                "variable": {
                    "value": "last_actions",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[th.zeros_like(batch['actions_onehot'][:, 0:1]), batch['actions_onehot'][:, :-1]]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "eye_56": {
                "n": {
                    "value": "self.n_agents",
                    "possible_values": []
                },
                "device": {
                    "value": "batch.device",
                    "possible_values": []
                }
            },
            "unsqueeze_56": {
                "input": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "zeros_like_48": {
                "input": {
                    "value": "batch['actions_onehot'][:, 0:1]",
                    "possible_values": []
                }
            },
            "zeros_like_52": {
                "input": {
                    "value": "batch['actions_onehot'][:, 0:1]",
                    "possible_values": []
                }
            }
        }
    },
    "src/modules/mixers/qmix.py": {
        "torch": {
            "QMixer_7": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.args": {
                    "value": "args",
                    "possible_values": []
                },
                "Linear_17": {
                    "variable": {
                        "value": "self.hyper_w_1",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "self.state_dim",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "self.embed_dim * self.n_agents",
                        "possible_values": []
                    }
                },
                "Linear_18": {
                    "variable": {
                        "value": "self.hyper_w_final",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "self.state_dim",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "self.embed_dim",
                        "possible_values": []
                    }
                },
                "Linear_21": {
                    "variable": {
                        "value": "self.hyper_b_1",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "self.state_dim",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "self.embed_dim",
                        "possible_values": []
                    }
                },
                "Sequential_24": {
                    "variable": {
                        "value": "self.V",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "nn.Linear(self.state_dim, self.embed_dim)",
                        "possible_values": []
                    }
                }
            },
            "abs_34": {
                "variable": {
                    "value": "w1",
                    "possible_values": []
                },
                "input": {
                    "value": "self.hyper_w_1(states)",
                    "possible_values": []
                }
            },
            "elu_38": {
                "variable": {
                    "value": "hidden",
                    "possible_values": []
                },
                "input": {
                    "value": "th.bmm(agent_qs, w1) + b1",
                    "possible_values": []
                }
            },
            "abs_41": {
                "variable": {
                    "value": "w_final",
                    "possible_values": []
                },
                "input": {
                    "value": "self.hyper_w_final(states)",
                    "possible_values": []
                }
            },
            "Linear_24": {
                "in_features": {
                    "value": "self.state_dim",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.embed_dim",
                    "possible_values": []
                }
            },
            "ReLU_25": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Linear_26": {
                "in_features": {
                    "value": "self.embed_dim",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "bmm_46": {
                "input": {
                    "value": "hidden",
                    "possible_values": [
                        [
                            "F.elu(th.bmm(agent_qs, w1) + b1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "w_final",
                    "possible_values": [
                        [
                            "th.abs(self.hyper_w_final(states))",
                            "Call"
                        ],
                        [
                            "w_final.view(-1, self.embed_dim, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_38": {
                "input": {
                    "value": "agent_qs",
                    "possible_values": [
                        [
                            "agent_qs.view(-1, 1, self.n_agents)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "w1",
                    "possible_values": [
                        [
                            "th.abs(self.hyper_w_1(states))",
                            "Call"
                        ],
                        [
                            "w1.view(-1, self.n_agents, self.embed_dim)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/modules/mixers/vdn.py": {
        "torch": {
            "VDNMixer_5": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                }
            },
            "sum_10": {
                "input": {
                    "value": "agent_qs",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            }
        }
    },
    "src/run.py": {
        "torch": {
            "set_device_27": {
                "device": {
                    "value": "args.device_num",
                    "possible_values": []
                }
            },
            "is_available_229": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "src/runners/parallel_runner.py": {
        "torch": {}
    },
    "src/utils/rl_utils.py": {
        "torch": {
            "sum_8": {
                "input": {
                    "value": "terminated",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            }
        }
    }
}