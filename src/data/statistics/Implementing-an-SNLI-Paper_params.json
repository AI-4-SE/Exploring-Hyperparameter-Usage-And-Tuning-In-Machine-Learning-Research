{
    "Residual_stacked_encoder.py": {
        "torch": {
            "manual_seed_15": {
                "seed": {
                    "value": "SEED",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "16",
                            "Constant"
                        ]
                    ]
                }
            },
            "manual_seed_16": {
                "seed": {
                    "value": "SEED",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "16",
                            "Constant"
                        ]
                    ]
                }
            },
            "Adam_317": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "START_LR",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0003",
                            "Constant"
                        ]
                    ]
                }
            },
            "Embedding_35": {
                "variable": {
                    "value": "self.embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_37": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_39": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LSTM_42": {
                "variable": {
                    "value": "self.bilstm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "self.embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "self.bilstm1_output_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "self.num_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LSTM_50": {
                "variable": {
                    "value": "self.bilstm2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "self.embedding_dim + self.bilstm1_output_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "self.bilstm2_output_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "self.num_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LSTM_58": {
                "variable": {
                    "value": "self.bilstm3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "self.embedding_dim + self.bilstm2_output_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "self.bilstm3_output_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "self.num_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_67": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.bilstm3_output_dim * 2 * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_layer_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_68": {
                "variable": {
                    "value": "self.linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_layer_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.output_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_80": {
                "variable": {
                    "value": "sentences_packed",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sentences",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sentences.index_select(0, idx_sort)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "list(sorted_sentences_len)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_82": {
                "variable": {
                    "value": "(sentences_output, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "sentences_output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sentences_output.index_select(0, idx_unsort)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_98": {
                "variable": {
                    "value": "input_layer2",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[embed, output_layer1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_101": {
                "variable": {
                    "value": "input_layer3",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[embed, output_layer1 + output_layer2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_117": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[premises_max_pool, hypotheses_max_pool, torch.abs(premises_max_pool - hypotheses_max_pool), premises_max_pool * hypotheses_max_pool]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_141": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "MODEL_FILE",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'./modelFile'",
                            "Constant"
                        ]
                    ]
                }
            },
            "save_293": {
                "obj": {
                    "value": "{'word_to_index': w2i, 'tag_to_index': t2i}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "DICT_FILE",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'./dictFile'",
                            "Constant"
                        ]
                    ]
                }
            },
            "is_available_314": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_108": {
                "tensors": {
                    "value": "max_pool",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[output_layer3[sent_i, :sent_len, :].max(dim=0)[0] for (sent_i, sent_len) in enumerate(list(sentences_len))]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "log_softmax_128": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat([premises_max_pool, hypotheses_max_pool, torch.abs(premises_max_pool - hypotheses_max_pool), premises_max_pool * hypotheses_max_pool], dim=1)",
                            "Call"
                        ],
                        [
                            "self.activation(self.linear1(x))",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.linear2(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "from_numpy_166": {
                "variable": {
                    "value": "premises",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "premises",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(premises)",
                            "Call"
                        ],
                        [
                            "premises.cuda(DEVICE)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(premises)",
                            "Call"
                        ],
                        [
                            "premises.cuda(DEVICE)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_167": {
                "variable": {
                    "value": "hypotheses",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "hypotheses",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(hypotheses)",
                            "Call"
                        ],
                        [
                            "hypotheses.cuda(DEVICE)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(hypotheses)",
                            "Call"
                        ],
                        [
                            "hypotheses.cuda(DEVICE)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_168": {
                "variable": {
                    "value": "tags",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(tags)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "nll_loss_182": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(premises, hypotheses, premises_lengths, hypotheses_lengths)",
                            "Call"
                        ],
                        [
                            "model(premises, hypotheses, premises_lengths, hypotheses_lengths)",
                            "Call"
                        ],
                        [
                            "outputs.detach().cpu()",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "tags",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(np.array(tags))",
                            "Call"
                        ],
                        [
                            "tags.cuda(DEVICE)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(np.array(tags))",
                            "Call"
                        ],
                        [
                            "tags.cuda(DEVICE)",
                            "Call"
                        ],
                        [
                            "tags.cpu()",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_237": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_245": {
                "variable": {
                    "value": "premises",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "premises",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(premises)",
                            "Call"
                        ],
                        [
                            "premises.cuda(DEVICE)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(premises)",
                            "Call"
                        ],
                        [
                            "premises.cuda(DEVICE)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_246": {
                "variable": {
                    "value": "hypotheses",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "hypotheses",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(hypotheses)",
                            "Call"
                        ],
                        [
                            "hypotheses.cuda(DEVICE)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(hypotheses)",
                            "Call"
                        ],
                        [
                            "hypotheses.cuda(DEVICE)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_247": {
                "variable": {
                    "value": "tags",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(tags)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "nll_loss_264": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(premises, hypotheses, premises_lengths, hypotheses_lengths)",
                            "Call"
                        ],
                        [
                            "model(premises, hypotheses, premises_lengths, hypotheses_lengths)",
                            "Call"
                        ],
                        [
                            "outputs.detach().cpu()",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "tags",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(np.array(tags))",
                            "Call"
                        ],
                        [
                            "tags.cuda(DEVICE)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(np.array(tags))",
                            "Call"
                        ],
                        [
                            "tags.cuda(DEVICE)",
                            "Call"
                        ],
                        [
                            "tags.cpu()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_312": {
                "ndarray": {
                    "value": "vecs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "is_available_76": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_76": {
                "ndarray": {
                    "value": "idx_sort",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(idx_sort).cuda(DEVICE) if torch.cuda.is_available() else torch.from_numpy(idx_sort)",
                            "IfExp"
                        ]
                    ]
                }
            },
            "is_available_85": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_85": {
                "ndarray": {
                    "value": "idx_unsort",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.argsort(idx_sort)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(idx_unsort).cuda(DEVICE) if torch.cuda.is_available() else torch.from_numpy(idx_unsort)",
                            "IfExp"
                        ]
                    ]
                }
            },
            "is_available_170": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_206": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "MODEL_FILE",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'./modelFile'",
                            "Constant"
                        ]
                    ]
                }
            },
            "is_available_249": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_117": {
                "input": {
                    "value": "premises_max_pool - hypotheses_max_pool",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "Residual_stacked_encoder_test.py": {
        "torch": {
            "load_57": {
                "variable": {
                    "value": "dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "DICT_FILE",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "load_67": {
                "variable": {
                    "value": "state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "MODEL_FILE",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "is_available_71": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_16": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_24": {
                "variable": {
                    "value": "premises",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "premises",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(premises)",
                            "Call"
                        ],
                        [
                            "premises.cuda(DEVICE)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_25": {
                "variable": {
                    "value": "hypotheses",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "hypotheses",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(hypotheses)",
                            "Call"
                        ],
                        [
                            "hypotheses.cuda(DEVICE)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_26": {
                "variable": {
                    "value": "tags",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(tags)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_28": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}