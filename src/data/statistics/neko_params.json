{
    "examples/mnist_manhattan.py": {
        "tensorflow": {
            "Input_19": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(784,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Model_23": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.keras.Input(shape=(784,))",
                            "Call"
                        ]
                    ]
                },
                "outputs": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.keras.layers.Dense(10, activation='relu', use_bias=bias)(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "Dense_20": {
                "units": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dense_21": {
                "units": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dense_22": {
                "units": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "CategoricalCrossentropy_24": {
                "from_logits": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "Linear_31": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "784",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_32": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_33": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "relu_36": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_37": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_38": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc3(x)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "examples/sine_wave.py": {
        "tensorflow": {
            "constant_60": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((seqlen, clock))",
                            "Call"
                        ],
                        [
                            "steps[1:].reshape(seqlen, 1)",
                            "Call"
                        ],
                        [
                            "signal[:-1]",
                            "Subscript"
                        ],
                        [
                            "tf.constant(x, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor(x, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "frozen_poisson_noise_input.astype(float)",
                            "Call"
                        ],
                        [
                            "np.zeros((seqlen, clock))",
                            "Call"
                        ],
                        [
                            "tf.constant(x, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "steps[1:].reshape(seqlen, 1)",
                            "Call"
                        ],
                        [
                            "signal[:-1]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(x, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "n.expand_dims(x, 0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_61": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "signal[1:]",
                            "Subscript"
                        ],
                        [
                            "tf.constant(y, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor(y, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "signal[1:]",
                            "Subscript"
                        ],
                        [
                            "tf.constant(y, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor(y, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "n.expand_dims(y, 0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_102": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((seqlen, clock))",
                            "Call"
                        ],
                        [
                            "steps[1:].reshape(seqlen, 1)",
                            "Call"
                        ],
                        [
                            "signal[:-1]",
                            "Subscript"
                        ],
                        [
                            "tf.constant(x, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor(x, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "frozen_poisson_noise_input.astype(float)",
                            "Call"
                        ],
                        [
                            "np.zeros((seqlen, clock))",
                            "Call"
                        ],
                        [
                            "tf.constant(x, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "steps[1:].reshape(seqlen, 1)",
                            "Call"
                        ],
                        [
                            "signal[:-1]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(x, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "n.expand_dims(x, 0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_103": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "signal[1:]",
                            "Subscript"
                        ],
                        [
                            "tf.constant(y, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor(y, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "signal[1:]",
                            "Subscript"
                        ],
                        [
                            "tf.constant(y, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor(y, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "n.expand_dims(y, 0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "tensor_63": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((seqlen, clock))",
                            "Call"
                        ],
                        [
                            "steps[1:].reshape(seqlen, 1)",
                            "Call"
                        ],
                        [
                            "signal[:-1]",
                            "Subscript"
                        ],
                        [
                            "tf.constant(x, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor(x, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "frozen_poisson_noise_input.astype(float)",
                            "Call"
                        ],
                        [
                            "np.zeros((seqlen, clock))",
                            "Call"
                        ],
                        [
                            "tf.constant(x, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "steps[1:].reshape(seqlen, 1)",
                            "Call"
                        ],
                        [
                            "signal[:-1]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(x, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "n.expand_dims(x, 0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_64": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "signal[1:]",
                            "Subscript"
                        ],
                        [
                            "tf.constant(y, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor(y, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "signal[1:]",
                            "Subscript"
                        ],
                        [
                            "tf.constant(y, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor(y, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "n.expand_dims(y, 0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_105": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((seqlen, clock))",
                            "Call"
                        ],
                        [
                            "steps[1:].reshape(seqlen, 1)",
                            "Call"
                        ],
                        [
                            "signal[:-1]",
                            "Subscript"
                        ],
                        [
                            "tf.constant(x, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor(x, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "frozen_poisson_noise_input.astype(float)",
                            "Call"
                        ],
                        [
                            "np.zeros((seqlen, clock))",
                            "Call"
                        ],
                        [
                            "tf.constant(x, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "steps[1:].reshape(seqlen, 1)",
                            "Call"
                        ],
                        [
                            "signal[:-1]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(x, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "n.expand_dims(x, 0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_106": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "signal[1:]",
                            "Subscript"
                        ],
                        [
                            "tf.constant(y, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor(y, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "signal[1:]",
                            "Subscript"
                        ],
                        [
                            "tf.constant(y, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor(y, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "n.expand_dims(y, 0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "neko/backend/tensorflow_backend.py": {
        "tensorflow": {
            "tan_297": {
                "variable": {
                    "value": "ta",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "pseudo_angle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.float32(np.pi / 200)",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "set_visible_devices_10": {
                "devices": {
                    "value": "tf.config.list_physical_devices()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_visible_devices_14": {
                "devices": {
                    "value": "tf.config.list_physical_devices('CPU')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_seed_19": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cast_34": {
                "x": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tile_60": {
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant",
                            "Attribute"
                        ]
                    ]
                },
                "multiples": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "gather_64": {
                "params": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant",
                            "Attribute"
                        ]
                    ]
                },
                "indices": {
                    "value": "np_array",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "one_hot_68": {
                "indices": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant",
                            "Attribute"
                        ]
                    ]
                },
                "depth": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensordot_176": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "axes": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensordot_177": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "axes": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Variable_187": {
                "initial_value": {
                    "value": "tf.zeros(shape=shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Variable_213": {
                "initial_value": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.value()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "normal_218": {
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.reduce_mean",
                            "Attribute"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "stddev": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reduce_std",
                            "Name"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "uniform_222": {
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Adadelta_228": {
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "MethodArgument"
                        ],
                        [
                            "0.001",
                            "MethodArgument"
                        ],
                        [
                            "0.001",
                            "MethodArgument"
                        ],
                        [
                            "0.001",
                            "MethodArgument"
                        ],
                        [
                            "0.001",
                            "MethodArgument"
                        ],
                        [
                            "0.01",
                            "MethodArgument"
                        ]
                    ]
                },
                "rho": {
                    "value": "rho",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.95",
                            "MethodArgument"
                        ],
                        [
                            "0.9",
                            "MethodArgument"
                        ]
                    ]
                },
                "epsilon": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-07",
                            "MethodArgument"
                        ],
                        [
                            "1e-07",
                            "MethodArgument"
                        ],
                        [
                            "1e-07",
                            "MethodArgument"
                        ],
                        [
                            "1e-07",
                            "MethodArgument"
                        ],
                        [
                            "1e-07",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Adagrad_232": {
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "MethodArgument"
                        ],
                        [
                            "0.001",
                            "MethodArgument"
                        ],
                        [
                            "0.001",
                            "MethodArgument"
                        ],
                        [
                            "0.001",
                            "MethodArgument"
                        ],
                        [
                            "0.001",
                            "MethodArgument"
                        ],
                        [
                            "0.01",
                            "MethodArgument"
                        ]
                    ]
                },
                "initial_accumulator_value": {
                    "value": "initial_accumulator_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                },
                "epsilon": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-07",
                            "MethodArgument"
                        ],
                        [
                            "1e-07",
                            "MethodArgument"
                        ],
                        [
                            "1e-07",
                            "MethodArgument"
                        ],
                        [
                            "1e-07",
                            "MethodArgument"
                        ],
                        [
                            "1e-07",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Adam_237": {
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "MethodArgument"
                        ],
                        [
                            "0.001",
                            "MethodArgument"
                        ],
                        [
                            "0.001",
                            "MethodArgument"
                        ],
                        [
                            "0.001",
                            "MethodArgument"
                        ],
                        [
                            "0.001",
                            "MethodArgument"
                        ],
                        [
                            "0.01",
                            "MethodArgument"
                        ]
                    ]
                },
                "beta_1": {
                    "value": "beta_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.9",
                            "MethodArgument"
                        ],
                        [
                            "0.9",
                            "MethodArgument"
                        ]
                    ]
                },
                "beta_2": {
                    "value": "beta_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.999",
                            "MethodArgument"
                        ],
                        [
                            "0.999",
                            "MethodArgument"
                        ]
                    ]
                },
                "epsilon": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-07",
                            "MethodArgument"
                        ],
                        [
                            "1e-07",
                            "MethodArgument"
                        ],
                        [
                            "1e-07",
                            "MethodArgument"
                        ],
                        [
                            "1e-07",
                            "MethodArgument"
                        ],
                        [
                            "1e-07",
                            "MethodArgument"
                        ]
                    ]
                },
                "amsgrad": {
                    "value": "amsgrad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Adamax_242": {
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "MethodArgument"
                        ],
                        [
                            "0.001",
                            "MethodArgument"
                        ],
                        [
                            "0.001",
                            "MethodArgument"
                        ],
                        [
                            "0.001",
                            "MethodArgument"
                        ],
                        [
                            "0.001",
                            "MethodArgument"
                        ],
                        [
                            "0.01",
                            "MethodArgument"
                        ]
                    ]
                },
                "beta_1": {
                    "value": "beta_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.9",
                            "MethodArgument"
                        ],
                        [
                            "0.9",
                            "MethodArgument"
                        ]
                    ]
                },
                "beta_2": {
                    "value": "beta_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.999",
                            "MethodArgument"
                        ],
                        [
                            "0.999",
                            "MethodArgument"
                        ]
                    ]
                },
                "epsilon": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-07",
                            "MethodArgument"
                        ],
                        [
                            "1e-07",
                            "MethodArgument"
                        ],
                        [
                            "1e-07",
                            "MethodArgument"
                        ],
                        [
                            "1e-07",
                            "MethodArgument"
                        ],
                        [
                            "1e-07",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "RMSprop_246": {
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "MethodArgument"
                        ],
                        [
                            "0.001",
                            "MethodArgument"
                        ],
                        [
                            "0.001",
                            "MethodArgument"
                        ],
                        [
                            "0.001",
                            "MethodArgument"
                        ],
                        [
                            "0.001",
                            "MethodArgument"
                        ],
                        [
                            "0.01",
                            "MethodArgument"
                        ]
                    ]
                },
                "rho": {
                    "value": "rho",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.95",
                            "MethodArgument"
                        ],
                        [
                            "0.9",
                            "MethodArgument"
                        ]
                    ]
                },
                "momentum": {
                    "value": "momentum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "epsilon": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-07",
                            "MethodArgument"
                        ],
                        [
                            "1e-07",
                            "MethodArgument"
                        ],
                        [
                            "1e-07",
                            "MethodArgument"
                        ],
                        [
                            "1e-07",
                            "MethodArgument"
                        ],
                        [
                            "1e-07",
                            "MethodArgument"
                        ]
                    ]
                },
                "centered": {
                    "value": "centered",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "SGD_251": {
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "MethodArgument"
                        ],
                        [
                            "0.001",
                            "MethodArgument"
                        ],
                        [
                            "0.001",
                            "MethodArgument"
                        ],
                        [
                            "0.001",
                            "MethodArgument"
                        ],
                        [
                            "0.001",
                            "MethodArgument"
                        ],
                        [
                            "0.01",
                            "MethodArgument"
                        ]
                    ]
                },
                "momentum": {
                    "value": "momentum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "nesterov": {
                    "value": "nesterov",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "where_289": {
                "condition": {
                    "value": "x > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.ones_like(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.zeros_like(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_307": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "x > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.ones_like(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.zeros_like(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_324": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "x > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.ones_like(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.zeros_like(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "list_physical_devices_10": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "list_physical_devices_14": {
                "device_type": {
                    "value": "CPU",
                    "type": "str",
                    "possible_values": []
                }
            },
            "CategoricalCrossentropy_143": {
                "from_logits": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SparseCategoricalCrossentropy_147": {
                "from_logits": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "KLDivergence_151": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MeanAbsoluteError_155": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MeanSquaredError_159": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Poisson_163": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_187": {
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_tensor_193": {
                "x": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.value()",
                            "Call"
                        ]
                    ]
                }
            },
            "GradientTape_263": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GradientTape_270": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_like_289": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_289": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "constant_192": {
                "value": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.value()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "maximum_293": {
                "x": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "1.0 - tf.math.abs(x / v_th)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_298": {
                "x": {
                    "value": "tf.math.abs(x - v_th) >= pseudo_bandwidth",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_307": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_307": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_like_324": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_324": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "abs_293": {
                "x": {
                    "value": "x / v_th",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_298": {
                "x": {
                    "value": "x - v_th",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_299": {
                "x": {
                    "value": "x - v_th",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_311": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_328": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "neko/layers/keras_adaptor.py": {
        "tensorflow": {}
    },
    "neko/backend/pytorch_backend.py": {
        "torch": {
            "Softmax_150": {
                "variable": {
                    "value": "softmax",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "LogSoftmax_151": {
                "variable": {
                    "value": "log_softmax",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Softplus_152": {
                "variable": {
                    "value": "softplus",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Softsign_153": {
                "variable": {
                    "value": "softsign",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Hardsigmoid_158": {
                "variable": {
                    "value": "hard_sigmoid",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_159": {
                "variable": {
                    "value": "linear",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SELU_160": {
                "variable": {
                    "value": "selu",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_75": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "dims",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_available_10": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_default_tensor_type_15": {
                "t": {
                    "value": "torch.FloatTensor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_20": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "manual_seed_21": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "manual_seed_all_22": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "transpose_59": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "std_142": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "unbiased": {
                    "value": "unbiased",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "mean_165": {
                "input": {
                    "value": "torch.sum(-y_true * log_softmax(y_pred), dim=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "empty_209": {
                "size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_214": {
                "variable": {
                    "value": "tensor.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.detach()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_238": {
                "data": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.detach()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "normal_243": {
                "mean": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mean",
                            "Attribute"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "std": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "rand_247": {
                "*size": {
                    "value": "*shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Adadelta_252": {
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "MethodArgument"
                        ],
                        [
                            "0.001",
                            "MethodArgument"
                        ],
                        [
                            "0.001",
                            "MethodArgument"
                        ],
                        [
                            "0.001",
                            "MethodArgument"
                        ],
                        [
                            "0.001",
                            "MethodArgument"
                        ],
                        [
                            "0.01",
                            "MethodArgument"
                        ]
                    ]
                },
                "rho": {
                    "value": "rho",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.95",
                            "MethodArgument"
                        ],
                        [
                            "0.9",
                            "MethodArgument"
                        ]
                    ]
                },
                "eps": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-07",
                            "MethodArgument"
                        ],
                        [
                            "1e-07",
                            "MethodArgument"
                        ],
                        [
                            "1e-07",
                            "MethodArgument"
                        ],
                        [
                            "1e-07",
                            "MethodArgument"
                        ],
                        [
                            "1e-07",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Adagrad_256": {
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "MethodArgument"
                        ],
                        [
                            "0.001",
                            "MethodArgument"
                        ],
                        [
                            "0.001",
                            "MethodArgument"
                        ],
                        [
                            "0.001",
                            "MethodArgument"
                        ],
                        [
                            "0.001",
                            "MethodArgument"
                        ],
                        [
                            "0.01",
                            "MethodArgument"
                        ]
                    ]
                },
                "initial_accumulator_value": {
                    "value": "initial_accumulator_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                },
                "eps": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-07",
                            "MethodArgument"
                        ],
                        [
                            "1e-07",
                            "MethodArgument"
                        ],
                        [
                            "1e-07",
                            "MethodArgument"
                        ],
                        [
                            "1e-07",
                            "MethodArgument"
                        ],
                        [
                            "1e-07",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Adam_261": {
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "MethodArgument"
                        ],
                        [
                            "0.001",
                            "MethodArgument"
                        ],
                        [
                            "0.001",
                            "MethodArgument"
                        ],
                        [
                            "0.001",
                            "MethodArgument"
                        ],
                        [
                            "0.001",
                            "MethodArgument"
                        ],
                        [
                            "0.01",
                            "MethodArgument"
                        ]
                    ]
                },
                "betas": {
                    "value": "(beta_1, beta_2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-07",
                            "MethodArgument"
                        ],
                        [
                            "1e-07",
                            "MethodArgument"
                        ],
                        [
                            "1e-07",
                            "MethodArgument"
                        ],
                        [
                            "1e-07",
                            "MethodArgument"
                        ],
                        [
                            "1e-07",
                            "MethodArgument"
                        ]
                    ]
                },
                "amsgrad": {
                    "value": "amsgrad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Adamax_265": {
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "MethodArgument"
                        ],
                        [
                            "0.001",
                            "MethodArgument"
                        ],
                        [
                            "0.001",
                            "MethodArgument"
                        ],
                        [
                            "0.001",
                            "MethodArgument"
                        ],
                        [
                            "0.001",
                            "MethodArgument"
                        ],
                        [
                            "0.01",
                            "MethodArgument"
                        ]
                    ]
                },
                "betas": {
                    "value": "(beta_1, beta_2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-07",
                            "MethodArgument"
                        ],
                        [
                            "1e-07",
                            "MethodArgument"
                        ],
                        [
                            "1e-07",
                            "MethodArgument"
                        ],
                        [
                            "1e-07",
                            "MethodArgument"
                        ],
                        [
                            "1e-07",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "RMSprop_269": {
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "MethodArgument"
                        ],
                        [
                            "0.001",
                            "MethodArgument"
                        ],
                        [
                            "0.001",
                            "MethodArgument"
                        ],
                        [
                            "0.001",
                            "MethodArgument"
                        ],
                        [
                            "0.001",
                            "MethodArgument"
                        ],
                        [
                            "0.01",
                            "MethodArgument"
                        ]
                    ]
                },
                "alpha": {
                    "value": "rho",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.95",
                            "MethodArgument"
                        ],
                        [
                            "0.9",
                            "MethodArgument"
                        ]
                    ]
                },
                "momentum": {
                    "value": "momentum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "eps": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-07",
                            "MethodArgument"
                        ],
                        [
                            "1e-07",
                            "MethodArgument"
                        ],
                        [
                            "1e-07",
                            "MethodArgument"
                        ],
                        [
                            "1e-07",
                            "MethodArgument"
                        ],
                        [
                            "1e-07",
                            "MethodArgument"
                        ]
                    ]
                },
                "centered": {
                    "value": "centered",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "SGD_273": {
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "MethodArgument"
                        ],
                        [
                            "0.001",
                            "MethodArgument"
                        ],
                        [
                            "0.001",
                            "MethodArgument"
                        ],
                        [
                            "0.001",
                            "MethodArgument"
                        ],
                        [
                            "0.001",
                            "MethodArgument"
                        ],
                        [
                            "0.01",
                            "MethodArgument"
                        ]
                    ]
                },
                "momentum": {
                    "value": "momentum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "nesterov": {
                    "value": "nesterov",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "where_324": {
                "condition": {
                    "value": "x > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.ones_like(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "torch.zeros_like(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_default_tensor_type_11": {
                "t": {
                    "value": "torch.cuda.FloatTensor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_81": {
                "n": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LeakyReLU_115": {
                "negative_slope": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sum_165": {
                "input": {
                    "value": "-y_true * log_softmax(y_pred)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_169": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "KLDivLoss_173": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "L1Loss_177": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_181": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "PoissonNLLLoss_185": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_tensor_215": {
                "obj": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "clone_223": {
                "input": {
                    "value": "tensor.detach()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_like_324": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_324": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "where_346": {
                "condition": {
                    "value": "x > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.ones_like(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "torch.zeros_like(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_367": {
                "condition": {
                    "value": "x > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.ones_like(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "torch.zeros_like(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_328": {
                "input": {
                    "value": "1 - torch.abs(x / v_th)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_like_346": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_346": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_like_367": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_367": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_352": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_373": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "abs_328": {
                "input": {
                    "value": "x / v_th",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "neko/layers/pytorch_adaptor.py": {
        "torch": {}
    }
}