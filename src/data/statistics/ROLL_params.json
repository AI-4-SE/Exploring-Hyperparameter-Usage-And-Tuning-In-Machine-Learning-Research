{
    "chester/logger.py": {
        "tensorflow": {
            "summary_iterator_504": {
                "path": {
                    "value": "fname",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fnames",
                            "Name"
                        ]
                    ]
                }
            },
            "as_bytes_177": {
                "bytes_or_text": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "osp.join(osp.abspath(dir), prefix)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "rllab/misc/ext.py": {
        "tensorflow": {
            "set_random_seed_209": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seed % 4294967294",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "ROLL/LSTM_model.py": {
        "torch": {
            "LSTM_103": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_110": {
                "variable": {
                    "value": "self.vae_fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "conv_args['output_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "representation_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_111": {
                "variable": {
                    "value": "self.vae_fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "conv_args['output_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "representation_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_119": {
                "variable": {
                    "value": "self.lstm_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.lstm_hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "representation_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_222": {
                "input": {
                    "value": "1 + logvar - mu.pow(2) - logvar.exp()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_222": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_164": {
                "input": {
                    "value": "self.vae_fc2(feature)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mse_loss_263": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.view((-1, feature_size))",
                            "Call"
                        ],
                        [
                            "inputs.narrow(start=0, length=self.imlength, dim=1).contiguous().view(-1, self.imlength)",
                            "Call"
                        ],
                        [
                            "inputs.narrow(start=0, length=self.imlength, dim=1).contiguous().view(-1, self.imlength)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "obs_distribution_params[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "reduction": {
                    "value": "elementwise_mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "clamp_240": {
                "input": {
                    "value": "decoded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.decoder(latents).view(-1, self.imsize * self.imsize * self.input_channels)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_253": {
                "input": {
                    "value": "obs_distribution_params[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.view((-1, feature_size))",
                            "Call"
                        ],
                        [
                            "inputs.narrow(start=0, length=self.imlength, dim=1).contiguous().view(-1, self.imlength)",
                            "Call"
                        ],
                        [
                            "inputs.narrow(start=0, length=self.imlength, dim=1).contiguous().view(-1, self.imlength)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "elementwise_mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ones_like_241": {
                "input": {
                    "value": "decoded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.decoder(latents).view(-1, self.imsize * self.imsize * self.input_channels)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "ROLL/LSTM_trainer.py": {
        "torch": {
            "Normal_48": {
                "variable": {
                    "value": "true_prior",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "ptu.zeros((batch_size, representation_size))",
                    "type": "Call",
                    "possible_values": []
                },
                "scale": {
                    "value": "ptu.ones((batch_size, representation_size))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Normal_62": {
                "variable": {
                    "value": "vae_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "mus",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ptu.get_numpy(mus)",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "stds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logvars.exp().pow(0.5)",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_198": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(self.model.parameters())",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Adam_317": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_424": {
                "variable": {
                    "value": "anchors",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "anchors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(anchors, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(anchors, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(anchors, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(anchors, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_425": {
                "variable": {
                    "value": "negatives",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "negatives",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(negatives, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(negatives, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(negatives, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(negatives, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_426": {
                "variable": {
                    "value": "margins",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "margins",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(margins)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_429": {
                "variable": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "margins - negative_distances",
                    "type": "BinOp",
                    "possible_values": []
                },
                "inplace": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_506": {
                "variable": {
                    "value": "anchors",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "anchors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(anchors, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(anchors, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(anchors, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(anchors, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_507": {
                "variable": {
                    "value": "positives",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "positives",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(positives, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(positives, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(positives, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_508": {
                "variable": {
                    "value": "negatives",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "negatives",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(negatives, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(negatives, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(negatives, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(negatives, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_512": {
                "variable": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "positive_distances - negative_distances + self.triplet_loss_margin",
                    "type": "BinOp",
                    "possible_values": []
                },
                "inplace": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_577": {
                "variable": {
                    "value": "anchors",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "anchors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(anchors, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(anchors, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(anchors, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(anchors, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_578": {
                "variable": {
                    "value": "positives",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "positives",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(positives, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(positives, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(positives, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_579": {
                "variable": {
                    "value": "negatives",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "negatives",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(negatives, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(negatives, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(negatives, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(negatives, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_583": {
                "variable": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "positive_distances - negative_distances + self.triplet_loss_margin",
                    "type": "BinOp",
                    "possible_values": []
                },
                "inplace": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_614": {
                "variable": {
                    "value": "anchors",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "anchors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(anchors, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(anchors, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(anchors, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(anchors, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_615": {
                "variable": {
                    "value": "positives",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "positives",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(positives, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(positives, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(positives, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_616": {
                "variable": {
                    "value": "negatives",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "negatives",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(negatives, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(negatives, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(negatives, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(negatives, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_620": {
                "variable": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "positive_distances - negative_distances + self.triplet_loss_margin",
                    "type": "BinOp",
                    "possible_values": []
                },
                "inplace": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_931": {
                "variable": {
                    "value": "all_imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "imgs + recons",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_991": {
                "variable": {
                    "value": "all_imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "imgs + recons",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_67": {
                "variable": {
                    "value": "log_d_x_given_z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "imgs * decoded + (1 - imgs) * (1 - decoded) + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_67": {
                "variable": {
                    "value": "log_d_x_given_z",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_238": {
                "variable": {
                    "value": "self.train_dataloader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.train_dataset_pt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "InfiniteRandomSampler(self.train_dataset)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.shape[0]",
                            "Subscript"
                        ],
                        [
                            "512",
                            "Constant"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "train_data_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_246": {
                "variable": {
                    "value": "self.test_dataloader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.test_dataset_pt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "InfiniteRandomSampler(self.test_dataset)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.shape[0]",
                            "Subscript"
                        ],
                        [
                            "512",
                            "Constant"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mse_loss_373": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vae_latents_ori.detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "vae_latents_masked",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vae_latent_distribution_params[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "mse_loss_375": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vae_latents_ori",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vae_latent_distribution_params[0]",
                            "Subscript"
                        ]
                    ]
                },
                "target": {
                    "value": "vae_latents_masked",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vae_latent_distribution_params[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "mse_loss_679": {
                "variable": {
                    "value": "ae_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "latent_encodings.view((-1, self.model.representation_size))",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "vae_mu.detach()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "empty_cache_744": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mse_loss_812": {
                "variable": {
                    "value": "ae_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "latent_encodings.view((-1, self.model.representation_size))",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "vae_mu.detach()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "empty_cache_867": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mse_loss_964": {
                "variable": {
                    "value": "mse",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch_img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ptu.from_numpy(img)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "reconstructions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reconstructions.view((seq_len, batch_size, feature_size))[0][:8]",
                            "Subscript"
                        ]
                    ]
                },
                "reduction": {
                    "value": "elementwise_mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Normal_72": {
                "variable": {
                    "value": "decoder_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "dec_mu",
                    "type": "variable",
                    "possible_values": []
                },
                "scale": {
                    "value": "dec_var.pow(0.5)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_281": {
                "variable": {
                    "value": "self.train_dataloader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.train_dataset_pt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "InfiniteWeightedRandomSampler(self.train_dataset, self._train_weights)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.train_data_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mse_loss_395": {
                "input": {
                    "value": "latents_masked_vec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "latents_masked[masked_idx[j]:, j]",
                            "Subscript"
                        ],
                        [
                            "latents_masked[masked_idx[j]:, j]",
                            "Subscript"
                        ]
                    ]
                },
                "target": {
                    "value": "latents_ori_vec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "latents_ori[masked_idx[j]:, j]",
                            "Subscript"
                        ],
                        [
                            "latents_ori[masked_idx[j]:, j]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_832": {
                "variable": {
                    "value": "comparison",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[show_obs.narrow(start=0, length=self.imlength, dim=1).contiguous().view(-1, self.input_channels, self.imsize, self.imsize).transpose(2, 3), reconstructions.view(-1, self.input_channels, self.imsize, self.imsize).transpose(2, 3)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "mse_loss_452": {
                "input": {
                    "value": "latents_masked_vec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "latents_masked[masked_idx[j]:, j]",
                            "Subscript"
                        ],
                        [
                            "latents_masked[masked_idx[j]:, j]",
                            "Subscript"
                        ]
                    ]
                },
                "target": {
                    "value": "latents_ori_vec.detach()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mse_loss_454": {
                "input": {
                    "value": "latents_masked_vec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "latents_masked[masked_idx[j]:, j]",
                            "Subscript"
                        ],
                        [
                            "latents_masked[masked_idx[j]:, j]",
                            "Subscript"
                        ]
                    ]
                },
                "target": {
                    "value": "latents_ori_vec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "latents_ori[masked_idx[j]:, j]",
                            "Subscript"
                        ],
                        [
                            "latents_ori[masked_idx[j]:, j]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "ROLL/LSTM_wrapped_env.py": {
        "torch": {
            "device_410": {
                "variable": {
                    "value": "ptu.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda: + str(gpu_id) if use_gpu else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            }
        }
    },
    "ROLL/onlineLSTMalgorithm.py": {
        "torch": {
            "Pipe_221": {
                "variable": {
                    "value": "(self._vae_conn_pipe, process_pipe)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "ROLL/skewfit_full_experiments_LSTM.py": {
        "torch": {
            "is_available_87": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_94": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seeds",
                            "Name"
                        ],
                        [
                            "variant['seed']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "manual_seed_all_95": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seeds",
                            "Name"
                        ],
                        [
                            "variant['seed']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "load_223": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "osp.join(skewfit_variant['vae_path'], 'params.pkl')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sigmoid_285": {
                "variable": {
                    "value": "decoder_activation",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/doodad/ec2_example.py": {
        "torch": {
            "is_available_20": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_21": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "examples/doodad/gcp_example.py": {
        "torch": {
            "is_available_23": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_24": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/dqn_and_double_dqn.py": {
        "torch": {
            "MSELoss_37": {
                "variable": {
                    "value": "qf_criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "rlkit/core/logging.py": {
        "torch": {
            "save_284": {
                "obj": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "file_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "osp.join(self._snapshot_dir, file_name)",
                            "Call"
                        ],
                        [
                            "osp.join(self._snapshot_dir, file_name)",
                            "Call"
                        ],
                        [
                            "osp.join(self._snapshot_dir, file_name)",
                            "Call"
                        ],
                        [
                            "osp.join(self._snapshot_dir, 'itr_%d.pkl' % itr)",
                            "Call"
                        ],
                        [
                            "osp.join(self._snapshot_dir, 'params.pkl')",
                            "Call"
                        ],
                        [
                            "osp.join(self._snapshot_dir, 'itr_%d.pkl' % itr)",
                            "Call"
                        ],
                        [
                            "osp.join(self._snapshot_dir, 'itr_%d.pkl' % itr)",
                            "Call"
                        ],
                        [
                            "osp.join(self._snapshot_dir, 'params.pkl')",
                            "Call"
                        ],
                        [
                            "'extra_data.pkl'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "save_288": {
                "obj": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "file_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "osp.join(self._snapshot_dir, file_name)",
                            "Call"
                        ],
                        [
                            "osp.join(self._snapshot_dir, file_name)",
                            "Call"
                        ],
                        [
                            "osp.join(self._snapshot_dir, file_name)",
                            "Call"
                        ],
                        [
                            "osp.join(self._snapshot_dir, 'itr_%d.pkl' % itr)",
                            "Call"
                        ],
                        [
                            "osp.join(self._snapshot_dir, 'params.pkl')",
                            "Call"
                        ],
                        [
                            "osp.join(self._snapshot_dir, 'itr_%d.pkl' % itr)",
                            "Call"
                        ],
                        [
                            "osp.join(self._snapshot_dir, 'itr_%d.pkl' % itr)",
                            "Call"
                        ],
                        [
                            "osp.join(self._snapshot_dir, 'params.pkl')",
                            "Call"
                        ],
                        [
                            "'extra_data.pkl'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "save_292": {
                "obj": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "file_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "osp.join(self._snapshot_dir, file_name)",
                            "Call"
                        ],
                        [
                            "osp.join(self._snapshot_dir, file_name)",
                            "Call"
                        ],
                        [
                            "osp.join(self._snapshot_dir, file_name)",
                            "Call"
                        ],
                        [
                            "osp.join(self._snapshot_dir, 'itr_%d.pkl' % itr)",
                            "Call"
                        ],
                        [
                            "osp.join(self._snapshot_dir, 'params.pkl')",
                            "Call"
                        ],
                        [
                            "osp.join(self._snapshot_dir, 'itr_%d.pkl' % itr)",
                            "Call"
                        ],
                        [
                            "osp.join(self._snapshot_dir, 'itr_%d.pkl' % itr)",
                            "Call"
                        ],
                        [
                            "osp.join(self._snapshot_dir, 'params.pkl')",
                            "Call"
                        ],
                        [
                            "'extra_data.pkl'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "save_298": {
                "obj": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "file_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "osp.join(self._snapshot_dir, file_name)",
                            "Call"
                        ],
                        [
                            "osp.join(self._snapshot_dir, file_name)",
                            "Call"
                        ],
                        [
                            "osp.join(self._snapshot_dir, file_name)",
                            "Call"
                        ],
                        [
                            "osp.join(self._snapshot_dir, 'itr_%d.pkl' % itr)",
                            "Call"
                        ],
                        [
                            "osp.join(self._snapshot_dir, 'params.pkl')",
                            "Call"
                        ],
                        [
                            "osp.join(self._snapshot_dir, 'itr_%d.pkl' % itr)",
                            "Call"
                        ],
                        [
                            "osp.join(self._snapshot_dir, 'itr_%d.pkl' % itr)",
                            "Call"
                        ],
                        [
                            "osp.join(self._snapshot_dir, 'params.pkl')",
                            "Call"
                        ],
                        [
                            "'extra_data.pkl'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "save_296": {
                "obj": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "file_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "osp.join(self._snapshot_dir, file_name)",
                            "Call"
                        ],
                        [
                            "osp.join(self._snapshot_dir, file_name)",
                            "Call"
                        ],
                        [
                            "osp.join(self._snapshot_dir, file_name)",
                            "Call"
                        ],
                        [
                            "osp.join(self._snapshot_dir, 'itr_%d.pkl' % itr)",
                            "Call"
                        ],
                        [
                            "osp.join(self._snapshot_dir, 'params.pkl')",
                            "Call"
                        ],
                        [
                            "osp.join(self._snapshot_dir, 'itr_%d.pkl' % itr)",
                            "Call"
                        ],
                        [
                            "osp.join(self._snapshot_dir, 'itr_%d.pkl' % itr)",
                            "Call"
                        ],
                        [
                            "osp.join(self._snapshot_dir, 'params.pkl')",
                            "Call"
                        ],
                        [
                            "'extra_data.pkl'",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "rlkit/data_management/shared_obs_dict_replay_buffer.py": {
        "torch": {}
    },
    "rlkit/envs/mujoco_image_env.py": {
        "torch": {}
    },
    "rlkit/envs/vae_wrapper.py": {
        "torch": {
            "device_375": {
                "variable": {
                    "value": "ptu.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda: + str(gpu_id) if use_gpu else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            }
        }
    },
    "rlkit/envs/vae_wrapper_segmented.py": {
        "torch": {
            "device_443": {
                "variable": {
                    "value": "ptu.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda: + str(gpu_id) if use_gpu else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            }
        }
    },
    "rlkit/launchers/skewfit_experiments.py": {
        "torch": {
            "is_available_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_75": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seeds",
                            "Name"
                        ],
                        [
                            "variant['seed']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "manual_seed_all_76": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seeds",
                            "Name"
                        ],
                        [
                            "variant['seed']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Sigmoid_192": {
                "variable": {
                    "value": "decoder_activation",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "rlkit/policies/argmax.py": {
        "torch": {}
    },
    "rlkit/torch/conv_networks.py": {
        "torch": {
            "ModuleList_49": {
                "variable": {
                    "value": "self.conv_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_50": {
                "variable": {
                    "value": "self.conv_norm_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_51": {
                "variable": {
                    "value": "self.fc_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_52": {
                "variable": {
                    "value": "self.fc_norm_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_69": {
                "variable": {
                    "value": "test_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.input_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.input_width",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.input_height",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_90": {
                "variable": {
                    "value": "self.last_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "fc_input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(np.prod(test_mat.shape))",
                            "Call"
                        ],
                        [
                            "fc_input_size + added_fc_input_size",
                            "BinOp"
                        ],
                        [
                            "hidden_size",
                            "Name"
                        ],
                        [
                            "hidden_size",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ModuleList_176": {
                "variable": {
                    "value": "self.deconv_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_177": {
                "variable": {
                    "value": "self.deconv_norm_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_178": {
                "variable": {
                    "value": "self.fc_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_179": {
                "variable": {
                    "value": "self.fc_norm_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_192": {
                "variable": {
                    "value": "self.last_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "fc_input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(np.prod(test_mat.shape))",
                            "Call"
                        ],
                        [
                            "fc_input_size + added_fc_input_size",
                            "BinOp"
                        ],
                        [
                            "hidden_size",
                            "Name"
                        ],
                        [
                            "hidden_size",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "deconv_input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.deconv_input_channels * self.deconv_input_height * self.deconv_input_width",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_210": {
                "variable": {
                    "value": "test_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.deconv_input_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.deconv_input_width",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.deconv_input_height",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_217": {
                "variable": {
                    "value": "self.first_deconv_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "deconv_input_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "deconv_output_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "deconv_output_kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "deconv_output_strides",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_226": {
                "variable": {
                    "value": "self.second_deconv_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "deconv_input_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "deconv_output_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "deconv_output_kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "deconv_output_strides",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_56": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_80": {
                "variable": {
                    "value": "fc_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "fc_input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(np.prod(test_mat.shape))",
                            "Call"
                        ],
                        [
                            "fc_input_size + added_fc_input_size",
                            "BinOp"
                        ],
                        [
                            "hidden_size",
                            "Name"
                        ],
                        [
                            "hidden_size",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BatchNorm1d_82": {
                "variable": {
                    "value": "norm_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_115": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(h, extra_fc_input)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_156": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_182": {
                "variable": {
                    "value": "fc_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "fc_input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(np.prod(test_mat.shape))",
                            "Call"
                        ],
                        [
                            "fc_input_size + added_fc_input_size",
                            "BinOp"
                        ],
                        [
                            "hidden_size",
                            "Name"
                        ],
                        [
                            "hidden_size",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BatchNorm1d_184": {
                "variable": {
                    "value": "norm_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_198": {
                "variable": {
                    "value": "deconv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "deconv_input_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_73": {
                "num_features": {
                    "value": "test_mat.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "BatchNorm2d_215": {
                "num_features": {
                    "value": "test_mat.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "rlkit/torch/core.py": {
        "torch": {}
    },
    "rlkit/torch/data.py": {
        "torch": {
            "from_numpy_56": {
                "variable": {
                    "value": "self._weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "randperm_32": {
                "n": {
                    "value": "len(self.data_source)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multinomial_65": {
                "input": {
                    "value": "self._weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "len(self._weights)",
                    "type": "Call",
                    "possible_values": []
                },
                "replacement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randperm_41": {
                "n": {
                    "value": "len(self.data_source)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "rlkit/torch/data_management/normalizer.py": {
        "torch": {
            "clamp_23": {
                "input": {
                    "value": "(v - mean) / std",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "-clip_range",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "clip_range",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.default_clip_range",
                            "Attribute"
                        ],
                        [
                            "self.default_clip_range",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "clamp_46": {
                "input": {
                    "value": "(v - mean) / std",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "-clip_range",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "clip_range",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.default_clip_range",
                            "Attribute"
                        ],
                        [
                            "self.default_clip_range",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "rlkit/torch/ddpg/ddpg.py": {
        "torch": {
            "clamp_116": {
                "variable": {
                    "value": "q_target",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rewards + (1.0 - terminals) * self.discount * target_q_values",
                            "BinOp"
                        ],
                        [
                            "q_target.detach()",
                            "Call"
                        ],
                        [
                            "torch.clamp(q_target, self.min_q_value, self.max_q_value)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "self.min_q_value",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max": {
                    "value": "self.max_q_value",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MSELoss_42": {
                "variable": {
                    "value": "qf_criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_123": {
                "input": {
                    "value": "param ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "rlkit/torch/distributions.py": {
        "torch": {
            "Normal_22": {
                "variable": {
                    "value": "self.normal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "loc": {
                    "value": "normal_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "scale": {
                    "value": "normal_std",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tanh_30": {
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.normal.sample_n(n)",
                            "Call"
                        ],
                        [
                            "self.normal.sample().detach()",
                            "Call"
                        ],
                        [
                            "self.normal_mean + self.normal_std * Normal(ptu.zeros(self.normal_mean.size()), ptu.ones(self.normal_std.size())).sample()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log_43": {
                "input": {
                    "value": "1 - value * value + self.epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_58": {
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.normal.sample_n(n)",
                            "Call"
                        ],
                        [
                            "self.normal.sample().detach()",
                            "Call"
                        ],
                        [
                            "self.normal_mean + self.normal_std * Normal(ptu.zeros(self.normal_mean.size()), ptu.ones(self.normal_std.size())).sample()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tanh_77": {
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.normal.sample_n(n)",
                            "Call"
                        ],
                        [
                            "self.normal.sample().detach()",
                            "Call"
                        ],
                        [
                            "self.normal_mean + self.normal_std * Normal(ptu.zeros(self.normal_mean.size()), ptu.ones(self.normal_std.size())).sample()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tanh_28": {
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.normal.sample_n(n)",
                            "Call"
                        ],
                        [
                            "self.normal.sample().detach()",
                            "Call"
                        ],
                        [
                            "self.normal_mean + self.normal_std * Normal(ptu.zeros(self.normal_mean.size()), ptu.ones(self.normal_std.size())).sample()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log_40": {
                "input": {
                    "value": "(1 + value) / (1 - value)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_56": {
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.normal.sample_n(n)",
                            "Call"
                        ],
                        [
                            "self.normal.sample().detach()",
                            "Call"
                        ],
                        [
                            "self.normal_mean + self.normal_std * Normal(ptu.zeros(self.normal_mean.size()), ptu.ones(self.normal_std.size())).sample()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Normal_67": {
                "loc": {
                    "value": "ptu.zeros(self.normal_mean.size())",
                    "type": "Call",
                    "possible_values": []
                },
                "scale": {
                    "value": "ptu.ones(self.normal_std.size())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_75": {
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.normal.sample_n(n)",
                            "Call"
                        ],
                        [
                            "self.normal.sample().detach()",
                            "Call"
                        ],
                        [
                            "self.normal_mean + self.normal_std * Normal(ptu.zeros(self.normal_mean.size()), ptu.ones(self.normal_std.size())).sample()",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "rlkit/torch/dqn/double_dqn.py": {
        "torch": {
            "sum_30": {
                "variable": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.qf(obs) * actions",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "rlkit/torch/dqn/dqn.py": {
        "torch": {
            "Adam_32": {
                "variable": {
                    "value": "self.qf_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.qf.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_60": {
                "variable": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.qf(obs) * actions",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MSELoss_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "rlkit/torch/her/her.py": {
        "torch": {
            "cat_15": {
                "variable": {
                    "value": "data[observations]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(obs, goals)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_16": {
                "variable": {
                    "value": "data[next_observations]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(next_obs, goals)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "rlkit/torch/modules.py": {
        "torch": {
            "SmoothL1Loss_11": {
                "variable": {
                    "value": "self.huber_loss_delta1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_30": {
                "variable": {
                    "value": "self.scale_param",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_34": {
                "variable": {
                    "value": "self.center_param",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_30": {
                "*size": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_34": {
                "*size": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "rlkit/torch/networks.py": {
        "torch": {
            "Linear_62": {
                "variable": {
                    "value": "self.last_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "Name"
                        ],
                        [
                            "next_size",
                            "Name"
                        ],
                        [
                            "input_size - obs_preprocess_size + obs_preprocess_output_size",
                            "BinOp"
                        ],
                        [
                            "next_size",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_124": {
                "variable": {
                    "value": "self.obs_preprocess_last_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "obs_preprocess_in_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "obs_preprocess_size",
                            "Name"
                        ],
                        [
                            "next_size",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "obs_preprocess_output_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_145": {
                "variable": {
                    "value": "self.last_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "Name"
                        ],
                        [
                            "next_size",
                            "Name"
                        ],
                        [
                            "input_size - obs_preprocess_size + obs_preprocess_output_size",
                            "BinOp"
                        ],
                        [
                            "next_size",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_160": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input[:, self.obs_preprocess_size:], obs_processed]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_180": {
                "variable": {
                    "value": "flat_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_189": {
                "variable": {
                    "value": "flat_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_50": {
                "variable": {
                    "value": "fc",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "Name"
                        ],
                        [
                            "next_size",
                            "Name"
                        ],
                        [
                            "input_size - obs_preprocess_size + obs_preprocess_output_size",
                            "BinOp"
                        ],
                        [
                            "next_size",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "next_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_112": {
                "variable": {
                    "value": "fc",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "obs_preprocess_in_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "obs_preprocess_size",
                            "Name"
                        ],
                        [
                            "next_size",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "next_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_133": {
                "variable": {
                    "value": "fc",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "Name"
                        ],
                        [
                            "next_size",
                            "Name"
                        ],
                        [
                            "input_size - obs_preprocess_size + obs_preprocess_output_size",
                            "BinOp"
                        ],
                        [
                            "next_size",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "next_size",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "rlkit/torch/pytorch_util.py": {
        "torch": {
            "device_58": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda: + str(gpu_id) if _use_gpu else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "set_device_66": {
                "device": {
                    "value": "gpu_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "from_numpy_77": {
                "ndarray": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "zeros_87": {
                "*size": {
                    "value": "*sizes",
                    "type": "Starred",
                    "possible_values": []
                },
                "device": {
                    "value": "torch_device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "device",
                            "Name"
                        ],
                        [
                            "device",
                            "Name"
                        ],
                        [
                            "device",
                            "Name"
                        ],
                        [
                            "device",
                            "Name"
                        ],
                        [
                            "device",
                            "Name"
                        ],
                        [
                            "device",
                            "Name"
                        ],
                        [
                            "device",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ones_93": {
                "*size": {
                    "value": "*sizes",
                    "type": "Starred",
                    "possible_values": []
                },
                "device": {
                    "value": "torch_device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "device",
                            "Name"
                        ],
                        [
                            "device",
                            "Name"
                        ],
                        [
                            "device",
                            "Name"
                        ],
                        [
                            "device",
                            "Name"
                        ],
                        [
                            "device",
                            "Name"
                        ],
                        [
                            "device",
                            "Name"
                        ],
                        [
                            "device",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ones_like_99": {
                "input": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                },
                "device": {
                    "value": "torch_device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "device",
                            "Name"
                        ],
                        [
                            "device",
                            "Name"
                        ],
                        [
                            "device",
                            "Name"
                        ],
                        [
                            "device",
                            "Name"
                        ],
                        [
                            "device",
                            "Name"
                        ],
                        [
                            "device",
                            "Name"
                        ],
                        [
                            "device",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "randn_105": {
                "*size": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                },
                "device": {
                    "value": "torch_device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "device",
                            "Name"
                        ],
                        [
                            "device",
                            "Name"
                        ],
                        [
                            "device",
                            "Name"
                        ],
                        [
                            "device",
                            "Name"
                        ],
                        [
                            "device",
                            "Name"
                        ],
                        [
                            "device",
                            "Name"
                        ],
                        [
                            "device",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_like_111": {
                "input": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                },
                "device": {
                    "value": "torch_device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "device",
                            "Name"
                        ],
                        [
                            "device",
                            "Name"
                        ],
                        [
                            "device",
                            "Name"
                        ],
                        [
                            "device",
                            "Name"
                        ],
                        [
                            "device",
                            "Name"
                        ],
                        [
                            "device",
                            "Name"
                        ],
                        [
                            "device",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_117": {
                "data": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                },
                "device": {
                    "value": "torch_device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "device",
                            "Name"
                        ],
                        [
                            "device",
                            "Name"
                        ],
                        [
                            "device",
                            "Name"
                        ],
                        [
                            "device",
                            "Name"
                        ],
                        [
                            "device",
                            "Name"
                        ],
                        [
                            "device",
                            "Name"
                        ],
                        [
                            "device",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "normal_121": {
                "mean": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "rlkit/torch/sac/policies.py": {
        "torch": {
            "cat_199": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[obs[:, self.obs_preprocess_size:], obs_processed]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_55": {
                "variable": {
                    "value": "self.last_fc_log_std",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "last_hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "action_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "clamp_87": {
                "variable": {
                    "value": "log_std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.last_fc_log_std(h)",
                            "Call"
                        ],
                        [
                            "torch.clamp(log_std, LOG_SIG_MIN, LOG_SIG_MAX)",
                            "Call"
                        ],
                        [
                            "self.log_std",
                            "Attribute"
                        ],
                        [
                            "self.last_fc_log_std(h)",
                            "Call"
                        ],
                        [
                            "torch.clamp(log_std, LOG_SIG_MIN, LOG_SIG_MAX)",
                            "Call"
                        ],
                        [
                            "self.log_std",
                            "Attribute"
                        ]
                    ]
                },
                "min": {
                    "value": "LOG_SIG_MIN",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-20",
                            "UnaryOp"
                        ]
                    ]
                },
                "max": {
                    "value": "LOG_SIG_MAX",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                }
            },
            "exp_88": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.last_fc_log_std(h)",
                            "Call"
                        ],
                        [
                            "torch.clamp(log_std, LOG_SIG_MIN, LOG_SIG_MAX)",
                            "Call"
                        ],
                        [
                            "self.log_std",
                            "Attribute"
                        ],
                        [
                            "self.last_fc_log_std(h)",
                            "Call"
                        ],
                        [
                            "torch.clamp(log_std, LOG_SIG_MIN, LOG_SIG_MAX)",
                            "Call"
                        ],
                        [
                            "self.log_std",
                            "Attribute"
                        ]
                    ]
                }
            },
            "tanh_98": {
                "variable": {
                    "value": "action",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.last_fc(h)",
                            "Call"
                        ],
                        [
                            "self.last_fc(h)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_167": {
                "variable": {
                    "value": "self.last_fc_log_std",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "last_hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "action_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "clamp_207": {
                "variable": {
                    "value": "log_std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.last_fc_log_std(h)",
                            "Call"
                        ],
                        [
                            "torch.clamp(log_std, LOG_SIG_MIN, LOG_SIG_MAX)",
                            "Call"
                        ],
                        [
                            "self.log_std",
                            "Attribute"
                        ],
                        [
                            "self.last_fc_log_std(h)",
                            "Call"
                        ],
                        [
                            "torch.clamp(log_std, LOG_SIG_MIN, LOG_SIG_MAX)",
                            "Call"
                        ],
                        [
                            "self.log_std",
                            "Attribute"
                        ]
                    ]
                },
                "min": {
                    "value": "LOG_SIG_MIN",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-20",
                            "UnaryOp"
                        ]
                    ]
                },
                "max": {
                    "value": "LOG_SIG_MAX",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                }
            },
            "exp_208": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.last_fc_log_std(h)",
                            "Call"
                        ],
                        [
                            "torch.clamp(log_std, LOG_SIG_MIN, LOG_SIG_MAX)",
                            "Call"
                        ],
                        [
                            "self.log_std",
                            "Attribute"
                        ],
                        [
                            "self.last_fc_log_std(h)",
                            "Call"
                        ],
                        [
                            "torch.clamp(log_std, LOG_SIG_MIN, LOG_SIG_MAX)",
                            "Call"
                        ],
                        [
                            "self.log_std",
                            "Attribute"
                        ]
                    ]
                }
            },
            "tanh_218": {
                "variable": {
                    "value": "action",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.last_fc(h)",
                            "Call"
                        ],
                        [
                            "self.last_fc(h)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "rlkit/torch/sac/sac.py": {
        "torch": {
            "MSELoss_63": {
                "variable": {
                    "value": "self.qf_criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_64": {
                "variable": {
                    "value": "self.vf_criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "min_116": {
                "variable": {
                    "value": "q_new_actions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.qf1(obs, new_obs_actions)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "min_131": {
                "input": {
                    "value": "self.target_qf1(next_obs, new_next_actions)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "rlkit/torch/skewfit/online_vae_algorithm.py": {
        "torch": {
            "Pipe_129": {
                "variable": {
                    "value": "(self._vae_conn_pipe, process_pipe)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "rlkit/torch/skewfit/online_vae_algorithm_segmented.py": {
        "torch": {
            "Pipe_205": {
                "variable": {
                    "value": "(self._vae_conn_pipe, process_pipe)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "rlkit/torch/td3/td3.py": {
        "torch": {
            "clamp_88": {
                "variable": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ptu.randn(next_actions.shape) * self.target_policy_noise",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(noise, -self.target_policy_noise_clip, self.target_policy_noise_clip)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "-self.target_policy_noise_clip",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "self.target_policy_noise_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "min_97": {
                "variable": {
                    "value": "target_q_values",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_q1_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.target_qf1(next_obs, noisy_next_actions)",
                            "Call"
                        ]
                    ]
                }
            },
            "MSELoss_41": {
                "variable": {
                    "value": "qf_criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "rlkit/torch/torch_rl_algorithm.py": {
        "torch": {}
    },
    "rlkit/torch/vae/conv_vae.py": {
        "torch": {
            "Linear_187": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.encoder.output_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "representation_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_188": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.encoder.output_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "representation_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "abs_214": {
                "input": {
                    "value": "self.fc2(h)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mse_loss_242": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.narrow(start=0, length=self.imlength, dim=1).contiguous().view(-1, self.imlength)",
                            "Call"
                        ],
                        [
                            "inputs.narrow(start=0, length=self.imlength, dim=1).contiguous().view(-1, self.imlength)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "obs_distribution_params[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "reduction": {
                    "value": "elementwise_mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "clamp_223": {
                "input": {
                    "value": "decoded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.decoder(latents).view(-1, self.imsize * self.imsize * self.input_channels)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_233": {
                "input": {
                    "value": "obs_distribution_params[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.narrow(start=0, length=self.imlength, dim=1).contiguous().view(-1, self.imlength)",
                            "Call"
                        ],
                        [
                            "inputs.narrow(start=0, length=self.imlength, dim=1).contiguous().view(-1, self.imlength)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "elementwise_mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ones_like_224": {
                "input": {
                    "value": "decoded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.decoder(latents).view(-1, self.imsize * self.imsize * self.input_channels)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "rlkit/torch/vae/vae_base.py": {
        "torch": {
            "Normal_127": {
                "variable": {
                    "value": "decoder_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "dec_mu",
                    "type": "variable",
                    "possible_values": []
                },
                "scale": {
                    "value": "dec_var.pow(0.5)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_119": {
                "input": {
                    "value": "reconstruction_of_x",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "elementwise_mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sum_112": {
                "input": {
                    "value": "1 + logvar - mu.pow(2) - logvar.exp()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_112": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "rlkit/torch/vae/vae_trainer.py": {
        "torch": {
            "Normal_47": {
                "variable": {
                    "value": "true_prior",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "ptu.zeros((batch_size, representation_size))",
                    "type": "Call",
                    "possible_values": []
                },
                "scale": {
                    "value": "ptu.ones((batch_size, representation_size))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Normal_61": {
                "variable": {
                    "value": "vae_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "mus",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ptu.get_numpy(mus)",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "stds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logvars.exp().pow(0.5)",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_166": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(self.model.parameters())",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Adam_287": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mse_loss_337": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "latents_ori",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.encode(batch)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "target": {
                    "value": "latents_masked",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.encode(masked_batch)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "stack_553": {
                "variable": {
                    "value": "all_imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "imgs + recons",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_613": {
                "variable": {
                    "value": "all_imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "imgs + recons",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_66": {
                "variable": {
                    "value": "log_d_x_given_z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "imgs * decoded + (1 - imgs) * (1 - decoded) + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_66": {
                "variable": {
                    "value": "log_d_x_given_z",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_208": {
                "variable": {
                    "value": "self.train_dataloader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.train_dataset_pt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "InfiniteRandomSampler(self.train_dataset)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.shape[0]",
                            "Subscript"
                        ],
                        [
                            "512",
                            "Constant"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "train_data_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_216": {
                "variable": {
                    "value": "self.test_dataloader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.test_dataset_pt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "InfiniteRandomSampler(self.test_dataset)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.shape[0]",
                            "Subscript"
                        ],
                        [
                            "512",
                            "Constant"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mse_loss_586": {
                "variable": {
                    "value": "mse",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch_img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ptu.from_numpy(img)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "reconstructions",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "elementwise_mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Normal_71": {
                "variable": {
                    "value": "decoder_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "dec_mu",
                    "type": "variable",
                    "possible_values": []
                },
                "scale": {
                    "value": "dec_var.pow(0.5)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_251": {
                "variable": {
                    "value": "self.train_dataloader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.train_dataset_pt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "InfiniteWeightedRandomSampler(self.train_dataset, self._train_weights)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.train_data_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_460": {
                "variable": {
                    "value": "comparison",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[next_obs[:n].narrow(start=0, length=self.imlength, dim=1).contiguous().view(-1, self.input_channels, self.imsize, self.imsize).transpose(2, 3), reconstructions.view(self.batch_size, self.input_channels, self.imsize, self.imsize)[:n].transpose(2, 3)]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/run_goal_conditioned_policy.py": {
        "torch": {
            "load_74": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "osp.join(args.dir, 'params.pkl')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "segmentation/DataLoader.py": {
        "torch": {}
    },
    "segmentation/segment_image.py": {
        "torch": {
            "tensor_113": {
                "variable": {
                    "value": "tempImg",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "tempImg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "copy.deepcopy(image)",
                            "Call"
                        ],
                        [
                            "tempImg.reshape(3, imsize, imsize).transpose()",
                            "Call"
                        ],
                        [
                            "tempImg[::-1, :, ::-1]",
                            "Subscript"
                        ],
                        [
                            "tempImg * 255",
                            "BinOp"
                        ],
                        [
                            "tempImg.astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "copy.deepcopy(img)",
                            "Call"
                        ],
                        [
                            "tempImg.reshape(3, imsize, imsize).transpose()",
                            "Call"
                        ],
                        [
                            "tempImg[::-1, :, ::-1]",
                            "Subscript"
                        ],
                        [
                            "tempImg * 255",
                            "BinOp"
                        ],
                        [
                            "tempImg.astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "np.rollaxis(tempImg, 2, 0)",
                            "Call"
                        ],
                        [
                            "torch.tensor(tempImg).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "tempImg.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_113": {
                "variable": {
                    "value": "tempImg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_17": {
                "f": {
                    "value": "./segmentation/pytorchmodel_sawyer_hurdle",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_22": {
                "f": {
                    "value": "./segmentation/pytorchmodel_sawyer_push",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_27": {
                "f": {
                    "value": "./segmentation/pytorchmodel_sawyer_door",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_32": {
                "f": {
                    "value": "./segmentation/pytorchmodel_sawyer_pickup",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "segmentation/test_script.py": {
        "torch": {
            "DataLoader_24": {
                "variable": {
                    "value": "testDataLoader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testDataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FrankaSegmentationDataset(testDir)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BCELoss_30": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_31": {
                "f": {
                    "value": "modelDir",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "no_grad_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "segmentation/train_script.py": {
        "torch": {
            "DataLoader_19": {
                "variable": {
                    "value": "trainDataLoader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainDataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FrankaSegmentationDataset(trainDir)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_22": {
                "variable": {
                    "value": "valDataLoader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "valDataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FrankaSegmentationDataset(valDir)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "SGD_31": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0005",
                    "type": "float",
                    "possible_values": []
                }
            },
            "BCELoss_32": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_65": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "modelDir + '/pytorchmodel_epoch' + str(epoch) + time.strftime('_%Y%m%d_%H_%M_%S')",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "segmentation/training_data_generation.py": {
        "torch": {}
    },
    "segmentation/unet/unet_model.py": {
        "torch": {
            "sigmoid_32": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.up1(x5, x4)",
                            "Call"
                        ],
                        [
                            "self.up2(x, x3)",
                            "Call"
                        ],
                        [
                            "self.up3(x, x2)",
                            "Call"
                        ],
                        [
                            "self.up4(x, x1)",
                            "Call"
                        ],
                        [
                            "self.outc(x)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "segmentation/unet/unet_parts.py": {
        "torch": {
            "Sequential_12": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_ch, out_ch, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_39": {
                "variable": {
                    "value": "self.mpconv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.MaxPool2d(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_69": {
                "variable": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.up(x1)",
                            "Call"
                        ],
                        [
                            "F.pad(x1, (diffX // 2, diffX - diffX // 2, diffY // 2, diffY - diffY // 2))",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(diffX // 2, diffX - diffX // 2, diffY // 2, diffY - diffY // 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_76": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x2, x1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_84": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Upsample_56": {
                "variable": {
                    "value": "self.up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_58": {
                "variable": {
                    "value": "self.up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_ch // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_ch // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_13": {
                "in_channels": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_14": {
                "num_features": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_15": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_16": {
                "in_channels": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_17": {
                "num_features": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_18": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_40": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "test_latent_space/test_LSTM.py": {
        "torch": {}
    },
    "test_latent_space/test_LSTM2.py": {
        "torch": {}
    },
    "test_latent_space/test_masked_traj.py": {
        "torch": {
            "load_98": {
                "variable": {
                    "value": "lstm",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "./data/local/debuglstm/6-10-lstm2-2/params.pkl",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_99": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "./data/seuss/6-10-skewfit-sawyerhurdle-lstm2-ae-loss-0.5/6-10-skewfit-sawyerhurdle-lstm2-ae-loss-0.5/6-10-skewfit-sawyerhurdle-lstm2-ae-loss-0.5_2020_06_10_02_27_34_0002/200/params.pkl",
                    "type": "str",
                    "possible_values": []
                }
            },
            "is_available_92": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "test_latent_space/test_vae.py": {
        "torch": {}
    }
}