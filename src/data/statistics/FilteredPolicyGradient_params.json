{
    "autograd_hacks.py": {
        "torch": {
            "symeig_256": {
                "variable": {
                    "value": "(s, u)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "eigenvectors": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sqrt_264": {
                "variable": {
                    "value": "psigma_diag",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s[above_cutoff]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "softmax_227": {
                "variable": {
                    "value": "batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "eye_229": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "o",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "B.shape[0]",
                            "Subscript"
                        ],
                        [
                            "B.shape[0]",
                            "Subscript"
                        ],
                        [
                            "range(o)",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_231": {
                "variable": {
                    "value": "outer_prod_part",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ij,ik->ijk",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "batch",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.softmax(output, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_175": {
                "variable": {
                    "value": "B",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "layer.backprops_list",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_180": {
                "variable": {
                    "value": "A",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[A] * o",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "einsum_181": {
                "variable": {
                    "value": "Jb",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "oni,onj->onij",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "B",
                    "type": "Call",
                    "possible_values": [
                        [
                            "layer.backprops_list[0] * n",
                            "BinOp"
                        ],
                        [
                            "layer.backprops_list[0]",
                            "Subscript"
                        ],
                        [
                            "B.reshape(n, -1, A.shape[-1])",
                            "Call"
                        ],
                        [
                            "torch.stack(layer.backprops_list)",
                            "Call"
                        ],
                        [
                            "torch.stack([Bt.reshape(n, do, -1) for Bt in layer.backprops_list])",
                            "Call"
                        ],
                        [
                            "u @ torch.diag(psigma_diag) @ u.t()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_181": {
                "variable": {
                    "value": "Jb",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "n * o",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "eye_244": {
                "variable": {
                    "value": "id_mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "output_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "unfold_154": {
                "variable": {
                    "value": "A",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "A",
                    "type": "Call",
                    "possible_values": [
                        [
                            "layer.activations",
                            "Attribute"
                        ],
                        [
                            "torch.nn.functional.unfold(A, layer.kernel_size)",
                            "Call"
                        ],
                        [
                            "layer.activations",
                            "Attribute"
                        ],
                        [
                            "torch.stack([A] * o)",
                            "Call"
                        ],
                        [
                            "layer.activations.detach()",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.unfold(A, (Kh, Kw))",
                            "Call"
                        ],
                        [
                            "torch.stack([A] * o)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "layer.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "einsum_156": {
                "variable": {
                    "value": "grad1",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijk,ilk->ijl",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "B",
                    "type": "Call",
                    "possible_values": [
                        [
                            "layer.backprops_list[0] * n",
                            "BinOp"
                        ],
                        [
                            "layer.backprops_list[0]",
                            "Subscript"
                        ],
                        [
                            "B.reshape(n, -1, A.shape[-1])",
                            "Call"
                        ],
                        [
                            "torch.stack(layer.backprops_list)",
                            "Call"
                        ],
                        [
                            "torch.stack([Bt.reshape(n, do, -1) for Bt in layer.backprops_list])",
                            "Call"
                        ],
                        [
                            "u @ torch.diag(psigma_diag) @ u.t()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "unfold_194": {
                "variable": {
                    "value": "A",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "A",
                    "type": "Call",
                    "possible_values": [
                        [
                            "layer.activations",
                            "Attribute"
                        ],
                        [
                            "torch.nn.functional.unfold(A, layer.kernel_size)",
                            "Call"
                        ],
                        [
                            "layer.activations",
                            "Attribute"
                        ],
                        [
                            "torch.stack([A] * o)",
                            "Call"
                        ],
                        [
                            "layer.activations.detach()",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.unfold(A, (Kh, Kw))",
                            "Call"
                        ],
                        [
                            "torch.stack([A] * o)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(Kh, Kw)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "stack_196": {
                "variable": {
                    "value": "B",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[Bt.reshape(n, do, -1) for Bt in layer.backprops_list]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_199": {
                "variable": {
                    "value": "A",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[A] * o",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "einsum_200": {
                "variable": {
                    "value": "Jb",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "onij,onkj->onik",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "B",
                    "type": "Call",
                    "possible_values": [
                        [
                            "layer.backprops_list[0] * n",
                            "BinOp"
                        ],
                        [
                            "layer.backprops_list[0]",
                            "Subscript"
                        ],
                        [
                            "B.reshape(n, -1, A.shape[-1])",
                            "Call"
                        ],
                        [
                            "torch.stack(layer.backprops_list)",
                            "Call"
                        ],
                        [
                            "torch.stack([Bt.reshape(n, do, -1) for Bt in layer.backprops_list])",
                            "Call"
                        ],
                        [
                            "u @ torch.diag(psigma_diag) @ u.t()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "einsum_202": {
                "variable": {
                    "value": "Hi",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "onij,onkl->nijkl",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "Jb",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.einsum('oni,onj->onij', B, A).reshape(n * o, -1)",
                            "Call"
                        ],
                        [
                            "torch.einsum('onij,onkj->onik', B, A)",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_203": {
                "variable": {
                    "value": "Jb_bias",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "onij->oni",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "B",
                    "type": "Call",
                    "possible_values": [
                        [
                            "layer.backprops_list[0] * n",
                            "BinOp"
                        ],
                        [
                            "layer.backprops_list[0]",
                            "Subscript"
                        ],
                        [
                            "B.reshape(n, -1, A.shape[-1])",
                            "Call"
                        ],
                        [
                            "torch.stack(layer.backprops_list)",
                            "Call"
                        ],
                        [
                            "torch.stack([Bt.reshape(n, do, -1) for Bt in layer.backprops_list])",
                            "Call"
                        ],
                        [
                            "u @ torch.diag(psigma_diag) @ u.t()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "einsum_204": {
                "variable": {
                    "value": "Hi_bias",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "oni,onj->nij",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "Jb_bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.einsum('onij->oni', B)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_262": {
                "input": {
                    "value": "abs(s)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "diag_267": {
                "input": {
                    "value": "psigma_diag",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.sqrt(s[above_cutoff])",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_149": {
                "equation": {
                    "value": "ni,nj->nij",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "B",
                    "type": "Call",
                    "possible_values": [
                        [
                            "layer.backprops_list[0] * n",
                            "BinOp"
                        ],
                        [
                            "layer.backprops_list[0]",
                            "Subscript"
                        ],
                        [
                            "B.reshape(n, -1, A.shape[-1])",
                            "Call"
                        ],
                        [
                            "torch.stack(layer.backprops_list)",
                            "Call"
                        ],
                        [
                            "torch.stack([Bt.reshape(n, do, -1) for Bt in layer.backprops_list])",
                            "Call"
                        ],
                        [
                            "u @ torch.diag(psigma_diag) @ u.t()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "einsum_182": {
                "equation": {
                    "value": "ni,nj->ij",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "Jb",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.einsum('oni,onj->onij', B, A).reshape(n * o, -1)",
                            "Call"
                        ],
                        [
                            "torch.einsum('onij,onkj->onik', B, A)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_246": {
                "tensors": {
                    "value": "[id_mat[out_idx]] * batch_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_160": {
                "input": {
                    "value": "B",
                    "type": "Call",
                    "possible_values": [
                        [
                            "layer.backprops_list[0] * n",
                            "BinOp"
                        ],
                        [
                            "layer.backprops_list[0]",
                            "Subscript"
                        ],
                        [
                            "B.reshape(n, -1, A.shape[-1])",
                            "Call"
                        ],
                        [
                            "torch.stack(layer.backprops_list)",
                            "Call"
                        ],
                        [
                            "torch.stack([Bt.reshape(n, do, -1) for Bt in layer.backprops_list])",
                            "Call"
                        ],
                        [
                            "u @ torch.diag(psigma_diag) @ u.t()",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "einsum_187": {
                "equation": {
                    "value": "oni,onj->ij",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "B",
                    "type": "Call",
                    "possible_values": [
                        [
                            "layer.backprops_list[0] * n",
                            "BinOp"
                        ],
                        [
                            "layer.backprops_list[0]",
                            "Subscript"
                        ],
                        [
                            "B.reshape(n, -1, A.shape[-1])",
                            "Call"
                        ],
                        [
                            "torch.stack(layer.backprops_list)",
                            "Call"
                        ],
                        [
                            "torch.stack([Bt.reshape(n, do, -1) for Bt in layer.backprops_list])",
                            "Call"
                        ],
                        [
                            "u @ torch.diag(psigma_diag) @ u.t()",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "main.py": {
        "torch": {
            "set_default_tensor_type_22": {
                "t": {
                    "value": "torch.DoubleTensor",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_56": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_66": {
                "variable": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "state",
                    "type": "Call",
                    "possible_values": [
                        [
                            "env.reset()",
                            "Call"
                        ],
                        [
                            "running_state(state)",
                            "Call"
                        ],
                        [
                            "next_state",
                            "Name"
                        ],
                        [
                            "torch.from_numpy(state).unsqueeze(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_66": {
                "variable": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "normal_68": {
                "variable": {
                    "value": "action",
                    "type": "Variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "action_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "std": {
                    "value": "action_std",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_74": {
                "variable": {
                    "value": "actions",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_75": {
                "variable": {
                    "value": "states",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_80": {
                "variable": {
                    "value": "returns",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_81": {
                "variable": {
                    "value": "deltas",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_82": {
                "variable": {
                    "value": "advantages",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "save_249": {
                "obj": {
                    "value": "policy_net.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "ckpt_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model_prefix + '_model.pth.tar'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_114": {
                "variable": {
                    "value": "actor_grad_logp",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "actor_grad_logp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(actor_grad_logp, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "grad_108": {
                "outputs": {
                    "value": "log_policy.mean()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "policy_net.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tensor_159": {},
            "Tensor_143": {},
            "exp_173": {
                "input": {
                    "value": "log_prob - fixed_log_prob",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_167": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models.py": {
        "torch": {
            "Linear_10": {
                "variable": {
                    "value": "self.affine1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_13": {
                "variable": {
                    "value": "self.action_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_outputs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tanh_26": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.affine1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_32": {
                "variable": {
                    "value": "action_std",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "action_log_std",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.log_std * torch.ones_like(action_mean)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Linear_39": {
                "variable": {
                    "value": "self.affine1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_41": {
                "variable": {
                    "value": "self.value_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tanh_46": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.affine1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_like_31": {
                "input": {
                    "value": "action_mean",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.action_mean(x)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "sever.py": {
        "torch": {
            "dot_17": {
                "variable": {
                    "value": "rdotr",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "r",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "b.clone()",
                            "Call"
                        ],
                        [
                            "b.clone() - hessian_vector_product_sever(actor_grad_logp, x, cg_damping=0.1)",
                            "BinOp"
                        ],
                        [
                            "r - alpha * f_Ax",
                            "BinOp"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                },
                "other": {
                    "value": "r",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "b.clone()",
                            "Call"
                        ],
                        [
                            "b.clone() - hessian_vector_product_sever(actor_grad_logp, x, cg_damping=0.1)",
                            "BinOp"
                        ],
                        [
                            "r - alpha * f_Ax",
                            "BinOp"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_12": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "b.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dot_23": {
                "variable": {
                    "value": "new_rdotr",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "r",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "b.clone()",
                            "Call"
                        ],
                        [
                            "b.clone() - hessian_vector_product_sever(actor_grad_logp, x, cg_damping=0.1)",
                            "BinOp"
                        ],
                        [
                            "r - alpha * f_Ax",
                            "BinOp"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                },
                "other": {
                    "value": "r",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "b.clone()",
                            "Call"
                        ],
                        [
                            "b.clone() - hessian_vector_product_sever(actor_grad_logp, x, cg_damping=0.1)",
                            "BinOp"
                        ],
                        [
                            "r - alpha * f_Ax",
                            "BinOp"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "svd_lowrank_44": {
                "variable": {
                    "value": "(u, s, v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "A": {
                    "value": "grads",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "actor_grad_logp[indices] * torch.mv(actor_grad_logp[indices], search_dir).unsqueeze(dim=1) - actor_loss_grad[indices]",
                            "BinOp"
                        ],
                        [
                            "grads - grads.mean(dim=(-2,), keepdim=True)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "svd_lowrank_48": {
                "variable": {
                    "value": "(u, s, v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "A": {
                    "value": "grads",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "actor_grad_logp[indices] * torch.mv(actor_grad_logp[indices], search_dir).unsqueeze(dim=1) - actor_loss_grad[indices]",
                            "BinOp"
                        ],
                        [
                            "grads - grads.mean(dim=(-2,), keepdim=True)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "topk_52": {
                "variable": {
                    "value": "(_, topk_index)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "outlier_score",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.mv(grads, top_right_eigenvector) ** 2",
                            "BinOp"
                        ]
                    ]
                },
                "k": {
                    "value": "round(n * p)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mv_8": {
                "input": {
                    "value": "actor_grad_logp",
                    "type": "Variable",
                    "possible_values": []
                },
                "vec": {
                    "value": "p",
                    "type": "Name",
                    "possible_values": [
                        [
                            "r.clone()",
                            "Call"
                        ],
                        [
                            "r + betta * p",
                            "BinOp"
                        ],
                        [
                            "0.05",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "dot_20": {
                "input": {
                    "value": "p",
                    "type": "Name",
                    "possible_values": [
                        [
                            "r.clone()",
                            "Call"
                        ],
                        [
                            "r + betta * p",
                            "BinOp"
                        ],
                        [
                            "0.05",
                            "MethodArgument"
                        ]
                    ]
                },
                "other": {
                    "value": "f_Ax",
                    "type": "Name",
                    "possible_values": [
                        [
                            "hessian_vector_product_sever(actor_grad_logp, p, cg_damping=0.1)",
                            "Call"
                        ]
                    ]
                }
            },
            "mv_51": {
                "input": {
                    "value": "grads",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "actor_grad_logp[indices] * torch.mv(actor_grad_logp[indices], search_dir).unsqueeze(dim=1) - actor_loss_grad[indices]",
                            "BinOp"
                        ],
                        [
                            "grads - grads.mean(dim=(-2,), keepdim=True)",
                            "BinOp"
                        ]
                    ]
                },
                "vec": {
                    "value": "top_right_eigenvector",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "v[:, 0]",
                            "Subscript"
                        ],
                        [
                            "v[:, 0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "mv_39": {
                "input": {
                    "value": "actor_grad_logp[indices]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "vec": {
                    "value": "search_dir",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "conjugate_gradient_sever(actor_grad_logp[indices], actor_loss_grad[indices].mean(dim=0), x=search_dir, nsteps=nsteps)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_39": {
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "trpo.py": {
        "torch": {
            "dot_17": {
                "variable": {
                    "value": "rdotr",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "r",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "b.clone()",
                            "Call"
                        ],
                        [
                            "b.clone() - Avp(x)",
                            "BinOp"
                        ],
                        [
                            "r - alpha * _Avp",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "r",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "b.clone()",
                            "Call"
                        ],
                        [
                            "b.clone() - Avp(x)",
                            "BinOp"
                        ],
                        [
                            "r - alpha * _Avp",
                            "BinOp"
                        ]
                    ]
                }
            },
            "grad_56": {
                "variable": {
                    "value": "grads",
                    "type": "Variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "get_loss()",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_78": {
                "variable": {
                    "value": "lm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "shs / max_kl",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_12": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "b.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dot_23": {
                "variable": {
                    "value": "new_rdotr",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "r",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "b.clone()",
                            "Call"
                        ],
                        [
                            "b.clone() - Avp(x)",
                            "BinOp"
                        ],
                        [
                            "r - alpha * _Avp",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "r",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "b.clone()",
                            "Call"
                        ],
                        [
                            "b.clone() - Avp(x)",
                            "BinOp"
                        ],
                        [
                            "r - alpha * _Avp",
                            "BinOp"
                        ]
                    ]
                }
            },
            "grad_63": {
                "variable": {
                    "value": "grads",
                    "type": "Variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "kl",
                    "type": "Call",
                    "possible_values": [
                        [
                            "get_kl()",
                            "Call"
                        ],
                        [
                            "kl.mean()",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_64": {
                "variable": {
                    "value": "flat_grad_kl",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[grad.view(-1) for grad in grads]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "grad_67": {
                "variable": {
                    "value": "grads",
                    "type": "Variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "kl_v",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(flat_grad_kl * Variable(v)).sum()",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_57": {
                "tensors": {
                    "value": "[grad.view(-1) for grad in grads]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "dot_20": {
                "input": {
                    "value": "p",
                    "type": "Name",
                    "possible_values": [
                        [
                            "r.clone()",
                            "Call"
                        ],
                        [
                            "r + betta * p",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "_Avp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Avp(p)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_68": {
                "tensors": {
                    "value": "[grad.contiguous().view(-1) for grad in grads]",
                    "type": "ListComp",
                    "possible_values": []
                }
            }
        }
    },
    "utils.py": {
        "torch": {
            "zeros_like_9": {
                "variable": {
                    "value": "returns",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rewards",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Normal_38": {
                "variable": {
                    "value": "normal",
                    "type": "Variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "mu",
                    "type": "Variable",
                    "possible_values": []
                },
                "scale": {
                    "value": "std",
                    "type": "Name",
                    "possible_values": [
                        [
                            "returns.std()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_47": {
                "variable": {
                    "value": "flat_params",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "params",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_68": {
                "variable": {
                    "value": "flat_grad",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "grads",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "log_27": {
                "input": {
                    "value": "2 * var * math.pi",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    }
}