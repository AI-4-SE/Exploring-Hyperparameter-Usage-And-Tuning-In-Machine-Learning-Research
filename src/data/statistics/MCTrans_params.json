{
    "mctrans/data/datasets/base.py": {
        "sklearn": {
            "KFold_89": {
                "variable": {
                    "value": "kfold",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "fold_nums",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "5",
                            "MethodArgument"
                        ],
                        [
                            "5",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        },
        "torch": {}
    },
    "mctrans/data/builder.py": {
        "torch": {
            "DistributedSampler_179": {
                "variable": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "build_from_cfg(cfg, DATASETS, default_args)",
                            "Call"
                        ]
                    ]
                },
                "num_replicas": {
                    "value": "world_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "rank": {
                    "value": "rank",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "Constant"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "pad_78": {
                "input": {
                    "value": "sample.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pad": {
                    "value": "pad",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[0 for _ in range(batch[i].pad_dims * 2)]",
                            "ListComp"
                        ]
                    ]
                },
                "value": {
                    "value": "sample.padding_value",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "mctrans/data/transforms/utils.py": {
        "torch": {
            "interpolate_32": {
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tuple((int(x) for x in size))",
                            "Call"
                        ],
                        [
                            "tuple((int(x) for x in size))",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "scale_factor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "mode": {
                    "value": "mode",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'nearest'",
                            "MethodArgument"
                        ]
                    ]
                },
                "align_corners": {
                    "value": "align_corners",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "mctrans/metrics/base.py": {
        "torch": {
            "histc_76": {
                "variable": {
                    "value": "area_intersect",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "intersect.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "bins": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "num_classes - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "histc_78": {
                "variable": {
                    "value": "area_pred_label",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_label.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "bins": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "num_classes - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "histc_80": {
                "variable": {
                    "value": "area_label",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "bins": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "num_classes - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_112": {
                "variable": {
                    "value": "total_area_intersect",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_classes,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_113": {
                "variable": {
                    "value": "total_area_union",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_classes,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_114": {
                "variable": {
                    "value": "total_area_pred_label",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_classes,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_115": {
                "variable": {
                    "value": "total_area_label",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_classes,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_51": {
                "variable": {
                    "value": "pred_label",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.load(pred_label)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_53": {
                "variable": {
                    "value": "pred_label",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pred_label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(np.load(pred_label))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(pred_label)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(pred_label, dim=0)",
                            "Call"
                        ],
                        [
                            "pred_label[mask]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_56": {
                "variable": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mmcv.imread(label, flag='unchanged', backend='pillow')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_59": {
                "variable": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(mmcv.imread(label, flag='unchanged', backend='pillow'))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(label)",
                            "Call"
                        ],
                        [
                            "label - 1",
                            "BinOp"
                        ],
                        [
                            "label[mask]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "squeeze_70": {
                "variable": {
                    "value": "pred_label",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(np.load(pred_label))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(pred_label)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(pred_label, dim=0)",
                            "Call"
                        ],
                        [
                            "pred_label[mask]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_300": {
                "variable": {
                    "value": "f_value",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f_score(x[0], x[1], beta) for x in zip(precision, recall)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            }
        }
    },
    "mctrans/metrics/hausdorff_distance.py": {
        "torch": {
            "from_numpy_36": {
                "variable": {
                    "value": "y_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.load(y_pred)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_38": {
                "variable": {
                    "value": "y_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "y_pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(np.load(y_pred))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(y_pred)",
                            "Call"
                        ],
                        [
                            "y_pred.float()",
                            "Call"
                        ],
                        [
                            "torch.squeeze(y_pred, dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_41": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mmcv.imread(y, flag='unchanged', backend='pillow')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_44": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(mmcv.imread(y, flag='unchanged', backend='pillow'))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(y)",
                            "Call"
                        ],
                        [
                            "y.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_52": {
                "variable": {
                    "value": "y_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(np.load(y_pred))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(y_pred)",
                            "Call"
                        ],
                        [
                            "y_pred.float()",
                            "Call"
                        ],
                        [
                            "torch.squeeze(y_pred, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_68": {
                "ndarray": {
                    "value": "hd",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.empty((batch_size, n_class))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "mctrans/models/builder.py": {
        "torch": {
            "Sequential_31": {
                "*args": {
                    "value": "*modules",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "mctrans/models/centers/cenet.py": {
        "torch": {
            "Conv2d_11": {
                "variable": {
                    "value": "self.dilate1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "channel",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channel",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_12": {
                "variable": {
                    "value": "self.dilate2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "channel",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channel",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_13": {
                "variable": {
                    "value": "self.dilate3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "channel",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channel",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_14": {
                "variable": {
                    "value": "self.conv1x1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "channel",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channel",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_15": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_33": {
                "variable": {
                    "value": "self.pool1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_34": {
                "variable": {
                    "value": "self.pool2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_35": {
                "variable": {
                    "value": "self.pool3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[5, 5]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_36": {
                "variable": {
                    "value": "self.pool4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[6, 6]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_38": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "in_channels[-1]",
                            "Subscript"
                        ],
                        [
                            "[240]",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_42": {
                "variable": {
                    "value": "self.layer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv(self.pool1(x))",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_43": {
                "variable": {
                    "value": "self.layer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv(self.pool2(x))",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_44": {
                "variable": {
                    "value": "self.layer3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv(self.pool3(x))",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_45": {
                "variable": {
                    "value": "self.layer4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv(self.pool4(x))",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_47": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.layer1, self.layer2, self.layer3, self.layer4, x]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "mctrans/models/centers/mctrans.py": {
        "torch": {
            "ModuleList_34": {
                "variable": {
                    "value": "self.projs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_56": {
                "variable": {
                    "value": "self.level_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(n_levels, d_model)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_71": {
                "variable": {
                    "value": "valid_H",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "~mask[:, :, 0]",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_72": {
                "variable": {
                    "value": "valid_W",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "~mask[:, 0, :]",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_75": {
                "variable": {
                    "value": "valid_ratio",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[valid_ratio_w, valid_ratio_h]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_123": {
                "variable": {
                    "value": "features_flatten",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "features_flatten",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(features_flatten, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_124": {
                "variable": {
                    "value": "mask_flatten",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mask_flatten",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(mask_flatten, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_125": {
                "variable": {
                    "value": "lvl_pos_embed_flatten",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "lvl_pos_embed_flatten",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(lvl_pos_embed_flatten, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "as_tensor_126": {
                "variable": {
                    "value": "spatial_shapes",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "spatial_shapes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.as_tensor(spatial_shapes, dtype=torch.long, device=features_flatten.device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "features_flatten.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_127": {
                "variable": {
                    "value": "level_start_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(spatial_shapes.new_zeros((1,)), spatial_shapes.prod(1).cumsum(0)[:-1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "stack_128": {
                "variable": {
                    "value": "valid_ratios",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.get_valid_ratio(m) for m in masks]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_89": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(n, h, w)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "mctrans/models/centers/non_local.py": {
        "torch": {
            "matmul_78": {
                "variable": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "theta_x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.theta(x).view(batch_size, self.inter_channels, -1)",
                            "Call"
                        ],
                        [
                            "theta_x.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "phi_x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.phi(x).view(batch_size, self.inter_channels, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_82": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f_div_C",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "f / N",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "g_x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.g(x).view(batch_size, self.inter_channels, -1)",
                            "Call"
                        ],
                        [
                            "g_x.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "MaxPool3d_26": {
                "variable": {
                    "value": "max_pool_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_41": {
                "variable": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv_nd(in_channels=self.inter_channels, out_channels=self.in_channels, kernel_size=1, stride=1, padding=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_61": {
                "variable": {
                    "value": "self.g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.g",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_62": {
                "variable": {
                    "value": "self.phi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.phi",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MaxPool2d_30": {
                "variable": {
                    "value": "max_pool_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "MaxPool1d_34": {
                "variable": {
                    "value": "max_pool_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "mctrans/models/centers/vit.py": {
        "torch": {
            "zeros_11": {
                "variable": {
                    "value": "pe",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "max_length",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "5000",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "embedding_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "arange_12": {
                "variable": {
                    "value": "position",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "max_length",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "5000",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_12": {
                "variable": {
                    "value": "position",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_13": {
                "variable": {
                    "value": "div_term",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.arange(0, embedding_dim, 2).float() * (-torch.log(torch.tensor(10000.0)) / embedding_dim)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_17": {
                "variable": {
                    "value": "pe[:, 0::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "position * div_term",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_18": {
                "variable": {
                    "value": "pe[:, 1::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "position * div_term",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Embedding_30": {
                "variable": {
                    "value": "self.pe",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "max_position_embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embedding_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_55": {
                "variable": {
                    "value": "self.qkv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "qkv_bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_56": {
                "variable": {
                    "value": "self.attn_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_57": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_58": {
                "variable": {
                    "value": "self.proj_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LayerNorm_95": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "LayerNorm_105": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_106": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_116": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(dim, hidden_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_157": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_178": {
                "variable": {
                    "value": "self.linear_encoding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "flatten_dims",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_channel",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "embedding_dims",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "flatten_dims",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "arange_35": {
                "start": {
                    "value": "max_position_embeddings",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_117": {
                "in_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "GELU_118": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_119": {
                "p": {
                    "value": "dropout_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_120": {
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_121": {
                "p": {
                    "value": "dropout_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "arange_14": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "embedding_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "step": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_15": {
                "input": {
                    "value": "torch.tensor(10000.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_15": {
                "data": {
                    "value": "10000.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "mctrans/models/decoders/unet_decoder.py": {
        "torch": {
            "Sequential_11": {
                "variable": {
                    "value": "self.W_g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=F_g, out_channels=F_int, kernel_size=1, stride=1, padding=0, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_21": {
                "variable": {
                    "value": "self.W_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=F_l, out_channels=F_int, kernel_size=1, stride=1, padding=0, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_31": {
                "variable": {
                    "value": "self.psi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=F_int, out_channels=1, kernel_size=1, stride=1, padding=0, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_42": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Upsample_68": {
                "variable": {
                    "value": "self.up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_94": {
                "variable": {
                    "value": "self.decoders",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_80": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, skip]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_12": {
                "in_channels": {
                    "value": "F_g",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "F_int",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_18": {
                "num_features": {
                    "value": "F_int",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_22": {
                "in_channels": {
                    "value": "F_l",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "F_int",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_28": {
                "num_features": {
                    "value": "F_int",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_32": {
                "in_channels": {
                    "value": "F_int",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_38": {
                "num_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "mctrans/models/decoders/unet_plus_plus_decoder.py": {
        "torch": {
            "Sequential_13": {
                "variable": {
                    "value": "self.W_g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=F_g, out_channels=F_int, kernel_size=1, stride=1, padding=0, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_23": {
                "variable": {
                    "value": "self.W_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=F_l, out_channels=F_int, kernel_size=1, stride=1, padding=0, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_33": {
                "variable": {
                    "value": "self.psi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=F_int, out_channels=1, kernel_size=1, stride=1, padding=0, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_44": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Upsample_70": {
                "variable": {
                    "value": "self.up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_96": {
                "variable": {
                    "value": "self.decoder_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleDict_108": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "blocks",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                }
            },
            "cat_82": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, skip]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_14": {
                "in_channels": {
                    "value": "F_g",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "F_int",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_20": {
                "num_features": {
                    "value": "F_int",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_24": {
                "in_channels": {
                    "value": "F_l",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "F_int",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_30": {
                "num_features": {
                    "value": "F_int",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_34": {
                "in_channels": {
                    "value": "F_int",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_40": {
                "num_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_118": {
                "variable": {
                    "value": "skip_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "skip_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[dense_x[f'x_{lvl_idx}_{idx}'] for idx in range(stage_idx)]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(skip_features, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "mctrans/models/encoders/resnet.py": {
        "torch": {
            "randn_454": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, 3, 256, 256)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_47": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_147": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_207": {
                "variable": {
                    "value": "downsample",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "build_conv_layer(conv_cfg, inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_243": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ReLU_377": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_390": {
                "variable": {
                    "value": "self.stem",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MaxPool2d_393": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "mctrans/models/encoders/vgg.py": {
        "torch": {
            "ModuleList_18": {
                "variable": {
                    "value": "self.stages",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "mctrans/models/heads/basic_seg_head.py": {
        "torch": {
            "Conv2d_12": {
                "variable": {
                    "value": "self.head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "mctrans/models/heads/mctrans_aux_head.py": {
        "torch": {
            "Sequential_38": {
                "variable": {
                    "value": "self.head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(num_classes * d_model, d_model)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_47": {
                "variable": {
                    "value": "inputs_flatten",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "inputs_flatten",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[item.flatten(2).transpose(1, 2) for item in inputs]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(inputs_flatten, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_38": {
                "in_features": {
                    "value": "num_classes * d_model",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_39": {
                "in_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "6",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "mctrans/models/losses/cross_entropy_loss.py": {
        "torch": {
            "cross_entropy_73": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "target": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.argmax(label, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(label, dim=1)",
                            "Call"
                        ],
                        [
                            "label.long()",
                            "Call"
                        ],
                        [
                            "torch.argmax(label, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(label, dim=1)",
                            "Call"
                        ],
                        [
                            "label.long()",
                            "Call"
                        ],
                        [
                            "torch.stack(one_hot)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_140": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "target": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.argmax(label, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(label, dim=1)",
                            "Call"
                        ],
                        [
                            "label.long()",
                            "Call"
                        ],
                        [
                            "torch.argmax(label, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(label, dim=1)",
                            "Call"
                        ],
                        [
                            "label.long()",
                            "Call"
                        ],
                        [
                            "torch.stack(one_hot)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "stack_272": {
                "variable": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "one_hot",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "zeros_297": {
                "variable": {
                    "value": "o",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "sh",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list(input.shape)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.float",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "input.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_softmax_105": {
                "input": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_176": {
                "variable": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.argmax(label, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(label, dim=1)",
                            "Call"
                        ],
                        [
                            "label.long()",
                            "Call"
                        ],
                        [
                            "torch.argmax(label, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(label, dim=1)",
                            "Call"
                        ],
                        [
                            "label.long()",
                            "Call"
                        ],
                        [
                            "torch.stack(one_hot)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_178": {
                "variable": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.argmax(label, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(label, dim=1)",
                            "Call"
                        ],
                        [
                            "label.long()",
                            "Call"
                        ],
                        [
                            "torch.argmax(label, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(label, dim=1)",
                            "Call"
                        ],
                        [
                            "label.long()",
                            "Call"
                        ],
                        [
                            "torch.stack(one_hot)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_239": {
                "variable": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.argmax(label, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(label, dim=1)",
                            "Call"
                        ],
                        [
                            "label.long()",
                            "Call"
                        ],
                        [
                            "torch.argmax(label, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(label, dim=1)",
                            "Call"
                        ],
                        [
                            "label.long()",
                            "Call"
                        ],
                        [
                            "torch.stack(one_hot)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_241": {
                "variable": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.argmax(label, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(label, dim=1)",
                            "Call"
                        ],
                        [
                            "label.long()",
                            "Call"
                        ],
                        [
                            "torch.argmax(label, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(label, dim=1)",
                            "Call"
                        ],
                        [
                            "label.long()",
                            "Call"
                        ],
                        [
                            "torch.stack(one_hot)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unique_271": {
                "input": {
                    "value": "l",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "label",
                            "Name"
                        ]
                    ]
                }
            }
        }
    },
    "mctrans/models/losses/debug_focal.py": {
        "torch": {
            "log_softmax_111": {
                "variable": {
                    "value": "logpt",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "logits",
                            "Name"
                        ],
                        [
                            "i.view(i.size(0), i.size(1), -1)",
                            "Call"
                        ],
                        [
                            "i.unsqueeze(2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_118": {
                "variable": {
                    "value": "pt",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logpt",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.log_softmax(i, dim=1)",
                            "Call"
                        ],
                        [
                            "logpt.gather(1, t.long())",
                            "Call"
                        ],
                        [
                            "torch.squeeze(logpt, dim=1)",
                            "Call"
                        ],
                        [
                            "logpt * at",
                            "BinOp"
                        ]
                    ]
                }
            },
            "pow_134": {
                "variable": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-pt + 1.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_115": {
                "variable": {
                    "value": "logpt",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logpt",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.log_softmax(i, dim=1)",
                            "Call"
                        ],
                        [
                            "logpt.gather(1, t.long())",
                            "Call"
                        ],
                        [
                            "torch.squeeze(logpt, dim=1)",
                            "Call"
                        ],
                        [
                            "logpt * at",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_136": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-weight * logpt",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_138": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-weight * t * logpt",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "squeeze_129": {
                "variable": {
                    "value": "at",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "at",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.weight[None, :, None]",
                            "Subscript"
                        ],
                        [
                            "at.expand((t.size(0), -1, t.size(2)))",
                            "Call"
                        ],
                        [
                            "at.gather(1, t.long())",
                            "Call"
                        ],
                        [
                            "torch.squeeze(at, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "mctrans/models/ops/functions/ms_deform_attn_func.py": {
        "torch": {
            "grid_sample_55": {
                "variable": {
                    "value": "sampling_value_l_",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "value_l_",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "value_list[lid_].flatten(2).transpose(1, 2).reshape(N_ * M_, D_, H_, W_)",
                            "Call"
                        ]
                    ]
                },
                "grid": {
                    "value": "sampling_grid_l_",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sampling_grids[:, :, :, lid_].transpose(1, 2).flatten(0, 1)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "padding_mode": {
                    "value": "zeros",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stack_60": {
                "tensors": {
                    "value": "sampling_value_list",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "flatten_60": {
                "input": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "mctrans/models/ops/modules/ms_deform_attn.py": {
        "torch": {
            "Linear_55": {
                "variable": {
                    "value": "self.sampling_offsets",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_heads * n_levels * n_points * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_56": {
                "variable": {
                    "value": "self.attention_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_heads * n_levels * n_points",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_57": {
                "variable": {
                    "value": "self.value_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_58": {
                "variable": {
                    "value": "self.output_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "stack_65": {
                "variable": {
                    "value": "grid_init",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[thetas.cos(), thetas.sin()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_100": {
                "variable": {
                    "value": "attention_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.attention_weights(query).view(N, Len_q, self.n_heads, self.n_levels * self.n_points)",
                            "Call"
                        ],
                        [
                            "F.softmax(attention_weights, -1).view(N, Len_q, self.n_heads, self.n_levels, self.n_points)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Parameter_70": {
                "variable": {
                    "value": "self.sampling_offsets.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "grid_init.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_103": {
                "variable": {
                    "value": "offset_normalizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input_spatial_shapes[..., 1], input_spatial_shapes[..., 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_64": {
                "start": {
                    "value": "self.n_heads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_69": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "mctrans/models/ops/setup.py": {
        "torch": {
            "is_available_36": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "mctrans/models/ops/test.py": {
        "torch": {
            "as_tensor_23": {
                "variable": {
                    "value": "shapes",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[(6, 4), (3, 2)]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_24": {
                "variable": {
                    "value": "level_start_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(shapes.new_zeros((1,)), shapes.prod(1).cumsum(0)[:-1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "manual_seed_28": {
                "seed": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_34": {
                "variable": {
                    "value": "sampling_locations",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "Lq",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "M",
                    "type": "Variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "L",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "P",
                    "type": "Variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "allclose_40": {
                "variable": {
                    "value": "fwdok",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_cuda",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "MSDeformAttnFunction.apply(value.double(), shapes, level_start_index, sampling_locations.double(), attention_weights.double(), im2col_step).detach().cpu()",
                            "Call"
                        ],
                        [
                            "MSDeformAttnFunction.apply(value, shapes, level_start_index, sampling_locations, attention_weights, im2col_step).detach().cpu()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "output_pytorch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ms_deform_attn_core_pytorch(value.double(), shapes, sampling_locations.double(), attention_weights.double()).detach().cpu()",
                            "Call"
                        ],
                        [
                            "ms_deform_attn_core_pytorch(value, shapes, sampling_locations, attention_weights).detach().cpu()",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_31": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rand_50": {
                "variable": {
                    "value": "sampling_locations",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "Lq",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "M",
                    "type": "Variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "L",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "P",
                    "type": "Variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "allclose_56": {
                "variable": {
                    "value": "fwdok",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_cuda",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "MSDeformAttnFunction.apply(value.double(), shapes, level_start_index, sampling_locations.double(), attention_weights.double(), im2col_step).detach().cpu()",
                            "Call"
                        ],
                        [
                            "MSDeformAttnFunction.apply(value, shapes, level_start_index, sampling_locations, attention_weights, im2col_step).detach().cpu()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "output_pytorch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ms_deform_attn_core_pytorch(value.double(), shapes, sampling_locations.double(), attention_weights.double()).detach().cpu()",
                            "Call"
                        ],
                        [
                            "ms_deform_attn_core_pytorch(value, shapes, sampling_locations, attention_weights).detach().cpu()",
                            "Call"
                        ]
                    ]
                },
                "rtol": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "atol": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "no_grad_47": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rand_66": {
                "variable": {
                    "value": "sampling_locations",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "Lq",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "M",
                    "type": "Variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "L",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "P",
                    "type": "Variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gradcheck_76": {
                "variable": {
                    "value": "gradok",
                    "type": "Variable",
                    "possible_values": []
                },
                "func": {
                    "value": "func",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "MSDeformAttnFunction.apply",
                            "Attribute"
                        ]
                    ]
                },
                "inputs": {
                    "value": "(value.double(), shapes, level_start_index, sampling_locations.double(), attention_weights.double(), im2col_step)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_33": {
                "*size": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "S",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sum([(H * W).item() for (H, W) in shapes])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "M",
                    "type": "Variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "D",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "rand_35": {
                "*size": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "Lq",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "M",
                    "type": "Variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "L",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "P",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "rand_49": {
                "*size": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "S",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sum([(H * W).item() for (H, W) in shapes])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "M",
                    "type": "Variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "D",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "rand_51": {
                "*size": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "Lq",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "M",
                    "type": "Variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "L",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "P",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "rand_65": {
                "*size": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "S",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sum([(H * W).item() for (H, W) in shapes])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "M",
                    "type": "Variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[30, 32, 64, 71, 1025, 2048, 3096]",
                            "List"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "rand_67": {
                "*size": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "Lq",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "M",
                    "type": "Variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "L",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "P",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "mctrans/models/segmentors/base.py": {
        "torch": {
            "is_available_201": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_201": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "mctrans/models/segmentors/encoder_decoder.py": {
        "torch": {}
    },
    "mctrans/models/trans/transformer.py": {
        "torch": {
            "Dropout_16": {
                "variable": {
                    "value": "self.dropout1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LayerNorm_17": {
                "variable": {
                    "value": "self.norm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_20": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_ffn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ],
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_22": {
                "variable": {
                    "value": "self.dropout2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_23": {
                "variable": {
                    "value": "self.linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_ffn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ],
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_24": {
                "variable": {
                    "value": "self.dropout3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LayerNorm_25": {
                "variable": {
                    "value": "self.norm2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_68": {
                "variable": {
                    "value": "reference_points",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "reference_points_list",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MultiheadAttention_84": {
                "variable": {
                    "value": "self.self_attn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embed_dim": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "num_heads": {
                    "value": "n_heads",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "8",
                            "MethodArgument"
                        ],
                        [
                            "8",
                            "MethodArgument"
                        ]
                    ]
                },
                "dropout": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_85": {
                "variable": {
                    "value": "self.dropout1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LayerNorm_86": {
                "variable": {
                    "value": "self.norm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "MultiheadAttention_89": {
                "variable": {
                    "value": "self.cross_attn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embed_dim": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "num_heads": {
                    "value": "n_heads",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "8",
                            "MethodArgument"
                        ],
                        [
                            "8",
                            "MethodArgument"
                        ]
                    ]
                },
                "dropout": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_90": {
                "variable": {
                    "value": "self.dropout2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LayerNorm_91": {
                "variable": {
                    "value": "self.norm2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_94": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_ffn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ],
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_96": {
                "variable": {
                    "value": "self.dropout3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_97": {
                "variable": {
                    "value": "self.linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_ffn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ],
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_98": {
                "variable": {
                    "value": "self.dropout4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LayerNorm_99": {
                "variable": {
                    "value": "self.norm3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Parameter_131": {
                "variable": {
                    "value": "self.proxy_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, n_category, d_model)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "meshgrid_62": {
                "variable": {
                    "value": "(ref_y, ref_x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.linspace(0.5, H_ - 0.5, H_, dtype=torch.float32, device=device)",
                    "type": "Call",
                    "possible_values": []
                },
                "indexing": {
                    "value": "torch.linspace(0.5, W_ - 0.5, W_, dtype=torch.float32, device=device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_66": {
                "variable": {
                    "value": "ref",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(ref_x, ref_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_131": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "n_category",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "linspace_62": {
                "start": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "end": {
                    "value": "H_ - 0.5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "steps": {
                    "value": "H_",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "linspace_63": {
                "start": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "end": {
                    "value": "W_ - 0.5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "steps": {
                    "value": "W_",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "mctrans/models/trans/utils.py": {
        "torch": {
            "ModuleList_23": {
                "modules": {
                    "value": "[copy.deepcopy(module) for i in range(N)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "arange_109": {
                "variable": {
                    "value": "dim_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "self.num_pos_feats",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_116": {
                "variable": {
                    "value": "pos_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(pos_x[:, :, :, :, 0::2].sin(), pos_x[:, :, :, :, 1::2].cos())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flatten_116": {
                "variable": {
                    "value": "pos_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_117": {
                "variable": {
                    "value": "pos_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(pos_y[:, :, :, :, 0::2].sin(), pos_y[:, :, :, :, 1::2].cos())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flatten_117": {
                "variable": {
                    "value": "pos_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_118": {
                "variable": {
                    "value": "pos_z",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(pos_z[:, :, :, :, 0::2].sin(), pos_z[:, :, :, :, 1::2].cos())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flatten_118": {
                "variable": {
                    "value": "pos_z",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_119": {
                "variable": {
                    "value": "pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(pos_z, pos_y, pos_x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "permute_119": {
                "variable": {
                    "value": "pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_152": {
                "variable": {
                    "value": "dim_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "self.num_pos_feats",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_157": {
                "variable": {
                    "value": "pos_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(pos_x[:, :, :, 0::2].sin(), pos_x[:, :, :, 1::2].cos())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flatten_157": {
                "variable": {
                    "value": "pos_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_158": {
                "variable": {
                    "value": "pos_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(pos_y[:, :, :, 0::2].sin(), pos_y[:, :, :, 1::2].cos())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flatten_158": {
                "variable": {
                    "value": "pos_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_159": {
                "variable": {
                    "value": "pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(pos_y, pos_x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "permute_159": {
                "variable": {
                    "value": "pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_170": {
                "variable": {
                    "value": "self.row_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "num_pos_feats",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Embedding_171": {
                "variable": {
                    "value": "self.col_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "num_pos_feats",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "arange_181": {
                "variable": {
                    "value": "i",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_182": {
                "variable": {
                    "value": "j",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_185": {
                "variable": {
                    "value": "pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x_emb.unsqueeze(0).repeat(h, 1, 1), y_emb.unsqueeze(1).repeat(1, w, 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "permute_185": {
                "variable": {
                    "value": "pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_185": {
                "variable": {
                    "value": "pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "mctrans/models/utils.py": {
        "torch": {
            "Conv2d_5": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "dilation",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_14": {
                "*args": {
                    "value": "nn.Conv2d(in_channels, out_channels, kernel_size=kernel_size, padding=padding, stride=stride)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_24": {
                "*args": {
                    "value": "nn.ConvTranspose2d(in_channels, out_channels, kernel_size=kernel_size, padding=padding, stride=stride, output_padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_50": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_14": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_19": {
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_20": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_24": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_30": {
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_31": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_43": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "ceil_mode",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_48": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_47": {
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "mctrans/pipline/segpipline.py": {
        "torch": {
            "current_device_53": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "mctrans/utils/misc.py": {
        "torch": {
            "from_numpy_11": {
                "variable": {
                    "value": "sync_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "is_available_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tools/train.py": {
        "torch": {}
    }
}