{
    "setup/setup_dataset_nyu_v2.py": {
        "sklearn": {
            "MiniBatchKMeans_163": {
                "variable": {
                    "value": "kmeans",
                    "type": "variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "args.n_points",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_iter": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "n_init": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "init_size": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "random_state": {
                    "value": "RANDOM_SEED",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "reassignment_ratio": {
                    "value": "1e-11",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "src/datasets.py": {
        "torch": {}
    },
    "src/kbnet.py": {
        "torch": {
            "DataLoader_134": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.KBNetTrainingDataset(image_paths=train_image_paths, sparse_depth_paths=train_sparse_depth_paths, intrinsics_paths=train_intrinsics_paths, shape=(n_height, n_width), random_crop_type=augmentation_random_crop_type)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "n_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "settings.N_BATCH",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "n_batch",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "n_thread",
                    "type": "variable",
                    "possible_values": [
                        [
                            "settings.N_THREAD",
                            "Method Argument"
                        ],
                        [
                            "8",
                            "Method Argument"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SummaryWriter_239": {
                "variable": {
                    "value": "train_summary_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "event_path + '-train'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "SummaryWriter_240": {
                "variable": {
                    "value": "val_summary_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "event_path + '-val'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Adam_360": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[{'params': parameters_depth_model, 'weight_decay': w_weight_decay_depth}, {'params': parameters_pose_model, 'weight_decay': w_weight_decay_pose}]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "learning_rates[0]",
                            "Subscript"
                        ],
                        [
                            "learning_rates[learning_schedule_pos]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "DataLoader_764": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.KBNetInferenceDataset(image_paths=image_paths, sparse_depth_paths=sparse_depth_paths, intrinsics_paths=intrinsics_paths)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_97": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "settings.CUDA",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_99": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "settings.CPU",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_176": {
                "variable": {
                    "value": "val_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.KBNetInferenceDataset(image_paths=val_image_paths, sparse_depth_paths=val_sparse_depth_paths, intrinsics_paths=val_intrinsics_paths)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "from_numpy_558": {
                "variable": {
                    "value": "ground_truth",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "ground_truth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_utils.load_depth_with_validity_map(path)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(ground_truth, axis=0)",
                            "Call"
                        ],
                        [
                            "np.transpose(ground_truth, (0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(ground_truth).to(device)",
                            "Call"
                        ],
                        [
                            "np.squeeze(ground_truth.cpu().numpy())",
                            "Call"
                        ],
                        [
                            "ground_truth[0, :, :]",
                            "Subscript"
                        ],
                        [
                            "ground_truth[mask]",
                            "Subscript"
                        ],
                        [
                            "data_utils.load_depth_with_validity_map(path)",
                            "Call"
                        ],
                        [
                            "np.squeeze(ground_truth)",
                            "Call"
                        ],
                        [
                            "ground_truth[:, :, 0]",
                            "Subscript"
                        ],
                        [
                            "ground_truth[mask]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "where_561": {
                "variable": {
                    "value": "validity_map_depth",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "sparse_depth > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.ones_like(sparse_depth)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "sparse_depth",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "device_716": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "settings.CUDA",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_718": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "settings.CPU",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_899": {
                "variable": {
                    "value": "validity_map_depth",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "sparse_depth > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.ones_like(sparse_depth)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "sparse_depth",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "device_1243": {
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "where_404": {
                "variable": {
                    "value": "validity_map_depth0",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "sparse_depth0 > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.ones_like(sparse_depth0)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "sparse_depth0",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_like_563": {
                "input": {
                    "value": "sparse_depth",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_like_901": {
                "input": {
                    "value": "sparse_depth",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_like_406": {
                "input": {
                    "value": "sparse_depth0",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_629": {
                "tensors": {
                    "value": "image_summary",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_630": {
                "tensors": {
                    "value": "output_depth_summary",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_631": {
                "tensors": {
                    "value": "sparse_depth_summary",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_632": {
                "tensors": {
                    "value": "validity_map_summary",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_633": {
                "tensors": {
                    "value": "ground_truth_summary",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_487": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/kbnet_model.py": {
        "torch": {
            "cat_171": {
                "variable": {
                    "value": "input_depth",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "input_depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[sparse_depth, validity_map_depth]",
                            "List"
                        ],
                        [
                            "torch.cat(input_depth, dim=1)",
                            "Call"
                        ],
                        [
                            "self.sparse_to_dense_pool(input_depth)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_181": {
                "variable": {
                    "value": "output_depth",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.decoder(latent, skips, shape)[-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ones_like_239": {
                "variable": {
                    "value": "validity_map_image0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sparse_depth0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sparse_depth0",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_392": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "checkpoint_path",
                            "Method Argument"
                        ],
                        [
                            "checkpoint_path",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_413": {
                "variable": {
                    "value": "self.sparse_to_dense_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.sparse_to_dense_pool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_414": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_415": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_79": {
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_376": {
                "obj": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "torch.load(checkpoint_path, map_location=self.device)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "checkpoint_path",
                            "Method Argument"
                        ],
                        [
                            "checkpoint_path",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_637": {
                "variable": {
                    "value": "display_summary_image",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "display_summary_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(display_summary_image, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_645": {
                "variable": {
                    "value": "display_summary_depth",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "display_summary_depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(display_summary_depth, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_466": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_495": {
                "variable": {
                    "value": "image01_error_summary",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(image0_summary - image01_summary)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_517": {
                "variable": {
                    "value": "image02_error_summary",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(image0_summary - image02_summary)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "abs_560": {
                "variable": {
                    "value": "sparse_depth0_error_summary",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_depth0_summary - sparse_depth0_summary",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_562": {
                "variable": {
                    "value": "sparse_depth0_error_summary",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "validity_map0_summary == 1.0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "(sparse_depth0_error_summary + EPSILON) / (sparse_depth0_summary + EPSILON)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "validity_map0_summary",
                    "type": "variable",
                    "possible_values": [
                        [
                            "validity_map0[0:n_display]",
                            "Subscript"
                        ],
                        [
                            "validity_map0[0:n_display]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "unsqueeze_585": {
                "variable": {
                    "value": "validity_map0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ground_truth0[:, 1, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_586": {
                "variable": {
                    "value": "ground_truth0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ground_truth0[:, 0, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_595": {
                "variable": {
                    "value": "ground_truth0_error_summary",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_depth0_summary - ground_truth0_summary",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_597": {
                "variable": {
                    "value": "ground_truth0_error_summary",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "validity_map0_summary == 1.0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "(ground_truth0_error_summary + EPSILON) / (ground_truth0_summary + EPSILON)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "validity_map0_summary",
                    "type": "variable",
                    "possible_values": [
                        [
                            "validity_map0[0:n_display]",
                            "Subscript"
                        ],
                        [
                            "validity_map0[0:n_display]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_482": {
                "tensors": {
                    "value": "[image0_summary.cpu(), torch.zeros_like(image0_summary, device=torch.device('cpu'))]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "abs_496": {
                "input": {
                    "value": "image0_summary - image01_summary",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_506": {
                "tensors": {
                    "value": "[image01_summary.cpu(), image01_error_summary]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_518": {
                "input": {
                    "value": "image0_summary - image02_summary",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_528": {
                "tensors": {
                    "value": "[image02_summary.cpu(), image02_error_summary]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_542": {
                "tensors": {
                    "value": "[log_utils.colorize((output_depth0_summary / self.max_predict_depth).cpu(), colormap='viridis'), torch.zeros(n_batch, 3, n_height, n_width, device=torch.device('cpu'))]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_576": {
                "tensors": {
                    "value": "[sparse_depth0_summary, sparse_depth0_error_summary]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_611": {
                "tensors": {
                    "value": "[ground_truth0_summary, ground_truth0_error_summary]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_484": {
                "input": {
                    "value": "image0_summary",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image0[0:n_display, ...]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "torch.device('cpu')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_546": {
                "*size": {
                    "value": "n_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "n_height",
                    "type": "variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "n_width",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "torch.device('cpu')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_484": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_546": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "src/log_utils.py": {
        "torch": {
            "from_numpy_75": {
                "ndarray": {
                    "value": "color.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "src/losses.py": {
        "torch": {
            "sum_38": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "w * torch.abs(tgt - src)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "interpolate_58": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ssim(src, tgt)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.interpolate(scores, size=w.shape[2:4], mode='nearest')",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "w.shape[2:4]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sum_59": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "w * scores",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "abs_78": {
                "variable": {
                    "value": "delta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tgt - src",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_79": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "w * delta",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "exp_100": {
                "variable": {
                    "value": "weights_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-torch.mean(torch.abs(image_dx), dim=1, keepdim=True)",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_101": {
                "variable": {
                    "value": "weights_y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-torch.mean(torch.abs(image_dy), dim=1, keepdim=True)",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_103": {
                "variable": {
                    "value": "smoothness_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weights_x * torch.abs(predict_dx)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_104": {
                "variable": {
                    "value": "smoothness_y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weights_y * torch.abs(predict_dy)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_40": {
                "input": {
                    "value": "loss / torch.sum(w, dim=[1, 2, 3])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_61": {
                "input": {
                    "value": "loss / torch.sum(w, dim=[1, 2, 3])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_81": {
                "input": {
                    "value": "loss / torch.sum(w, dim=[1, 2, 3])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_158": {
                "input": {
                    "value": "(1.0 - score) / 2.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "AvgPool2d_144": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_145": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_38": {
                "input": {
                    "value": "tgt - src",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_40": {
                "input": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sum_61": {
                "input": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sum_81": {
                "input": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "mean_100": {
                "input": {
                    "value": "torch.abs(image_dx)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_101": {
                "input": {
                    "value": "torch.abs(image_dy)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "abs_103": {
                "input": {
                    "value": "predict_dx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gradient_yx(predict)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_104": {
                "input": {
                    "value": "predict_dy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gradient_yx(predict)",
                            "Call"
                        ]
                    ]
                }
            },
            "AvgPool2d_150": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_151": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_152": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_100": {
                "input": {
                    "value": "image_dx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gradient_yx(image)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_101": {
                "input": {
                    "value": "image_dy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gradient_yx(image)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/net_utils.py": {
        "torch": {
            "zeros_1544": {
                "variable": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "translation_vector.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_1561": {
                "variable": {
                    "value": "angle",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vec",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cos_1564": {
                "variable": {
                    "value": "ca",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "angle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(vec, 2, 2, True)",
                            "Call"
                        ]
                    ]
                }
            },
            "sin_1565": {
                "variable": {
                    "value": "sa",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "angle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(vec, 2, 2, True)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_1582": {
                "variable": {
                    "value": "rot",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(vec.shape[0], 4, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "squeeze_1584": {
                "variable": {
                    "value": "rot[:, 0, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "x * xC + ca",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squeeze_1585": {
                "variable": {
                    "value": "rot[:, 0, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "xyC - zs",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squeeze_1586": {
                "variable": {
                    "value": "rot[:, 0, 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "zxC + ys",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squeeze_1587": {
                "variable": {
                    "value": "rot[:, 1, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "xyC + zs",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squeeze_1588": {
                "variable": {
                    "value": "rot[:, 1, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "y * yC + ca",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squeeze_1589": {
                "variable": {
                    "value": "rot[:, 1, 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "yzC - xs",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squeeze_1590": {
                "variable": {
                    "value": "rot[:, 2, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "zxC - ys",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squeeze_1591": {
                "variable": {
                    "value": "rot[:, 2, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "yzC + xs",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squeeze_1592": {
                "variable": {
                    "value": "rot[:, 2, 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "z * zC + ca",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "linspace_1620": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "end": {
                    "value": "n_width - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "steps": {
                    "value": "n_width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_width",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "linspace_1621": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "end": {
                    "value": "n_height - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "steps": {
                    "value": "n_height",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_height",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "meshgrid_1624": {
                "variable": {
                    "value": "(grid_y, grid_x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "axis[..., 1].unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "torch.linspace(start=0.0, end=n_height - 1, steps=n_height, device=device)",
                            "Call"
                        ]
                    ]
                },
                "indexing": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "axis[..., 0].unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "torch.linspace(start=0.0, end=n_width - 1, steps=n_width, device=device)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "unsqueeze_1633": {
                "variable": {
                    "value": "grid_xy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grid_xy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack([grid_x, grid_y, torch.ones_like(grid_x)], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.stack([grid_x, grid_y], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(grid_xy, dim=0).repeat(n_batch, 1, 1, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_1689": {
                "variable": {
                    "value": "column",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[n_batch, 3, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "points.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_1690": {
                "variable": {
                    "value": "row",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0, 0.0, 0.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "points.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_1693": {
                "variable": {
                    "value": "intrinsics",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[intrinsics, column]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1694": {
                "variable": {
                    "value": "intrinsics",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[intrinsics, row]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_1697": {
                "variable": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "intrinsics",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([intrinsics, column], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([intrinsics, row], dim=1)",
                            "Call"
                        ],
                        [
                            "intrinsics",
                            "Method Argument"
                        ],
                        [
                            "intrinsics",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "pose",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pose",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_1699": {
                "variable": {
                    "value": "points",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_translation_matrix(t)",
                            "Call"
                        ],
                        [
                            "torch.zeros(translation_vector.shape[0], 4, 4).to(device=translation_vector.device)",
                            "Call"
                        ],
                        [
                            "torch.matmul(intrinsics, pose)",
                            "Call"
                        ],
                        [
                            "T[:, 0:3, :]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(torch.inverse(intrinsics), xy_h) * depth",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(T, points)",
                            "Call"
                        ],
                        [
                            "points / (torch.unsqueeze(points[:, 2, :], dim=1) + 1e-07)",
                            "BinOp"
                        ],
                        [
                            "points[:, 0:2, :]",
                            "Subscript"
                        ],
                        [
                            "points",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_87": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(self.kernel_sizes, self.convs)",
                            "Call"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "7",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size // 2",
                            "BinOp"
                        ],
                        [
                            "kernel_size // 2",
                            "BinOp"
                        ],
                        [
                            "dilation",
                            "variable"
                        ],
                        [
                            "kernel_size // 2",
                            "BinOp"
                        ],
                        [
                            "self.kernel_size // 2",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_183": {
                "variable": {
                    "value": "self.conv_depthwise",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(self.kernel_sizes, self.convs)",
                            "Call"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "7",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size // 2",
                            "BinOp"
                        ],
                        [
                            "kernel_size // 2",
                            "BinOp"
                        ],
                        [
                            "dilation",
                            "variable"
                        ],
                        [
                            "kernel_size // 2",
                            "BinOp"
                        ],
                        [
                            "self.kernel_size // 2",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "groups": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_192": {
                "variable": {
                    "value": "self.conv_pointwise",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_215": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.conv_depthwise",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_292": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(self.kernel_sizes, self.convs)",
                            "Call"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "7",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dilations",
                            "variable"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size // 2",
                            "BinOp"
                        ],
                        [
                            "kernel_size // 2",
                            "BinOp"
                        ],
                        [
                            "dilation",
                            "variable"
                        ],
                        [
                            "kernel_size // 2",
                            "BinOp"
                        ],
                        [
                            "self.kernel_size // 2",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_383": {
                "variable": {
                    "value": "self.deconv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(self.kernel_sizes, self.convs)",
                            "Call"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "7",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size // 2",
                            "BinOp"
                        ],
                        [
                            "kernel_size // 2",
                            "BinOp"
                        ],
                        [
                            "dilation",
                            "variable"
                        ],
                        [
                            "kernel_size // 2",
                            "BinOp"
                        ],
                        [
                            "self.kernel_size // 2",
                            "BinOp"
                        ]
                    ]
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_497": {
                "variable": {
                    "value": "upsample",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "axis[..., 0].unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "torch.linspace(start=0.0, end=n_width - 1, steps=n_width, device=device)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "skip.shape[2:4]",
                            "Subscript"
                        ],
                        [
                            "(int(2 * n_height), int(2 * n_width))",
                            "Tuple"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Linear_527": {
                "variable": {
                    "value": "self.fully_connected",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_features",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_945": {
                "variable": {
                    "value": "self.conv_block",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_1029": {
                "variable": {
                    "value": "self.conv_block",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ModuleList_1089": {
                "variable": {
                    "value": "self.atrous_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_1104": {
                "variable": {
                    "value": "self.global_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_1149": {
                "variable": {
                    "value": "global_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "global_pool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.global_pool(x)",
                            "Call"
                        ],
                        [
                            "self.global_pool_conv(global_pool)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.interpolate(global_pool, size=x.shape[2:], mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "x.shape[2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_1205": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_1219": {
                "variable": {
                    "value": "self.conv_fuse",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2d(2 * len(kernel_sizes) * output_channels, out_channels, kernel_size=3, weight_initializer=weight_initializer, activation_func=activation_func, use_batch_norm=use_batch_norm, use_instance_norm=use_instance_norm)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_1368": {
                "variable": {
                    "value": "layers_fused",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "layers_fused",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(layers_fused, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_1535": {
                "variable": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rot_from_axisangle(axisangle)",
                            "Call"
                        ],
                        [
                            "R.transpose(1, 2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_translation_matrix(t)",
                            "Call"
                        ],
                        [
                            "torch.zeros(translation_vector.shape[0], 4, 4).to(device=translation_vector.device)",
                            "Call"
                        ],
                        [
                            "torch.matmul(intrinsics, pose)",
                            "Call"
                        ],
                        [
                            "T[:, 0:3, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "matmul_1537": {
                "variable": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_translation_matrix(t)",
                            "Call"
                        ],
                        [
                            "torch.zeros(translation_vector.shape[0], 4, 4).to(device=translation_vector.device)",
                            "Call"
                        ],
                        [
                            "torch.matmul(intrinsics, pose)",
                            "Call"
                        ],
                        [
                            "T[:, 0:3, :]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rot_from_axisangle(axisangle)",
                            "Call"
                        ],
                        [
                            "R.transpose(1, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_1628": {
                "variable": {
                    "value": "grid_xy",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[grid_x, grid_y, torch.ones_like(grid_x)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_1631": {
                "variable": {
                    "value": "grid_xy",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[grid_x, grid_y]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1667": {
                "tensors": {
                    "value": "[points, torch.ones_like(depth)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grid_sample_1734": {
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image",
                            "Method Argument"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ]
                    ]
                },
                "grid": {
                    "value": "target_xy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target_xy.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "2.0 * (target_xy - 0.5)",
                            "BinOp"
                        ],
                        [
                            "target_xy",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "padding_mode": {
                    "value": "padding_mode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'border'",
                            "Method Argument"
                        ]
                    ]
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "where_1777": {
                "variable": {
                    "value": "sparse_depth_max_filled",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "validity_map <= 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.full_like(sparse_depth, fill_value=max_value)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "sparse_depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sparse_depth",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pad_1784": {
                "variable": {
                    "value": "sparse_depth_max_filled",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sparse_depth_max_filled",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.where(validity_map <= 0, torch.full_like(sparse_depth, fill_value=max_value), sparse_depth)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(input=sparse_depth_max_filled, pad=(padding, padding, padding, padding), mode='constant', value=max_value)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(padding, padding, padding, padding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "max_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10 * torch.max(sparse_depth)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "where_1797": {
                "variable": {
                    "value": "validity_map_clean",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "min_values < sparse_depth - self.threshold",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.zeros_like(validity_map)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "torch.ones_like(validity_map)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LeakyReLU_80": {
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_116": {
                "variable": {
                    "value": "self.batch_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LeakyReLU_176": {
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_226": {
                "variable": {
                    "value": "self.batch_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LeakyReLU_285": {
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_322": {
                "variable": {
                    "value": "self.batch_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LeakyReLU_376": {
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_413": {
                "variable": {
                    "value": "self.batch_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LeakyReLU_469": {
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_523": {
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_543": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LeakyReLU_600": {
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_698": {
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_807": {
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_909": {
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_993": {
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_1070": {
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_1187": {
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_1258": {
                "variable": {
                    "value": "pool",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.pool_func(x, kernel_size=(kernel_size, kernel_size), stride=(kernel_size, kernel_size))",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.interpolate(pool, size=x.shape[2:], mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "x.shape[2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_1308": {
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_1407": {
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_1483": {
                "variable": {
                    "value": "concat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[deconv, skip]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_1664": {
                "input": {
                    "value": "torch.inverse(intrinsics)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "xy_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "meshgrid(n_batch, n_height, n_width, device=depth.device, homogeneous=True)",
                            "Call"
                        ],
                        [
                            "xy_h.view(n_batch, 3, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "LeakyReLU_37": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_118": {
                "variable": {
                    "value": "self.instance_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "InstanceNorm2d_228": {
                "variable": {
                    "value": "self.instance_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "InstanceNorm2d_324": {
                "variable": {
                    "value": "self.instance_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "InstanceNorm2d_415": {
                "variable": {
                    "value": "self.instance_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_1156": {
                "tensors": {
                    "value": "branches",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[x]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1266": {
                "tensors": {
                    "value": "branches",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[x]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1351": {
                "tensors": {
                    "value": "[depth, coordinates]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_1512": {
                "input": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v[..., :3]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "inverse_1664": {
                "input": {
                    "value": "intrinsics",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([intrinsics, column], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.cat([intrinsics, row], dim=1)",
                            "Call"
                        ],
                        [
                            "intrinsics",
                            "Method Argument"
                        ],
                        [
                            "intrinsics",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_like_1667": {
                "input": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth.view(n_batch, 1, -1)",
                            "Call"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "unsqueeze_1700": {
                "input": {
                    "value": "points[:, 2, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_1776": {
                "input": {
                    "value": "sparse_depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sparse_depth",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "full_like_1779": {
                "input": {
                    "value": "sparse_depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sparse_depth",
                            "Method Argument"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "max_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10 * torch.max(sparse_depth)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "max_pool2d_1790": {
                "input": {
                    "value": "-sparse_depth_max_filled",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_1799": {
                "input": {
                    "value": "validity_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "validity_map",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_like_1800": {
                "input": {
                    "value": "validity_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "validity_map",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_like_1628": {
                "input": {
                    "value": "grid_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.meshgrid(y, x)",
                            "Call"
                        ]
                    ]
                }
            },
            "ELU_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sigmoid_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/networks.py": {
        "torch": {
            "MaxPool2d_747": {
                "variable": {
                    "value": "self.max_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_778": {
                "variable": {
                    "value": "self.blocks2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*blocks2",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_812": {
                "variable": {
                    "value": "self.blocks3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*blocks3",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_846": {
                "variable": {
                    "value": "self.blocks4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*blocks4",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_880": {
                "variable": {
                    "value": "self.blocks5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*blocks5",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "MaxPool2d_1062": {
                "variable": {
                    "value": "self.max_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_1088": {
                "variable": {
                    "value": "self.blocks2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*blocks2",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_1115": {
                "variable": {
                    "value": "self.blocks3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*blocks3",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_1143": {
                "variable": {
                    "value": "self.blocks4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*blocks4",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_1171": {
                "variable": {
                    "value": "self.blocks5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*blocks5",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "mean_2069": {
                "variable": {
                    "value": "pose_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv(x)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_2154": {
                "variable": {
                    "value": "self.pool_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*pool_convs",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "unsqueeze_2170": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x[:, 0, ...]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_2189": {
                "variable": {
                    "value": "pool_pyramid",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pool_pyramid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(pool_pyramid, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_2194": {
                "variable": {
                    "value": "pool_convs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[pool_convs, x]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_328": {
                "variable": {
                    "value": "coordinates",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.inverse(k)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "xy_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_utils.meshgrid(n_batch=batch, n_height=height, n_width=width, device=k.device, homogeneous=True)",
                            "Call"
                        ],
                        [
                            "xy_h.view(batch, 3, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_336": {
                "variable": {
                    "value": "width0",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "width0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(width0, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "width0",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "k.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "tensor_337": {
                "variable": {
                    "value": "height0",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "height0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(height0, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "height0",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "k.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "tensor_338": {
                "variable": {
                    "value": "width1",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "width1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(width1, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "width1",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "k.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "tensor_339": {
                "variable": {
                    "value": "height1",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "height1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(height1, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "height1",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "k.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "tensor_346": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[scale_x, 1.0, scale_x], [1.0, scale_y, scale_y], [1.0, 1.0, 1.0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "k.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Sequential_916": {
                "variable": {
                    "value": "self.blocks6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*blocks6",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_954": {
                "variable": {
                    "value": "self.blocks7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*blocks7",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Identity_1183": {
                "variable": {
                    "value": "self.atrous_spatial_pyramid_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_1289": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_1509": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_2055": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "MaxPool2d_2124": {
                "variable": {
                    "value": "pool",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.min_pool_sizes",
                            "Attribute"
                        ],
                        [
                            "self.max_pool_sizes",
                            "Attribute"
                        ],
                        [
                            "zip(self.min_pools, self.min_pool_sizes)",
                            "Call"
                        ],
                        [
                            "zip(self.max_pools, self.max_pool_sizes)",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "s // 2",
                            "BinOp"
                        ],
                        [
                            "s // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "MaxPool2d_2131": {
                "variable": {
                    "value": "pool",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.min_pool_sizes",
                            "Attribute"
                        ],
                        [
                            "self.max_pool_sizes",
                            "Attribute"
                        ],
                        [
                            "zip(self.min_pools, self.min_pool_sizes)",
                            "Call"
                        ],
                        [
                            "zip(self.max_pools, self.max_pool_sizes)",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "s // 2",
                            "BinOp"
                        ],
                        [
                            "s // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "where_2179": {
                "variable": {
                    "value": "z_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "z_pool == 999",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.zeros_like(z)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "z_pool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-pool(torch.where(z == 0, -999 * torch.ones_like(z), -z))",
                            "UnaryOp"
                        ],
                        [
                            "torch.where(z_pool == 999, torch.zeros_like(z), z_pool)",
                            "Call"
                        ],
                        [
                            "pool(z)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_383": {
                "tensors": {
                    "value": "skips1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[conv1_fused, conv1_depth]",
                            "List"
                        ],
                        [
                            "[conv1_image, conv1_depth]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_420": {
                "tensors": {
                    "value": "skips2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[conv2_fused, conv2_depth]",
                            "List"
                        ],
                        [
                            "[conv2_image, conv2_depth]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_457": {
                "tensors": {
                    "value": "skips3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[conv3_fused, conv3_depth]",
                            "List"
                        ],
                        [
                            "[conv3_image, conv3_depth]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_494": {
                "tensors": {
                    "value": "skips4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[conv4_fused, conv4_depth]",
                            "List"
                        ],
                        [
                            "[conv4_image, conv4_depth]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_531": {
                "tensors": {
                    "value": "skips5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[conv5_fused, conv5_depth]",
                            "List"
                        ],
                        [
                            "[conv5_image, conv5_depth]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_1953": {
                "variable": {
                    "value": "upsample_output1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs[-1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "size": {
                    "value": "skips[n - 1].shape[-2:]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "skips",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_1959": {
                "variable": {
                    "value": "upsample_output1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs[-1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "inverse_328": {
                "input": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "k",
                            "Method Argument"
                        ],
                        [
                            "k",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "interpolate_1900": {
                "variable": {
                    "value": "upsample_output3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs[-1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "size": {
                    "value": "skips[n - 1].shape[-2:]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "skips",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_1906": {
                "variable": {
                    "value": "upsample_output3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs[-1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_1927": {
                "variable": {
                    "value": "upsample_output2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs[-1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "size": {
                    "value": "skips[n - 1].shape[-2:]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "skips",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_1933": {
                "variable": {
                    "value": "upsample_output2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs[-1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_1943": {
                "tensors": {
                    "value": "[skips[n], upsample_output2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_2179": {
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(x[:, 0, ...], dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_1917": {
                "tensors": {
                    "value": "[skips[n], upsample_output3]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_2177": {
                "condition": {
                    "value": "z == 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "-999 * torch.ones_like(z)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "-z",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_1974": {
                "tensors": {
                    "value": "[skips[n], upsample_output1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_like_2177": {
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(x[:, 0, ...], dim=1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/posenet_model.py": {
        "torch": {
            "load_188": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "checkpoint_path",
                            "Method Argument"
                        ],
                        [
                            "checkpoint_path",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_205": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_206": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_43": {
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_172": {
                "obj": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "torch.load(checkpoint_path, map_location=self.device)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "checkpoint_path",
                            "Method Argument"
                        ],
                        [
                            "checkpoint_path",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_109": {
                "tensors": {
                    "value": "[image0, image1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/train_kbnet.py": {
        "torch": {
            "is_available_180": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/transforms.py": {
        "torch": {
            "randperm_312": {
                "variable": {
                    "value": "random_subset",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "nonzero_indices[0].shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "T.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_144": {
                "variable": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images_arr[0].device",
                            "Attribute"
                        ],
                        [
                            "images.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "flip_237": {
                "variable": {
                    "value": "images[b, ...]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image in enumerate(images)",
                            "Call"
                        ],
                        [
                            "image in enumerate(images)",
                            "Call"
                        ],
                        [
                            "image in enumerate(images)",
                            "Call"
                        ],
                        [
                            "image in enumerate(images)",
                            "Call"
                        ],
                        [
                            "image + noise_spread * torch.randn(*shape, device=device)",
                            "BinOp"
                        ],
                        [
                            "image + noise_spread * (torch.rand(*shape, device=device) - 0.5)",
                            "BinOp"
                        ]
                    ]
                },
                "dims": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "flip_260": {
                "variable": {
                    "value": "images[b, ...]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image in enumerate(images)",
                            "Call"
                        ],
                        [
                            "image in enumerate(images)",
                            "Call"
                        ],
                        [
                            "image in enumerate(images)",
                            "Call"
                        ],
                        [
                            "image in enumerate(images)",
                            "Call"
                        ],
                        [
                            "image + noise_spread * torch.randn(*shape, device=device)",
                            "BinOp"
                        ],
                        [
                            "image + noise_spread * (torch.rand(*shape, device=device) - 0.5)",
                            "BinOp"
                        ]
                    ]
                },
                "dims": {
                    "value": "[-2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "where_343": {
                "variable": {
                    "value": "validity_map",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "image > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.ones_like(image)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "torch.zeros_like(image)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_like_345": {
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image in enumerate(images)",
                            "Call"
                        ],
                        [
                            "image in enumerate(images)",
                            "Call"
                        ],
                        [
                            "image in enumerate(images)",
                            "Call"
                        ],
                        [
                            "image in enumerate(images)",
                            "Call"
                        ],
                        [
                            "image + noise_spread * torch.randn(*shape, device=device)",
                            "BinOp"
                        ],
                        [
                            "image + noise_spread * (torch.rand(*shape, device=device) - 0.5)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_like_346": {
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image in enumerate(images)",
                            "Call"
                        ],
                        [
                            "image in enumerate(images)",
                            "Call"
                        ],
                        [
                            "image in enumerate(images)",
                            "Call"
                        ],
                        [
                            "image in enumerate(images)",
                            "Call"
                        ],
                        [
                            "image + noise_spread * torch.randn(*shape, device=device)",
                            "BinOp"
                        ],
                        [
                            "image + noise_spread * (torch.rand(*shape, device=device) - 0.5)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "randn_349": {
                "*size": {
                    "value": "*shape",
                    "type": "Starred",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images_arr[0].device",
                            "Attribute"
                        ],
                        [
                            "images.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "rand_351": {
                "*size": {
                    "value": "*shape",
                    "type": "Starred",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images_arr[0].device",
                            "Attribute"
                        ],
                        [
                            "images.device",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    }
}