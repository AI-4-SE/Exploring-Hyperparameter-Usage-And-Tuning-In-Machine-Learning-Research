{
    "human_motion_analysis_with_gru.py": {
        "torch": {
            "is_available_11": {
                "variable": {
                    "value": "use_cuda",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_17": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_18": {
                "variable": {
                    "value": "self.ws1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_19": {
                "variable": {
                    "value": "self.ws2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Tanh_20": {
                "variable": {
                    "value": "self.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Softmax_21": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "transpose_35": {
                "variable": {
                    "value": "alphas",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alphas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.ws2(hbar).view(size[0], size[1], -1)",
                            "Call"
                        ],
                        [
                            "torch.transpose(alphas, 1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "self.softmax(alphas.view(-1, size[1]))",
                            "Call"
                        ],
                        [
                            "alphas.view(size[0], self.attention_hops, size[1])",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GRU_48": {
                "variable": {
                    "value": "self.gru",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "34",
                    "type": "int",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_49": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_53": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "320",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_54": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "320",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_55": {
                "variable": {
                    "value": "self.dropout1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_56": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "320",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "320",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_57": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "320",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_58": {
                "variable": {
                    "value": "self.dropout2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_59": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "320",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_60": {
                "variable": {
                    "value": "self.bn4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_61": {
                "variable": {
                    "value": "self.bn5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "34",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_80": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_83": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_86": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc3(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "norm_88": {
                "variable": {
                    "value": "l2_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.contiguous().view(-1, feature)",
                            "Call"
                        ],
                        [
                            "self.bn5(x)",
                            "Call"
                        ],
                        [
                            "x.contiguous().view(length, bsz, feature)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "x.permute(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.selfattention(x).squeeze(1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.bn2(x)",
                            "Call"
                        ],
                        [
                            "self.dropout1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "self.bn3(x)",
                            "Call"
                        ],
                        [
                            "self.dropout2(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc3(x))",
                            "Call"
                        ],
                        [
                            "self.bn4(x)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_38": {
                "input": {
                    "value": "alphas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.ws2(hbar).view(size[0], size[1], -1)",
                            "Call"
                        ],
                        [
                            "torch.transpose(alphas, 1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "self.softmax(alphas.view(-1, size[1]))",
                            "Call"
                        ],
                        [
                            "alphas.view(size[0], self.attention_hops, size[1])",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "outp",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "is_available_18": {
                "variable": {
                    "value": "use_cuda",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_248": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MMD_NCA_Dataset('./dataset/GIT_zizi.json', 30000)",
                            "Call"
                        ],
                        [
                            "Variable(train_data).type(torch.cuda.DoubleTensor).squeeze().view(175, 50, 34).permute(1, 0, 2)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_250": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "float"
                        ]
                    ]
                }
            },
            "exp_25": {
                "variable": {
                    "value": "k1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-torch.pow(x1 - x2, 2) / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_26": {
                "variable": {
                    "value": "k2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-torch.pow(x1 - x2, 2) / 8",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_27": {
                "variable": {
                    "value": "k4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-torch.pow(x1 - x2, 2) / 32",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_28": {
                "variable": {
                    "value": "k8",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-torch.pow(x1 - x2, 2) / 128",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_29": {
                "variable": {
                    "value": "k16",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-torch.pow(x1 - x2, 2) / 512",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_60": {
                "variable": {
                    "value": "numerator",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-self.MMD(x[0], x[0], x[1], x[1])",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_67": {
                "variable": {
                    "value": "value_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-self.MMD(x[0], x[0], x[2], x[2])",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_68": {
                "variable": {
                    "value": "value_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-self.MMD(x[0], x[0], x[3], x[3])",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_69": {
                "variable": {
                    "value": "value_3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-self.MMD(x[0], x[0], x[4], x[4])",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_70": {
                "variable": {
                    "value": "value_4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-self.MMD(x[0], x[0], x[5], x[5])",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_71": {
                "variable": {
                    "value": "value_5",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-self.MMD(x[0], x[0], x[6], x[6])",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_78": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-numerator / denominator",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squeeze_228": {
                "variable": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "permute_228": {
                "variable": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_242": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'./log/model_new_{}.pth'.format(epoch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_46": {
                "input": {
                    "value": "self.kernel_function(x_square, x_IID_square)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_49": {
                "input": {
                    "value": "self.kernel_function(x_square, y_square)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_52": {
                "input": {
                    "value": "self.kernel_function(y_IID_square, y_square)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pow_25": {
                "input": {
                    "value": "x1 - x2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_26": {
                "input": {
                    "value": "x1 - x2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_27": {
                "input": {
                    "value": "x1 - x2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_28": {
                "input": {
                    "value": "x1 - x2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_29": {
                "input": {
                    "value": "x1 - x2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}