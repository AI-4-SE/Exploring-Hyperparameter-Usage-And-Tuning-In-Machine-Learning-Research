{
    "tasks/tree_dataset.py": {
        "sklearn": {
            "train_test_split_55": {
                "variable": {
                    "value": "(X_train, X_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "data_list",
                    "type": "variable",
                    "possible_values": []
                },
                "train_size": {
                    "value": "train_fraction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_fraction",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "stratify": {
                    "value": "[data.y for data in data_list]",
                    "type": "ListComp",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "tensor_39": {
                "variable": {
                    "value": "edge_index",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.edges",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "t_39": {
                "variable": {
                    "value": "edge_index",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_49": {
                "variable": {
                    "value": "nodes",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.get_nodes_features(comb)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_50": {
                "variable": {
                    "value": "root_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[True] + [False] * (len(nodes) - 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "tf-gnn-samples/gnns/ggnn.py": {
        "tensorflow": {
            "concat_68": {
                "variable": {
                    "value": "message_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "edge_type_to_message_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_85": {
                "variable": {
                    "value": "messages",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "messages",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(messages, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_50": {
                "input": {
                    "value": "node_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "out_type": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_78": {
                "variable": {
                    "value": "edge_source_states",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "cur_node_states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "node_embeddings",
                            "variable"
                        ],
                        [
                            "new_node_states",
                            "variable"
                        ]
                    ]
                },
                "ids": {
                    "value": "edge_sources",
                    "type": "variable",
                    "possible_values": [
                        [
                            "adjacency_list_for_edge_type[:, 0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "shape_52": {
                "input": {
                    "value": "node_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "out_type": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_61": {
                "units": {
                    "value": "state_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(node_embeddings, out_type=tf.int32)[1]",
                            "Subscript"
                        ]
                    ]
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "'Edge_%i_Weight' % edge_type_idx",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "tf-gnn-samples/gnns/gnn_edge_mlp.py": {
        "tensorflow": {
            "concat_81": {
                "variable": {
                    "value": "message_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "edge_type_to_message_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_111": {
                "variable": {
                    "value": "all_messages",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "messages_per_type",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_63": {
                "input": {
                    "value": "node_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "out_type": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_91": {
                "variable": {
                    "value": "edge_source_states",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "cur_node_states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "node_embeddings",
                            "variable"
                        ],
                        [
                            "new_node_states",
                            "variable"
                        ]
                    ]
                },
                "ids": {
                    "value": "edge_sources",
                    "type": "variable",
                    "possible_values": [
                        [
                            "adjacency_list_for_edge_type[:, 0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "shape_65": {
                "input": {
                    "value": "node_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "out_type": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_97": {
                "variable": {
                    "value": "edge_target_states",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "cur_node_states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "node_embeddings",
                            "variable"
                        ],
                        [
                            "new_node_states",
                            "variable"
                        ]
                    ]
                },
                "ids": {
                    "value": "edge_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "adjacency_list_for_edge_type[:, 1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "concat_99": {
                "variable": {
                    "value": "edge_mlp_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[edge_source_states, edge_target_states]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "embedding_lookup_106": {
                "variable": {
                    "value": "per_message_num_incoming_edges",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "type_to_num_incoming_edges[edge_type_idx, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ids": {
                    "value": "edge_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "adjacency_list_for_edge_type[:, 1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "expand_dims_108": {
                "input": {
                    "value": "1.0 / (per_message_num_incoming_edges + SMALL_NUMBER)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "tf-gnn-samples/gnns/gnn_film.py": {
        "tensorflow": {
            "concat_82": {
                "variable": {
                    "value": "message_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "edge_type_to_message_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_111": {
                "variable": {
                    "value": "all_messages",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "messages_per_type",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_58": {
                "input": {
                    "value": "node_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "out_type": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_92": {
                "variable": {
                    "value": "edge_source_states",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "cur_node_states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "node_embeddings",
                            "variable"
                        ],
                        [
                            "tf.contrib.layers.layer_norm(new_node_states)",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "edge_sources",
                    "type": "variable",
                    "possible_values": [
                        [
                            "adjacency_list_for_edge_type[:, 0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "embedding_lookup_104": {
                "variable": {
                    "value": "per_message_film_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "film_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "edge_type_to_film_computation_layers[edge_type_idx](cur_node_states)",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "edge_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "adjacency_list_for_edge_type[:, 1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "shape_60": {
                "input": {
                    "value": "node_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "out_type": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_70": {
                "units": {
                    "value": "state_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(node_embeddings, out_type=tf.int32)[1]",
                            "Subscript"
                        ]
                    ]
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "'Edge_%i_Weight' % edge_type_idx",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dense_75": {
                "units": {
                    "value": "2 * state_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "'Edge_%i_FiLM_Computations' % edge_type_idx",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "embedding_lookup_98": {
                "variable": {
                    "value": "per_message_num_incoming_edges",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "type_to_num_incoming_edges[edge_type_idx, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ids": {
                    "value": "edge_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "adjacency_list_for_edge_type[:, 1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "expand_dims_100": {
                "input": {
                    "value": "1.0 / (per_message_num_incoming_edges + SMALL_NUMBER)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "tf-gnn-samples/gnns/rgat.py": {
        "tensorflow": {
            "concat_80": {
                "variable": {
                    "value": "message_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "edge_type_to_message_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_120": {
                "variable": {
                    "value": "per_head_messages",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "edge_type_to_per_head_messages",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_121": {
                "variable": {
                    "value": "per_head_attention_coefficients",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "edge_type_to_per_head_attention_coefficients",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_58": {
                "input": {
                    "value": "node_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "out_type": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_99": {
                "variable": {
                    "value": "edge_transformed_source_states",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "transformed_states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "edge_type_to_state_transformation_layers[edge_type_idx](cur_node_states)",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "edge_sources",
                    "type": "variable",
                    "possible_values": [
                        [
                            "adjacency_list_for_edge_type[:, 0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "embedding_lookup_101": {
                "variable": {
                    "value": "edge_transformed_target_states",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "transformed_states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "edge_type_to_state_transformation_layers[edge_type_idx](cur_node_states)",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "edge_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "adjacency_list_for_edge_type[:, 1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "reshape_104": {
                "variable": {
                    "value": "per_edge_per_head_transformed_source_states",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "edge_transformed_source_states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(params=transformed_states, ids=edge_sources)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, num_heads, per_head_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "concat_107": {
                "variable": {
                    "value": "per_edge_per_head_transformed_states",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[per_edge_per_head_transformed_source_states, tf.reshape(edge_transformed_target_states, shape=(-1, num_heads, per_head_dim))]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_110": {
                "variable": {
                    "value": "per_head_attention_pars",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "edge_type_to_attention_parameters[edge_type_idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "(num_heads, 2 * per_head_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "leaky_relu_113": {
                "variable": {
                    "value": "per_edge_per_head_attention_coefficients",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.einsum('vki,ki->vk', per_edge_per_head_transformed_states, per_head_attention_pars)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_126": {
                "variable": {
                    "value": "attention_coefficients",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "per_head_attention_coefficients[:, head_idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_128": {
                "variable": {
                    "value": "attention_values",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "unsorted_segment_log_softmax(logits=attention_coefficients, segment_ids=message_targets, num_segments=num_nodes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_60": {
                "input": {
                    "value": "node_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "out_type": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_70": {
                "units": {
                    "value": "state_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(node_embeddings, out_type=tf.int32)[1]",
                            "Subscript"
                        ]
                    ]
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "'Edge_%i_Weight' % edge_type_idx",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_variable_75": {
                "shape": {
                    "value": "2 * state_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "'Edge_%i_Attention_Parameters' % edge_type_idx",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concat_138": {
                "values": {
                    "value": "head_to_aggregated_messages",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "einsum_113": {
                "equation": {
                    "value": "vki,ki->vk",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "per_edge_per_head_transformed_states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([per_edge_per_head_transformed_source_states, tf.reshape(edge_transformed_target_states, shape=(-1, num_heads, per_head_dim))], axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "per_head_attention_pars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(edge_type_to_attention_parameters[edge_type_idx], shape=(num_heads, 2 * per_head_dim))",
                            "Call"
                        ]
                    ]
                }
            },
            "unsorted_segment_sum_134": {
                "data": {
                    "value": "tf.expand_dims(attention_values, -1) * messages",
                    "type": "BinOp",
                    "possible_values": []
                },
                "segment_ids": {
                    "value": "message_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(edge_type_to_message_targets, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "num_segments": {
                    "value": "num_nodes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(node_embeddings, out_type=tf.int32)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "reshape_108": {
                "tensor": {
                    "value": "edge_transformed_target_states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(params=transformed_states, ids=edge_targets)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, num_heads, per_head_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "expand_dims_134": {
                "input": {
                    "value": "attention_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(unsorted_segment_log_softmax(logits=attention_coefficients, segment_ids=message_targets, num_segments=num_nodes))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "tf-gnn-samples/gnns/rgcn.py": {
        "tensorflow": {
            "concat_78": {
                "variable": {
                    "value": "message_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "edge_type_to_message_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_108": {
                "variable": {
                    "value": "cur_messages",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "messages_per_type",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_60": {
                "input": {
                    "value": "node_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "out_type": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_88": {
                "variable": {
                    "value": "edge_source_states",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "cur_node_states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "node_embeddings",
                            "variable"
                        ],
                        [
                            "new_node_states",
                            "variable"
                        ]
                    ]
                },
                "ids": {
                    "value": "edge_sources",
                    "type": "variable",
                    "possible_values": [
                        [
                            "adjacency_list_for_edge_type[:, 0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "shape_62": {
                "input": {
                    "value": "node_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "out_type": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_71": {
                "units": {
                    "value": "state_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(node_embeddings, out_type=tf.int32)[1]",
                            "Subscript"
                        ]
                    ]
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "'Edge_%i_Weight' % edge_type_idx",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "embedding_lookup_93": {
                "variable": {
                    "value": "edge_target_states",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "cur_node_states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "node_embeddings",
                            "variable"
                        ],
                        [
                            "new_node_states",
                            "variable"
                        ]
                    ]
                },
                "ids": {
                    "value": "edge_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "adjacency_list_for_edge_type[:, 1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "concat_95": {
                "variable": {
                    "value": "edge_state_pairs",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[edge_source_states, edge_target_states]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "embedding_lookup_102": {
                "variable": {
                    "value": "num_incoming_to_node_per_message",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "type_to_num_incoming_edges[edge_type_idx, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ids": {
                    "value": "edge_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "adjacency_list_for_edge_type[:, 1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "expand_dims_104": {
                "input": {
                    "value": "1.0 / (num_incoming_to_node_per_message + SMALL_NUMBER)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "tf-gnn-samples/gnns/rgdcn.py": {
        "tensorflow": {
            "concat_113": {
                "variable": {
                    "value": "message_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "edge_type_to_message_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_117": {
                "variable": {
                    "value": "node_states_chunked",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "cur_node_states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "node_embeddings",
                            "variable"
                        ],
                        [
                            "new_node_states",
                            "variable"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, num_channels, channel_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "concat_164": {
                "variable": {
                    "value": "new_node_states",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "new_node_states_chunked",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_86": {
                "input": {
                    "value": "node_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "out_type": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_155": {
                "variable": {
                    "value": "cur_channel_messages",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "cur_channel_message_per_type",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "embedding_lookup_130": {
                "variable": {
                    "value": "edge_source_states",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "cur_channel_node_states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "node_states_chunked[:, channel_idx, :]",
                            "Subscript"
                        ]
                    ]
                },
                "ids": {
                    "value": "edge_sources",
                    "type": "variable",
                    "possible_values": [
                        [
                            "adjacency_list_for_edge_type[:, 0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "reshape_141": {
                "variable": {
                    "value": "edge_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "edge_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_compute_layer(weight_computation_input)",
                            "Call"
                        ],
                        [
                            "tf.reshape(edge_weights, shape=(-1, channel_dim, channel_dim))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, channel_dim, channel_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "embedding_lookup_143": {
                "variable": {
                    "value": "edge_weights_for_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "edge_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_compute_layer(weight_computation_input)",
                            "Call"
                        ],
                        [
                            "tf.reshape(edge_weights, shape=(-1, channel_dim, channel_dim))",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "edge_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "adjacency_list_for_edge_type[:, 1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "einsum_146": {
                "variable": {
                    "value": "messages",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "vi,vij->vj",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "edge_source_states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(params=cur_channel_node_states, ids=edge_sources)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "edge_weights_for_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(params=edge_weights, ids=edge_targets)",
                            "Call"
                        ]
                    ]
                }
            },
            "embedding_lookup_149": {
                "variable": {
                    "value": "num_incoming_to_node_per_message",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "type_to_num_incoming_edges[edge_type_idx, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ids": {
                    "value": "edge_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "adjacency_list_for_edge_type[:, 1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Dense_99": {
                "units": {
                    "value": "channel_dim * channel_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.initializers.truncated_normal(mean=0.0, stddev=1.0 / channel_dim ** 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "activation": {
                    "value": "activation_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_activation(activation_function)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "'Edge_%i_Channel_%i_Weight_Computation' % (edge_type_idx, channel)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "expand_dims_151": {
                "input": {
                    "value": "1.0 / (num_incoming_to_node_per_message + SMALL_NUMBER)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "truncated_normal_102": {
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "1.0 / channel_dim ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "tf-gnn-samples/gnns/rgin.py": {
        "tensorflow": {
            "concat_100": {
                "variable": {
                    "value": "message_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "edge_type_to_message_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_127": {
                "variable": {
                    "value": "all_messages",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "messages_per_type",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_69": {
                "input": {
                    "value": "node_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "out_type": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_110": {
                "variable": {
                    "value": "edge_source_states",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "cur_node_states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "node_embeddings",
                            "variable"
                        ],
                        [
                            "new_node_states",
                            "variable"
                        ]
                    ]
                },
                "ids": {
                    "value": "edge_sources",
                    "type": "variable",
                    "possible_values": [
                        [
                            "adjacency_list_for_edge_type[:, 0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "shape_71": {
                "input": {
                    "value": "node_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "out_type": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_116": {
                "variable": {
                    "value": "edge_target_states",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "cur_node_states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "node_embeddings",
                            "variable"
                        ],
                        [
                            "new_node_states",
                            "variable"
                        ]
                    ]
                },
                "ids": {
                    "value": "edge_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "adjacency_list_for_edge_type[:, 1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "concat_118": {
                "variable": {
                    "value": "edge_mlp_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[edge_source_states, edge_target_states]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tf-gnn-samples/models/ggnn_model.py": {
        "tensorflow": {}
    },
    "tf-gnn-samples/models/gnn_edge_mlp_model.py": {
        "tensorflow": {}
    },
    "tf-gnn-samples/models/gnn_film_model.py": {
        "tensorflow": {}
    },
    "tf-gnn-samples/models/no_struct_mlp_model.py": {
        "tensorflow": {
            "tile_42": {
                "variable": {
                    "value": "tiled_nodes",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(graph_to_nodes, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "(1, 1, max_nodes)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "concat_43": {
                "variable": {
                    "value": "pairs",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.expand_dims(tiled_nodes, axis=-1), tf.expand_dims(tf.transpose(tiled_nodes, [0, 2, 1]), axis=-1)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_46": {
                "variable": {
                    "value": "flat_pairs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "pairs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.expand_dims(tiled_nodes, axis=-1), tf.expand_dims(tf.transpose(tiled_nodes, [0, 2, 1]), axis=-1)], axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_47": {
                "variable": {
                    "value": "relevant_edges",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.gather(flat_pairs, tf.where(tf.reduce_min(flat_pairs, axis=-1) >= 0))",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_50": {
                "variable": {
                    "value": "num_nodes_in_graph",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(tf.greater(graph_to_nodes, -1), dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_51": {
                "variable": {
                    "value": "num_incoming_nodes_per_node",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "num_nodes_in_graph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.cast(tf.greater(graph_to_nodes, -1), dtype=tf.float32), axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "graph_nodes_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._Sparse_Graph_Model__placeholders['graph_nodes_list']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tile_52": {
                "variable": {
                    "value": "type_to_num_incoming_edges",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(num_incoming_nodes_per_node, axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[num_types, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_41": {
                "input": {
                    "value": "graph_to_nodes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._Sparse_Graph_Model__placeholders['graph_to_nodes']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "expand_dims_42": {
                "input": {
                    "value": "graph_to_nodes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._Sparse_Graph_Model__placeholders['graph_to_nodes']",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_47": {
                "params": {
                    "value": "flat_pairs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(pairs, [-1, 2])",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "tf.where(tf.reduce_min(flat_pairs, axis=-1) >= 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_49": {
                "input": {
                    "value": "type_to_num_incoming_edges",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(tf.expand_dims(num_incoming_nodes_per_node, axis=0), [num_types, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_50": {
                "x": {
                    "value": "tf.greater(graph_to_nodes, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_52": {
                "input": {
                    "value": "num_incoming_nodes_per_node",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(params=num_nodes_in_graph, indices=graph_nodes_list)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_44": {
                "input": {
                    "value": "tf.transpose(tiled_nodes, [0, 2, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "where_47": {
                "condition": {
                    "value": "tf.reduce_min(flat_pairs, axis=-1) >= 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "greater_50": {
                "x": {
                    "value": "graph_to_nodes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._Sparse_Graph_Model__placeholders['graph_to_nodes']",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "transpose_44": {
                "a": {
                    "value": "tiled_nodes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(tf.expand_dims(graph_to_nodes, axis=-1), (1, 1, max_nodes))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_min_47": {
                "input_tensor": {
                    "value": "flat_pairs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(pairs, [-1, 2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "tf-gnn-samples/models/rgat_model.py": {
        "tensorflow": {}
    },
    "tf-gnn-samples/models/rgcn_model.py": {
        "tensorflow": {}
    },
    "tf-gnn-samples/models/rgdcn_model.py": {
        "tensorflow": {}
    },
    "tf-gnn-samples/models/rgin_model.py": {
        "tensorflow": {}
    },
    "tf-gnn-samples/models/self_attention.py": {
        "tensorflow": {
            "InteractiveSession_67": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tile_18": {
                "variable": {
                    "value": "tiled_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(batched_inputs, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, self.num_heads, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dense_21": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._concat_heads(outputs)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(output, units=self.model_dim, use_bias=False, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(output, keep_prob=self.dropout_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.model_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_24": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._concat_heads(outputs)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(output, units=self.model_dim, use_bias=False, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(output, keep_prob=self.dropout_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "self.dropout_keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_28": {
                "variable": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "batched_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batched_inputs",
                            "Method Argument"
                        ],
                        [
                            "batched_inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "units": {
                    "value": "self.model_dim * self.num_heads",
                    "type": "BinOp",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "matmul_48": {
                "variable": {
                    "value": "queries_dot_keys",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "qs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._split_heads(q)",
                            "Call"
                        ],
                        [
                            "split_last_dimension_then_transpose(q, self.num_heads, self.model_dim)",
                            "Call"
                        ],
                        [
                            "qs",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "ks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ks",
                            "Method Argument"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_56": {
                "variable": {
                    "value": "attention_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "scaled_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "queries_dot_keys",
                            "variable"
                        ],
                        [
                            "scaled_scores + mask",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "transpose_62": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._scaled_dot_product(qs, tiled_inputs, tiled_inputs, valid_mask)",
                            "Call"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_37": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tensor, [-1, tf.shape(tensor)[1], num_heads, dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(outputs, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, tf.shape(tensor)[1], num_heads, dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "log_52": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reshape(valid_mask, (tf.shape(valid_mask)[0], 1, 1, tf.shape(valid_mask)[1]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_57": {
                "a": {
                    "value": "attention_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(scaled_scores, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tiled_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(tf.expand_dims(batched_inputs, axis=1), [1, self.num_heads, 1, 1])",
                            "Call"
                        ],
                        [
                            "tiled_inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_63": {
                "tensor": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tensor, [-1, tf.shape(tensor)[1], num_heads, dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(outputs, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, max_contexts, self.model_dim * self.num_heads]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_69": {
                "value": {
                    "value": "np.arange(24).reshape((2, 3, 4))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "group_70": {
                "*inputs": {
                    "value": "tf.global_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "tf.local_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_18": {
                "input": {
                    "value": "batched_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batched_inputs",
                            "Method Argument"
                        ],
                        [
                            "batched_inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_39": {
                "a": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tensor, [-1, tf.shape(tensor)[1], num_heads, dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(outputs, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_61": {
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._scaled_dot_product(qs, tiled_inputs, tiled_inputs, valid_mask)",
                            "Call"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "global_variables_initializer_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tables_initializer_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reshape_52": {
                "tensor": {
                    "value": "valid_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "valid_mask",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(tf.shape(valid_mask)[0], 1, 1, tf.shape(valid_mask)[1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "shape_37": {
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tensor, [-1, tf.shape(tensor)[1], num_heads, dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(outputs, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_53": {
                "input": {
                    "value": "valid_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "valid_mask",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "tf-gnn-samples/models/sparse_graph_model.py": {
        "tensorflow": {
            "ConfigProto_71": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_73": {
                "variable": {
                    "value": "self.graph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_74": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "graph": {
                    "value": "self.graph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_147": {
                "variable": {
                    "value": "total_num_graphs_variable",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "total_num_graphs",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "assign_add_153": {
                "variable": {
                    "value": "self.__ops[total_num_graphs]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ref": {
                    "value": "total_num_graphs_variable",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='total_num_graphs', shape=(), dtype=tf.int64, initializer=tf.zeros_initializer, trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "self.__placeholders['num_graphs']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "merge_all_154": {
                "variable": {
                    "value": "self.__ops[tf_summaries]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_178": {
                "variable": {
                    "value": "last_residual_representations",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cur_node_representations",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.__ops['projected_node_features']",
                            "Subscript"
                        ],
                        [
                            "tf.nn.dropout(cur_node_representations, rate=1.0 - self.__placeholders['graph_layer_input_dropout_keep_prob'])",
                            "Call"
                        ],
                        [
                            "cur_node_representations / 2",
                            "BinOp"
                        ],
                        [
                            "self._apply_gnn_layer(cur_node_representations, full_adjacency_lists, full_type_to_num_incoming_edges, self.params['graph_num_timesteps_per_layer'])",
                            "Call"
                        ],
                        [
                            "self._apply_gnn_layer(cur_node_representations, adjacency_lists, type_to_num_incoming_edges, self.params['graph_num_timesteps_per_layer'])",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.layer_norm(cur_node_representations)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.Dense(units=h_dim, use_bias=False, activation=activation_fn, name='Dense')(cur_node_representations)",
                            "Call"
                        ]
                    ]
                }
            },
            "scatter_nd_230": {
                "variable": {
                    "value": "scattered",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.expand_dims(indices, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "updates": {
                    "value": "updates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "updates",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.shape(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_235": {
                "variable": {
                    "value": "masked_x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "update_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - tf.expand_dims(tf.scatter_nd(indices=tf.expand_dims(indices, -1), updates=tf.ones_like(indices, dtype=tf.float32), shape=[tf.shape(x)[0]]), axis=-1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Variable_266": {
                "variable": {
                    "value": "step",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "group_90": {
                "variable": {
                    "value": "init_op",
                    "type": "variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "tf.global_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "tf.local_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_137": {
                "variable": {
                    "value": "self.__placeholders[num_graphs]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "num_graphs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_with_default_139": {
                "variable": {
                    "value": "self.__placeholders[graph_layer_input_dropout_keep_prob]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "graph_layer_input_dropout_keep_prob",
                    "type": "str",
                    "possible_values": []
                }
            },
            "scalar_145": {
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.__ops['task_metrics']['loss']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "trainable_variables_158": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_281": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.params['learning_rate']",
                            "Subscript"
                        ],
                        [
                            "learning_rate * lr_norm_factor",
                            "BinOp"
                        ]
                    ]
                }
            },
            "set_random_seed_76": {
                "seed": {
                    "value": "self.params['random_seed']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "variable_scope_135": {
                "name_or_scope": {
                    "value": "graph_model",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_183": {
                "variable": {
                    "value": "cur_node_representations",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "cur_node_representations",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.__ops['projected_node_features']",
                            "Subscript"
                        ],
                        [
                            "tf.nn.dropout(cur_node_representations, rate=1.0 - self.__placeholders['graph_layer_input_dropout_keep_prob'])",
                            "Call"
                        ],
                        [
                            "cur_node_representations / 2",
                            "BinOp"
                        ],
                        [
                            "self._apply_gnn_layer(cur_node_representations, full_adjacency_lists, full_type_to_num_incoming_edges, self.params['graph_num_timesteps_per_layer'])",
                            "Call"
                        ],
                        [
                            "self._apply_gnn_layer(cur_node_representations, adjacency_lists, type_to_num_incoming_edges, self.params['graph_num_timesteps_per_layer'])",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.layer_norm(cur_node_representations)",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.Dense(units=h_dim, use_bias=False, activation=activation_fn, name='Dense')(cur_node_representations)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "1.0 - self.__placeholders['graph_layer_input_dropout_keep_prob']",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "expand_dims_232": {
                "input": {
                    "value": "tf.scatter_nd(indices=tf.expand_dims(indices, -1), updates=tf.ones_like(indices, dtype=tf.float32), shape=[tf.shape(x)[0]])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "RMSPropOptimizer_283": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.params['learning_rate']",
                            "Subscript"
                        ],
                        [
                            "learning_rate * lr_norm_factor",
                            "BinOp"
                        ]
                    ]
                },
                "decay": {
                    "value": "self.params['learning_rate_decay']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.params['momentum']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "FileWriter_361": {
                "variable": {
                    "value": "train_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "os.path.join(tf_summary_path, 'train')",
                    "type": "Call",
                    "possible_values": []
                },
                "graph": {
                    "value": "self.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FileWriter_362": {
                "variable": {
                    "value": "valid_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "os.path.join(tf_summary_path, 'valid')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "global_variables_initializer_90": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_91": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "name_scope_115": {
                "name": {
                    "value": "restore",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_170": {
                "units": {
                    "value": "h_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.params['hidden_size']",
                            "Subscript"
                        ]
                    ]
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "activation": {
                    "value": "activation_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_activation(self.params['graph_model_activation_function'])",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_181": {
                "name_or_scope": {
                    "value": "'gnn_layer_%i' % layer_idx",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "expand_dims_230": {
                "input": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "indices",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "shape_230": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "scatter_nd_233": {
                "indices": {
                    "value": "tf.expand_dims(indices, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "updates": {
                    "value": "tf.ones_like(indices, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[tf.shape(x)[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_275": {
                "x": {
                    "value": "self.__placeholders['num_graphs']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_276": {
                "value": {
                    "value": "lr_for_num_graphs_per_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.params.get('lr_for_num_graphs_per_batch')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_287": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.params['learning_rate']",
                            "Subscript"
                        ],
                        [
                            "learning_rate * lr_norm_factor",
                            "BinOp"
                        ]
                    ]
                }
            },
            "variables_initializer_128": {
                "var_list": {
                    "value": "variables_to_initialize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Dense_216": {
                "units": {
                    "value": "h_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.params['hidden_size']",
                            "Subscript"
                        ]
                    ]
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "activation": {
                    "value": "activation_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_activation(self.params['graph_model_activation_function'])",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "Dense",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_233": {
                "input": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "indices",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_like_233": {
                "input": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "indices",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_norm_295": {
                "t": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grads_and_vars",
                            "variable"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "self.params['clamp_gradient_norm']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "shape_233": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "tf-gnn-samples/tasks/citation_network_task.py": {
        "tensorflow": {
            "placeholder_116": {
                "variable": {
                    "value": "placeholders[labels]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "labels",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_117": {
                "variable": {
                    "value": "placeholders[mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "mask",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_with_default_119": {
                "variable": {
                    "value": "placeholders[out_layer_dropout_keep_prob]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.constant(1.0, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "out_layer_dropout_keep_prob",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_124": {
                "variable": {
                    "value": "final_node_representations",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "model_ops['final_node_representations']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "rate": {
                    "value": "1.0 - placeholders['out_layer_dropout_keep_prob']",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_133": {
                "variable": {
                    "value": "num_masked_preds",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "placeholders['mask']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_with_logits_134": {
                "variable": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "output_label_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.keras.layers.Dense(units=self.__num_output_classes, use_bias=False, activation=None, name='OutputDenseLayer')(final_node_representations)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "placeholders['labels']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_sum_136": {
                "variable": {
                    "value": "total_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "losses * placeholders['mask']",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "equal_138": {
                "variable": {
                    "value": "correct_preds",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(output_label_logits, axis=1, output_type=tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "placeholders['labels']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_sum_140": {
                "variable": {
                    "value": "num_masked_correct",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(correct_preds, tf.float32) * placeholders['mask']",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "scalar_142": {
                "name": {
                    "value": "accuracy",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "accuracy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_masked_correct / num_masked_preds",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Dense_127": {
                "units": {
                    "value": "self.__num_output_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "OutputDenseLayer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "argmax_138": {
                "input": {
                    "value": "output_label_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.keras.layers.Dense(units=self.__num_output_classes, use_bias=False, activation=None, name='OutputDenseLayer')(final_node_representations)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "output_type": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_119": {
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_140": {
                "x": {
                    "value": "correct_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(tf.argmax(output_label_logits, axis=1, output_type=tf.int32), placeholders['labels'])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tf-gnn-samples/tasks/ppi_task.py": {
        "tensorflow": {
            "placeholder_172": {
                "variable": {
                    "value": "placeholders[graph_to_nodes]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "graph_to_nodes",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_179": {
                "variable": {
                    "value": "placeholders[graph_nodes_list]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "graph_nodes_list",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_181": {
                "variable": {
                    "value": "placeholders[target_labels]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.__num_labels]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "target_labels",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_183": {
                "variable": {
                    "value": "placeholders[out_layer_dropout_keep_prob]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "out_layer_dropout_keep_prob",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_193": {
                "variable": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "per_node_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.keras.layers.Dense(units=self.__num_labels, use_bias=True)(final_node_representations)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "placeholders['target_labels']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_sum_195": {
                "variable": {
                    "value": "total_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid_cross_entropy_with_logits(logits=per_node_logits, labels=placeholders['target_labels'])",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_201": {
                "name": {
                    "value": "Micro F1",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "f1_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "micro_f1(per_node_logits, placeholders['target_labels'])",
                            "Call"
                        ]
                    ]
                }
            },
            "Dense_189": {
                "units": {
                    "value": "self.__num_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "shape_198": {
                "input": {
                    "value": "placeholders['target_labels']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cast_203": {
                "x": {
                    "value": "num_nodes_in_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(placeholders['target_labels'])[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tf-gnn-samples/tasks/qm9_task.py": {
        "tensorflow": {
            "placeholder_158": {
                "variable": {
                    "value": "placeholders[graph_nodes_list]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "graph_nodes_list",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_160": {
                "variable": {
                    "value": "placeholders[graph_to_nodes]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "graph_to_nodes",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_169": {
                "variable": {
                    "value": "placeholders[target_values]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[len(self.params['task_ids']), None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "target_values",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_171": {
                "variable": {
                    "value": "placeholders[out_layer_dropout_keep_prob]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "out_layer_dropout_keep_prob",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_225": {
                "variable": {
                    "value": "model_ops[task_metrics][loss]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "tile_324": {
                "variable": {
                    "value": "tiled_nodes",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(graph_to_nodes, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "(1, 1, max_nodes)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "concat_325": {
                "variable": {
                    "value": "pairs",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.expand_dims(tiled_nodes, axis=-1), tf.expand_dims(tf.transpose(tiled_nodes, [0, 2, 1]), axis=-1)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_329": {
                "variable": {
                    "value": "flat_pairs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "pairs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.expand_dims(tiled_nodes, axis=-1), tf.expand_dims(tf.transpose(tiled_nodes, [0, 2, 1]), axis=-1)], axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_330": {
                "variable": {
                    "value": "full_edges",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.gather(flat_pairs, tf.where(tf.reduce_min(flat_pairs, axis=-1) >= 0))",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unsorted_segment_sum_332": {
                "variable": {
                    "value": "type_to_num_incoming_full",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.ones([tf.shape(full_edges)[0]])",
                    "type": "Call",
                    "possible_values": []
                },
                "segment_ids": {
                    "value": "full_edges[:, 1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "tf.reshape(tf.gather(flat_pairs, tf.where(tf.reduce_min(flat_pairs, axis=-1) >= 0)), [-1, 2])",
                            "Call"
                        ]
                    ]
                },
                "num_segments": {
                    "value": "tf.shape(type_to_num_incoming_edges)[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "maximum_180": {
                "variable": {
                    "value": "safe_graph_to_nodes",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "graph_to_nodes_placeholder",
                    "type": "variable",
                    "possible_values": [
                        [
                            "placeholders['graph_to_nodes']",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_181": {
                "variable": {
                    "value": "valid_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.greater(graph_to_nodes_placeholder, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_207": {
                "variable": {
                    "value": "gate_input",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[final_node_representations, model_ops['initial_node_features']]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsorted_segment_sum_213": {
                "variable": {
                    "value": "per_graph_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "per_node_gated_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid(regression_gate(gate_input)) * per_node_outputs",
                            "BinOp"
                        ]
                    ]
                },
                "segment_ids": {
                    "value": "placeholders['graph_nodes_list']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "placeholders",
                            "Method Argument"
                        ]
                    ]
                },
                "num_segments": {
                    "value": "placeholders['num_graphs']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "placeholders",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_217": {
                "variable": {
                    "value": "per_graph_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "per_graph_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.unsorted_segment_sum(data=per_node_gated_outputs, segment_ids=placeholders['graph_nodes_list'], num_segments=placeholders['num_graphs'])",
                            "Call"
                        ],
                        [
                            "tf.squeeze(per_graph_outputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_220": {
                "variable": {
                    "value": "task_metrics[abs_err_task%i % task_id]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.abs(per_graph_errors)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_226": {
                "x": {
                    "value": "placeholders['num_graphs']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_322": {
                "input": {
                    "value": "graph_to_nodes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "placeholders['graph_to_nodes']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "expand_dims_324": {
                "input": {
                    "value": "graph_to_nodes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "placeholders['graph_to_nodes']",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_330": {
                "params": {
                    "value": "flat_pairs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(pairs, [-1, 2])",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "tf.where(tf.reduce_min(flat_pairs, axis=-1) >= 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_337": {
                "input": {
                    "value": "type_to_num_incoming_full",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.unsorted_segment_sum(data=tf.ones([tf.shape(full_edges)[0]]), segment_ids=full_edges[:, 1], num_segments=tf.shape(type_to_num_incoming_edges)[1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_176": {
                "name_or_scope": {
                    "value": "'out_layer_task%i' % task_id",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gather_191": {
                "variable": {
                    "value": "graph_nodes",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "final_node_representations",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_ops['final_node_representations']",
                            "Subscript"
                        ],
                        [
                            "tf.gather_nd(params=graph_nodes, indices=tf.where(valid_mask))",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "safe_graph_to_nodes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.maximum(graph_to_nodes_placeholder, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_nd_196": {
                "variable": {
                    "value": "final_node_representations",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "graph_nodes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(params=final_node_representations, indices=safe_graph_to_nodes)",
                            "Call"
                        ],
                        [
                            "graph_nodes / tf.expand_dims(tf.expand_dims(tf.reduce_sum(valid_mask, axis=-1), axis=-1), axis=-1)",
                            "BinOp"
                        ]
                    ]
                },
                "indices": {
                    "value": "tf.where(valid_mask)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_221": {
                "name": {
                    "value": "'mae_task%i' % task_id",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "task_metrics['abs_err_task%i' % task_id] / tf.cast(placeholders['num_graphs'], tf.float32)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "expand_dims_326": {
                "input": {
                    "value": "tf.transpose(tiled_nodes, [0, 2, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "where_330": {
                "condition": {
                    "value": "tf.reduce_min(flat_pairs, axis=-1) >= 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "ones_333": {
                "shape": {
                    "value": "[tf.shape(full_edges)[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "greater_181": {
                "x": {
                    "value": "graph_to_nodes_placeholder",
                    "type": "variable",
                    "possible_values": [
                        [
                            "placeholders['graph_to_nodes']",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_193": {
                "input": {
                    "value": "tf.expand_dims(tf.reduce_sum(valid_mask, axis=-1), axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sigmoid_210": {
                "x": {
                    "value": "regression_gate(gate_input)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_220": {
                "x": {
                    "value": "per_graph_errors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "per_graph_outputs - placeholders['target_values'][internal_id, :]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_mean_223": {
                "input_tensor": {
                    "value": "0.5 * tf.square(per_graph_errors)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "transpose_326": {
                "a": {
                    "value": "tiled_nodes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(tf.expand_dims(graph_to_nodes, axis=-1), (1, 1, max_nodes))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_335": {
                "input": {
                    "value": "type_to_num_incoming_edges",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.__graph_to_adjacency_lists(d['graph'], num_nodes=len(d['node_features']))",
                            "Call"
                        ],
                        [
                            "np.zeros(shape=(self.num_edge_types, num_nodes))",
                            "Call"
                        ],
                        [
                            "type_to_num_incoming_edges",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "expand_dims_194": {
                "input": {
                    "value": "tf.reduce_sum(valid_mask, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cast_222": {
                "x": {
                    "value": "placeholders['num_graphs']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_min_330": {
                "input_tensor": {
                    "value": "flat_pairs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(pairs, [-1, 2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_194": {
                "input_tensor": {
                    "value": "valid_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.greater(graph_to_nodes_placeholder, -1), dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "where_197": {
                "condition": {
                    "value": "valid_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.greater(graph_to_nodes_placeholder, -1), dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "square_223": {
                "x": {
                    "value": "per_graph_errors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "per_graph_outputs - placeholders['target_values'][internal_id, :]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "shape_333": {
                "input": {
                    "value": "full_edges",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.gather(flat_pairs, tf.where(tf.reduce_min(flat_pairs, axis=-1) >= 0)), [-1, 2])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tf-gnn-samples/tasks/sparse_graph_task.py": {
        "tensorflow": {
            "placeholder_140": {
                "variable": {
                    "value": "placeholders[initial_node_features]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.initial_node_feature_size]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "initial_node_features",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_145": {
                "variable": {
                    "value": "placeholders[type_to_num_incoming_edges]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.num_edge_types, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "type_to_num_incoming_edges",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_142": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "'adjacency_e%s' % e",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "tf-gnn-samples/tasks/varmisuse_task.py": {
        "tensorflow": {
            "placeholder_354": {
                "variable": {
                    "value": "placeholders[unique_labels_as_characters]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, node_label_char_length]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "unique_labels_as_characters",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_356": {
                "variable": {
                    "value": "placeholders[node_labels_to_unique_labels]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "node_labels_to_unique_labels",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_361": {
                "variable": {
                    "value": "placeholders[type_to_num_incoming_edges]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.num_edge_types, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "type_to_num_incoming_edges",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_364": {
                "variable": {
                    "value": "placeholders[slot_node_ids]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "slot_node_ids",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_366": {
                "variable": {
                    "value": "placeholders[graph_to_nodes]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "graph_to_nodes",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_375": {
                "variable": {
                    "value": "placeholders[candidate_node_ids]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "candidate_node_ids",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_377": {
                "variable": {
                    "value": "placeholders[candidate_node_ids_mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "candidate_node_ids_mask",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_379": {
                "variable": {
                    "value": "placeholders[fa_edges]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "fa_edges",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_436": {
                "variable": {
                    "value": "unique_label_representations",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "char_conv_l2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.keras.layers.Conv1D(filters=label_embedding_size, kernel_size=char_conv_l2_kernel_size, activation=tf.nn.leaky_relu)(char_pool_l1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_437": {
                "variable": {
                    "value": "node_label_representations",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "unique_label_representations",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(char_conv_l2, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "node_labels_to_unique_labels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "placeholder_with_default_451": {
                "variable": {
                    "value": "placeholders[out_layer_dropout_rate]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "out_layer_dropout_rate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_457": {
                "variable": {
                    "value": "final_node_states",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "model_ops['final_node_representations']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "rate": {
                    "value": "placeholders['out_layer_dropout_rate']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "placeholders",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "gather_462": {
                "variable": {
                    "value": "slot_representations",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "final_node_states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(model_ops['final_node_representations'], rate=placeholders['out_layer_dropout_rate'])",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "placeholders['slot_node_ids']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "placeholders",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "maximum_465": {
                "variable": {
                    "value": "safe_graph_to_nodes",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "graph_to_nodes_placeholder",
                    "type": "variable",
                    "possible_values": [
                        [
                            "placeholders['graph_to_nodes']",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_467": {
                "variable": {
                    "value": "graph_nodes",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "final_node_states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(model_ops['final_node_representations'], rate=placeholders['out_layer_dropout_rate'])",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "safe_graph_to_nodes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.maximum(graph_to_nodes_placeholder, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_468": {
                "variable": {
                    "value": "valid_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.greater(graph_to_nodes_placeholder, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_472": {
                "variable": {
                    "value": "candidate_node_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "placeholders['candidate_node_ids']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_474": {
                "variable": {
                    "value": "candidate_representations",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "final_node_states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(model_ops['final_node_representations'], rate=placeholders['out_layer_dropout_rate'])",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "candidate_node_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[correct_candidate_id] + distractor_candidate_ids[:max_variable_candidates - 1]",
                            "BinOp"
                        ],
                        [
                            "candidate_node_ids + [0] * num_scope_padding",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(placeholders['candidate_node_ids'], shape=[-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_476": {
                "variable": {
                    "value": "candidate_representations",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "candidate_representations",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(params=final_node_states, indices=candidate_node_ids)",
                            "Call"
                        ],
                        [
                            "tf.reshape(candidate_representations, shape=[-1, num_candidate_vars, final_node_repr_size])",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.Dense(units=final_node_repr_size, use_bias=False, activation=tf.nn.relu, name='candidate_attention_layer2')(candidates_with_attended)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, num_candidate_vars, final_node_repr_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_510": {
                "variable": {
                    "value": "slot_candidate_inner_product",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.matmul(candidate_representations, tf.expand_dims(slot_representations, axis=-1))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_533": {
                "variable": {
                    "value": "correct_choices",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[tf.shape(logits)[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_546": {
                "variable": {
                    "value": "prediction_is_correct",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(tf.nn.softmax(logits), 1, output_type=tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "correct_choices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros([tf.shape(logits)[0]], dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_548": {
                "variable": {
                    "value": "accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(prediction_is_correct, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsorted_segment_sum_669": {
                "variable": {
                    "value": "type_to_num_incoming_full",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.ones([tf.shape(fa_edges)[0]])",
                    "type": "Call",
                    "possible_values": []
                },
                "segment_ids": {
                    "value": "fa_edges[:, 1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "_create_fa_edges(raw_sample, max_variable_candidates)",
                            "Call"
                        ],
                        [
                            "placeholders['fa_edges']",
                            "Subscript"
                        ]
                    ]
                },
                "num_segments": {
                    "value": "tf.shape(type_to_num_incoming_edges)[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "concat_675": {
                "variable": {
                    "value": "type_to_num_all_edges",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[type_to_num_incoming_edges[:index_of_drop], tf.expand_dims(type_to_num_incoming_full, axis=0), type_to_num_incoming_edges[index_of_drop + 1:]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_variable_408": {
                "variable": {
                    "value": "char_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "char_embeddings",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "(len(ALPHABET_DICT), len(ALPHABET_DICT))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "embedding_lookup_410": {
                "variable": {
                    "value": "unique_label_chars_one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "char_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='char_embeddings', shape=(len(ALPHABET_DICT), len(ALPHABET_DICT)), dtype=tf.float32, trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "unique_labels_as_characters",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "one_hot_413": {
                "variable": {
                    "value": "unique_label_chars_one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "unique_labels_as_characters",
                    "type": "variable",
                    "possible_values": []
                },
                "depth": {
                    "value": "len(ALPHABET_DICT)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_492": {
                "variable": {
                    "value": "candidates_dot_w",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "candidates_dot_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.keras.layers.Dense(units=final_node_repr_size * num_heads, use_bias=False, activation=None, name='candidate_attention_layer1')(candidate_representations)",
                            "Call"
                        ],
                        [
                            "tf.reshape(candidates_dot_w, [-1, num_candidate_vars * num_heads, final_node_repr_size])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, num_candidate_vars * num_heads, final_node_repr_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_493": {
                "variable": {
                    "value": "candidate_attention_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "candidates_dot_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.keras.layers.Dense(units=final_node_repr_size * num_heads, use_bias=False, activation=None, name='candidate_attention_layer1')(candidate_representations)",
                            "Call"
                        ],
                        [
                            "tf.reshape(candidates_dot_w, [-1, num_candidate_vars * num_heads, final_node_repr_size])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "graph_nodes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(params=final_node_states, indices=safe_graph_to_nodes)",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "expand_dims_496": {
                "variable": {
                    "value": "normalized_candidate_attention_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.nn.softmax(masked_candidate_attention_scores, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "multiply_497": {
                "variable": {
                    "value": "weighted_graph_nodes",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "normalized_candidate_attention_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.nn.softmax(masked_candidate_attention_scores, axis=-1), axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.expand_dims(graph_nodes, axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_498": {
                "variable": {
                    "value": "weighted_average",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "weighted_graph_nodes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(normalized_candidate_attention_scores, tf.expand_dims(graph_nodes, axis=1))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_499": {
                "variable": {
                    "value": "flattened_heads",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "weighted_average",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(weighted_graph_nodes, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, num_candidate_vars, num_heads * final_node_repr_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_500": {
                "variable": {
                    "value": "candidates_with_attended",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[candidate_representations, flattened_heads]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tile_513": {
                "variable": {
                    "value": "repeated_slots",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(slot_representations, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, num_candidate_vars, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_515": {
                "variable": {
                    "value": "slot_cand_comb",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[candidate_representations, repeated_slots, tf.expand_dims(slot_candidate_inner_product, -1)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_524": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.keras.layers.Dense(units=1, use_bias=False, activation=None, name='slot_score_linear_layer')(slot_cand_comb)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(logits, axis=-1)",
                            "Call"
                        ],
                        [
                            "slot_candidate_inner_product",
                            "variable"
                        ],
                        [
                            "logits + (1.0 - placeholders['candidate_node_ids_mask']) * -BIG_NUMBER",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_with_logits_536": {
                "variable": {
                    "value": "per_graph_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "correct_choices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros([tf.shape(logits)[0]], dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.keras.layers.Dense(units=1, use_bias=False, activation=None, name='slot_score_linear_layer')(slot_cand_comb)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(logits, axis=-1)",
                            "Call"
                        ],
                        [
                            "slot_candidate_inner_product",
                            "variable"
                        ],
                        [
                            "logits + (1.0 - placeholders['candidate_node_ids_mask']) * -BIG_NUMBER",
                            "BinOp"
                        ]
                    ]
                }
            },
            "scalar_550": {
                "name": {
                    "value": "accuracy",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "accuracy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.cast(prediction_is_correct, tf.float32))",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_358": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "'adjacency_e%s' % e",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv1D_423": {
                "filters": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "char_conv_l1_kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "int"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.leaky_relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MaxPool1D_428": {
                "pool_size": {
                    "value": "char_conv_l1_kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "int"
                        ]
                    ]
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1D_432": {
                "filters": {
                    "value": "label_embedding_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.params['graph_node_label_representation_size']",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "char_conv_l2_kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.params['graph_node_label_max_num_chars'] - 2 * (char_conv_l1_kernel_size - 1)",
                            "BinOp"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.leaky_relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "greater_468": {
                "x": {
                    "value": "graph_to_nodes_placeholder",
                    "type": "variable",
                    "possible_values": [
                        [
                            "placeholders['graph_to_nodes']",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_510": {
                "a": {
                    "value": "candidate_representations",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(params=final_node_states, indices=candidate_node_ids)",
                            "Call"
                        ],
                        [
                            "tf.reshape(candidate_representations, shape=[-1, num_candidate_vars, final_node_repr_size])",
                            "Call"
                        ],
                        [
                            "tf.keras.layers.Dense(units=final_node_repr_size, use_bias=False, activation=tf.nn.relu, name='candidate_attention_layer2')(candidates_with_attended)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.expand_dims(slot_representations, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_softmax_538": {
                "variable": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.keras.layers.Dense(units=1, use_bias=False, activation=None, name='slot_score_linear_layer')(slot_cand_comb)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(logits, axis=-1)",
                            "Call"
                        ],
                        [
                            "slot_candidate_inner_product",
                            "variable"
                        ],
                        [
                            "logits + (1.0 - placeholders['candidate_node_ids_mask']) * -BIG_NUMBER",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_max_540": {
                "variable": {
                    "value": "max_wrong_log_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "log_probs[:, 1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_542": {
                "variable": {
                    "value": "per_graph_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "max_wrong_log_prob - correct_log_prob + self.parameters['loss_margin']",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "argmax_546": {
                "input": {
                    "value": "tf.nn.softmax(logits)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "output_type": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_548": {
                "x": {
                    "value": "prediction_is_correct",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(tf.argmax(tf.nn.softmax(logits), 1, output_type=tf.int32), correct_choices)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_552": {
                "input_tensor": {
                    "value": "per_graph_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sparse_softmax_cross_entropy_with_logits(labels=correct_choices, logits=logits)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(max_wrong_log_prob - correct_log_prob + self.parameters['loss_margin'])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_553": {
                "input_tensor": {
                    "value": "per_graph_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sparse_softmax_cross_entropy_with_logits(labels=correct_choices, logits=logits)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(max_wrong_log_prob - correct_log_prob + self.parameters['loss_margin'])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_555": {
                "input_tensor": {
                    "value": "tf.cast(prediction_is_correct, tf.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dense_487": {
                "units": {
                    "value": "final_node_repr_size * num_heads",
                    "type": "BinOp",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "candidate_attention_layer1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_495": {
                "input": {
                    "value": "tf.log(valid_mask)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_496": {
                "logits": {
                    "value": "masked_candidate_attention_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "candidate_attention_scores + tf.expand_dims(tf.log(valid_mask), axis=1)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_497": {
                "input": {
                    "value": "graph_nodes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(params=final_node_states, indices=safe_graph_to_nodes)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dense_501": {
                "units": {
                    "value": "final_node_repr_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_ops['final_node_representations'].shape.as_list()[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "candidate_attention_layer2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_510": {
                "input": {
                    "value": "slot_representations",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(params=final_node_states, indices=placeholders['slot_node_ids'])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_513": {
                "input": {
                    "value": "slot_representations",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(params=final_node_states, indices=placeholders['slot_node_ids'])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dense_519": {
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "name": {
                    "value": "slot_score_linear_layer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_546": {
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.keras.layers.Dense(units=1, use_bias=False, activation=None, name='slot_score_linear_layer')(slot_cand_comb)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(logits, axis=-1)",
                            "Call"
                        ],
                        [
                            "slot_candidate_inner_product",
                            "variable"
                        ],
                        [
                            "logits + (1.0 - placeholders['candidate_node_ids_mask']) * -BIG_NUMBER",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cast_555": {
                "x": {
                    "value": "prediction_is_correct",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(tf.argmax(tf.nn.softmax(logits), 1, output_type=tf.int32), correct_choices)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_670": {
                "shape": {
                    "value": "[tf.shape(fa_edges)[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_677": {
                "input": {
                    "value": "type_to_num_incoming_full",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.unsorted_segment_sum(data=tf.ones([tf.shape(fa_edges)[0]]), segment_ids=fa_edges[:, 1], num_segments=tf.shape(type_to_num_incoming_edges)[1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_495": {
                "x": {
                    "value": "valid_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.greater(graph_to_nodes_placeholder, -1), dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_517": {
                "input": {
                    "value": "slot_candidate_inner_product",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(tf.matmul(candidate_representations, tf.expand_dims(slot_representations, axis=-1)), axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "shape_533": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.keras.layers.Dense(units=1, use_bias=False, activation=None, name='slot_score_linear_layer')(slot_cand_comb)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(logits, axis=-1)",
                            "Call"
                        ],
                        [
                            "slot_candidate_inner_product",
                            "variable"
                        ],
                        [
                            "logits + (1.0 - placeholders['candidate_node_ids_mask']) * -BIG_NUMBER",
                            "BinOp"
                        ]
                    ]
                }
            },
            "shape_672": {
                "input": {
                    "value": "type_to_num_incoming_edges",
                    "type": "variable",
                    "possible_values": [
                        [
                            "type_to_num_incoming_edges",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_670": {
                "input": {
                    "value": "fa_edges",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_create_fa_edges(raw_sample, max_variable_candidates)",
                            "Call"
                        ],
                        [
                            "placeholders['fa_edges']",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "tf-gnn-samples/utils/utils.py": {
        "tensorflow": {
            "round_63": {
                "variable": {
                    "value": "predicted",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.sigmoid(logits)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_64": {
                "variable": {
                    "value": "predicted",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "predicted",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.round(tf.nn.sigmoid(logits))",
                            "Call"
                        ],
                        [
                            "tf.cast(predicted, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_65": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(labels, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "count_nonzero_67": {
                "variable": {
                    "value": "true_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "predicted * labels",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "count_nonzero_68": {
                "variable": {
                    "value": "false_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "predicted * (labels - 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "count_nonzero_69": {
                "variable": {
                    "value": "false_neg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(predicted - 1) * labels",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_74": {
                "x": {
                    "value": "fmeasure",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * precision * recall / (precision + recall)",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SimpleRNNCell_14": {
                "units": {
                    "value": "units",
                    "type": "variable",
                    "possible_values": []
                },
                "activation": {
                    "value": "activation_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_activation(activation_function)",
                            "Call"
                        ]
                    ]
                }
            },
            "GRUCell_16": {
                "units": {
                    "value": "units",
                    "type": "variable",
                    "possible_values": []
                },
                "activation": {
                    "value": "activation_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_activation(activation_function)",
                            "Call"
                        ]
                    ]
                }
            },
            "LSTMCell_18": {
                "units": {
                    "value": "units",
                    "type": "variable",
                    "possible_values": []
                },
                "activation": {
                    "value": "activation_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_activation(activation_function)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_63": {
                "x": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_109": {
                "name_or_scope": {
                    "value": "self.__name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_121": {
                "name_or_scope": {
                    "value": "self.__name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_124": {
                "variable": {
                    "value": "activations",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "activations",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "variable"
                        ],
                        [
                            "tf.nn.dropout(activations, rate=self.__dropout_rate)",
                            "Call"
                        ],
                        [
                            "layer(activations)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "self.__dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_116": {
                "units": {
                    "value": "out_size",
                    "type": "variable",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "use_biases",
                    "type": "variable",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "erf_54": {
                "x": {
                    "value": "input_tensor / tf.sqrt(2.0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dense_112": {
                "units": {
                    "value": "hidden_layer_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_layer_sizes",
                            "variable"
                        ]
                    ]
                },
                "use_bias": {
                    "value": "use_biases",
                    "type": "variable",
                    "possible_values": []
                },
                "activation": {
                    "value": "activation_fun",
                    "type": "variable",
                    "possible_values": [
                        [
                            "activation_fun.lower()",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_54": {
                "x": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "common.py": {
        "torch": {
            "Sequential_49": {
                "*args": {
                    "value": "nn.Linear(in_dim, out_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_49": {
                "in_features": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_49": {
                "num_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_50": {
                "in_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_50": {
                "num_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_50": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "experiment.py": {
        "torch": {
            "device_27": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_60": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_61": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(self.model.parameters(), lr=0.001)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "max",
                    "type": "str",
                    "possible_values": []
                },
                "threshold_mode": {
                    "value": "abs",
                    "type": "str",
                    "possible_values": []
                },
                "factor": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "patience": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_32": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "11",
                            "int"
                        ]
                    ]
                }
            },
            "no_grad_136": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "gnn-comparison/EndToEnd_Evaluation.py": {
        "torch": {
            "set_num_threads_16": {
                "int": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "gnn-comparison/config/base.py": {
        "torch": {}
    },
    "gnn-comparison/evaluation/risk_assessment/K_Fold_Assessment.py": {
        "torch": {
            "set_num_threads_125": {
                "int": {
                    "value": "self.outer_processes",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "gnn-comparison/models/gnn_wrapper/NetWrapper.py": {
        "torch": {
            "device_20": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cpu'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_143": {
                "variable": {
                    "value": "time_per_epoch",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "time_per_epoch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(time_per_epoch)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_grad_norm__56": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "clipping",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "gnn-comparison/models/graph_classifiers/DGCNN.py": {
        "torch": {
            "ModuleList_45": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv1d_48": {
                "variable": {
                    "value": "self.conv1d_params1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.total_latent_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.total_latent_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MaxPool1d_49": {
                "variable": {
                    "value": "self.maxpool1d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_50": {
                "variable": {
                    "value": "self.conv1d_params2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_56": {
                "variable": {
                    "value": "self.dense_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.input_dense_dim, self.hidden_dense_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_77": {
                "variable": {
                    "value": "x_to_sortpool",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "hidden_repres",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_81": {
                "variable": {
                    "value": "x_1d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_1d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "global_sort_pool(x_to_sortpool, batch, self.k)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(x_1d, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_82": {
                "variable": {
                    "value": "conv1d_res",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1d_params1(x_1d)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_84": {
                "variable": {
                    "value": "conv1d_res",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1d_params2(conv1d_res)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_99": {
                "variable": {
                    "value": "self.lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tanh_73": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv(x, edges)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_56": {
                "in_features": {
                    "value": "self.input_dense_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_dense_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_58": {
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_59": {
                "in_features": {
                    "value": "self.hidden_dense_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim_target",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "eq_71": {
                "variable": {
                    "value": "block_map",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch.unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "batch.unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "gnn-comparison/models/graph_classifiers/DeepMultisets.py": {
        "torch": {
            "Linear_14": {
                "variable": {
                    "value": "self.fc_vertex",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim_features",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_units",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['hidden_units']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Linear_15": {
                "variable": {
                    "value": "self.fc_global1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_units",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['hidden_units']",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_units",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['hidden_units']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Linear_16": {
                "variable": {
                    "value": "self.fc_global2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_units",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['hidden_units']",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim_target",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_21": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc_vertex(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_23": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc_global1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "gnn-comparison/models/graph_classifiers/DiffPool.py": {
        "torch": {
            "BatchNorm1d_24": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "hidden_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_26": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "hidden_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_51": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x1, x2, x3]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ModuleList_117": {
                "variable": {
                    "value": "self.diffpool_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Linear_123": {
                "variable": {
                    "value": "self.lin1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "final_embed_dim_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gnn_embed_dim_output * (num_diffpool_layers + 1)",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim_embedding_MLP",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['dim_embedding_MLP']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Linear_124": {
                "variable": {
                    "value": "self.lin2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_embedding_MLP",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['dim_embedding_MLP']",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim_target",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_151": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "x_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_152": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.lin1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_30": {
                "variable": {
                    "value": "self.lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "(NUM_SAGE_LAYERS - 1) * hidden_channels + out_channels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_47": {
                "input": {
                    "value": "self.conv1(x0, adj, mask, add_loop=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_48": {
                "input": {
                    "value": "self.conv2(x1, adj, mask, add_loop=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_like_140": {
                "variable": {
                    "value": "adj",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dense_diff_pool(x, adj, s, mask)",
                            "Call"
                        ],
                        [
                            "to_dense_adj(edge_index, batch=batch)",
                            "Call"
                        ],
                        [
                            "torch.ones_like(adj)",
                            "Call"
                        ],
                        [
                            "self.diffpool_layers[i](x, adj, mask)",
                            "Call"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ],
                        [
                            "adj",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_149": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(-1, num_channels)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'bn{}'.format(i))(x)",
                            "Call"
                        ],
                        [
                            "x.view(batch_size, num_nodes, num_channels)",
                            "Call"
                        ],
                        [
                            "torch.cat([x1, x2, x3], dim=-1)",
                            "Call"
                        ],
                        [
                            "self.lin(x)",
                            "Call"
                        ],
                        [
                            "self.gnn_embed(x, adj, mask)",
                            "Call"
                        ],
                        [
                            "dense_diff_pool(x, adj, s, mask)",
                            "Call"
                        ],
                        [
                            "data.x",
                            "Attribute"
                        ],
                        [
                            "to_dense_batch(x, batch=batch)",
                            "Call"
                        ],
                        [
                            "self.final_embed(x, adj)",
                            "Call"
                        ],
                        [
                            "torch.cat(x_all, dim=1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.lin1(x))",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "self.diffpool_layers[i](x, adj, mask)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_143": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(-1, num_channels)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'bn{}'.format(i))(x)",
                            "Call"
                        ],
                        [
                            "x.view(batch_size, num_nodes, num_channels)",
                            "Call"
                        ],
                        [
                            "torch.cat([x1, x2, x3], dim=-1)",
                            "Call"
                        ],
                        [
                            "self.lin(x)",
                            "Call"
                        ],
                        [
                            "self.gnn_embed(x, adj, mask)",
                            "Call"
                        ],
                        [
                            "dense_diff_pool(x, adj, s, mask)",
                            "Call"
                        ],
                        [
                            "data.x",
                            "Attribute"
                        ],
                        [
                            "to_dense_batch(x, batch=batch)",
                            "Call"
                        ],
                        [
                            "self.final_embed(x, adj)",
                            "Call"
                        ],
                        [
                            "torch.cat(x_all, dim=1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.lin1(x))",
                            "Call"
                        ],
                        [
                            "self.lin2(x)",
                            "Call"
                        ],
                        [
                            "self.diffpool_layers[i](x, adj, mask)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "gnn-comparison/models/graph_classifiers/ECC.py": {
        "torch": {
            "Sequential_16": {
                "variable": {
                    "value": "fnet1",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(1, 16)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_20": {
                "variable": {
                    "value": "fnet2",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(1, 16)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_24": {
                "variable": {
                    "value": "fnet3",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(1, 16)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm1d_32": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "dim_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['dim_embedding']",
                            "Subscript"
                        ],
                        [
                            "dim_embedding",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_33": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "dim_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['dim_embedding']",
                            "Subscript"
                        ],
                        [
                            "dim_embedding",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_34": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "dim_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['dim_embedding']",
                            "Subscript"
                        ],
                        [
                            "dim_embedding",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_39": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x, edge_index, edge_attr)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_40": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_42": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2(x, edge_index, edge_attr)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_43": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_45": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv3(x, edge_index, edge_attr)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_46": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn3(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_69": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_78": {
                "variable": {
                    "value": "fnet",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(1, 16)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm1d_83": {
                "variable": {
                    "value": "self.final_conv_bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "dim_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['dim_embedding']",
                            "Subscript"
                        ],
                        [
                            "dim_embedding",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_85": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['dim_embedding']",
                            "Subscript"
                        ],
                        [
                            "dim_embedding",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['dim_embedding']",
                            "Subscript"
                        ],
                        [
                            "dim_embedding",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_86": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['dim_embedding']",
                            "Subscript"
                        ],
                        [
                            "dim_embedding",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim_target",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_96": {
                "variable": {
                    "value": "v_plus_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[v_plus[layer_no] for v_plus in v_plus_list]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_139": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.final_conv(x, lap_edge_idx, lap_edge_weight)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_140": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.final_conv_bn(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_147": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(graph_emb)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_148": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.conv1(x, edge_index, edge_attr))",
                            "Call"
                        ],
                        [
                            "F.dropout(self.bn1(x), p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(x, edge_index, edge_attr))",
                            "Call"
                        ],
                        [
                            "F.dropout(self.bn2(x), p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv3(x, edge_index, edge_attr))",
                            "Call"
                        ],
                        [
                            "F.dropout(self.bn3(x), p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "data.x",
                            "Attribute"
                        ],
                        [
                            "F.relu(self.final_conv(x, lap_edge_idx, lap_edge_weight))",
                            "Call"
                        ],
                        [
                            "F.dropout(self.final_conv_bn(x), p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(graph_emb))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_final, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "layer(x, edge_index, edge_weight)",
                            "Call"
                        ],
                        [
                            "x[v_plus_batch]",
                            "Subscript"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_final",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_16": {
                "in_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_17": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_18": {
                "in_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim_embedding * dim_input",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_20": {
                "in_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_22": {
                "in_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim_embedding * dim_embedding",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_24": {
                "in_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_26": {
                "in_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim_embedding * dim_embedding",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_78": {
                "in_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_79": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_80": {
                "in_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim_embedding * dim_embedding",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "eq_120": {
                "variable": {
                    "value": "block_map",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch.unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "batch.unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "gnn-comparison/models/graph_classifiers/GIN.py": {
        "torch": {
            "ModuleList_49": {
                "variable": {
                    "value": "self.nns",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.nns",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_50": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_51": {
                "variable": {
                    "value": "self.linears",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.linears",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_37": {
                "variable": {
                    "value": "self.first_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Linear(dim_features, out_emb_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_62": {
                "input": {
                    "value": "self.pooling(self.linears[layer](x), batch)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eq_67": {
                "variable": {
                    "value": "block_map",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch.unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "batch.unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_70": {
                "input": {
                    "value": "self.linears[layer](self.pooling(x, batch))",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_37": {
                "in_features": {
                    "value": "dim_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim_features",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_emb_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_emb_dim in enumerate(self.embeddings_dim)",
                            "Call"
                        ]
                    ]
                }
            },
            "BatchNorm1d_37": {
                "num_features": {
                    "value": "out_emb_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_emb_dim in enumerate(self.embeddings_dim)",
                            "Call"
                        ]
                    ]
                }
            },
            "ReLU_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_38": {
                "in_features": {
                    "value": "out_emb_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_emb_dim in enumerate(self.embeddings_dim)",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_emb_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_emb_dim in enumerate(self.embeddings_dim)",
                            "Call"
                        ]
                    ]
                }
            },
            "BatchNorm1d_38": {
                "num_features": {
                    "value": "out_emb_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_emb_dim in enumerate(self.embeddings_dim)",
                            "Call"
                        ]
                    ]
                }
            },
            "ReLU_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_39": {
                "in_features": {
                    "value": "out_emb_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_emb_dim in enumerate(self.embeddings_dim)",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim_target",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_42": {
                "*args": {
                    "value": "Linear(input_emb_dim, out_emb_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_46": {
                "in_features": {
                    "value": "out_emb_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_emb_dim in enumerate(self.embeddings_dim)",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim_target",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_42": {
                "in_features": {
                    "value": "input_emb_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embeddings_dim[layer - 1]",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_emb_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_emb_dim in enumerate(self.embeddings_dim)",
                            "Call"
                        ]
                    ]
                }
            },
            "BatchNorm1d_42": {
                "num_features": {
                    "value": "out_emb_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_emb_dim in enumerate(self.embeddings_dim)",
                            "Call"
                        ]
                    ]
                }
            },
            "ReLU_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_43": {
                "in_features": {
                    "value": "out_emb_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_emb_dim in enumerate(self.embeddings_dim)",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_emb_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_emb_dim in enumerate(self.embeddings_dim)",
                            "Call"
                        ]
                    ]
                }
            },
            "BatchNorm1d_43": {
                "num_features": {
                    "value": "out_emb_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_emb_dim in enumerate(self.embeddings_dim)",
                            "Call"
                        ]
                    ]
                }
            },
            "ReLU_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "gnn-comparison/models/graph_classifiers/GraphSAGE.py": {
        "torch": {
            "ModuleList_26": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Linear_37": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_layers * dim_embedding",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['dim_embedding']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Linear_38": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['dim_embedding']",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim_target",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_55": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "x_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_58": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_24": {
                "variable": {
                    "value": "self.fc_max",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['dim_embedding']",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['dim_embedding']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "eq_48": {
                "variable": {
                    "value": "block_map",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch.unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "batch.unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_52": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc_max(x)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "gnn-comparison/models/graph_classifiers/MLP_Classifier.py": {
        "torch": {
            "Linear_13": {
                "variable": {
                    "value": "self.fc_global",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim_features",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_units",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['hidden_units']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Linear_14": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_units",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['hidden_units']",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim_target",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_17": {
                "input": {
                    "value": "self.fc_global(x)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "gnn-comparison/models/graph_classifiers/MolecularFingerprint.py": {
        "torch": {
            "Sequential_12": {
                "variable": {
                    "value": "self.mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Linear(dim_features, hidden_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_12": {
                "in_features": {
                    "value": "dim_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim_features",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['hidden_units']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ReLU_12": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_13": {
                "in_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['hidden_units']",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim_target",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_13": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "gnn-comparison/models/graph_classifiers/self_attention.py": {
        "torch": {
            "Linear_13": {
                "variable": {
                    "value": "self.q_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "model_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "model_dim * self.num_heads",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_14": {
                "variable": {
                    "value": "self.out_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "model_dim * self.num_heads",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "model_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_15": {
                "variable": {
                    "value": "self.out_layer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "model_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "model_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_16": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Softmax_17": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Dropout_18": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "1 - dropout_keep_prob",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_30": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[outputs, batched_inputs]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_55": {
                "variable": {
                    "value": "queries_dot_keys",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "qs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._split_heads(q)",
                            "Call"
                        ],
                        [
                            "split_last_dimension_then_transpose(q, self.num_heads, self.model_dim)",
                            "Call"
                        ],
                        [
                            "qs",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "ks.transpose(2, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_59": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "valid_mask.view(valid_mask.size()[0], 1, 1, valid_mask.size()[1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_63": {
                "input": {
                    "value": "attention_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.softmax(scaled_scores)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "tiled_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batched_inputs.unsqueeze(1).repeat(1, self.num_heads, 1, 1)",
                            "Call"
                        ],
                        [
                            "tiled_inputs",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "gnn-comparison/models/modules.py": {
        "torch": {
            "zeros_79": {
                "variable": {
                    "value": "cov_per_pattern",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "errors.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_112": {
                "variable": {
                    "value": "targets_oh",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "ys.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_33": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "reduction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BCEWithLogitsLoss_35": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_45": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "reduction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_47": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_50": {
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs[0]",
                            "Subscript"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_75": {
                "input": {
                    "value": "errors",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_76": {
                "input": {
                    "value": "graph_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_86": {
                "input": {
                    "value": "torch.sum(cov_per_pattern[:, o])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_118": {
                "input": {
                    "value": "0.5 * (ts - ys) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_86": {
                "input": {
                    "value": "cov_per_pattern[:, o]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "gnn-comparison/models/schedulers/ECCScheduler.py": {
        "torch": {}
    },
    "gnn-comparison/utils/batch_utils.py": {
        "torch": {
            "zeros_20": {
                "variable": {
                    "value": "block_diag",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "sum(mat_sizes)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "sum(mat_sizes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_51": {
                "ndarray": {
                    "value": "nx.to_numpy_array(G)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "models/graph_model.py": {
        "torch": {
            "device_16": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Embedding_19": {
                "variable": {
                    "value": "self.layer0_keys",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "dim0 + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "h_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Embedding_20": {
                "variable": {
                    "value": "self.layer0_values",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "dim0 + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "h_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ModuleList_21": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_22": {
                "variable": {
                    "value": "self.layer_norms",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_38": {
                "variable": {
                    "value": "self.out_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "h_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_dim + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "nonzero_55": {
                "variable": {
                    "value": "root_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "roots",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.root_mask",
                            "Attribute"
                        ]
                    ]
                },
                "as_tuple": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_55": {
                "variable": {
                    "value": "root_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_57": {
                "variable": {
                    "value": "source_nodes",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "data.num_nodes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_58": {
                "variable": {
                    "value": "edges",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[source_nodes, target_roots]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_64": {
                "variable": {
                    "value": "new_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "layer(new_x, edges)",
                            "Call"
                        ],
                        [
                            "F.relu(new_x)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_16": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LayerNorm_34": {
                "normalized_shape": {
                    "value": "h_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h_dim",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "run-gat-2-8.py": {
        "torch": {
            "empty_cache_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "run-gcn-2-8.py": {
        "torch": {
            "empty_cache_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "run-ggnn-2-8.py": {
        "torch": {
            "empty_cache_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "run-gin-2-8.py": {
        "torch": {
            "empty_cache_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}