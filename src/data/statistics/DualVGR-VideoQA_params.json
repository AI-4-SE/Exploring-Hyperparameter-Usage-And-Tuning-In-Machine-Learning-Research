{
    "model/GraphNN.py": {
        "sklearn": {},
        "torch": {
            "Parameter_17": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(in_features, out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_36": {
                "variable": {
                    "value": "support",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_37": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adj",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "support",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.matmul(input, self.weight)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_89": {
                "variable": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_91": {
                "variable": {
                    "value": "self.a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * out_features",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_94": {
                "variable": {
                    "value": "self.leakyrelu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "self.alpha",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_101": {
                "variable": {
                    "value": "attention",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "adj > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "e",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.leakyrelu(self.a(a_input).squeeze(-1))",
                            "Call"
                        ],
                        [
                            "self.leakyrelu(self.a(a_input).squeeze(-1))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "zero_vec",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "-9000000000000000.0 * torch.ones_like(e)",
                            "BinOp"
                        ],
                        [
                            "-9000000000000000.0 * torch.ones_like(e)",
                            "BinOp"
                        ],
                        [
                            "-9000000000000000.0 * torch.ones_like(att)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "softmax_106": {
                "variable": {
                    "value": "attention",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.where(adj > 0, e, zero_vec)",
                            "Call"
                        ],
                        [
                            "F.softmax(attention, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.dropout(attention, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.where(adj > 0, e, zero_vec)",
                            "Call"
                        ],
                        [
                            "F.softmax(attention, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.dropout(attention, self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "dropout_107": {
                "variable": {
                    "value": "attention",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.where(adj > 0, e, zero_vec)",
                            "Call"
                        ],
                        [
                            "F.softmax(attention, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.dropout(attention, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.where(adj > 0, e, zero_vec)",
                            "Call"
                        ],
                        [
                            "F.softmax(attention, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.dropout(attention, self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bmm_108": {
                "variable": {
                    "value": "h_prime",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.where(adj > 0, e, zero_vec)",
                            "Call"
                        ],
                        [
                            "F.softmax(attention, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.dropout(attention, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.where(adj > 0, e, zero_vec)",
                            "Call"
                        ],
                        [
                            "F.softmax(attention, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.dropout(attention, self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "Wh",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.W(h)",
                            "Call"
                        ],
                        [
                            "Wh * scores",
                            "BinOp"
                        ],
                        [
                            "self.W(h)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_152": {
                "variable": {
                    "value": "all_combinations_matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[Wh_repeated_in_chunks, Wh_repeated_alternating]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dropout_175": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.dropout(x, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat([att(x, adj, scores) for att in self.attentions], dim=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat([att(x, adj) for att in self.attentions], dim=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(self.gc1(x, adj))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_176": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[att(x, adj, scores) for att in self.attentions]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dropout_177": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.dropout(x, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat([att(x, adj, scores) for att in self.attentions], dim=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat([att(x, adj) for att in self.attentions], dim=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(self.gc1(x, adj))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_193": {
                "variable": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_195": {
                "variable": {
                    "value": "self.a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * out_features",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_198": {
                "variable": {
                    "value": "self.leakyrelu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "self.alpha",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_206": {
                "variable": {
                    "value": "attention",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "adj > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "e",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.leakyrelu(self.a(a_input).squeeze(-1))",
                            "Call"
                        ],
                        [
                            "self.leakyrelu(self.a(a_input).squeeze(-1))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "zero_vec",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "-9000000000000000.0 * torch.ones_like(e)",
                            "BinOp"
                        ],
                        [
                            "-9000000000000000.0 * torch.ones_like(e)",
                            "BinOp"
                        ],
                        [
                            "-9000000000000000.0 * torch.ones_like(att)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "softmax_207": {
                "variable": {
                    "value": "attention",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.where(adj > 0, e, zero_vec)",
                            "Call"
                        ],
                        [
                            "F.softmax(attention, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.dropout(attention, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.where(adj > 0, e, zero_vec)",
                            "Call"
                        ],
                        [
                            "F.softmax(attention, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.dropout(attention, self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "dropout_208": {
                "variable": {
                    "value": "attention",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.where(adj > 0, e, zero_vec)",
                            "Call"
                        ],
                        [
                            "F.softmax(attention, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.dropout(attention, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.where(adj > 0, e, zero_vec)",
                            "Call"
                        ],
                        [
                            "F.softmax(attention, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.dropout(attention, self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bmm_209": {
                "variable": {
                    "value": "h_prime",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.where(adj > 0, e, zero_vec)",
                            "Call"
                        ],
                        [
                            "F.softmax(attention, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.dropout(attention, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.where(adj > 0, e, zero_vec)",
                            "Call"
                        ],
                        [
                            "F.softmax(attention, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.dropout(attention, self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "Wh",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.W(h)",
                            "Call"
                        ],
                        [
                            "Wh * scores",
                            "BinOp"
                        ],
                        [
                            "self.W(h)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_253": {
                "variable": {
                    "value": "all_combinations_matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[Wh_repeated_in_chunks, Wh_repeated_alternating]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dropout_277": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.dropout(x, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat([att(x, adj, scores) for att in self.attentions], dim=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat([att(x, adj) for att in self.attentions], dim=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(self.gc1(x, adj))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_278": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[att(x, adj) for att in self.attentions]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dropout_279": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.dropout(x, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat([att(x, adj, scores) for att in self.attentions], dim=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat([att(x, adj) for att in self.attentions], dim=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(self.gc1(x, adj))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_310": {
                "variable": {
                    "value": "self.epsilon",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor([0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_312": {
                "variable": {
                    "value": "self.fa",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(input_dim + proj_dim, proj_dim)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Softmax_358": {
                "variable": {
                    "value": "self.sfm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Sequential_366": {
                "variable": {
                    "value": "self.fs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(input_dim, proj_dim)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_368": {
                "variable": {
                    "value": "self.fg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(input_dim + proj_dim, proj_dim)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_421": {
                "variable": {
                    "value": "self.fs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(input_dim, proj_dim)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_423": {
                "variable": {
                    "value": "self.fa",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(input_dim + proj_dim, proj_dim)",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_462": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.gc1(x, adj)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_463": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.dropout(x, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat([att(x, adj, scores) for att in self.attentions], dim=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat([att(x, adj) for att in self.attentions], dim=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(self.gc1(x, adj))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_472": {
                "variable": {
                    "value": "self.project",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(in_size, hidden_size)",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_480": {
                "variable": {
                    "value": "beta",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "w",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.project(z)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_492": {
                "variable": {
                    "value": "self.a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(size=(nhid2, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tanh_495": {
                "variable": {
                    "value": "self.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_497": {
                "variable": {
                    "value": "self.MLP",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(nhid2, nclass)",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_510": {
                "variable": {
                    "value": "emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[emb1, emb2, Xcom]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_19": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(1, 1, out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_328": {
                "variable": {
                    "value": "multi_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[cur_input for i in range(self.num_rel)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_390": {
                "variable": {
                    "value": "att_matrices",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "att_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_435": {
                "variable": {
                    "value": "nb_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[getattr(self, 'fr{}'.format(i + 1))(cur_input) for i in range(self.gcn_num_rel)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_443": {
                "variable": {
                    "value": "gate",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fa(torch.cat((update, cur_input), -1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_like_100": {
                "input": {
                    "value": "e",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.leakyrelu(self.a(a_input).squeeze(-1))",
                            "Call"
                        ],
                        [
                            "self.leakyrelu(self.a(a_input).squeeze(-1))",
                            "Call"
                        ]
                    ]
                }
            },
            "elu_111": {
                "input": {
                    "value": "h_prime",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.bmm(attention, Wh)",
                            "Call"
                        ],
                        [
                            "torch.bmm(attention, Wh)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_205": {
                "input": {
                    "value": "e",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.leakyrelu(self.a(a_input).squeeze(-1))",
                            "Call"
                        ],
                        [
                            "self.leakyrelu(self.a(a_input).squeeze(-1))",
                            "Call"
                        ]
                    ]
                }
            },
            "elu_212": {
                "input": {
                    "value": "h_prime",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.bmm(attention, Wh)",
                            "Call"
                        ],
                        [
                            "torch.bmm(attention, Wh)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_312": {
                "in_features": {
                    "value": "input_dim + proj_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "proj_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_312": {
                "p": {
                    "value": "dropout",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_366": {
                "in_features": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "proj_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_366": {
                "p": {
                    "value": "dropout",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_368": {
                "in_features": {
                    "value": "input_dim + proj_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "proj_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_368": {
                "p": {
                    "value": "dropout",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "where_387": {
                "variable": {
                    "value": "att",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "adj[:, j, :, :].squeeze(1) > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "att",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.bmm(getattr(self, 'fa{}'.format(j + 1))(cur_input), cur_input.transpose(1, 2).contiguous()) / math.sqrt(self.input_dim)",
                            "BinOp"
                        ],
                        [
                            "torch.where(adj[:, j, :, :].squeeze(1) > 0, att, zero_vec)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "zero_vec",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "-9000000000000000.0 * torch.ones_like(e)",
                            "BinOp"
                        ],
                        [
                            "-9000000000000000.0 * torch.ones_like(e)",
                            "BinOp"
                        ],
                        [
                            "-9000000000000000.0 * torch.ones_like(att)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Linear_421": {
                "in_features": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "proj_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_421": {
                "p": {
                    "value": "dropout",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                },
                "inplace": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_423": {
                "in_features": {
                    "value": "input_dim + proj_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "proj_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_423": {
                "p": {
                    "value": "dropout",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                },
                "inplace": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_473": {
                "in_features": {
                    "value": "in_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "16",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Tanh_474": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_475": {
                "in_features": {
                    "value": "hidden_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "16",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_492": {
                "size": {
                    "value": "(nhid2, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_498": {
                "in_features": {
                    "value": "nhid2",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "nclass",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "LogSoftmax_499": {
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_19": {
                "data": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "out_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "matmul_331": {
                "input": {
                    "value": "adj",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "multi_input",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.stack([cur_input for i in range(self.num_rel)], dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_337": {
                "input": {
                    "value": "torch.stack([getattr(self, 'mlp{}{}'.format(i + 1, j + 1))(cur_update[:, j, :, :].squeeze(1)) for j in range(self.num_rel)], dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_341": {
                "input": {
                    "value": "self.fa(torch.cat((update, cur_input), -1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_361": {
                "*args": {
                    "value": "nn.Linear(input_dim, proj_dim)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_364": {
                "in_features": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_393": {
                "tensors": {
                    "value": "[getattr(self, 'fr{}'.format(i + 1))(cur_input) for i in range(self.gcn_num_rel)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_397": {
                "input": {
                    "value": "torch.matmul(att_matrices, torch.matmul(adj, nb_output))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_401": {
                "input": {
                    "value": "self.fg(torch.cat((update, cur_input), -1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_419": {
                "*args": {
                    "value": "nn.Linear(input_dim, proj_dim)",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_439": {
                "input": {
                    "value": "torch.matmul(adj, nb_output)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_316": {
                "*args": {
                    "value": "nn.Linear(input_dim, proj_dim)",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_337": {
                "tensors": {
                    "value": "[getattr(self, 'mlp{}{}'.format(i + 1, j + 1))(cur_update[:, j, :, :].squeeze(1)) for j in range(self.num_rel)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_361": {
                "in_features": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "proj_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_361": {
                "p": {
                    "value": "dropout",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "bmm_383": {
                "input": {
                    "value": "getattr(self, 'fa{}'.format(j + 1))(cur_input)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "cur_input.transpose(1, 2).contiguous()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_like_386": {
                "input": {
                    "value": "att",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.bmm(getattr(self, 'fa{}'.format(j + 1))(cur_input), cur_input.transpose(1, 2).contiguous()) / math.sqrt(self.input_dim)",
                            "BinOp"
                        ],
                        [
                            "torch.where(adj[:, j, :, :].squeeze(1) > 0, att, zero_vec)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_397": {
                "input": {
                    "value": "adj",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "nb_output",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "torch.matmul(adj, multi_input) * input_mask.unsqueeze(-1).unsqueeze(1)",
                            "BinOp"
                        ],
                        [
                            "torch.stack([getattr(self, 'fr{}'.format(i + 1))(cur_input) for i in range(self.gcn_num_rel)], 1) * input_mask.unsqueeze(-1).unsqueeze(1)",
                            "BinOp"
                        ],
                        [
                            "torch.stack([getattr(self, 'fr{}'.format(i + 1))(cur_input) for i in range(self.gcn_num_rel)], 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_405": {
                "input": {
                    "value": "update",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "torch.mean(torch.stack([getattr(self, 'mlp{}{}'.format(i + 1, j + 1))(cur_update[:, j, :, :].squeeze(1)) for j in range(self.num_rel)], dim=1), dim=1) * input_mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "torch.sum(torch.matmul(att_matrices, torch.matmul(adj, nb_output)), dim=1, keepdim=False) + self.fs(cur_input) * input_mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "torch.sum(torch.matmul(adj, nb_output), dim=1, keepdim=False) + self.fs(cur_input)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Linear_419": {
                "in_features": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "proj_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_419": {
                "p": {
                    "value": "dropout",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                },
                "inplace": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_439": {
                "input": {
                    "value": "adj",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "nb_output",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "torch.matmul(adj, multi_input) * input_mask.unsqueeze(-1).unsqueeze(1)",
                            "BinOp"
                        ],
                        [
                            "torch.stack([getattr(self, 'fr{}'.format(i + 1))(cur_input) for i in range(self.gcn_num_rel)], 1) * input_mask.unsqueeze(-1).unsqueeze(1)",
                            "BinOp"
                        ],
                        [
                            "torch.stack([getattr(self, 'fr{}'.format(i + 1))(cur_input) for i in range(self.gcn_num_rel)], 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_443": {
                "tensors": {
                    "value": "(update, cur_input)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tanh_446": {
                "input": {
                    "value": "update",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "torch.mean(torch.stack([getattr(self, 'mlp{}{}'.format(i + 1, j + 1))(cur_update[:, j, :, :].squeeze(1)) for j in range(self.num_rel)], dim=1), dim=1) * input_mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "torch.sum(torch.matmul(att_matrices, torch.matmul(adj, nb_output)), dim=1, keepdim=False) + self.fs(cur_input) * input_mask.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "torch.sum(torch.matmul(adj, nb_output), dim=1, keepdim=False) + self.fs(cur_input)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Linear_316": {
                "in_features": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "proj_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_316": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_316": {
                "p": {
                    "value": "dropout",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_341": {
                "tensors": {
                    "value": "(update, cur_input)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_401": {
                "tensors": {
                    "value": "(update, cur_input)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "DataLoader.py": {
        "torch": {
            "from_numpy_75": {
                "variable": {
                    "value": "appearance_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "appearance_feat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "f_app['resnet_features'][app_index]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(appearance_feat)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_76": {
                "variable": {
                    "value": "motion_feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "motion_feat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "f_motion['resnext_features'][motion_index]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(motion_feat)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "model/AnswerDecoder.py": {
        "torch": {
            "Linear_12": {
                "variable": {
                    "value": "self.q_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "module_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "module_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_13": {
                "variable": {
                    "value": "self.v_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "module_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "module_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_15": {
                "variable": {
                    "value": "self.cat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * module_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "module_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_16": {
                "variable": {
                    "value": "self.attn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "module_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ELU_18": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_19": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.15",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_34": {
                "variable": {
                    "value": "v_q_cat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(v_proj, q_proj.expand_as(v_proj) * v_proj)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_39": {
                "variable": {
                    "value": "attn",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.attn(v_q_cat)",
                            "Call"
                        ],
                        [
                            "F.softmax(attn, dim=1)",
                            "Call"
                        ],
                        [
                            "self.attn(v_q_cat)",
                            "Call"
                        ],
                        [
                            "F.softmax(attn, dim=1)",
                            "Call"
                        ],
                        [
                            "self.attn(v_q_cat)",
                            "Call"
                        ],
                        [
                            "F.softmax(attn, dim=1)",
                            "Call"
                        ],
                        [
                            "self.attn(v_q_cat)",
                            "Call"
                        ],
                        [
                            "F.softmax(attn, dim=1)",
                            "Call"
                        ],
                        [
                            "self.attn(v_q_cat)",
                            "Call"
                        ],
                        [
                            "F.softmax(attn, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_50": {
                "variable": {
                    "value": "self.q_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "module_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "module_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_51": {
                "variable": {
                    "value": "self.v_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "module_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "module_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_54": {
                "variable": {
                    "value": "self.attn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "module_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Tanh_56": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_57": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.15",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_75": {
                "variable": {
                    "value": "attn",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.attn(v_q_cat)",
                            "Call"
                        ],
                        [
                            "F.softmax(attn, dim=1)",
                            "Call"
                        ],
                        [
                            "self.attn(v_q_cat)",
                            "Call"
                        ],
                        [
                            "F.softmax(attn, dim=1)",
                            "Call"
                        ],
                        [
                            "self.attn(v_q_cat)",
                            "Call"
                        ],
                        [
                            "F.softmax(attn, dim=1)",
                            "Call"
                        ],
                        [
                            "self.attn(v_q_cat)",
                            "Call"
                        ],
                        [
                            "F.softmax(attn, dim=1)",
                            "Call"
                        ],
                        [
                            "self.attn(v_q_cat)",
                            "Call"
                        ],
                        [
                            "F.softmax(attn, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_86": {
                "variable": {
                    "value": "self.q_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "module_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "module_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_87": {
                "variable": {
                    "value": "self.v_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "module_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "module_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_90": {
                "variable": {
                    "value": "self.attn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "module_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Tanh_92": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_93": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.15",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_111": {
                "variable": {
                    "value": "attn",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.attn(v_q_cat)",
                            "Call"
                        ],
                        [
                            "F.softmax(attn, dim=1)",
                            "Call"
                        ],
                        [
                            "self.attn(v_q_cat)",
                            "Call"
                        ],
                        [
                            "F.softmax(attn, dim=1)",
                            "Call"
                        ],
                        [
                            "self.attn(v_q_cat)",
                            "Call"
                        ],
                        [
                            "F.softmax(attn, dim=1)",
                            "Call"
                        ],
                        [
                            "self.attn(v_q_cat)",
                            "Call"
                        ],
                        [
                            "F.softmax(attn, dim=1)",
                            "Call"
                        ],
                        [
                            "self.attn(v_q_cat)",
                            "Call"
                        ],
                        [
                            "F.softmax(attn, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_122": {
                "variable": {
                    "value": "self.q_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "module_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "module_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_123": {
                "variable": {
                    "value": "self.v_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "module_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "module_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_125": {
                "variable": {
                    "value": "self.cat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * module_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "module_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_126": {
                "variable": {
                    "value": "self.attn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "module_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ELU_128": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_129": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.15",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_144": {
                "variable": {
                    "value": "v_q_cat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(v_proj, q_proj.expand_as(v_proj))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_149": {
                "variable": {
                    "value": "attn",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.attn(v_q_cat)",
                            "Call"
                        ],
                        [
                            "F.softmax(attn, dim=1)",
                            "Call"
                        ],
                        [
                            "self.attn(v_q_cat)",
                            "Call"
                        ],
                        [
                            "F.softmax(attn, dim=1)",
                            "Call"
                        ],
                        [
                            "self.attn(v_q_cat)",
                            "Call"
                        ],
                        [
                            "F.softmax(attn, dim=1)",
                            "Call"
                        ],
                        [
                            "self.attn(v_q_cat)",
                            "Call"
                        ],
                        [
                            "F.softmax(attn, dim=1)",
                            "Call"
                        ],
                        [
                            "self.attn(v_q_cat)",
                            "Call"
                        ],
                        [
                            "F.softmax(attn, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_159": {
                "variable": {
                    "value": "self.v_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "module_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "module_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_161": {
                "variable": {
                    "value": "self.attn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "module_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ELU_162": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_163": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.15",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_178": {
                "variable": {
                    "value": "attn",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.attn(v_q_cat)",
                            "Call"
                        ],
                        [
                            "F.softmax(attn, dim=1)",
                            "Call"
                        ],
                        [
                            "self.attn(v_q_cat)",
                            "Call"
                        ],
                        [
                            "F.softmax(attn, dim=1)",
                            "Call"
                        ],
                        [
                            "self.attn(v_q_cat)",
                            "Call"
                        ],
                        [
                            "F.softmax(attn, dim=1)",
                            "Call"
                        ],
                        [
                            "self.attn(v_q_cat)",
                            "Call"
                        ],
                        [
                            "F.softmax(attn, dim=1)",
                            "Call"
                        ],
                        [
                            "self.attn(v_q_cat)",
                            "Call"
                        ],
                        [
                            "F.softmax(attn, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_188": {
                "variable": {
                    "value": "self.question_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "module_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "module_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_190": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Dropout(0.15)",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_199": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[visual_embedding, question_embedding]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_208": {
                "variable": {
                    "value": "self.question_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "module_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "module_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_210": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Dropout(0.15)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_216": {
                "variable": {
                    "value": "self.gate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "module_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "module_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_220": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[visual_embedding, question_embedding]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_190": {
                "p": {
                    "value": "0.15",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_191": {
                "in_features": {
                    "value": "module_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "module_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ELU_192": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm1d_193": {
                "num_features": {
                    "value": "module_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_194": {
                "p": {
                    "value": "0.15",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_195": {
                "in_features": {
                    "value": "module_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_answers",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_210": {
                "p": {
                    "value": "0.15",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_211": {
                "in_features": {
                    "value": "module_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "module_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ELU_212": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm1d_213": {
                "num_features": {
                    "value": "module_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_214": {
                "p": {
                    "value": "0.15",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_215": {
                "in_features": {
                    "value": "module_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_answers",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "model/Attention.py": {
        "torch": {
            "transpose_466": {
                "variable": {
                    "value": "attention_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_14": {
                "variable": {
                    "value": "self.project",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(in_size, hidden_size)",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_22": {
                "variable": {
                    "value": "beta",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "w",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.project(z)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_32": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "attn_dropout",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Softmax_33": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bmm_37": {
                "variable": {
                    "value": "attn",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.w_qs(q).view(sz_b, len_q, n_head, d_k)",
                            "Call"
                        ],
                        [
                            "q.permute(2, 0, 1, 3).contiguous().view(-1, len_q, d_k)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "k.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_45": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.bmm(q, k.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "attn / self.temperature",
                            "BinOp"
                        ],
                        [
                            "attn.masked_fill(mask, -np.inf)",
                            "Call"
                        ],
                        [
                            "self.softmax(attn)",
                            "Call"
                        ],
                        [
                            "self.dropout(attn)",
                            "Call"
                        ],
                        [
                            "F.softmax(cxt_scores, dim=1)",
                            "Call"
                        ],
                        [
                            "attn * is_not_zero",
                            "BinOp"
                        ],
                        [
                            "attn / (attn.sum(1) + 1e-05).view(attn.size(0), 1).expand(attn.size(0), attn.size(1))",
                            "BinOp"
                        ],
                        [
                            "torch.bmm(q, k.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "attn / self.temperature",
                            "BinOp"
                        ],
                        [
                            "attn.masked_fill(mask, -np.inf)",
                            "Call"
                        ],
                        [
                            "self.softmax(attn)",
                            "Call"
                        ],
                        [
                            "self.dropout(attn)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "v",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.w_vs(v).view(sz_b, len_v, n_head, d_v)",
                            "Call"
                        ],
                        [
                            "v.permute(2, 0, 1, 3).contiguous().view(-1, len_v, d_v)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_59": {
                "variable": {
                    "value": "self.w_qs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_head * d_k",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_60": {
                "variable": {
                    "value": "self.w_ks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_head * d_k",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_61": {
                "variable": {
                    "value": "self.w_vs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_head * d_v",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "LayerNorm_67": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_69": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_head * d_v",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_72": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.3",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv1d_110": {
                "variable": {
                    "value": "self.w_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "d_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "d_hid",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv1d_111": {
                "variable": {
                    "value": "self.w_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "d_hid",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "d_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LayerNorm_112": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_in",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_113": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.3",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Parameter_151": {
                "variable": {
                    "value": "self.op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros([1, head, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_153": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_hid",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_154": {
                "variable": {
                    "value": "self.w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "head",
                    "type": "Name",
                    "possible_values": [
                        [
                            "16",
                            "Constant"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tanh_164": {
                "variable": {
                    "value": "score",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.bmm(self.op.expand([batch, self.head, 1]), v) + q1_proj",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_166": {
                "variable": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.w(score)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_166": {
                "variable": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim0": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_208": {
                "variable": {
                    "value": "embedded",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embedded",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "embedded[sort_ixs]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pack_padded_sequence(embedded, sorted_input_lengths_list, batch_first=True)",
                            "Call"
                        ],
                        [
                            "embedded[recover_ixs]",
                            "Subscript"
                        ]
                    ]
                },
                "lengths": {
                    "value": "sorted_input_lengths_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.sort(input_lengths_list)[::-1].tolist()",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_216": {
                "variable": {
                    "value": "(embedded, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "embedded",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "embedded[sort_ixs]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pack_padded_sequence(embedded, sorted_input_lengths_list, batch_first=True)",
                            "Call"
                        ],
                        [
                            "embedded[recover_ixs]",
                            "Subscript"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_220": {
                "variable": {
                    "value": "(output, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.bmm(attn, v)",
                            "Call"
                        ],
                        [
                            "output.view(n_head, sz_b, len_q, d_v)",
                            "Call"
                        ],
                        [
                            "output.permute(1, 2, 0, 3).contiguous().view(sz_b, len_q, -1)",
                            "Call"
                        ],
                        [
                            "self.dropout(self.fc(output))",
                            "Call"
                        ],
                        [
                            "self.layer_norm(output + residual)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.w_2(F.relu(self.w_1(output)))",
                            "Call"
                        ],
                        [
                            "output.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.dropout(output)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(output + residual)",
                            "Call"
                        ],
                        [
                            "output[recover_ixs]",
                            "Subscript"
                        ],
                        [
                            "torch.bmm(weight, q)",
                            "Call"
                        ],
                        [
                            "torch.bmm(attn, v)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_235": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.3",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_236": {
                "variable": {
                    "value": "self.ws1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_237": {
                "variable": {
                    "value": "self.ws2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_238": {
                "variable": {
                    "value": "self.wst",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_272": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_285": {
                "variable": {
                    "value": "attn",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cxt_scores",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.fc(context).squeeze(2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bmm_294": {
                "variable": {
                    "value": "weighted_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn3",
                    "type": "Name",
                    "possible_values": [
                        [
                            "attn.unsqueeze(1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "embedded",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "embedded[sort_ixs]",
                            "Subscript"
                        ],
                        [
                            "nn.utils.rnn.pack_padded_sequence(embedded, sorted_input_lengths_list, batch_first=True)",
                            "Call"
                        ],
                        [
                            "embedded[recover_ixs]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Linear_304": {
                "variable": {
                    "value": "self.w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "inner_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tanh_317": {
                "variable": {
                    "value": "score",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_proj",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.fc1(q).view(batch, qlen, -1)",
                            "Call"
                        ],
                        [
                            "self.query_proj(query)",
                            "Call"
                        ],
                        [
                            "self.query_proj(query).view(bs, seq_len, n_head, d_q)",
                            "Call"
                        ],
                        [
                            "q_proj.permute(2, 0, 1, 3).contiguous().view(-1, seq_len, d_q)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_323": {
                "variable": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score.view(-1, 1, qlen)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bmm_326": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.sigmoid(self.w(score)).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "F.softmax(score.view(-1, 1, qlen), dim=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(weight, p=self.d, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "q",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.w_qs(q).view(sz_b, len_q, n_head, d_k)",
                            "Call"
                        ],
                        [
                            "q.permute(2, 0, 1, 3).contiguous().view(-1, len_q, d_k)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_338": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_339": {
                "variable": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_349": {
                "variable": {
                    "value": "self.visual_appearance_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_351": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "attn_dropout",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Softmax_352": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bmm_356": {
                "variable": {
                    "value": "attn",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.w_qs(q).view(sz_b, len_q, n_head, d_k)",
                            "Call"
                        ],
                        [
                            "q.permute(2, 0, 1, 3).contiguous().view(-1, len_q, d_k)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "k.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_364": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.bmm(q, k.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "attn / self.temperature",
                            "BinOp"
                        ],
                        [
                            "attn.masked_fill(mask, -np.inf)",
                            "Call"
                        ],
                        [
                            "self.softmax(attn)",
                            "Call"
                        ],
                        [
                            "self.dropout(attn)",
                            "Call"
                        ],
                        [
                            "F.softmax(cxt_scores, dim=1)",
                            "Call"
                        ],
                        [
                            "attn * is_not_zero",
                            "BinOp"
                        ],
                        [
                            "attn / (attn.sum(1) + 1e-05).view(attn.size(0), 1).expand(attn.size(0), attn.size(1))",
                            "BinOp"
                        ],
                        [
                            "torch.bmm(q, k.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "attn / self.temperature",
                            "BinOp"
                        ],
                        [
                            "attn.masked_fill(mask, -np.inf)",
                            "Call"
                        ],
                        [
                            "self.softmax(attn)",
                            "Call"
                        ],
                        [
                            "self.dropout(attn)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "v",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.w_vs(v).view(sz_b, len_v, n_head, d_v)",
                            "Call"
                        ],
                        [
                            "v.permute(2, 0, 1, 3).contiguous().view(-1, len_v, d_v)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_373": {
                "variable": {
                    "value": "self.query_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_374": {
                "variable": {
                    "value": "self.context_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "transpose_385": {
                "variable": {
                    "value": "c_proj",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "c_proj",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.context_proj(context)",
                            "Call"
                        ],
                        [
                            "torch.transpose(c_proj, 1, 2)",
                            "Call"
                        ],
                        [
                            "self.context_proj(context).view(bs, seq_len, n_head, d_k)",
                            "Call"
                        ],
                        [
                            "c_proj.permute(2, 0, 1, 3).contiguous().view(-1, seq_len, d_k)",
                            "Call"
                        ],
                        [
                            "torch.transpose(c_proj, 1, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_388": {
                "variable": {
                    "value": "c_attn_softmax",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Attn_mat",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "torch.bmm(q_proj, c_proj) * self.scale",
                            "BinOp"
                        ],
                        [
                            "torch.bmm(q_proj, c_proj) * self.scale",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bmm_389": {
                "variable": {
                    "value": "c_coattn",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "c_attn_softmax",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.softmax(Attn_mat, dim=2)",
                            "Call"
                        ],
                        [
                            "F.softmax(Attn_mat, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "c_proj",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.context_proj(context)",
                            "Call"
                        ],
                        [
                            "torch.transpose(c_proj, 1, 2)",
                            "Call"
                        ],
                        [
                            "self.context_proj(context).view(bs, seq_len, n_head, d_k)",
                            "Call"
                        ],
                        [
                            "c_proj.permute(2, 0, 1, 3).contiguous().view(-1, seq_len, d_k)",
                            "Call"
                        ],
                        [
                            "torch.transpose(c_proj, 1, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_391": {
                "variable": {
                    "value": "q_attn_softmax",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Attn_mat",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "torch.bmm(q_proj, c_proj) * self.scale",
                            "BinOp"
                        ],
                        [
                            "torch.bmm(q_proj, c_proj) * self.scale",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_392": {
                "variable": {
                    "value": "q_attn_softmax",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_attn_softmax",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.softmax(Attn_mat, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.transpose(q_attn_softmax, 1, 2)",
                            "Call"
                        ],
                        [
                            "F.softmax(Attn_mat, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.transpose(q_attn_softmax, 1, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bmm_393": {
                "variable": {
                    "value": "q_coattn",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_attn_softmax",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.softmax(Attn_mat, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.transpose(q_attn_softmax, 1, 2)",
                            "Call"
                        ],
                        [
                            "F.softmax(Attn_mat, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.transpose(q_attn_softmax, 1, 2)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "q_proj",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.fc1(q).view(batch, qlen, -1)",
                            "Call"
                        ],
                        [
                            "self.query_proj(query)",
                            "Call"
                        ],
                        [
                            "self.query_proj(query).view(bs, seq_len, n_head, d_q)",
                            "Call"
                        ],
                        [
                            "q_proj.permute(2, 0, 1, 3).contiguous().view(-1, seq_len, d_q)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_432": {
                "variable": {
                    "value": "self.query_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_head * dq",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_433": {
                "variable": {
                    "value": "self.context_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_head * dk",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "transpose_449": {
                "variable": {
                    "value": "c_proj",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "c_proj",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.context_proj(context)",
                            "Call"
                        ],
                        [
                            "torch.transpose(c_proj, 1, 2)",
                            "Call"
                        ],
                        [
                            "self.context_proj(context).view(bs, seq_len, n_head, d_k)",
                            "Call"
                        ],
                        [
                            "c_proj.permute(2, 0, 1, 3).contiguous().view(-1, seq_len, d_k)",
                            "Call"
                        ],
                        [
                            "torch.transpose(c_proj, 1, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_452": {
                "variable": {
                    "value": "c_attn_softmax",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Attn_mat",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "torch.bmm(q_proj, c_proj) * self.scale",
                            "BinOp"
                        ],
                        [
                            "torch.bmm(q_proj, c_proj) * self.scale",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bmm_453": {
                "variable": {
                    "value": "c_coattn",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "c_attn_softmax",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.softmax(Attn_mat, dim=2)",
                            "Call"
                        ],
                        [
                            "F.softmax(Attn_mat, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "c_proj",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.context_proj(context)",
                            "Call"
                        ],
                        [
                            "torch.transpose(c_proj, 1, 2)",
                            "Call"
                        ],
                        [
                            "self.context_proj(context).view(bs, seq_len, n_head, d_k)",
                            "Call"
                        ],
                        [
                            "c_proj.permute(2, 0, 1, 3).contiguous().view(-1, seq_len, d_k)",
                            "Call"
                        ],
                        [
                            "torch.transpose(c_proj, 1, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_457": {
                "variable": {
                    "value": "q_attn_softmax",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Attn_mat",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "torch.bmm(q_proj, c_proj) * self.scale",
                            "BinOp"
                        ],
                        [
                            "torch.bmm(q_proj, c_proj) * self.scale",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_458": {
                "variable": {
                    "value": "q_attn_softmax",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_attn_softmax",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.softmax(Attn_mat, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.transpose(q_attn_softmax, 1, 2)",
                            "Call"
                        ],
                        [
                            "F.softmax(Attn_mat, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.transpose(q_attn_softmax, 1, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bmm_459": {
                "variable": {
                    "value": "q_coattn",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_attn_softmax",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.softmax(Attn_mat, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.transpose(q_attn_softmax, 1, 2)",
                            "Call"
                        ],
                        [
                            "F.softmax(Attn_mat, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.transpose(q_attn_softmax, 1, 2)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "q_proj",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.fc1(q).view(batch, qlen, -1)",
                            "Call"
                        ],
                        [
                            "self.query_proj(query)",
                            "Call"
                        ],
                        [
                            "self.query_proj(query).view(bs, seq_len, n_head, d_q)",
                            "Call"
                        ],
                        [
                            "q_proj.permute(2, 0, 1, 3).contiguous().view(-1, seq_len, d_q)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_264": {
                "input": {
                    "value": "S",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.wst(torch.tanh(item)).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "S.masked_fill(memory_mask == 0, -1e+30)",
                            "Call"
                        ],
                        [
                            "self.dropout(F.softmax(S, -1))",
                            "Call"
                        ],
                        [
                            "S.masked_fill(forward_mask.cuda().unsqueeze(0) == 0, -1e+30)",
                            "Call"
                        ],
                        [
                            "S.masked_fill(backward_mask.cuda().unsqueeze(0) == 0, -1e+30)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "memory",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "dropout_325": {
                "variable": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.sigmoid(self.w(score)).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "F.softmax(score.view(-1, 1, qlen), dim=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(weight, p=self.d, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_376": {
                "variable": {
                    "value": "self.scale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor([1.0 / math.sqrt(input_dim)])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_435": {
                "variable": {
                    "value": "self.scale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor([1.0 / math.sqrt(input_dim)])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_468": {
                "input": {
                    "value": "attention_t.view(-1, args.num_filters, num_features)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "attention.view(-1, num_features, args.num_filters)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eye_468": {
                "n": {
                    "value": "args.num_filters",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "norm_470": {
                "input": {
                    "value": "res",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.matmul(attention_t.view(-1, args.num_filters, num_features), attention.view(-1, num_features, args.num_filters)) - torch.eye(args.num_filters).cuda()",
                            "BinOp"
                        ],
                        [
                            "res.view(-1, args.num_filters * args.num_filters)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_470": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_15": {
                "in_features": {
                    "value": "in_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "16",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Tanh_16": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_17": {
                "in_features": {
                    "value": "hidden_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "16",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_118": {
                "input": {
                    "value": "self.w_1(output)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_151": {
                "*size": {
                    "value": "[1, head, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_253": {
                "variable": {
                    "value": "forward_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "length",
                    "type": "Call",
                    "possible_values": [
                        [
                            "S.size(1)",
                            "Call"
                        ],
                        [
                            "S.size(1)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "length",
                    "type": "Call",
                    "possible_values": [
                        [
                            "S.size(1)",
                            "Call"
                        ],
                        [
                            "S.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_263": {
                "input": {
                    "value": "S",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.wst(torch.tanh(item)).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "S.masked_fill(memory_mask == 0, -1e+30)",
                            "Call"
                        ],
                        [
                            "self.dropout(F.softmax(S, -1))",
                            "Call"
                        ],
                        [
                            "S.masked_fill(forward_mask.cuda().unsqueeze(0) == 0, -1e+30)",
                            "Call"
                        ],
                        [
                            "S.masked_fill(backward_mask.cuda().unsqueeze(0) == 0, -1e+30)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "bmm_386": {
                "input": {
                    "value": "q_proj",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.fc1(q).view(batch, qlen, -1)",
                            "Call"
                        ],
                        [
                            "self.query_proj(query)",
                            "Call"
                        ],
                        [
                            "self.query_proj(query).view(bs, seq_len, n_head, d_q)",
                            "Call"
                        ],
                        [
                            "q_proj.permute(2, 0, 1, 3).contiguous().view(-1, seq_len, d_q)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "c_proj",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.context_proj(context)",
                            "Call"
                        ],
                        [
                            "torch.transpose(c_proj, 1, 2)",
                            "Call"
                        ],
                        [
                            "self.context_proj(context).view(bs, seq_len, n_head, d_k)",
                            "Call"
                        ],
                        [
                            "c_proj.permute(2, 0, 1, 3).contiguous().view(-1, seq_len, d_k)",
                            "Call"
                        ],
                        [
                            "torch.transpose(c_proj, 1, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_450": {
                "input": {
                    "value": "q_proj",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.fc1(q).view(batch, qlen, -1)",
                            "Call"
                        ],
                        [
                            "self.query_proj(query)",
                            "Call"
                        ],
                        [
                            "self.query_proj(query).view(bs, seq_len, n_head, d_q)",
                            "Call"
                        ],
                        [
                            "q_proj.permute(2, 0, 1, 3).contiguous().view(-1, seq_len, d_q)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "c_proj",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.context_proj(context)",
                            "Call"
                        ],
                        [
                            "torch.transpose(c_proj, 1, 2)",
                            "Call"
                        ],
                        [
                            "self.context_proj(context).view(bs, seq_len, n_head, d_k)",
                            "Call"
                        ],
                        [
                            "c_proj.permute(2, 0, 1, 3).contiguous().view(-1, seq_len, d_k)",
                            "Call"
                        ],
                        [
                            "torch.transpose(c_proj, 1, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_164": {
                "input": {
                    "value": "self.op.expand([batch, self.head, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "v",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.w_vs(v).view(sz_b, len_v, n_head, d_v)",
                            "Call"
                        ],
                        [
                            "v.permute(2, 0, 1, 3).contiguous().view(-1, len_v, d_v)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_259": {
                "variable": {
                    "value": "backward_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "length",
                    "type": "Call",
                    "possible_values": [
                        [
                            "S.size(1)",
                            "Call"
                        ],
                        [
                            "S.size(1)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "length",
                    "type": "Call",
                    "possible_values": [
                        [
                            "S.size(1)",
                            "Call"
                        ],
                        [
                            "S.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_246": {
                "input": {
                    "value": "item",
                    "type": "Name",
                    "possible_values": [
                        [
                            "item1.unsqueeze(2) + item2.unsqueeze(1)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "model/Preprocessing.py": {
        "torch": {
            "sort_18": {
                "variable": {
                    "value": "(sorted_seq_len, sorted_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "seq_len",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sort_19": {
                "variable": {
                    "value": "(_, original_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "sorted_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "descending": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_172": {
                "variable": {
                    "value": "unigrams",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.unigram_conv(words)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_173": {
                "variable": {
                    "value": "bigrams",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bigram_conv(words)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_174": {
                "variable": {
                    "value": "trigrams",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.trigram_conv(words)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_176": {
                "variable": {
                    "value": "phrase",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.max_pool(torch.cat((unigrams, bigrams, trigrams), 2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_182": {
                "variable": {
                    "value": "concate",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(words, phrase, sentence)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dropout_186": {
                "variable": {
                    "value": "question_embedding",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "question_embedding",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat([question_embedding[0], question_embedding[1]], -1)",
                            "Call"
                        ],
                        [
                            "self.final_dropout(question_embedding)",
                            "Call"
                        ],
                        [
                            "torch.cat([question_embedding[0], question_embedding[1]], -1)",
                            "Call"
                        ],
                        [
                            "self.final_dropout(question_embedding)",
                            "Call"
                        ],
                        [
                            "F.dropout(question_embedding, self.dropout, self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_187": {
                "variable": {
                    "value": "output_embedding",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_embedding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.dropout(output_embedding, self.dropout, self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_221": {
                "variable": {
                    "value": "embed",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embed",
                    "type": "Call",
                    "possible_values": [
                        [
                            "nn.utils.rnn.pack_padded_sequence(words, question_len, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "nn.utils.rnn.pack_padded_sequence(words, question_len, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.tanh(self.embedding_dropout(appearance_clips))",
                            "Call"
                        ],
                        [
                            "torch.transpose(embed, 0, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "torch.transpose(embed, 1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "embed.view(num_of_frames, -1, feat_dim)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_222": {
                "variable": {
                    "value": "embed",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embed",
                    "type": "Call",
                    "possible_values": [
                        [
                            "nn.utils.rnn.pack_padded_sequence(words, question_len, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "nn.utils.rnn.pack_padded_sequence(words, question_len, batch_first=True, enforce_sorted=False)",
                            "Call"
                        ],
                        [
                            "self.tanh(self.embedding_dropout(appearance_clips))",
                            "Call"
                        ],
                        [
                            "torch.transpose(embed, 0, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "torch.transpose(embed, 1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "embed.view(num_of_frames, -1, feat_dim)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_44": {
                "variable": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[state[0], state[1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_82": {
                "variable": {
                    "value": "question_embedding",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[question_embedding[0], question_embedding[1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_123": {
                "variable": {
                    "value": "question_embedding",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[question_embedding[0], question_embedding[1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_229": {
                "variable": {
                    "value": "visual_appearance_embedding",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[visual_appearance_embedding[0], visual_appearance_embedding[1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "pad_36": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "unpacked_x.index_select(0, original_idx)",
                            "Call"
                        ],
                        [
                            "unpacked_x.index_select(1, original_idx)",
                            "Call"
                        ],
                        [
                            "F.pad(out, [0, 0, 0, max_num_frames - out.shape[1]])",
                            "Call"
                        ],
                        [
                            "F.pad(out, [0, 0, 0, 0, 0, max_num_frames - out.shape[0]])",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "[0, 0, 0, max_num_frames - out.shape[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_40": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "unpacked_x.index_select(0, original_idx)",
                            "Call"
                        ],
                        [
                            "unpacked_x.index_select(1, original_idx)",
                            "Call"
                        ],
                        [
                            "F.pad(out, [0, 0, 0, max_num_frames - out.shape[1]])",
                            "Call"
                        ],
                        [
                            "F.pad(out, [0, 0, 0, 0, 0, max_num_frames - out.shape[0]])",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "[0, 0, 0, 0, 0, max_num_frames - out.shape[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dropout_169": {
                "input": {
                    "value": "words",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.tanh(self.embedding_dropout(questions_embedding))",
                            "Call"
                        ],
                        [
                            "self.tanh(self.embedding_dropout(questions_embedding))",
                            "Call"
                        ],
                        [
                            "self.encoder_embed(questions)",
                            "Call"
                        ],
                        [
                            "self.tanh(F.dropout(words, self.dropout, self.training))",
                            "Call"
                        ],
                        [
                            "words.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "words.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_176": {
                "tensors": {
                    "value": "(unigrams, bigrams, trigrams)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "model/fusions/compactbilinearpooling.py": {
        "torch": {
            "addcmul_119": {
                "variable": {
                    "value": "Z_re",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X_re * Y_re",
                    "type": "BinOp",
                    "possible_values": []
                },
                "tensor1": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "tensor2": {
                    "value": "X_im",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "Y_im",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "addcmul_120": {
                "variable": {
                    "value": "Z_im",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X_re * Y_im",
                    "type": "BinOp",
                    "possible_values": []
                },
                "tensor1": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "tensor2": {
                    "value": "X_im",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "Y_re",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "addcmul_124": {
                "variable": {
                    "value": "grad_X_re",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad_Z_re * Y_re",
                    "type": "BinOp",
                    "possible_values": []
                },
                "tensor1": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "tensor2": {
                    "value": "grad_Z_im",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "Y_im",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "addcmul_125": {
                "variable": {
                    "value": "grad_X_im",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad_Z_im * Y_re",
                    "type": "BinOp",
                    "possible_values": []
                },
                "tensor1": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "tensor2": {
                    "value": "grad_Z_re",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "Y_im",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "addcmul_126": {
                "variable": {
                    "value": "grad_Y_re",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad_Z_re * X_re",
                    "type": "BinOp",
                    "possible_values": []
                },
                "tensor1": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "tensor2": {
                    "value": "grad_Z_im",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "X_im",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "addcmul_127": {
                "variable": {
                    "value": "grad_Y_im",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad_Z_im * X_re",
                    "type": "BinOp",
                    "possible_values": []
                },
                "tensor1": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "tensor2": {
                    "value": "grad_Z_re",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "X_im",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "addcmul_195": {
                "variable": {
                    "value": "grad_re_fx",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad_re_prod * re_fy",
                    "type": "BinOp",
                    "possible_values": []
                },
                "tensor1": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "tensor2": {
                    "value": "grad_im_prod",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "im_fy",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Variable(im_fy)",
                            "Call"
                        ]
                    ]
                }
            },
            "addcmul_196": {
                "variable": {
                    "value": "grad_im_fx",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad_im_prod * re_fy",
                    "type": "BinOp",
                    "possible_values": []
                },
                "tensor1": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "tensor2": {
                    "value": "grad_re_prod",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "im_fy",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Variable(im_fy)",
                            "Call"
                        ]
                    ]
                }
            },
            "addcmul_209": {
                "variable": {
                    "value": "grad_re_fy",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad_re_prod * re_fx",
                    "type": "BinOp",
                    "possible_values": []
                },
                "tensor1": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "tensor2": {
                    "value": "grad_im_prod",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "im_fx",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Variable(im_fx)",
                            "Call"
                        ]
                    ]
                }
            },
            "addcmul_210": {
                "variable": {
                    "value": "grad_im_fy",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad_im_prod * re_fx",
                    "type": "BinOp",
                    "possible_values": []
                },
                "tensor1": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "tensor2": {
                    "value": "grad_re_prod",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "im_fx",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Variable(im_fx)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "model/fusions/fusions.py": {
        "torch": {
            "ModuleList_41": {
                "variable": {
                    "value": "self.linears",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(input_dim, dimensions[0])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Linear_81": {
                "variable": {
                    "value": "self.linear0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dims[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "mm_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "16000",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ModuleList_96": {
                "variable": {
                    "value": "self.merge_linears0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "merge_linears0",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ModuleList_97": {
                "variable": {
                    "value": "self.merge_linears1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "merge_linears1",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_98": {
                "variable": {
                    "value": "self.linear_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "mm_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "16000",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_123": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "zs",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_160": {
                "variable": {
                    "value": "self.linear0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dims[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "mm_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "16000",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ModuleList_172": {
                "variable": {
                    "value": "self.bilinears",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "bilinears",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Linear_173": {
                "variable": {
                    "value": "self.linear_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.mm_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.output_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_194": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "zs",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_230": {
                "variable": {
                    "value": "self.linear0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dims[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "mm_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "16000",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_231": {
                "variable": {
                    "value": "self.merge_linear0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "mm_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "16000",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "mm_dim * rank",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_238": {
                "variable": {
                    "value": "self.linear_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "mm_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "16000",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_253": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "m",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "m0(x0_c) * m1(x1_c)",
                            "BinOp"
                        ],
                        [
                            "m.view(bsize, self.rank, -1)",
                            "Call"
                        ],
                        [
                            "m0 * m1",
                            "BinOp"
                        ],
                        [
                            "m.view(-1, self.rank, self.mm_dim)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_289": {
                "variable": {
                    "value": "self.linear0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dims[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "mm_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "16000",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_294": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dims[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "mm_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "16000",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Bilinear_295": {
                "variable": {
                    "value": "self.bilinear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in1_features": {
                    "value": "mm_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "16000",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ]
                    ]
                },
                "in2_features": {
                    "value": "mm_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "16000",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "mm_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "16000",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_296": {
                "variable": {
                    "value": "self.linear_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "mm_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "16000",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_346": {
                "variable": {
                    "value": "self.linear0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dims[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "mm_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "16000",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_347": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dims[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "mm_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "16000",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_348": {
                "variable": {
                    "value": "self.linear_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "mm_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "16000",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_407": {
                "variable": {
                    "value": "self.linear0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dims[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "mm_dim * factor",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_408": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dims[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "mm_dim * factor",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_409": {
                "variable": {
                    "value": "self.linear_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "mm_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "16000",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_481": {
                "variable": {
                    "value": "self.linear0_0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dims[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "mm_dim * factor",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_482": {
                "variable": {
                    "value": "self.linear1_0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dims[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "mm_dim * factor",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_483": {
                "variable": {
                    "value": "self.linear0_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dims[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "mm_dim * factor",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_484": {
                "variable": {
                    "value": "self.linear1_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dims[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "mm_dim * factor",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_485": {
                "variable": {
                    "value": "self.linear_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "mm_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_544": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[z_0, z_1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "cat_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "z_0.dim() - 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Linear_573": {
                "variable": {
                    "value": "self.linear_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "mm_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "16000",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_609": {
                "variable": {
                    "value": "self.linear0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dims[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "mm_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "16000",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_610": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dims[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "mm_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "16000",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_611": {
                "variable": {
                    "value": "self.linear_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "mm_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "16000",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_673": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "lin(x)",
                            "Call"
                        ],
                        [
                            "F.__dict__[self.activation](x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "x[0].dim() - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_85": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dims[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "mm_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "16000",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_89": {
                "variable": {
                    "value": "ml0",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "size",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "self.sizes_list",
                            "Attribute"
                        ],
                        [
                            "self.sizes_list",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "size * rank",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dropout_106": {
                "variable": {
                    "value": "x0",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x0",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0_0(x[0])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0_1(x[0])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_107": {
                "variable": {
                    "value": "x1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1_0(x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1_1(x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_118": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "m",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "m0(x0_c) * m1(x1_c)",
                            "BinOp"
                        ],
                        [
                            "m.view(bsize, self.rank, -1)",
                            "Call"
                        ],
                        [
                            "m0 * m1",
                            "BinOp"
                        ],
                        [
                            "m.view(-1, self.rank, self.mm_dim)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "normalize_126": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.sum(m, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat(zs, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "bilinear(x0_c, x1_c)",
                            "Call"
                        ],
                        [
                            "torch.cat(zs, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.sum(m, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.bilinear(x0, x1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_norm, training=self.training)",
                            "Call"
                        ],
                        [
                            "z.view(z.size(0), self.mm_dim, self.factor)",
                            "Call"
                        ],
                        [
                            "z.view(z.size(0), z.size(1), self.mm_dim, self.factor)",
                            "Call"
                        ],
                        [
                            "z.sum(-1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat([z_0, z_1], cat_dim)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.mcb(x[0], x[1])",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 + x1",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat(x, dim=x[0].dim() - 1)",
                            "Call"
                        ],
                        [
                            "self.mlp(z)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dropout_129": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.sum(m, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat(zs, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "bilinear(x0_c, x1_c)",
                            "Call"
                        ],
                        [
                            "torch.cat(zs, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.sum(m, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.bilinear(x0, x1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_norm, training=self.training)",
                            "Call"
                        ],
                        [
                            "z.view(z.size(0), self.mm_dim, self.factor)",
                            "Call"
                        ],
                        [
                            "z.view(z.size(0), z.size(1), self.mm_dim, self.factor)",
                            "Call"
                        ],
                        [
                            "z.sum(-1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat([z_0, z_1], cat_dim)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.mcb(x[0], x[1])",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 + x1",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat(x, dim=x[0].dim() - 1)",
                            "Call"
                        ],
                        [
                            "self.mlp(z)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_pre_lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_132": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.sum(m, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat(zs, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "bilinear(x0_c, x1_c)",
                            "Call"
                        ],
                        [
                            "torch.cat(zs, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.sum(m, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.bilinear(x0, x1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_norm, training=self.training)",
                            "Call"
                        ],
                        [
                            "z.view(z.size(0), self.mm_dim, self.factor)",
                            "Call"
                        ],
                        [
                            "z.view(z.size(0), z.size(1), self.mm_dim, self.factor)",
                            "Call"
                        ],
                        [
                            "z.sum(-1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat([z_0, z_1], cat_dim)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.mcb(x[0], x[1])",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 + x1",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat(x, dim=x[0].dim() - 1)",
                            "Call"
                        ],
                        [
                            "self.mlp(z)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_164": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dims[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "mm_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "16000",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "dropout_181": {
                "variable": {
                    "value": "x0",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x0",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0_0(x[0])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0_1(x[0])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_182": {
                "variable": {
                    "value": "x1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1_0(x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1_1(x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "normalize_197": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.sum(m, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat(zs, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "bilinear(x0_c, x1_c)",
                            "Call"
                        ],
                        [
                            "torch.cat(zs, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.sum(m, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.bilinear(x0, x1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_norm, training=self.training)",
                            "Call"
                        ],
                        [
                            "z.view(z.size(0), self.mm_dim, self.factor)",
                            "Call"
                        ],
                        [
                            "z.view(z.size(0), z.size(1), self.mm_dim, self.factor)",
                            "Call"
                        ],
                        [
                            "z.sum(-1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat([z_0, z_1], cat_dim)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.mcb(x[0], x[1])",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 + x1",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat(x, dim=x[0].dim() - 1)",
                            "Call"
                        ],
                        [
                            "self.mlp(z)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dropout_200": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.sum(m, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat(zs, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "bilinear(x0_c, x1_c)",
                            "Call"
                        ],
                        [
                            "torch.cat(zs, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.sum(m, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.bilinear(x0, x1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_norm, training=self.training)",
                            "Call"
                        ],
                        [
                            "z.view(z.size(0), self.mm_dim, self.factor)",
                            "Call"
                        ],
                        [
                            "z.view(z.size(0), z.size(1), self.mm_dim, self.factor)",
                            "Call"
                        ],
                        [
                            "z.sum(-1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat([z_0, z_1], cat_dim)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.mcb(x[0], x[1])",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 + x1",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat(x, dim=x[0].dim() - 1)",
                            "Call"
                        ],
                        [
                            "self.mlp(z)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_pre_lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_203": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.sum(m, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat(zs, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "bilinear(x0_c, x1_c)",
                            "Call"
                        ],
                        [
                            "torch.cat(zs, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.sum(m, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.bilinear(x0, x1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_norm, training=self.training)",
                            "Call"
                        ],
                        [
                            "z.view(z.size(0), self.mm_dim, self.factor)",
                            "Call"
                        ],
                        [
                            "z.view(z.size(0), z.size(1), self.mm_dim, self.factor)",
                            "Call"
                        ],
                        [
                            "z.sum(-1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat([z_0, z_1], cat_dim)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.mcb(x[0], x[1])",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 + x1",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat(x, dim=x[0].dim() - 1)",
                            "Call"
                        ],
                        [
                            "self.mlp(z)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_236": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dims[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "mm_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "16000",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_237": {
                "variable": {
                    "value": "self.merge_linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "mm_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "16000",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "mm_dim * rank",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dropout_246": {
                "variable": {
                    "value": "x0",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x0",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0_0(x[0])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0_1(x[0])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_247": {
                "variable": {
                    "value": "x1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1_0(x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1_1(x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "normalize_256": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.sum(m, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat(zs, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "bilinear(x0_c, x1_c)",
                            "Call"
                        ],
                        [
                            "torch.cat(zs, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.sum(m, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.bilinear(x0, x1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_norm, training=self.training)",
                            "Call"
                        ],
                        [
                            "z.view(z.size(0), self.mm_dim, self.factor)",
                            "Call"
                        ],
                        [
                            "z.view(z.size(0), z.size(1), self.mm_dim, self.factor)",
                            "Call"
                        ],
                        [
                            "z.sum(-1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat([z_0, z_1], cat_dim)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.mcb(x[0], x[1])",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 + x1",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat(x, dim=x[0].dim() - 1)",
                            "Call"
                        ],
                        [
                            "self.mlp(z)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dropout_259": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.sum(m, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat(zs, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "bilinear(x0_c, x1_c)",
                            "Call"
                        ],
                        [
                            "torch.cat(zs, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.sum(m, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.bilinear(x0, x1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_norm, training=self.training)",
                            "Call"
                        ],
                        [
                            "z.view(z.size(0), self.mm_dim, self.factor)",
                            "Call"
                        ],
                        [
                            "z.view(z.size(0), z.size(1), self.mm_dim, self.factor)",
                            "Call"
                        ],
                        [
                            "z.sum(-1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat([z_0, z_1], cat_dim)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.mcb(x[0], x[1])",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 + x1",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat(x, dim=x[0].dim() - 1)",
                            "Call"
                        ],
                        [
                            "self.mlp(z)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_pre_lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_264": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.sum(m, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat(zs, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "bilinear(x0_c, x1_c)",
                            "Call"
                        ],
                        [
                            "torch.cat(zs, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.sum(m, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.bilinear(x0, x1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_norm, training=self.training)",
                            "Call"
                        ],
                        [
                            "z.view(z.size(0), self.mm_dim, self.factor)",
                            "Call"
                        ],
                        [
                            "z.view(z.size(0), z.size(1), self.mm_dim, self.factor)",
                            "Call"
                        ],
                        [
                            "z.sum(-1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat([z_0, z_1], cat_dim)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.mcb(x[0], x[1])",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 + x1",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat(x, dim=x[0].dim() - 1)",
                            "Call"
                        ],
                        [
                            "self.mlp(z)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_293": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dims[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "mm_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "1600",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "16000",
                            "MethodArgument"
                        ],
                        [
                            "1200",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "dropout_304": {
                "variable": {
                    "value": "x0",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x0",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0_0(x[0])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0_1(x[0])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_305": {
                "variable": {
                    "value": "x1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1_0(x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1_1(x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "normalize_311": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.sum(m, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat(zs, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "bilinear(x0_c, x1_c)",
                            "Call"
                        ],
                        [
                            "torch.cat(zs, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.sum(m, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.bilinear(x0, x1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_norm, training=self.training)",
                            "Call"
                        ],
                        [
                            "z.view(z.size(0), self.mm_dim, self.factor)",
                            "Call"
                        ],
                        [
                            "z.view(z.size(0), z.size(1), self.mm_dim, self.factor)",
                            "Call"
                        ],
                        [
                            "z.sum(-1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat([z_0, z_1], cat_dim)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.mcb(x[0], x[1])",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 + x1",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat(x, dim=x[0].dim() - 1)",
                            "Call"
                        ],
                        [
                            "self.mlp(z)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dropout_314": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.sum(m, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat(zs, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "bilinear(x0_c, x1_c)",
                            "Call"
                        ],
                        [
                            "torch.cat(zs, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.sum(m, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.bilinear(x0, x1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_norm, training=self.training)",
                            "Call"
                        ],
                        [
                            "z.view(z.size(0), self.mm_dim, self.factor)",
                            "Call"
                        ],
                        [
                            "z.view(z.size(0), z.size(1), self.mm_dim, self.factor)",
                            "Call"
                        ],
                        [
                            "z.sum(-1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat([z_0, z_1], cat_dim)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.mcb(x[0], x[1])",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 + x1",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat(x, dim=x[0].dim() - 1)",
                            "Call"
                        ],
                        [
                            "self.mlp(z)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_pre_lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_319": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.sum(m, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat(zs, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "bilinear(x0_c, x1_c)",
                            "Call"
                        ],
                        [
                            "torch.cat(zs, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.sum(m, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.bilinear(x0, x1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_norm, training=self.training)",
                            "Call"
                        ],
                        [
                            "z.view(z.size(0), self.mm_dim, self.factor)",
                            "Call"
                        ],
                        [
                            "z.view(z.size(0), z.size(1), self.mm_dim, self.factor)",
                            "Call"
                        ],
                        [
                            "z.sum(-1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat([z_0, z_1], cat_dim)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.mcb(x[0], x[1])",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 + x1",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat(x, dim=x[0].dim() - 1)",
                            "Call"
                        ],
                        [
                            "self.mlp(z)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_360": {
                "variable": {
                    "value": "x0",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x0",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0_0(x[0])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0_1(x[0])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_361": {
                "variable": {
                    "value": "x1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1_0(x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1_1(x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "normalize_367": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.sum(m, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat(zs, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "bilinear(x0_c, x1_c)",
                            "Call"
                        ],
                        [
                            "torch.cat(zs, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.sum(m, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.bilinear(x0, x1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_norm, training=self.training)",
                            "Call"
                        ],
                        [
                            "z.view(z.size(0), self.mm_dim, self.factor)",
                            "Call"
                        ],
                        [
                            "z.view(z.size(0), z.size(1), self.mm_dim, self.factor)",
                            "Call"
                        ],
                        [
                            "z.sum(-1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat([z_0, z_1], cat_dim)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.mcb(x[0], x[1])",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 + x1",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat(x, dim=x[0].dim() - 1)",
                            "Call"
                        ],
                        [
                            "self.mlp(z)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dropout_370": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.sum(m, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat(zs, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "bilinear(x0_c, x1_c)",
                            "Call"
                        ],
                        [
                            "torch.cat(zs, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.sum(m, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.bilinear(x0, x1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_norm, training=self.training)",
                            "Call"
                        ],
                        [
                            "z.view(z.size(0), self.mm_dim, self.factor)",
                            "Call"
                        ],
                        [
                            "z.view(z.size(0), z.size(1), self.mm_dim, self.factor)",
                            "Call"
                        ],
                        [
                            "z.sum(-1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat([z_0, z_1], cat_dim)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.mcb(x[0], x[1])",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 + x1",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat(x, dim=x[0].dim() - 1)",
                            "Call"
                        ],
                        [
                            "self.mlp(z)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_pre_lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_378": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.sum(m, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat(zs, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "bilinear(x0_c, x1_c)",
                            "Call"
                        ],
                        [
                            "torch.cat(zs, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.sum(m, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.bilinear(x0, x1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_norm, training=self.training)",
                            "Call"
                        ],
                        [
                            "z.view(z.size(0), self.mm_dim, self.factor)",
                            "Call"
                        ],
                        [
                            "z.view(z.size(0), z.size(1), self.mm_dim, self.factor)",
                            "Call"
                        ],
                        [
                            "z.sum(-1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat([z_0, z_1], cat_dim)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.mcb(x[0], x[1])",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 + x1",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat(x, dim=x[0].dim() - 1)",
                            "Call"
                        ],
                        [
                            "self.mlp(z)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_428": {
                "variable": {
                    "value": "x0",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x0",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0_0(x[0])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0_1(x[0])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_429": {
                "variable": {
                    "value": "x1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1_0(x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1_1(x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_434": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.sum(m, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat(zs, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "bilinear(x0_c, x1_c)",
                            "Call"
                        ],
                        [
                            "torch.cat(zs, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.sum(m, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.bilinear(x0, x1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_norm, training=self.training)",
                            "Call"
                        ],
                        [
                            "z.view(z.size(0), self.mm_dim, self.factor)",
                            "Call"
                        ],
                        [
                            "z.view(z.size(0), z.size(1), self.mm_dim, self.factor)",
                            "Call"
                        ],
                        [
                            "z.sum(-1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat([z_0, z_1], cat_dim)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.mcb(x[0], x[1])",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 + x1",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat(x, dim=x[0].dim() - 1)",
                            "Call"
                        ],
                        [
                            "self.mlp(z)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_pre_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "normalize_444": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.sum(m, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat(zs, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "bilinear(x0_c, x1_c)",
                            "Call"
                        ],
                        [
                            "torch.cat(zs, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.sum(m, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.bilinear(x0, x1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_norm, training=self.training)",
                            "Call"
                        ],
                        [
                            "z.view(z.size(0), self.mm_dim, self.factor)",
                            "Call"
                        ],
                        [
                            "z.view(z.size(0), z.size(1), self.mm_dim, self.factor)",
                            "Call"
                        ],
                        [
                            "z.sum(-1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat([z_0, z_1], cat_dim)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.mcb(x[0], x[1])",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 + x1",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat(x, dim=x[0].dim() - 1)",
                            "Call"
                        ],
                        [
                            "self.mlp(z)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dropout_452": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.sum(m, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat(zs, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "bilinear(x0_c, x1_c)",
                            "Call"
                        ],
                        [
                            "torch.cat(zs, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.sum(m, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.bilinear(x0, x1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_norm, training=self.training)",
                            "Call"
                        ],
                        [
                            "z.view(z.size(0), self.mm_dim, self.factor)",
                            "Call"
                        ],
                        [
                            "z.view(z.size(0), z.size(1), self.mm_dim, self.factor)",
                            "Call"
                        ],
                        [
                            "z.sum(-1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat([z_0, z_1], cat_dim)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.mcb(x[0], x[1])",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 + x1",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat(x, dim=x[0].dim() - 1)",
                            "Call"
                        ],
                        [
                            "self.mlp(z)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_497": {
                "variable": {
                    "value": "x0",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x0",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0_0(x[0])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0_1(x[0])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_498": {
                "variable": {
                    "value": "x1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1_0(x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1_1(x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_503": {
                "variable": {
                    "value": "z_0_skip",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z_0_skip",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "F.dropout(z_0_skip, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_pre_lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "normalize_513": {
                "variable": {
                    "value": "z_0",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z_0",
                    "type": "Call",
                    "possible_values": [
                        [
                            "z_0_skip.view(z_0_skip.size(0), self.mm_dim, self.factor)",
                            "Call"
                        ],
                        [
                            "z_0_skip.view(z_0_skip.size(0), z_0_skip.size(1), self.mm_dim, self.factor)",
                            "Call"
                        ],
                        [
                            "z_0.sum(-1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z_0)) - torch.sqrt(F.relu(-z_0))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z_0, p=2)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dropout_524": {
                "variable": {
                    "value": "x0",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x0",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0_0(x[0])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0_1(x[0])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_525": {
                "variable": {
                    "value": "x1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1_0(x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1_1(x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_530": {
                "variable": {
                    "value": "z_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z_1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x0 * x1 * z_0_skip",
                            "BinOp"
                        ],
                        [
                            "F.dropout(z_1, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "z_1.view(z_1.size(0), self.mm_dim, self.factor)",
                            "Call"
                        ],
                        [
                            "z_1.view(z_1.size(0), z_1.size(1), self.mm_dim, self.factor)",
                            "Call"
                        ],
                        [
                            "z_1.sum(-1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z_1)) - torch.sqrt(F.relu(-z_1))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z_1, p=2)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_pre_lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "normalize_540": {
                "variable": {
                    "value": "z_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z_1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x0 * x1 * z_0_skip",
                            "BinOp"
                        ],
                        [
                            "F.dropout(z_1, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "z_1.view(z_1.size(0), self.mm_dim, self.factor)",
                            "Call"
                        ],
                        [
                            "z_1.view(z_1.size(0), z_1.size(1), self.mm_dim, self.factor)",
                            "Call"
                        ],
                        [
                            "z_1.sum(-1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z_1)) - torch.sqrt(F.relu(-z_1))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z_1, p=2)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dropout_551": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.sum(m, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat(zs, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "bilinear(x0_c, x1_c)",
                            "Call"
                        ],
                        [
                            "torch.cat(zs, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.sum(m, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.bilinear(x0, x1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_norm, training=self.training)",
                            "Call"
                        ],
                        [
                            "z.view(z.size(0), self.mm_dim, self.factor)",
                            "Call"
                        ],
                        [
                            "z.view(z.size(0), z.size(1), self.mm_dim, self.factor)",
                            "Call"
                        ],
                        [
                            "z.sum(-1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat([z_0, z_1], cat_dim)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.mcb(x[0], x[1])",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 + x1",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat(x, dim=x[0].dim() - 1)",
                            "Call"
                        ],
                        [
                            "self.mlp(z)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_582": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.sum(m, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat(zs, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "bilinear(x0_c, x1_c)",
                            "Call"
                        ],
                        [
                            "torch.cat(zs, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.sum(m, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.bilinear(x0, x1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_norm, training=self.training)",
                            "Call"
                        ],
                        [
                            "z.view(z.size(0), self.mm_dim, self.factor)",
                            "Call"
                        ],
                        [
                            "z.view(z.size(0), z.size(1), self.mm_dim, self.factor)",
                            "Call"
                        ],
                        [
                            "z.sum(-1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat([z_0, z_1], cat_dim)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.mcb(x[0], x[1])",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 + x1",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat(x, dim=x[0].dim() - 1)",
                            "Call"
                        ],
                        [
                            "self.mlp(z)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_623": {
                "variable": {
                    "value": "x0",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x0",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0_0(x[0])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0_1(x[0])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear0(x[0])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x0)",
                            "Call"
                        ],
                        [
                            "F.dropout(x0, p=self.dropout_input, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_624": {
                "variable": {
                    "value": "x1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1_0(x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1_1(x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear1(x[1])",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_input)(x1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x1, p=self.dropout_input, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "normalize_630": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.sum(m, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat(zs, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "bilinear(x0_c, x1_c)",
                            "Call"
                        ],
                        [
                            "torch.cat(zs, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.sum(m, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.bilinear(x0, x1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_norm, training=self.training)",
                            "Call"
                        ],
                        [
                            "z.view(z.size(0), self.mm_dim, self.factor)",
                            "Call"
                        ],
                        [
                            "z.view(z.size(0), z.size(1), self.mm_dim, self.factor)",
                            "Call"
                        ],
                        [
                            "z.sum(-1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat([z_0, z_1], cat_dim)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.mcb(x[0], x[1])",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 + x1",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat(x, dim=x[0].dim() - 1)",
                            "Call"
                        ],
                        [
                            "self.mlp(z)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dropout_633": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.sum(m, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat(zs, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "bilinear(x0_c, x1_c)",
                            "Call"
                        ],
                        [
                            "torch.cat(zs, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.sum(m, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.bilinear(x0, x1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_norm, training=self.training)",
                            "Call"
                        ],
                        [
                            "z.view(z.size(0), self.mm_dim, self.factor)",
                            "Call"
                        ],
                        [
                            "z.view(z.size(0), z.size(1), self.mm_dim, self.factor)",
                            "Call"
                        ],
                        [
                            "z.sum(-1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat([z_0, z_1], cat_dim)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.mcb(x[0], x[1])",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 + x1",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat(x, dim=x[0].dim() - 1)",
                            "Call"
                        ],
                        [
                            "self.mlp(z)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_pre_lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_641": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.sum(m, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat(zs, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "bilinear(x0_c, x1_c)",
                            "Call"
                        ],
                        [
                            "torch.cat(zs, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.sum(m, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.bilinear(x0, x1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_norm, training=self.training)",
                            "Call"
                        ],
                        [
                            "z.view(z.size(0), self.mm_dim, self.factor)",
                            "Call"
                        ],
                        [
                            "z.view(z.size(0), z.size(1), self.mm_dim, self.factor)",
                            "Call"
                        ],
                        [
                            "z.sum(-1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat([z_0, z_1], cat_dim)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.mcb(x[0], x[1])",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 + x1",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat(x, dim=x[0].dim() - 1)",
                            "Call"
                        ],
                        [
                            "self.mlp(z)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_94": {
                "variable": {
                    "value": "ml1",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "size",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "self.sizes_list",
                            "Attribute"
                        ],
                        [
                            "self.sizes_list",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "size * rank",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "normalize_121": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.sum(m, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat(zs, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "bilinear(x0_c, x1_c)",
                            "Call"
                        ],
                        [
                            "torch.cat(zs, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.sum(m, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.bilinear(x0, x1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_norm, training=self.training)",
                            "Call"
                        ],
                        [
                            "z.view(z.size(0), self.mm_dim, self.factor)",
                            "Call"
                        ],
                        [
                            "z.view(z.size(0), z.size(1), self.mm_dim, self.factor)",
                            "Call"
                        ],
                        [
                            "z.sum(-1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat([z_0, z_1], cat_dim)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.mcb(x[0], x[1])",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 + x1",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat(x, dim=x[0].dim() - 1)",
                            "Call"
                        ],
                        [
                            "self.mlp(z)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "normalize_192": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.sum(m, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat(zs, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "bilinear(x0_c, x1_c)",
                            "Call"
                        ],
                        [
                            "torch.cat(zs, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.sum(m, 1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.bilinear(x0, x1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 * x1",
                            "BinOp"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_norm, training=self.training)",
                            "Call"
                        ],
                        [
                            "z.view(z.size(0), self.mm_dim, self.factor)",
                            "Call"
                        ],
                        [
                            "z.view(z.size(0), z.size(1), self.mm_dim, self.factor)",
                            "Call"
                        ],
                        [
                            "z.sum(-1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat([z_0, z_1], cat_dim)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.mcb(x[0], x[1])",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "x0 + x1",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(F.relu(z)) - torch.sqrt(F.relu(-z))",
                            "BinOp"
                        ],
                        [
                            "F.normalize(z, p=2)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_pre_lin, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.linear_out(z)",
                            "Call"
                        ],
                        [
                            "getattr(F, self.activ_output)(z)",
                            "Call"
                        ],
                        [
                            "F.dropout(z, p=self.dropout_output, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.cat(x, dim=x[0].dim() - 1)",
                            "Call"
                        ],
                        [
                            "self.mlp(z)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_41": {
                "in_features": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dimensions[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_43": {
                "in_features": {
                    "value": "din",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dout",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "dropout_51": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "lin(x)",
                            "Call"
                        ],
                        [
                            "F.__dict__[self.activation](x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_125": {
                "input": {
                    "value": "F.relu(-z)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Bilinear_170": {
                "in1_features": {
                    "value": "size",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "self.sizes_list",
                            "Attribute"
                        ],
                        [
                            "self.sizes_list",
                            "Attribute"
                        ]
                    ]
                },
                "in2_features": {
                    "value": "size",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "self.sizes_list",
                            "Attribute"
                        ],
                        [
                            "self.sizes_list",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "size",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "self.sizes_list",
                            "Attribute"
                        ],
                        [
                            "self.sizes_list",
                            "Attribute"
                        ]
                    ]
                }
            },
            "sqrt_196": {
                "input": {
                    "value": "F.relu(-z)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_255": {
                "input": {
                    "value": "F.relu(-z)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_310": {
                "input": {
                    "value": "F.relu(-z)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_366": {
                "input": {
                    "value": "F.relu(-z)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_443": {
                "input": {
                    "value": "F.relu(-z)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_512": {
                "input": {
                    "value": "F.relu(-z_0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_539": {
                "input": {
                    "value": "F.relu(-z_1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_629": {
                "input": {
                    "value": "F.relu(-z)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_120": {
                "input": {
                    "value": "F.relu(-z)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_125": {
                "input": {
                    "value": "-z",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sqrt_191": {
                "input": {
                    "value": "F.relu(-z)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_196": {
                "input": {
                    "value": "-z",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "relu_255": {
                "input": {
                    "value": "-z",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "relu_310": {
                "input": {
                    "value": "-z",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "relu_366": {
                "input": {
                    "value": "-z",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "relu_443": {
                "input": {
                    "value": "-z",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "relu_512": {
                "input": {
                    "value": "-z_0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "relu_539": {
                "input": {
                    "value": "-z_1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "relu_629": {
                "input": {
                    "value": "-z",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "relu_120": {
                "input": {
                    "value": "-z",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "relu_191": {
                "input": {
                    "value": "-z",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "model/init_weight.py": {
        "torch": {}
    },
    "model/models.py": {
        "torch": {
            "from_numpy_21": {
                "variable": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.vstack((sparse_mx.row, sparse_mx.col)).astype(np.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_22": {
                "variable": {
                    "value": "values",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "sparse_mx.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_46": {
                "variable": {
                    "value": "self.visual_motion_input_unit",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "vision_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2048",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "module_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ModuleList_91": {
                "variable": {
                    "value": "self.queryAttn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[QueryAttn(module_dim=module_dim) for _ in range(unit_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_92": {
                "variable": {
                    "value": "self.queryPunish_appear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[QueryPunish(word_dim=word_dim, module_dim=module_dim) for _ in range(unit_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_93": {
                "variable": {
                    "value": "self.queryPunish_motion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[QueryPunish(word_dim=word_dim, module_dim=module_dim) for _ in range(unit_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_103": {
                "variable": {
                    "value": "self.attention_appearance",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[AttentionSFGCN(module_dim, module_dim) for _ in range(unit_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_104": {
                "variable": {
                    "value": "self.attention_motion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[AttentionSFGCN(module_dim, module_dim) for _ in range(unit_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ELU_112": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_95": {
                "variable": {
                    "value": "self.appearance_GCN",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[punishGAT(module_dim, module_dim // 4, dropout=0.15, alpha=0.01, n_heads=4) for _ in range(unit_layers * appearance_graph_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_97": {
                "variable": {
                    "value": "self.motion_GCN",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[punishGAT(module_dim, module_dim // 4, dropout=0.15, alpha=0.01, n_heads=4) for _ in range(unit_layers * motion_graph_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_98": {
                "variable": {
                    "value": "self.acGCN",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[punishGAT(module_dim, module_dim // 4, dropout=0.15, alpha=0.01, n_heads=4) for _ in range(unit_layers * appearance_graph_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_100": {
                "variable": {
                    "value": "self.mcGCN",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[punishGAT(module_dim, module_dim // 4, dropout=0.15, alpha=0.01, n_heads=4) for _ in range(unit_layers * motion_graph_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_163": {
                "variable": {
                    "value": "aq_embed",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[com_app, aq_fusion]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_164": {
                "variable": {
                    "value": "mq_embed",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[com_motion, mq_fusion]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "model/utils.py": {
        "torch": {
            "Linear_63": {
                "variable": {
                    "value": "self.feat_enhance",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "module_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "module_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_64": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "module_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "normalize_68": {
                "variable": {
                    "value": "dynamic_question_embedding",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.feat_enhance(dynamic_question_embedding)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_69": {
                "variable": {
                    "value": "attn",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc(dynamic_question_embedding).squeeze(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_72": {
                "variable": {
                    "value": "word_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(bs, max_seq_len)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "bmm_81": {
                "variable": {
                    "value": "word_embedding",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "temp_attn",
                    "type": "Name",
                    "possible_values": [
                        [
                            "attn.unsqueeze(1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "word_embedding",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.bmm(temp_attn, word_embedding)",
                            "Call"
                        ],
                        [
                            "word_embedding.squeeze(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_90": {
                "variable": {
                    "value": "self.query_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "word_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "300",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "module_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "bmm_101": {
                "variable": {
                    "value": "query_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "visual_feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "query.unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_102": {
                "variable": {
                    "value": "query_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query_scores",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.bmm(visual_feature, query.unsqueeze(2))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(query_scores)",
                            "Call"
                        ],
                        [
                            "query_scores.expand(query_scores.size(0), query_scores.size(1), visual_feature.size(2) // 4)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_111": {
                "variable": {
                    "value": "self.gate1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "module_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "module_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_112": {
                "variable": {
                    "value": "self.gate2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "module_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "module_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ],
                        [
                            "768",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_122": {
                "variable": {
                    "value": "text_gate",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.gate1(textual2visual)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_124": {
                "variable": {
                    "value": "visual_gate",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.gate2(visual_embedding)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "norm_58": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "preprocess/models/densenet.py": {
        "torch": {
            "Sequential_117": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('conv0', nn.Conv3d(3, num_init_features, kernel_size=7, stride=(1, 2, 2), padding=(3, 3, 3), bias=False)), ('norm0', nn.BatchNorm3d(num_init_features)), ('relu0', nn.ReLU(inplace=True)), ('pool0', nn.MaxPool3d(kernel_size=3, stride=2, padding=1))])",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_141": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "num_init_features",
                            "Name"
                        ],
                        [
                            "num_features + num_layers * growth_rate",
                            "BinOp"
                        ],
                        [
                            "num_features // 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "relu_145": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.features(x)",
                            "Call"
                        ]
                    ]
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "avg_pool3d_148": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.relu(features, inplace=True)",
                            "Call"
                        ],
                        [
                            "F.avg_pool3d(out, kernel_size=(last_duration, last_size, last_size)).view(features.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.classifier(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(last_duration, last_size, last_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "dropout_73": {
                "variable": {
                    "value": "new_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_features",
                    "type": "Call",
                    "possible_values": [
                        [
                            "super(_DenseLayer, self).forward(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(new_features, p=self.drop_rate, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.drop_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_74": {
                "tensors": {
                    "value": "[x, new_features]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm3d_60": {
                "num_features": {
                    "value": "num_input_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_61": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv3d_62": {
                "in_channels": {
                    "value": "num_input_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "bn_size * growth_rate",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm3d_64": {
                "num_features": {
                    "value": "bn_size * growth_rate",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_65": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv3d_66": {
                "in_channels": {
                    "value": "bn_size * growth_rate",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "growth_rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm3d_88": {
                "num_features": {
                    "value": "num_input_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_89": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv3d_90": {
                "in_channels": {
                    "value": "num_input_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_output_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AvgPool3d_92": {
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_138": {
                "num_features": {
                    "value": "num_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "num_init_features",
                            "Name"
                        ],
                        [
                            "num_features + num_layers * growth_rate",
                            "BinOp"
                        ],
                        [
                            "num_features // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv3d_118": {
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_init_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "7",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm3d_120": {
                "num_features": {
                    "value": "num_init_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_121": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool3d_122": {
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "preprocess/models/pre_act_resnet.py": {
        "torch": {
            "avg_pool3d_18": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Tensor_19": {
                "variable": {
                    "value": "zero_pads",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv3d_13": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm3d_35": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "inplanes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm3d_37": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_39": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm3d_67": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "inplanes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv3d_68": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm3d_69": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv3d_70": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm3d_72": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv3d_73": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_74": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv3d_108": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm3d_110": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_111": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool3d_112": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AvgPool3d_119": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(last_duration, last_size, last_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_120": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "400",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_25": {
                "tensors": {
                    "value": "[out.data, zero_pads]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_150": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_138": {
                "variable": {
                    "value": "downsample",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv3d_139": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm3d_141": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "preprocess/models/resnet.py": {
        "torch": {
            "avg_pool3d_18": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Tensor_19": {
                "variable": {
                    "value": "zero_pads",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv3d_13": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm3d_36": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_37": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm3d_39": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv3d_67": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm3d_68": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv3d_69": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm3d_71": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv3d_72": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm3d_73": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_74": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv3d_108": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm3d_110": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_111": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool3d_112": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AvgPool3d_119": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(last_duration, last_size, last_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_120": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "400",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_25": {
                "tensors": {
                    "value": "[out.data, zero_pads]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_150": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_138": {
                "variable": {
                    "value": "downsample",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv3d_139": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm3d_141": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "preprocess/models/resnext.py": {
        "torch": {
            "avg_pool3d_18": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Tensor_19": {
                "variable": {
                    "value": "zero_pads",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv3d_13": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv3d_36": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "mid_planes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cardinality * int(planes / 32)",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm3d_37": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "mid_planes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cardinality * int(planes / 32)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv3d_38": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "mid_planes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cardinality * int(planes / 32)",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "mid_planes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cardinality * int(planes / 32)",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "cardinality",
                    "type": "Name",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm3d_40": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "mid_planes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cardinality * int(planes / 32)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv3d_41": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "mid_planes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cardinality * int(planes / 32)",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes * self.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm3d_42": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes * self.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_43": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv3d_77": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm3d_79": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_80": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool3d_81": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AvgPool3d_88": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(last_duration, last_size, last_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_89": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "cardinality * 32 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "400",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_25": {
                "tensors": {
                    "value": "[out.data, zero_pads]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_119": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_107": {
                "variable": {
                    "value": "downsample",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv3d_108": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm3d_110": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "preprocess/models/wide_resnet.py": {
        "torch": {
            "avg_pool3d_18": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Tensor_19": {
                "variable": {
                    "value": "zero_pads",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv3d_13": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv3d_35": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm3d_36": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv3d_37": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm3d_39": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv3d_40": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * self.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm3d_41": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes * self.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_42": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv3d_76": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm3d_78": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_79": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool3d_80": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AvgPool3d_87": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(last_duration, last_size, last_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_88": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * k * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "400",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_25": {
                "tensors": {
                    "value": "[out.data, zero_pads]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_118": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_106": {
                "variable": {
                    "value": "downsample",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv3d_107": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm3d_109": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "preprocess/preprocess_features.py": {
        "torch": {
            "Sequential_25": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(cnn.children())[:-1]",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_36": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "build_resnet()",
                            "Call"
                        ],
                        [
                            "build_resnext()",
                            "Call"
                        ],
                        [
                            "build_resnet()",
                            "Call"
                        ],
                        [
                            "build_resnext()",
                            "Call"
                        ],
                        [
                            "build_resnet()",
                            "Call"
                        ],
                        [
                            "build_resnext()",
                            "Call"
                        ],
                        [
                            "torch.nn.Sequential(*list(cnn.children())[:-1])",
                            "Call"
                        ],
                        [
                            "resnext.resnet101(num_classes=400, shortcut_type='B', cardinality=32, sample_size=112, sample_duration=16, last_fc=False)",
                            "Call"
                        ],
                        [
                            "model.cuda()",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model, device_ids=None)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_38": {
                "variable": {
                    "value": "model_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "./pretrained/resnext-101-kinetics.pth",
                    "type": "Constant",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_236": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_58": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_device_235": {
                "device": {
                    "value": "args.gpu_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "Adam_85": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "cfg.train.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_121": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_83": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "modelset.DualVGR(**model_kwargs).to(device)",
                            "Call"
                        ],
                        [
                            "model.cuda()",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model, device_ids=None)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_116": {
                "variable": {
                    "value": "ckpt",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "ckpt",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(cfg.dataset.save_dir, 'ckpt', 'model.pt')",
                            "Call"
                        ],
                        [
                            "torch.load(ckpt, map_location=lambda storage, loc: storage)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "index_select_338": {
                "input": {
                    "value": "a",
                    "type": "Name",
                    "possible_values": [
                        [
                            "a.repeat(*repeat_idx)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "index": {
                    "value": "order_index",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.LongTensor(np.concatenate([init_dim * np.arange(n_tile) + i for i in range(init_dim)])).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "save_367": {
                "obj": {
                    "value": "state",
                    "type": "Name",
                    "possible_values": [
                        [
                            "{'epoch': epoch, 'state_dict': model.state_dict(), 'optimizer': optimizer.state_dict(), 'model_kwargs': model_kwargs}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "filename",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "manual_seed_425": {
                "seed": {
                    "value": "cfg.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_427": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_device_387": {
                "device": {
                    "value": "cfg.gpu_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_428": {
                "seed": {
                    "value": "cfg.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_78": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_80": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__158": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "12",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_count_82": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils.py": {
        "torch": {
            "normalize_13": {
                "variable": {
                    "value": "emb1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "emb1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "emb1 - torch.mean(emb1, dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "torch.nn.functional.normalize(emb1, p=2, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "normalize_14": {
                "variable": {
                    "value": "emb2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "emb2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "emb2 - torch.mean(emb2, dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "torch.nn.functional.normalize(emb2, p=2, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bmm_15": {
                "variable": {
                    "value": "cov1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "emb1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "emb1 - torch.mean(emb1, dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "torch.nn.functional.normalize(emb1, p=2, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "torch.transpose(emb1, 1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_16": {
                "variable": {
                    "value": "cov2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "emb2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "emb2 - torch.mean(emb2, dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "torch.nn.functional.normalize(emb2, p=2, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "torch.transpose(emb2, 1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_17": {
                "variable": {
                    "value": "cost",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(cov1 - cov2) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "bmm_23": {
                "variable": {
                    "value": "K1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "emb1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "emb1 - torch.mean(emb1, dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "torch.nn.functional.normalize(emb1, p=2, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "torch.transpose(emb1, 1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_24": {
                "variable": {
                    "value": "K2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "emb2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "emb2 - torch.mean(emb2, dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "torch.nn.functional.normalize(emb2, p=2, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "torch.transpose(emb2, 1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_25": {
                "variable": {
                    "value": "RK1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "R.expand_as(K1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "K1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.bmm(emb1, torch.transpose(emb1, 1, 2))",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_26": {
                "variable": {
                    "value": "RK2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "R.expand_as(K2)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "K2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.bmm(emb2, torch.transpose(emb2, 1, 2))",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_27": {
                "variable": {
                    "value": "ans",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "RK1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.bmm(R.expand_as(K1), K1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "RK2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.bmm(R.expand_as(K2), K2)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_11": {
                "input": {
                    "value": "emb1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "emb1 - torch.mean(emb1, dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "torch.nn.functional.normalize(emb1, p=2, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_12": {
                "input": {
                    "value": "emb2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "emb2 - torch.mean(emb2, dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "torch.nn.functional.normalize(emb2, p=2, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_15": {
                "input": {
                    "value": "emb1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "emb1 - torch.mean(emb1, dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "torch.nn.functional.normalize(emb1, p=2, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_16": {
                "input": {
                    "value": "emb2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "emb2 - torch.mean(emb2, dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "torch.nn.functional.normalize(emb2, p=2, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "eye_22": {
                "n": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "transpose_23": {
                "input": {
                    "value": "emb1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "emb1 - torch.mean(emb1, dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "torch.nn.functional.normalize(emb1, p=2, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_24": {
                "input": {
                    "value": "emb2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "emb2 - torch.mean(emb2, dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "torch.nn.functional.normalize(emb2, p=2, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "trace_30": {
                "input": {
                    "value": "ans[index]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_22": {
                "*size": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "validate.py": {
        "torch": {
            "load_255": {
                "variable": {
                    "value": "loaded",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "ckpt",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(cfg.dataset.save_dir, 'ckpt', 'common_specific_gatepunishfinal12021-01-24_Sunday_10:08:22_model.pt')",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_250": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}