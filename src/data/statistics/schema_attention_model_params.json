{
    "train.py": {
        "sklearn": {
            "f1_score_108": {
                "variable": {
                    "value": "f1",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "true + batch['action'].cpu().tolist()",
                            "BinOp"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "pred + action_preds",
                            "BinOp"
                        ]
                    ]
                },
                "average": {
                    "value": "weighted",
                    "type": "str",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "DataLoader_232": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filter_dataset(dataset, data_type=data_type, percentage=1.0, domain=exp_setting.get('domain'), exclude=True, train=True)",
                            "Call"
                        ],
                        [
                            "filter_dataset(dataset, data_type=data_type, percentage=1.0, task=exp_setting.get('task'), exclude=True, train=True)",
                            "Call"
                        ],
                        [
                            "filter_dataset(dataset, data_type=data_type, percentage=0.8, train=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_237": {
                "variable": {
                    "value": "schema_train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "schema",
                    "type": "variable",
                    "possible_values": [
                        [
                            "NextActionSchema(args.schema_path, sc_tokenizer, args.schema_max_seq_length, dataset.action_label_to_id if args.task == 'action' else action_label_to_id, token_vocab_name)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "min(len(schema), args.train_batch_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_242": {
                "variable": {
                    "value": "schema_test_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "schema",
                    "type": "variable",
                    "possible_values": [
                        [
                            "NextActionSchema(args.schema_path, sc_tokenizer, args.schema_max_seq_length, dataset.action_label_to_id if args.task == 'action' else action_label_to_id, token_vocab_name)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "len(schema)",
                    "type": "Call",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_247": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filter_dataset(dataset, data_type=data_type, percentage=1.0, domain=exp_setting.get('domain'), exclude=False, train=False)",
                            "Call"
                        ],
                        [
                            "filter_dataset(dataset, data_type=data_type, percentage=1.0, task=exp_setting.get('task'), exclude=False, train=False)",
                            "Call"
                        ],
                        [
                            "filter_dataset(dataset, data_type=data_type, percentage=0.2, train=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "manual_seed_129": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_143": {
                "obj": {
                    "value": "args",
                    "type": "variable",
                    "possible_values": [
                        [
                            "read_args()",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(args.output_dir, 'run_args')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_266": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_356": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.output_dir, 'model.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_53": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_55": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_73": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_99": {
                "variable": {
                    "value": "action_preds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "action_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.predict(input_ids=batch['input_ids'], attention_mask=batch['attention_mask'], token_type_ids=batch['token_type_ids'], tasks=batch['tasks'], sc_all_output=sc_all_output, sc_pooled_output=sc_pooled_output, sc_tasks=sc_tasks, sc_action_label=sc_action_label, sc_full_graph=schema_dataloader.dataset.full_graph)",
                            "Call"
                        ],
                        [
                            "model(input_ids=batch['input_ids'], attention_mask=batch['attention_mask'], token_type_ids=batch['token_type_ids'])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_354": {
                "f": {
                    "value": "os.path.join(args.output_dir, 'model.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_76": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_287": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_314": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__346": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "data_readers.py": {
        "torch": {}
    },
    "models.py": {
        "torch": {
            "Dropout_20": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_22": {
                "variable": {
                    "value": "self.action_classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.bert_model.config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_action_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_action_labels",
                            "Method Argument"
                        ],
                        [
                            "num_action_labels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_51": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_53": {
                "variable": {
                    "value": "self.action_classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.bert_model.config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_action_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_action_labels",
                            "Method Argument"
                        ],
                        [
                            "num_action_labels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_54": {
                "variable": {
                    "value": "self.p_schema",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.bert_model.config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_80": {
                "variable": {
                    "value": "i_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "all_output_flat.mm(sc_all_output.view(-1, 768).t())",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_80": {
                "variable": {
                    "value": "i_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_84": {
                "variable": {
                    "value": "action_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "probs.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "self.num_action_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scatter_add_84": {
                "variable": {
                    "value": "action_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "sc_action_label.unsqueeze(0).repeat(probs.size(0), 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "index": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i_probs.view(input_ids.size(0), -1, i_probs.size(-1)).mean(dim=1)",
                            "Call"
                        ],
                        [
                            "i_probs.view(input_ids.size(0), -1, i_probs.size(-1)).mean(dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_86": {
                "variable": {
                    "value": "sc_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.p_schema(pooled_output)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_88": {
                "variable": {
                    "value": "action_lps",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "action_probs + 1e-10",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_116": {
                "variable": {
                    "value": "i_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "all_output_flat.mm(sc_all_output.view(-1, 768).t())",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_116": {
                "variable": {
                    "value": "i_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_127": {
                "variable": {
                    "value": "action_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "probs.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "self.num_action_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scatter_add_127": {
                "variable": {
                    "value": "action_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "sc_action_label.unsqueeze(0).repeat(probs.size(0), 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "index": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i_probs.view(input_ids.size(0), -1, i_probs.size(-1)).mean(dim=1)",
                            "Call"
                        ],
                        [
                            "i_probs.view(input_ids.size(0), -1, i_probs.size(-1)).mean(dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_129": {
                "variable": {
                    "value": "sc_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.p_schema(pooled_output)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_131": {
                "variable": {
                    "value": "action_lps",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "action_probs * sc_prob",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_36": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_39": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "NLLLoss_92": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_95": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}