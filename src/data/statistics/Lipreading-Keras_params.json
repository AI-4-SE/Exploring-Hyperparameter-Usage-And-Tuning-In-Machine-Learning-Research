{
    "callbacks.py": {
        "sklearn": {},
        "tensorflow": {
            "LearningRateScheduler_39": {
                "variable": {
                    "value": "learningratescheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "schedule": {
                    "value": "step_decay",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "EarlyStopping_43": {
                "variable": {
                    "value": "earlystopping",
                    "type": "Variable",
                    "possible_values": []
                },
                "monitor": {
                    "value": "val_loss",
                    "type": "Constant",
                    "possible_values": []
                },
                "patience": {
                    "value": "6",
                    "type": "Constant",
                    "possible_values": []
                },
                "restore_best_weights": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_47": {
                "variable": {
                    "value": "reducelronplateau",
                    "type": "Variable",
                    "possible_values": []
                },
                "monitor": {
                    "value": "val_loss",
                    "type": "Constant",
                    "possible_values": []
                },
                "factor": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                },
                "patience": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "min_lr": {
                    "value": "1e-08",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clone_model_116": {
                "variable": {
                    "value": "model_clone",
                    "type": "Variable",
                    "possible_values": []
                },
                "model": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "plotting.py": {
        "sklearn": {}
    },
    "callback.py": {
        "tensorflow": {}
    },
    "generator.py": {
        "tensorflow": {}
    },
    "models/classification_models-master/sep_classification_models/tfkeras.py": {
        "tensorflow": {}
    },
    "models/classification_models-master/tests/test_models.py": {
        "tensorflow": {
            "load_model_97": {
                "variable": {
                    "value": "model2",
                    "type": "Variable",
                    "possible_values": []
                },
                "filepath": {
                    "value": "model.h5",
                    "type": "Constant",
                    "possible_values": []
                },
                "compile": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clear_session_60": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models/mish.py": {
        "tensorflow": {
            "get_custom_objects_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tanh_31": {
                "x": {
                    "value": "K.softplus(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softplus_31": {
                "features": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "models/resnet_lstm_lipread.py": {
        "tensorflow": {
            "Sequential_34": {
                "variable": {
                    "value": "frontend3D",
                    "type": "Variable",
                    "possible_values": []
                },
                "layers": {
                    "value": "[ZeroPadding3D(padding=(2, 3, 3)), Conv3D(64, kernel_size=(5, 7, 7), strides=(1, 2, 2), padding='valid', use_bias=False), BatchNormalization(), Activation('relu'), ZeroPadding3D(padding=(0, 4, 8)), MaxPooling3D(pool_size=(1, 2, 3), strides=(1, 1, 2))]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_44": {
                "variable": {
                    "value": "backend_conv1",
                    "type": "Variable",
                    "possible_values": []
                },
                "layers": {
                    "value": "[Conv1D(2 * inputDim, 5, strides=2, use_bias=False), BatchNormalization(), Activation('relu'), MaxPooling1D(2, 2), Conv1D(4 * inputDim, 5, strides=2, use_bias=False), BatchNormalization(), Activation('relu')]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_56": {
                "variable": {
                    "value": "backend_conv2",
                    "type": "Variable",
                    "possible_values": []
                },
                "layers": {
                    "value": "[Dense(inputDim), BatchNormalization(), Activation('relu'), Dense(nClasses)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Model_107": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "input_frames",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Input(shape=(frameLen, 50, 100, 1), name='frames_input')",
                            "Call"
                        ]
                    ]
                },
                "outputs": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "frontend3D(input_frames)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: tf.reshape(x, [-1, int(x.shape[2]), int(x.shape[3]), int(x.shape[4])]), name='lambda2')(x)",
                            "Call"
                        ],
                        [
                            "resnet18(x)",
                            "Call"
                        ],
                        [
                            "GlobalAveragePooling2D(name='global_avgpool_resnet')(x)",
                            "Call"
                        ],
                        [
                            "Dense(inputDim, name='dense_resnet')(x)",
                            "Call"
                        ],
                        [
                            "BatchNormalization(name='bn_resnet')(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: tf.reshape(x, [-1, frameLen, inputDim]), name='lambda3')(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: tf.transpose(x, [0, 2, 1]), name='lambda4')(x)",
                            "Call"
                        ],
                        [
                            "backend_conv1(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: tf.reduce_mean(x, 2), name='lambda5')(x)",
                            "Call"
                        ],
                        [
                            "backend_conv2(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: tf.reshape(x, [-1, frameLen, inputDim]), name='lambda6')(x)",
                            "Call"
                        ],
                        [
                            "GRU(x, inputDim, hiddenDim, nLayers, nClasses, every_frame)",
                            "Call"
                        ]
                    ]
                }
            },
            "Lambda_73": {
                "function": {
                    "value": "lambda x: tf.reshape(x, [-1, int(x.shape[2]), int(x.shape[3]), int(x.shape[4])])",
                    "type": "Lambda",
                    "possible_values": []
                },
                "name": {
                    "value": "lambda2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "GRU_23": {
                "units": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "return_sequences": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "Orthogonal",
                    "type": "Constant",
                    "possible_values": []
                },
                "reset_after": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "gru1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "GRU_24": {
                "units": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "return_sequences": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "Orthogonal",
                    "type": "Constant",
                    "possible_values": []
                },
                "reset_after": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "gru2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Lambda_91": {
                "function": {
                    "value": "lambda x: tf.reshape(x, [-1, frameLen, inputDim])",
                    "type": "Lambda",
                    "possible_values": []
                },
                "name": {
                    "value": "lambda3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Lambda_93": {
                "function": {
                    "value": "lambda x: tf.transpose(x, [0, 2, 1])",
                    "type": "Lambda",
                    "possible_values": []
                },
                "name": {
                    "value": "lambda4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Lambda_95": {
                "function": {
                    "value": "lambda x: tf.reduce_mean(x, 2)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "name": {
                    "value": "lambda5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_73": {
                "tensor": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "frontend3D(input_frames)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: tf.reshape(x, [-1, int(x.shape[2]), int(x.shape[3]), int(x.shape[4])]), name='lambda2')(x)",
                            "Call"
                        ],
                        [
                            "resnet18(x)",
                            "Call"
                        ],
                        [
                            "GlobalAveragePooling2D(name='global_avgpool_resnet')(x)",
                            "Call"
                        ],
                        [
                            "Dense(inputDim, name='dense_resnet')(x)",
                            "Call"
                        ],
                        [
                            "BatchNormalization(name='bn_resnet')(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: tf.reshape(x, [-1, frameLen, inputDim]), name='lambda3')(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: tf.transpose(x, [0, 2, 1]), name='lambda4')(x)",
                            "Call"
                        ],
                        [
                            "backend_conv1(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: tf.reduce_mean(x, 2), name='lambda5')(x)",
                            "Call"
                        ],
                        [
                            "backend_conv2(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: tf.reshape(x, [-1, frameLen, inputDim]), name='lambda6')(x)",
                            "Call"
                        ],
                        [
                            "GRU(x, inputDim, hiddenDim, nLayers, nClasses, every_frame)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, int(x.shape[2]), int(x.shape[3]), int(x.shape[4])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Lambda_99": {
                "function": {
                    "value": "lambda x: tf.reshape(x, [-1, frameLen, inputDim])",
                    "type": "Lambda",
                    "possible_values": []
                },
                "name": {
                    "value": "lambda6",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_91": {
                "tensor": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "frontend3D(input_frames)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: tf.reshape(x, [-1, int(x.shape[2]), int(x.shape[3]), int(x.shape[4])]), name='lambda2')(x)",
                            "Call"
                        ],
                        [
                            "resnet18(x)",
                            "Call"
                        ],
                        [
                            "GlobalAveragePooling2D(name='global_avgpool_resnet')(x)",
                            "Call"
                        ],
                        [
                            "Dense(inputDim, name='dense_resnet')(x)",
                            "Call"
                        ],
                        [
                            "BatchNormalization(name='bn_resnet')(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: tf.reshape(x, [-1, frameLen, inputDim]), name='lambda3')(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: tf.transpose(x, [0, 2, 1]), name='lambda4')(x)",
                            "Call"
                        ],
                        [
                            "backend_conv1(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: tf.reduce_mean(x, 2), name='lambda5')(x)",
                            "Call"
                        ],
                        [
                            "backend_conv2(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: tf.reshape(x, [-1, frameLen, inputDim]), name='lambda6')(x)",
                            "Call"
                        ],
                        [
                            "GRU(x, inputDim, hiddenDim, nLayers, nClasses, every_frame)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, frameLen, inputDim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_93": {
                "a": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "frontend3D(input_frames)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: tf.reshape(x, [-1, int(x.shape[2]), int(x.shape[3]), int(x.shape[4])]), name='lambda2')(x)",
                            "Call"
                        ],
                        [
                            "resnet18(x)",
                            "Call"
                        ],
                        [
                            "GlobalAveragePooling2D(name='global_avgpool_resnet')(x)",
                            "Call"
                        ],
                        [
                            "Dense(inputDim, name='dense_resnet')(x)",
                            "Call"
                        ],
                        [
                            "BatchNormalization(name='bn_resnet')(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: tf.reshape(x, [-1, frameLen, inputDim]), name='lambda3')(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: tf.transpose(x, [0, 2, 1]), name='lambda4')(x)",
                            "Call"
                        ],
                        [
                            "backend_conv1(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: tf.reduce_mean(x, 2), name='lambda5')(x)",
                            "Call"
                        ],
                        [
                            "backend_conv2(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: tf.reshape(x, [-1, frameLen, inputDim]), name='lambda6')(x)",
                            "Call"
                        ],
                        [
                            "GRU(x, inputDim, hiddenDim, nLayers, nClasses, every_frame)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_95": {
                "input_tensor": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "frontend3D(input_frames)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: tf.reshape(x, [-1, int(x.shape[2]), int(x.shape[3]), int(x.shape[4])]), name='lambda2')(x)",
                            "Call"
                        ],
                        [
                            "resnet18(x)",
                            "Call"
                        ],
                        [
                            "GlobalAveragePooling2D(name='global_avgpool_resnet')(x)",
                            "Call"
                        ],
                        [
                            "Dense(inputDim, name='dense_resnet')(x)",
                            "Call"
                        ],
                        [
                            "BatchNormalization(name='bn_resnet')(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: tf.reshape(x, [-1, frameLen, inputDim]), name='lambda3')(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: tf.transpose(x, [0, 2, 1]), name='lambda4')(x)",
                            "Call"
                        ],
                        [
                            "backend_conv1(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: tf.reduce_mean(x, 2), name='lambda5')(x)",
                            "Call"
                        ],
                        [
                            "backend_conv2(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: tf.reshape(x, [-1, frameLen, inputDim]), name='lambda6')(x)",
                            "Call"
                        ],
                        [
                            "GRU(x, inputDim, hiddenDim, nLayers, nClasses, every_frame)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_99": {
                "tensor": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "frontend3D(input_frames)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: tf.reshape(x, [-1, int(x.shape[2]), int(x.shape[3]), int(x.shape[4])]), name='lambda2')(x)",
                            "Call"
                        ],
                        [
                            "resnet18(x)",
                            "Call"
                        ],
                        [
                            "GlobalAveragePooling2D(name='global_avgpool_resnet')(x)",
                            "Call"
                        ],
                        [
                            "Dense(inputDim, name='dense_resnet')(x)",
                            "Call"
                        ],
                        [
                            "BatchNormalization(name='bn_resnet')(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: tf.reshape(x, [-1, frameLen, inputDim]), name='lambda3')(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: tf.transpose(x, [0, 2, 1]), name='lambda4')(x)",
                            "Call"
                        ],
                        [
                            "backend_conv1(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: tf.reduce_mean(x, 2), name='lambda5')(x)",
                            "Call"
                        ],
                        [
                            "backend_conv2(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: tf.reshape(x, [-1, frameLen, inputDim]), name='lambda6')(x)",
                            "Call"
                        ],
                        [
                            "GRU(x, inputDim, hiddenDim, nLayers, nClasses, every_frame)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, frameLen, inputDim]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "models/resnet_lstm_lipread_ctc.py": {
        "tensorflow": {
            "reshape_66": {
                "tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, x.shape[2], x.shape[3], x.shape[4]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_96": {
                "tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.frameLen, self.inputDim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_98": {
                "a": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_100": {
                "input_tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_104": {
                "tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.frameLen, self.inputDim]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "models/sep_resnet_lstm_lipread.py": {
        "tensorflow": {
            "Sequential_34": {
                "variable": {
                    "value": "frontend3D",
                    "type": "Variable",
                    "possible_values": []
                },
                "layers": {
                    "value": "[ZeroPadding3D(padding=(2, 3, 3)), Conv3D(64, kernel_size=(5, 7, 7), strides=(1, 2, 2), padding='valid', use_bias=False), BatchNormalization(), Activation('relu'), ZeroPadding3D(padding=(0, 4, 8)), MaxPooling3D(pool_size=(1, 2, 3), strides=(1, 1, 2))]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_44": {
                "variable": {
                    "value": "backend_conv1",
                    "type": "Variable",
                    "possible_values": []
                },
                "layers": {
                    "value": "[Conv1D(2 * inputDim, 5, strides=2, use_bias=False), BatchNormalization(), Activation('relu'), MaxPooling1D(2, 2), Conv1D(4 * inputDim, 5, strides=2, use_bias=False), BatchNormalization(), Activation('relu')]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_56": {
                "variable": {
                    "value": "backend_conv2",
                    "type": "Variable",
                    "possible_values": []
                },
                "layers": {
                    "value": "[Dense(inputDim), BatchNormalization(), Activation('relu'), Dense(nClasses)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Model_107": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "input_frames",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Input(shape=(frameLen, 50, 100, 1), name='frames_input')",
                            "Call"
                        ]
                    ]
                },
                "outputs": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "frontend3D(input_frames)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: tf.reshape(x, [-1, int(x.shape[2]), int(x.shape[3]), int(x.shape[4])]), name='lambda2')(x)",
                            "Call"
                        ],
                        [
                            "resnet18(x)",
                            "Call"
                        ],
                        [
                            "GlobalAveragePooling2D(name='global_avgpool_resnet')(x)",
                            "Call"
                        ],
                        [
                            "Dense(inputDim, name='dense_resnet')(x)",
                            "Call"
                        ],
                        [
                            "BatchNormalization(name='bn_resnet')(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: tf.reshape(x, [-1, frameLen, inputDim]), name='lambda3')(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: tf.transpose(x, [0, 2, 1]), name='lambda4')(x)",
                            "Call"
                        ],
                        [
                            "backend_conv1(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: tf.reduce_mean(x, 2), name='lambda5')(x)",
                            "Call"
                        ],
                        [
                            "backend_conv2(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: tf.reshape(x, [-1, frameLen, inputDim]), name='lambda6')(x)",
                            "Call"
                        ],
                        [
                            "GRU(x, inputDim, hiddenDim, nLayers, nClasses, every_frame)",
                            "Call"
                        ]
                    ]
                }
            },
            "Lambda_73": {
                "function": {
                    "value": "lambda x: tf.reshape(x, [-1, int(x.shape[2]), int(x.shape[3]), int(x.shape[4])])",
                    "type": "Lambda",
                    "possible_values": []
                },
                "name": {
                    "value": "lambda2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "GRU_23": {
                "units": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "return_sequences": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "Orthogonal",
                    "type": "Constant",
                    "possible_values": []
                },
                "reset_after": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "gru1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "GRU_24": {
                "units": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "return_sequences": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "Orthogonal",
                    "type": "Constant",
                    "possible_values": []
                },
                "reset_after": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "gru2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Lambda_91": {
                "function": {
                    "value": "lambda x: tf.reshape(x, [-1, frameLen, inputDim])",
                    "type": "Lambda",
                    "possible_values": []
                },
                "name": {
                    "value": "lambda3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Lambda_93": {
                "function": {
                    "value": "lambda x: tf.transpose(x, [0, 2, 1])",
                    "type": "Lambda",
                    "possible_values": []
                },
                "name": {
                    "value": "lambda4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Lambda_95": {
                "function": {
                    "value": "lambda x: tf.reduce_mean(x, 2)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "name": {
                    "value": "lambda5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_73": {
                "tensor": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "frontend3D(input_frames)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: tf.reshape(x, [-1, int(x.shape[2]), int(x.shape[3]), int(x.shape[4])]), name='lambda2')(x)",
                            "Call"
                        ],
                        [
                            "resnet18(x)",
                            "Call"
                        ],
                        [
                            "GlobalAveragePooling2D(name='global_avgpool_resnet')(x)",
                            "Call"
                        ],
                        [
                            "Dense(inputDim, name='dense_resnet')(x)",
                            "Call"
                        ],
                        [
                            "BatchNormalization(name='bn_resnet')(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: tf.reshape(x, [-1, frameLen, inputDim]), name='lambda3')(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: tf.transpose(x, [0, 2, 1]), name='lambda4')(x)",
                            "Call"
                        ],
                        [
                            "backend_conv1(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: tf.reduce_mean(x, 2), name='lambda5')(x)",
                            "Call"
                        ],
                        [
                            "backend_conv2(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: tf.reshape(x, [-1, frameLen, inputDim]), name='lambda6')(x)",
                            "Call"
                        ],
                        [
                            "GRU(x, inputDim, hiddenDim, nLayers, nClasses, every_frame)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, int(x.shape[2]), int(x.shape[3]), int(x.shape[4])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Lambda_99": {
                "function": {
                    "value": "lambda x: tf.reshape(x, [-1, frameLen, inputDim])",
                    "type": "Lambda",
                    "possible_values": []
                },
                "name": {
                    "value": "lambda6",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_91": {
                "tensor": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "frontend3D(input_frames)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: tf.reshape(x, [-1, int(x.shape[2]), int(x.shape[3]), int(x.shape[4])]), name='lambda2')(x)",
                            "Call"
                        ],
                        [
                            "resnet18(x)",
                            "Call"
                        ],
                        [
                            "GlobalAveragePooling2D(name='global_avgpool_resnet')(x)",
                            "Call"
                        ],
                        [
                            "Dense(inputDim, name='dense_resnet')(x)",
                            "Call"
                        ],
                        [
                            "BatchNormalization(name='bn_resnet')(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: tf.reshape(x, [-1, frameLen, inputDim]), name='lambda3')(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: tf.transpose(x, [0, 2, 1]), name='lambda4')(x)",
                            "Call"
                        ],
                        [
                            "backend_conv1(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: tf.reduce_mean(x, 2), name='lambda5')(x)",
                            "Call"
                        ],
                        [
                            "backend_conv2(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: tf.reshape(x, [-1, frameLen, inputDim]), name='lambda6')(x)",
                            "Call"
                        ],
                        [
                            "GRU(x, inputDim, hiddenDim, nLayers, nClasses, every_frame)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, frameLen, inputDim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_93": {
                "a": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "frontend3D(input_frames)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: tf.reshape(x, [-1, int(x.shape[2]), int(x.shape[3]), int(x.shape[4])]), name='lambda2')(x)",
                            "Call"
                        ],
                        [
                            "resnet18(x)",
                            "Call"
                        ],
                        [
                            "GlobalAveragePooling2D(name='global_avgpool_resnet')(x)",
                            "Call"
                        ],
                        [
                            "Dense(inputDim, name='dense_resnet')(x)",
                            "Call"
                        ],
                        [
                            "BatchNormalization(name='bn_resnet')(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: tf.reshape(x, [-1, frameLen, inputDim]), name='lambda3')(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: tf.transpose(x, [0, 2, 1]), name='lambda4')(x)",
                            "Call"
                        ],
                        [
                            "backend_conv1(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: tf.reduce_mean(x, 2), name='lambda5')(x)",
                            "Call"
                        ],
                        [
                            "backend_conv2(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: tf.reshape(x, [-1, frameLen, inputDim]), name='lambda6')(x)",
                            "Call"
                        ],
                        [
                            "GRU(x, inputDim, hiddenDim, nLayers, nClasses, every_frame)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_95": {
                "input_tensor": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "frontend3D(input_frames)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: tf.reshape(x, [-1, int(x.shape[2]), int(x.shape[3]), int(x.shape[4])]), name='lambda2')(x)",
                            "Call"
                        ],
                        [
                            "resnet18(x)",
                            "Call"
                        ],
                        [
                            "GlobalAveragePooling2D(name='global_avgpool_resnet')(x)",
                            "Call"
                        ],
                        [
                            "Dense(inputDim, name='dense_resnet')(x)",
                            "Call"
                        ],
                        [
                            "BatchNormalization(name='bn_resnet')(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: tf.reshape(x, [-1, frameLen, inputDim]), name='lambda3')(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: tf.transpose(x, [0, 2, 1]), name='lambda4')(x)",
                            "Call"
                        ],
                        [
                            "backend_conv1(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: tf.reduce_mean(x, 2), name='lambda5')(x)",
                            "Call"
                        ],
                        [
                            "backend_conv2(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: tf.reshape(x, [-1, frameLen, inputDim]), name='lambda6')(x)",
                            "Call"
                        ],
                        [
                            "GRU(x, inputDim, hiddenDim, nLayers, nClasses, every_frame)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_99": {
                "tensor": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "frontend3D(input_frames)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: tf.reshape(x, [-1, int(x.shape[2]), int(x.shape[3]), int(x.shape[4])]), name='lambda2')(x)",
                            "Call"
                        ],
                        [
                            "resnet18(x)",
                            "Call"
                        ],
                        [
                            "GlobalAveragePooling2D(name='global_avgpool_resnet')(x)",
                            "Call"
                        ],
                        [
                            "Dense(inputDim, name='dense_resnet')(x)",
                            "Call"
                        ],
                        [
                            "BatchNormalization(name='bn_resnet')(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: tf.reshape(x, [-1, frameLen, inputDim]), name='lambda3')(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: tf.transpose(x, [0, 2, 1]), name='lambda4')(x)",
                            "Call"
                        ],
                        [
                            "backend_conv1(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: tf.reduce_mean(x, 2), name='lambda5')(x)",
                            "Call"
                        ],
                        [
                            "backend_conv2(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: tf.reshape(x, [-1, frameLen, inputDim]), name='lambda6')(x)",
                            "Call"
                        ],
                        [
                            "GRU(x, inputDim, hiddenDim, nLayers, nClasses, every_frame)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, frameLen, inputDim]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "predict_grid.py": {
        "tensorflow": {
            "ConfigProto_37": {
                "variable": {
                    "value": "config",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_39": {
                "config": {
                    "value": "config",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "predict_lip.py": {
        "tensorflow": {
            "ConfigProto_38": {
                "variable": {
                    "value": "config",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_40": {
                "config": {
                    "value": "config",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "train.py": {
        "tensorflow": {
            "list_physical_devices_36": {
                "variable": {
                    "value": "gpus",
                    "type": "Variable",
                    "possible_values": []
                },
                "device_type": {
                    "value": "GPU",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "list_logical_devices_42": {
                "variable": {
                    "value": "logical_gpus",
                    "type": "Variable",
                    "possible_values": []
                },
                "device_type": {
                    "value": "GPU",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "set_memory_growth_41": {
                "device": {
                    "value": "gpu",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "gpus",
                            "Name"
                        ]
                    ]
                },
                "enable": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "video_utils.py": {
        "tensorflow": {}
    }
}