{
    "curve/apis/train.py": {
        "torch": {}
    },
    "curve/core/anchor/cheby_target.py": {
        "torch": {
            "zeros_132": {
                "variable": {
                    "value": "bbox_targets",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_valid_anchors, num_coords - 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_134": {
                "variable": {
                    "value": "bbox_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_valid_anchors, 360)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_135": {
                "variable": {
                    "value": "ctr_targets",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_valid_anchors, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_136": {
                "variable": {
                    "value": "ctr_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_valid_anchors, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_34": {
                "variable": {
                    "value": "anchor_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "anchor_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_35": {
                "variable": {
                    "value": "valid_flag_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "valid_flag_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "flatten_49": {
                "variable": {
                    "value": "bbox_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bbox_pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "bbox_preds",
                            "Name"
                        ],
                        [
                            "bbox_pred[i, ...].permute(1, 2, 0)",
                            "Call"
                        ],
                        [
                            "torch.flatten(bbox_pred, start_dim=0, end_dim=1)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_51": {
                "tensors": {
                    "value": "pred_list_per_img",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "curve/core/anchor/fourier_target.py": {
        "torch": {
            "zeros_134": {
                "variable": {
                    "value": "bbox_targets",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_valid_anchors, num_coefs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_136": {
                "variable": {
                    "value": "bbox_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_valid_anchors, num_coefs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_137": {
                "variable": {
                    "value": "ctr_targets",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_valid_anchors, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_138": {
                "variable": {
                    "value": "ctr_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_valid_anchors, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_34": {
                "variable": {
                    "value": "anchor_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "anchor_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_35": {
                "variable": {
                    "value": "valid_flag_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "valid_flag_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "flatten_49": {
                "variable": {
                    "value": "bbox_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bbox_pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "bbox_preds",
                            "Name"
                        ],
                        [
                            "bbox_pred[i, ...].permute(1, 2, 0)",
                            "Call"
                        ],
                        [
                            "torch.flatten(bbox_pred, start_dim=0, end_dim=1)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_51": {
                "tensors": {
                    "value": "pred_list_per_img",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "curve/core/anchor/offset_target.py": {
        "torch": {
            "zeros_129": {
                "variable": {
                    "value": "bbox_targets",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_valid_anchors, num_coords)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_130": {
                "variable": {
                    "value": "bbox_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_valid_anchors, num_coords)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_34": {
                "variable": {
                    "value": "anchor_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "anchor_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_35": {
                "variable": {
                    "value": "valid_flag_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "valid_flag_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "flatten_49": {
                "variable": {
                    "value": "bbox_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bbox_pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "bbox_preds",
                            "Name"
                        ],
                        [
                            "bbox_pred[i, ...].permute(1, 2, 0)",
                            "Call"
                        ],
                        [
                            "torch.flatten(bbox_pred, start_dim=0, end_dim=1)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_151": {
                "variable": {
                    "value": "pos_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pos_bbox_targets[:, -2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_51": {
                "tensors": {
                    "value": "pred_list_per_img",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "curve/core/anchor/radius_target.py": {
        "torch": {
            "zeros_132": {
                "variable": {
                    "value": "bbox_targets",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_valid_anchors, num_coords - 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_133": {
                "variable": {
                    "value": "bbox_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_valid_anchors, num_coords - 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_134": {
                "variable": {
                    "value": "ctr_targets",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_valid_anchors, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_135": {
                "variable": {
                    "value": "ctr_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_valid_anchors, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_34": {
                "variable": {
                    "value": "anchor_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "anchor_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_35": {
                "variable": {
                    "value": "valid_flag_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "valid_flag_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "flatten_49": {
                "variable": {
                    "value": "bbox_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bbox_pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "bbox_preds",
                            "Name"
                        ],
                        [
                            "bbox_pred[i, ...].permute(1, 2, 0)",
                            "Call"
                        ],
                        [
                            "torch.flatten(bbox_pred, start_dim=0, end_dim=1)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_51": {
                "tensors": {
                    "value": "pred_list_per_img",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "curve/core/bbox/assigners/center_assigner.py": {
        "torch": {
            "max_154": {
                "variable": {
                    "value": "gt_bbox_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_x_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "gt_bboxes[:, 0::2].max(dim=1)[0] - gt_bboxes[:, 0::2].min(dim=1)[0] + 1",
                            "BinOp"
                        ],
                        [
                            "gt_bboxes[:, 0::2].max(dim=1)[0] - gt_bboxes[:, 0::2].min(dim=1)[0] + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mean_159": {
                "variable": {
                    "value": "anchor_centers[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "anchors[:, 0::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_160": {
                "variable": {
                    "value": "anchor_centers[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "anchors[:, 1::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_162": {
                "variable": {
                    "value": "dists",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "anchor_centers[:, None, :] - gt_centers",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "clamp_163": {
                "variable": {
                    "value": "cn",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1.0 - 2.0 * dists / gt_bbox_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "round_189": {
                "variable": {
                    "value": "gt_centers",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_bboxes[:, -2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "round_209": {
                "variable": {
                    "value": "gt_centers",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_bboxes[:, -2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mean_212": {
                "variable": {
                    "value": "anchor_centers[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "anchors[:, 0::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_213": {
                "variable": {
                    "value": "anchor_centers[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "anchors[:, 1::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nonzero_138": {
                "variable": {
                    "value": "pos_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "assigned_gt_inds > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "squeeze_138": {
                "variable": {
                    "value": "pos_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "nonzero_142": {
                "variable": {
                    "value": "ignore_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "assigned_labels < 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "squeeze_142": {
                "variable": {
                    "value": "ignore_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_193": {
                "variable": {
                    "value": "left_top",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_centers[:, None] >= anchors[:, :2]",
                    "type": "Compare",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_194": {
                "variable": {
                    "value": "right_bottom",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_centers[:, None] <= anchors[:, -2:]",
                    "type": "Compare",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_200": {
                "variable": {
                    "value": "anchor_center_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "anchors[:, 0::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_201": {
                "variable": {
                    "value": "anchor_center_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "anchors[:, 1::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_216": {
                "variable": {
                    "value": "left_top",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_centers[:, None] >= anchors[:, :2]",
                    "type": "Compare",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_217": {
                "variable": {
                    "value": "right_bottom",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_centers[:, None] <= anchors[:, -2:]",
                    "type": "Compare",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "max_170": {
                "input": {
                    "value": "gt_x_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "gt_bboxes[:, 0::2].max(dim=1)[0] - gt_bboxes[:, 0::2].min(dim=1)[0] + 1",
                            "BinOp"
                        ],
                        [
                            "gt_bboxes[:, 0::2].max(dim=1)[0] - gt_bboxes[:, 0::2].min(dim=1)[0] + 1",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "curve/core/bbox/assigners/max_iou_assigner.py": {
        "torch": {
            "zeros_170": {
                "variable": {
                    "value": "intersects",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(gt_bboxes.size(0), anchors.size(0))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "nonzero_155": {
                "variable": {
                    "value": "pos_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "assigned_gt_inds > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "squeeze_155": {
                "variable": {
                    "value": "pos_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "min_172": {
                "variable": {
                    "value": "x_min",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_bboxes[k, 0::2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_173": {
                "variable": {
                    "value": "y_min",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_bboxes[k, 1::2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_174": {
                "variable": {
                    "value": "x_max",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_bboxes[k, 0::2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_175": {
                "variable": {
                    "value": "y_max",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_bboxes[k, 1::2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "where_182": {
                "condition": {
                    "value": "inter_flag > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    },
    "curve/core/bbox/samplers/base_sampler.py": {
        "torch": {
            "cat_34": {
                "variable": {
                    "value": "bboxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[gt_bboxes, bboxes]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_37": {
                "variable": {
                    "value": "gt_flags",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[gt_ones, gt_flags]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "curve/core/bbox/samplers/weighted_sampler.py": {
        "torch": {
            "multinomial_21": {
                "variable": {
                    "value": "rand_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weights.cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "num",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "unique_21": {
                "variable": {
                    "value": "rand_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "nonzero_27": {
                "variable": {
                    "value": "pos_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "assign_result.gt_inds > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "nonzero_39": {
                "variable": {
                    "value": "neg_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "assign_result.gt_inds == 0",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    },
    "curve/core/bbox/transforms.py": {
        "torch": {
            "max_21": {
                "variable": {
                    "value": "gt_box_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_x_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "gt_box[:, 0::2].max(dim=1)[0] - gt_box[:, 0::2].min(dim=1)[0] + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_23": {
                "variable": {
                    "value": "deltas",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(gt_box.size(0), gt_box.size(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "norm_30": {
                "variable": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ctr_dist",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "gt_box[:, -2:] - torch.cat([px.unsqueeze(-1), py.unsqueeze(-1)], dim=-1)",
                            "BinOp"
                        ],
                        [
                            "gt_box[:, -2:] - torch.cat([px.unsqueeze(-1), py.unsqueeze(-1)], dim=-1)",
                            "BinOp"
                        ],
                        [
                            "cheby[:, -2:] - torch.cat([px.unsqueeze(-1), py.unsqueeze(-1)], dim=-1)",
                            "BinOp"
                        ],
                        [
                            "fori[:, -2:] - torch.cat([px.unsqueeze(-1), py.unsqueeze(-1)], dim=-1)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_31": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(gt_box_size - dist) / gt_box_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "1e-08",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_52": {
                "variable": {
                    "value": "bboxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(deltas.size(0), deltas.size(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_75": {
                "variable": {
                    "value": "deltas",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(gt_box.size(0), num_coords)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "norm_83": {
                "variable": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ctr_dist",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "gt_box[:, -2:] - torch.cat([px.unsqueeze(-1), py.unsqueeze(-1)], dim=-1)",
                            "BinOp"
                        ],
                        [
                            "gt_box[:, -2:] - torch.cat([px.unsqueeze(-1), py.unsqueeze(-1)], dim=-1)",
                            "BinOp"
                        ],
                        [
                            "cheby[:, -2:] - torch.cat([px.unsqueeze(-1), py.unsqueeze(-1)], dim=-1)",
                            "BinOp"
                        ],
                        [
                            "fori[:, -2:] - torch.cat([px.unsqueeze(-1), py.unsqueeze(-1)], dim=-1)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_84": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(rmax - dist) / rmax",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "1e-08",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_112": {
                "variable": {
                    "value": "contours",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(deltas.shape[0], 360 * 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "norm_145": {
                "variable": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ctr_dist",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "gt_box[:, -2:] - torch.cat([px.unsqueeze(-1), py.unsqueeze(-1)], dim=-1)",
                            "BinOp"
                        ],
                        [
                            "gt_box[:, -2:] - torch.cat([px.unsqueeze(-1), py.unsqueeze(-1)], dim=-1)",
                            "BinOp"
                        ],
                        [
                            "cheby[:, -2:] - torch.cat([px.unsqueeze(-1), py.unsqueeze(-1)], dim=-1)",
                            "BinOp"
                        ],
                        [
                            "fori[:, -2:] - torch.cat([px.unsqueeze(-1), py.unsqueeze(-1)], dim=-1)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_146": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(cheby[:, -3] - dist) / cheby[:, -3]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "1e-08",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "norm_176": {
                "variable": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ctr_dist",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "gt_box[:, -2:] - torch.cat([px.unsqueeze(-1), py.unsqueeze(-1)], dim=-1)",
                            "BinOp"
                        ],
                        [
                            "gt_box[:, -2:] - torch.cat([px.unsqueeze(-1), py.unsqueeze(-1)], dim=-1)",
                            "BinOp"
                        ],
                        [
                            "cheby[:, -2:] - torch.cat([px.unsqueeze(-1), py.unsqueeze(-1)], dim=-1)",
                            "BinOp"
                        ],
                        [
                            "fori[:, -2:] - torch.cat([px.unsqueeze(-1), py.unsqueeze(-1)], dim=-1)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_177": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(fori[:, -3] - dist) / fori[:, -3]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "1e-08",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "mm_193": {
                "variable": {
                    "value": "r",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "coefs[:, :num_coefs]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mat2": {
                    "value": "fi",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "f_series(theta, num_coefs - 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "roll_208": {
                "variable": {
                    "value": "points",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ad_points.reshape(-1, 360, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "shifts": {
                    "value": "-5",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dims": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_210": {
                "variable": {
                    "value": "uni_points",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(points.size(0), 36, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "mean_217": {
                "variable": {
                    "value": "points",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ad_points.reshape(-1, 36, 10, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_285": {
                "variable": {
                    "value": "contours",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(deltas.shape[0], sample_pts * 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "arange_306": {
                "variable": {
                    "value": "i",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "num_coefs // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_312": {
                "variable": {
                    "value": "base_comps_real",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "itheta",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "i[:, None] * theta[None, :]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sin_313": {
                "variable": {
                    "value": "base_comps_imag",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "itheta",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "i[:, None] * theta[None, :]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_319": {
                "tensors": {
                    "value": "[r_real, r_imag]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_29": {
                "tensors": {
                    "value": "[px.unsqueeze(-1), py.unsqueeze(-1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_32": {
                "input": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.clamp((gt_box_size - dist) / gt_box_size, min=1e-08, max=1.0)",
                            "Call"
                        ],
                        [
                            "weights / torch.mean(weights)",
                            "BinOp"
                        ],
                        [
                            "weights.detach()",
                            "Call"
                        ],
                        [
                            "torch.clamp((rmax - dist) / rmax, min=1e-08, max=1.0)",
                            "Call"
                        ],
                        [
                            "weights / torch.mean(weights)",
                            "BinOp"
                        ],
                        [
                            "weights.detach()",
                            "Call"
                        ],
                        [
                            "torch.clamp((cheby[:, -3] - dist) / cheby[:, -3], min=1e-08, max=1.0)",
                            "Call"
                        ],
                        [
                            "weights / torch.mean(weights)",
                            "BinOp"
                        ],
                        [
                            "weights.detach()",
                            "Call"
                        ],
                        [
                            "torch.clamp((fori[:, -3] - dist) / fori[:, -3], min=1e-08, max=1.0)",
                            "Call"
                        ],
                        [
                            "weights / torch.mean(weights)",
                            "BinOp"
                        ],
                        [
                            "weights.detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "log_78": {
                "input": {
                    "value": "px + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_79": {
                "input": {
                    "value": "py + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_82": {
                "tensors": {
                    "value": "[px.unsqueeze(-1), py.unsqueeze(-1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_85": {
                "input": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.clamp((gt_box_size - dist) / gt_box_size, min=1e-08, max=1.0)",
                            "Call"
                        ],
                        [
                            "weights / torch.mean(weights)",
                            "BinOp"
                        ],
                        [
                            "weights.detach()",
                            "Call"
                        ],
                        [
                            "torch.clamp((rmax - dist) / rmax, min=1e-08, max=1.0)",
                            "Call"
                        ],
                        [
                            "weights / torch.mean(weights)",
                            "BinOp"
                        ],
                        [
                            "weights.detach()",
                            "Call"
                        ],
                        [
                            "torch.clamp((cheby[:, -3] - dist) / cheby[:, -3], min=1e-08, max=1.0)",
                            "Call"
                        ],
                        [
                            "weights / torch.mean(weights)",
                            "BinOp"
                        ],
                        [
                            "weights.detach()",
                            "Call"
                        ],
                        [
                            "torch.clamp((fori[:, -3] - dist) / fori[:, -3], min=1e-08, max=1.0)",
                            "Call"
                        ],
                        [
                            "weights / torch.mean(weights)",
                            "BinOp"
                        ],
                        [
                            "weights.detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "log_140": {
                "input": {
                    "value": "px + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_141": {
                "input": {
                    "value": "py + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_144": {
                "tensors": {
                    "value": "[px.unsqueeze(-1), py.unsqueeze(-1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_147": {
                "input": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.clamp((gt_box_size - dist) / gt_box_size, min=1e-08, max=1.0)",
                            "Call"
                        ],
                        [
                            "weights / torch.mean(weights)",
                            "BinOp"
                        ],
                        [
                            "weights.detach()",
                            "Call"
                        ],
                        [
                            "torch.clamp((rmax - dist) / rmax, min=1e-08, max=1.0)",
                            "Call"
                        ],
                        [
                            "weights / torch.mean(weights)",
                            "BinOp"
                        ],
                        [
                            "weights.detach()",
                            "Call"
                        ],
                        [
                            "torch.clamp((cheby[:, -3] - dist) / cheby[:, -3], min=1e-08, max=1.0)",
                            "Call"
                        ],
                        [
                            "weights / torch.mean(weights)",
                            "BinOp"
                        ],
                        [
                            "weights.detach()",
                            "Call"
                        ],
                        [
                            "torch.clamp((fori[:, -3] - dist) / fori[:, -3], min=1e-08, max=1.0)",
                            "Call"
                        ],
                        [
                            "weights / torch.mean(weights)",
                            "BinOp"
                        ],
                        [
                            "weights.detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "log_171": {
                "input": {
                    "value": "px + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_172": {
                "input": {
                    "value": "py + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_175": {
                "tensors": {
                    "value": "[px.unsqueeze(-1), py.unsqueeze(-1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_178": {
                "input": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.clamp((gt_box_size - dist) / gt_box_size, min=1e-08, max=1.0)",
                            "Call"
                        ],
                        [
                            "weights / torch.mean(weights)",
                            "BinOp"
                        ],
                        [
                            "weights.detach()",
                            "Call"
                        ],
                        [
                            "torch.clamp((rmax - dist) / rmax, min=1e-08, max=1.0)",
                            "Call"
                        ],
                        [
                            "weights / torch.mean(weights)",
                            "BinOp"
                        ],
                        [
                            "weights.detach()",
                            "Call"
                        ],
                        [
                            "torch.clamp((cheby[:, -3] - dist) / cheby[:, -3], min=1e-08, max=1.0)",
                            "Call"
                        ],
                        [
                            "weights / torch.mean(weights)",
                            "BinOp"
                        ],
                        [
                            "weights.detach()",
                            "Call"
                        ],
                        [
                            "torch.clamp((fori[:, -3] - dist) / fori[:, -3], min=1e-08, max=1.0)",
                            "Call"
                        ],
                        [
                            "weights / torch.mean(weights)",
                            "BinOp"
                        ],
                        [
                            "weights.detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_315": {
                "input": {
                    "value": "foris_imag",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "foris[:, num_coefs // 2:num_coefs]",
                            "Subscript"
                        ]
                    ]
                },
                "mat2": {
                    "value": "base_comps_imag",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sin(itheta)",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_317": {
                "input": {
                    "value": "foris_imag",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "foris[:, num_coefs // 2:num_coefs]",
                            "Subscript"
                        ]
                    ]
                },
                "mat2": {
                    "value": "base_comps_real",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cos(itheta)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_25": {
                "input": {
                    "value": "px + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_26": {
                "input": {
                    "value": "py + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_247": {
                "input": {
                    "value": "theta * np.pi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_248": {
                "input": {
                    "value": "theta * np.pi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "linspace_113": {
                "start": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "steps": {
                    "value": "361",
                    "type": "int",
                    "possible_values": []
                }
            },
            "linspace_286": {
                "start": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "steps": {
                    "value": "sample_pts * duplicates + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_305": {
                "start": {
                    "value": "sample_pts",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "360",
                            "MethodArgument"
                        ],
                        [
                            "36",
                            "MethodArgument"
                        ],
                        [
                            "36",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "log_109": {
                "input": {
                    "value": "px + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_110": {
                "input": {
                    "value": "py + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_114": {
                "input": {
                    "value": "theta * np.pi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_115": {
                "input": {
                    "value": "theta * np.pi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "linspace_190": {
                "start": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "steps": {
                    "value": "sample_pts + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_240": {
                "input": {
                    "value": "px + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_241": {
                "input": {
                    "value": "py + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "linspace_246": {
                "start": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "steps": {
                    "value": "sample_pts * duplicates + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_282": {
                "input": {
                    "value": "px + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_283": {
                "input": {
                    "value": "py + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_289": {
                "input": {
                    "value": "theta * np.pi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_290": {
                "input": {
                    "value": "theta * np.pi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_54": {
                "input": {
                    "value": "px + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_55": {
                "input": {
                    "value": "py + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "roll_209": {
                "input": {
                    "value": "points",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.roll(ad_points.reshape(-1, 360, 2), shifts=-5, dims=1)",
                            "Call"
                        ],
                        [
                            "torch.mean(ad_points.reshape(-1, 36, 10, 2), dim=2)",
                            "Call"
                        ]
                    ]
                },
                "shifts": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dims": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "curve/core/evaluation/TextDistEvalHook.py": {
        "torch": {
            "no_grad_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "current_device_46": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "curve/models/anchor_heads/anchor_head.py": {
        "torch": {
            "Conv2d_33": {
                "variable": {
                    "value": "self.conv_cls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.feat_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_anchors * self.cls_out_channels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_35": {
                "variable": {
                    "value": "self.conv_reg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.feat_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_anchors * self.num_coords",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flatten_61": {
                "input": {
                    "value": "label_weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "label_weights.reshape(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "flatten_66": {
                "input": {
                    "value": "bbox_targets",
                    "type": "Variable",
                    "possible_values": []
                },
                "start_dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end_dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "flatten_67": {
                "input": {
                    "value": "bbox_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "start_dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end_dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "flatten_159": {
                "input": {
                    "value": "bbox_targets",
                    "type": "Variable",
                    "possible_values": []
                },
                "start_dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end_dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "flatten_160": {
                "input": {
                    "value": "bbox_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "start_dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end_dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "flatten_300": {
                "input": {
                    "value": "label_weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "label_weights.reshape(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "flatten_305": {
                "input": {
                    "value": "bbox_targets",
                    "type": "Variable",
                    "possible_values": []
                },
                "start_dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end_dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "flatten_306": {
                "input": {
                    "value": "bbox_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "start_dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end_dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "flatten_342": {
                "input": {
                    "value": "label_weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "label_weights.reshape(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "flatten_347": {
                "input": {
                    "value": "bbox_targets",
                    "type": "Variable",
                    "possible_values": []
                },
                "start_dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end_dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "flatten_348": {
                "input": {
                    "value": "bbox_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "start_dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end_dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "flatten_73": {
                "input": {
                    "value": "ctr_targets",
                    "type": "Variable",
                    "possible_values": []
                },
                "start_dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end_dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "flatten_74": {
                "input": {
                    "value": "ctr_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "start_dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end_dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "flatten_312": {
                "input": {
                    "value": "ctr_targets",
                    "type": "Variable",
                    "possible_values": []
                },
                "start_dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end_dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "flatten_313": {
                "input": {
                    "value": "ctr_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "start_dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end_dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "flatten_354": {
                "input": {
                    "value": "ctr_targets",
                    "type": "Variable",
                    "possible_values": []
                },
                "start_dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end_dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "flatten_355": {
                "input": {
                    "value": "ctr_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "start_dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end_dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "curve/models/anchor_heads/rpn_head.py": {
        "torch": {
            "Conv2d_45": {
                "variable": {
                    "value": "self.rpn_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.feat_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_47": {
                "variable": {
                    "value": "self.rpn_cls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.feat_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_anchors * self.cls_out_channels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_49": {
                "variable": {
                    "value": "self.rpn_reg_c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.feat_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_anchors * (self.num_coords - 3)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_50": {
                "variable": {
                    "value": "self.rpn_reg_sxy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.feat_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_anchors * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_67": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv_du(x)",
                            "Call"
                        ],
                        [
                            "self.conv_lr(x)",
                            "Call"
                        ],
                        [
                            "self.conv_dfm(x)",
                            "Call"
                        ],
                        [
                            "self.rpn_conv(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x, inplace=True)",
                            "Call"
                        ]
                    ]
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_71": {
                "variable": {
                    "value": "rpn_bbox_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[rpn_bbox_pred_c, rpn_bbox_pred_sxy]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_120": {
                "variable": {
                    "value": "proposals",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mlvl_proposals",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_116": {
                "variable": {
                    "value": "proposals",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[proposals, scores.unsqueeze(-1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "nonzero_111": {
                "variable": {
                    "value": "valid_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(w >= cfg.min_bbox_size) & (h >= cfg.min_bbox_size)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squeeze_111": {
                "variable": {
                    "value": "valid_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_115": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "curve/models/losses/content_loss.py": {
        "torch": {
            "abs_30": {
                "variable": {
                    "value": "diff",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_r - gt_r",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_31": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "diff < beta",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "0.5 * diff * diff / beta",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "diff - 0.5 * beta",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mm_20": {
                "variable": {
                    "value": "pred_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred[:, :num_coefs]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mat2": {
                    "value": "fi",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "f_series(theta, num_coefs - 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_21": {
                "variable": {
                    "value": "gt_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target[:, :num_coefs]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mat2": {
                    "value": "fi",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "f_series(theta, num_coefs - 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "linspace_18": {
                "start": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "steps": {
                    "value": "sample_pts + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "curve/models/plugins/conv_dulr.py": {
        "torch": {
            "cat_40": {
                "variable": {
                    "value": "fea",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "fea_stack",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[fea.select(2, i).view(n, c, 1, w) for i in range(h)]",
                            "ListComp"
                        ],
                        [
                            "[fea.select(3, i).view(n, c, h, 1) for i in range(w)]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_78": {
                "variable": {
                    "value": "fea",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "fea_stack",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[fea.select(2, i).view(n, c, 1, w) for i in range(h)]",
                            "ListComp"
                        ],
                        [
                            "[fea.select(3, i).view(n, c, h, 1) for i in range(w)]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_13": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Conv2d(in_out_channels, in_out_channels, kernel_size, stride=1, padding=((kernel_size[0] - 1) // 2, (kernel_size[1] - 1) // 2), groups=groups)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_21": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Conv2d(in_out_channels, in_out_channels, kernel_size, stride=1, padding=((kernel_size[0] - 1) // 2, (kernel_size[1] - 1) // 2), groups=groups)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_53": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Conv2d(in_out_channels, in_out_channels, kernel_size, stride=1, padding=((kernel_size[0] - 1) // 2, (kernel_size[1] - 1) // 2), groups=groups)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_61": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Conv2d(in_out_channels, in_out_channels, kernel_size, stride=1, padding=((kernel_size[0] - 1) // 2, (kernel_size[1] - 1) // 2), groups=groups)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_14": {
                "in_channels": {
                    "value": "in_out_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_out_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(9",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "((kernel_size[0] - 1) // 2, (kernel_size[1] - 1) // 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "groups": {
                    "value": "groups",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_17": {
                "in_channels": {
                    "value": "in_out_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_out_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_18": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_22": {
                "in_channels": {
                    "value": "in_out_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_out_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(9",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "((kernel_size[0] - 1) // 2, (kernel_size[1] - 1) // 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "groups": {
                    "value": "groups",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_25": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_54": {
                "in_channels": {
                    "value": "in_out_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_out_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(9",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "((kernel_size[0] - 1) // 2, (kernel_size[1] - 1) // 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "groups": {
                    "value": "groups",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_57": {
                "in_channels": {
                    "value": "in_out_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_out_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_58": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_62": {
                "in_channels": {
                    "value": "in_out_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_out_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(9",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "((kernel_size[0] - 1) // 2, (kernel_size[1] - 1) // 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "groups": {
                    "value": "groups",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_65": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "curve/ops/bbox_overlap/setup.py": {
        "torch": {}
    },
    "curve/ops/geometry/functions/poly_nms.py": {
        "torch": {
            "cat_48": {
                "variable": {
                    "value": "dets",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[dets[keep, :-1], scores[keep, np.newaxis]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_85": {
                "variable": {
                    "value": "dets",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "dets",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dets[dets[:, -1] >= 0.5, :]",
                            "Subscript"
                        ],
                        [
                            "torch.cat([dets[keep, :-1], scores[keep, np.newaxis]], dim=1)",
                            "Call"
                        ],
                        [
                            "dets.detach()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(dets)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_98": {
                "data": {
                    "value": "inds",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "curve/ops/geometry/setup.py": {
        "torch": {}
    },
    "curve/tools/fuse_conv_bn.py": {
        "torch": {
            "Parameter_21": {
                "variable": {
                    "value": "conv.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "conv_w * factor.reshape([conv.out_channels, 1, 1, 1])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_23": {
                "variable": {
                    "value": "conv.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "(conv_b - bn.running_mean) * factor + bn.bias",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_17": {
                "input": {
                    "value": "bn.running_mean",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_20": {
                "input": {
                    "value": "bn.running_var + bn.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Identity_39": {
                "variable": {
                    "value": "m._modules[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "curve/tools/generate_total_json.py": {
        "torch": {}
    },
    "curve/tools/test.py": {
        "torch": {
            "full_71": {
                "variable": {
                    "value": "dir_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(MAX_LEN,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_77": {
                "variable": {
                    "value": "tmpdir",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "bytearray(tmpdir.encode())",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "broadcast_80": {
                "tensor": {
                    "value": "dir_tensor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.full((MAX_LEN,), 32, dtype=torch.uint8, device='cuda')",
                            "Call"
                        ]
                    ]
                },
                "devices": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_50": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "curve/tools/train.py": {
        "torch": {}
    },
    "curve/tools/viz.py": {
        "torch": {
            "interpolate_11": {
                "variable": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "img[:, :, :h, :w]",
                            "Subscript"
                        ],
                        [
                            "interpolate(img, (h, w))",
                            "Call"
                        ],
                        [
                            "denormalize(img[0])",
                            "Call"
                        ],
                        [
                            "img.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "np.transpose(img, (1, 2, 0))",
                            "Call"
                        ],
                        [
                            "img + mean",
                            "BinOp"
                        ],
                        [
                            "img.astype(np.uint8)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    }
}