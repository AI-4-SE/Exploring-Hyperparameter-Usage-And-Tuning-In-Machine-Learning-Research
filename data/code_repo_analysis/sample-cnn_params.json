{
    "sample_cnn/ops/evaluation.py": {
        "sklearn": {
            "roc_auc_score_67": {
                "variable": {
                    "value": "roc_auc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "all_y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.empty([0, n_classes], dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.append(all_y_true, y_true, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "all_y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.empty([0, n_classes], dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.append(all_y_pred, y_pred, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "log_loss_61": {
                "variable": {
                    "value": "class_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "class_y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "all_y_true[:, i]",
                            "Subscript"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "class_y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "all_y_pred[:, i]",
                            "Subscript"
                        ]
                    ]
                }
            }
        },
        "tensorflow": {
            "squeeze_25": {
                "variable": {
                    "value": "segments",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "audio",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_inputs(file_pattern=input_file_pattern, batch_size=1, is_training=False, is_sequence=True, n_read_threads=1, examples_per_shard=n_audios_per_shard, shard_queue_name='filename_queue', example_queue_name='input_queue')",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_27": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_inputs(file_pattern=input_file_pattern, batch_size=1, is_training=False, is_sequence=True, n_read_threads=1, examples_per_shard=n_audios_per_shard, shard_queue_name='filename_queue', example_queue_name='input_queue')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(labels)",
                            "Call"
                        ],
                        [
                            "Input(tensor=labels)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "sample_cnn/data/audio_processing.py": {
        "tensorflow": {
            "Features_39": {
                "variable": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": []
                },
                "feature": {
                    "value": "{'raw_labels': _bytes_feature(raw_labels)}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "FeatureLists_43": {
                "variable": {
                    "value": "feature_lists",
                    "type": "variable",
                    "possible_values": []
                },
                "feature_list": {
                    "value": "{'raw_segments': _bytes_feature_list(raw_segments)}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "SequenceExample_48": {
                "variable": {
                    "value": "sequence_example",
                    "type": "variable",
                    "possible_values": []
                },
                "context": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.Features(feature={'raw_labels': _bytes_feature(raw_labels)})",
                            "Call"
                        ]
                    ]
                },
                "feature_lists": {
                    "value": "feature_lists",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.FeatureLists(feature_list={'raw_segments': _bytes_feature_list(raw_segments)})",
                            "Call"
                        ]
                    ]
                }
            },
            "Example_68": {
                "variable": {
                    "value": "example",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.train.Features(feature={'raw_labels': _bytes_feature(raw_labels), 'raw_segment': _bytes_feature(raw_segment)})",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_13": {
                "int64_list": {
                    "value": "tf.train.Int64List(value=value)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_18": {
                "bytes_list": {
                    "value": "tf.train.BytesList(value=[value])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "FeatureList_23": {
                "feature": {
                    "value": "[_bytes_feature(v) for v in values]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Int64List_13": {
                "value": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[value]",
                            "List"
                        ],
                        [
                            "value",
                            "Method Argument"
                        ],
                        [
                            "value",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BytesList_18": {
                "value": {
                    "value": "[value]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Features_68": {
                "feature": {
                    "value": "{'raw_labels': _bytes_feature(raw_labels), 'raw_segment': _bytes_feature(raw_segment)}",
                    "type": "Dict",
                    "possible_values": []
                }
            }
        }
    },
    "sample_cnn/data/mtt/build_mtt.py": {
        "tensorflow": {
            "DEFINE_string_17": {
                "name": {
                    "value": "data_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "MagnaTagATune audio dataset directory.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_18": {
                "name": {
                    "value": "annotation_file",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "A path to CSV annotation file which contains labels.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_20": {
                "name": {
                    "value": "output_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Output data directory.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_21": {
                "name": {
                    "value": "output_labels",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Output label file.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_23": {
                "name": {
                    "value": "n_threads",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of threads to process audios in parallel.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_26": {
                "name": {
                    "value": "n_audios_per_shard",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of audios per shard.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_30": {
                "name": {
                    "value": "n_top",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of top N tags.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_31": {
                "name": {
                    "value": "sample_rate",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "22050",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Sample rate of audio.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_32": {
                "name": {
                    "value": "n_samples",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "59049",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of samples per segment.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "TFRecordWriter_63": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "path": {
                    "value": "output_file_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(FLAGS.output_dir, output_filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "run_174": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "IsDirectory_139": {
                "dirname": {
                    "value": "FLAGS.output_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_140": {
                "msg": {
                    "value": "Creating output directory: %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "FLAGS.output_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MakeDirs_141": {
                "dirname": {
                    "value": "FLAGS.output_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "sample_cnn/evaluate.py": {
        "tensorflow": {
            "DEFINE_string_5": {
                "name": {
                    "value": "input_file_pattern",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "File pattern of sharded TFRecord input files.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_7": {
                "name": {
                    "value": "weights_path",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Path to learned weights.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_9": {
                "name": {
                    "value": "n_examples",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "4332",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of examples to run.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_10": {
                "name": {
                    "value": "n_audios_per_shard",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of audios per shard.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "set_verbosity_13": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "run_28": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "sample_cnn/keras_utils/tfrecord_model.py": {
        "tensorflow": {
            "Coordinator_379": {
                "variable": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "start_queue_runners_380": {
                "variable": {
                    "value": "threads",
                    "type": "variable",
                    "possible_values": []
                },
                "sess": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K.get_session()",
                            "Call"
                        ],
                        [
                            "K.get_session()",
                            "Call"
                        ],
                        [
                            "K.get_session()",
                            "Call"
                        ]
                    ]
                },
                "coord": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ],
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ],
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ]
                    ]
                }
            },
            "Coordinator_500": {
                "variable": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "start_queue_runners_501": {
                "variable": {
                    "value": "threads",
                    "type": "variable",
                    "possible_values": []
                },
                "sess": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K.get_session()",
                            "Call"
                        ],
                        [
                            "K.get_session()",
                            "Call"
                        ],
                        [
                            "K.get_session()",
                            "Call"
                        ]
                    ]
                },
                "coord": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ],
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ],
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ]
                    ]
                }
            },
            "Coordinator_559": {
                "variable": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "start_queue_runners_560": {
                "variable": {
                    "value": "threads",
                    "type": "variable",
                    "possible_values": []
                },
                "sess": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K.get_session()",
                            "Call"
                        ],
                        [
                            "K.get_session()",
                            "Call"
                        ],
                        [
                            "K.get_session()",
                            "Call"
                        ]
                    ]
                },
                "coord": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ],
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ],
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "sample_cnn/ops/batch_inputs.py": {
        "tensorflow": {
            "TFRecordReader_5": {
                "variable": {
                    "value": "reader",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "parse_single_example_7": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "serialized": {
                    "value": "serialized_example",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reader.read(filename_queue)",
                            "Call"
                        ],
                        [
                            "reader.read(filename_queue)",
                            "Call"
                        ]
                    ]
                },
                "features": {
                    "value": "{'raw_labels': tf.FixedLenFeature([], tf.string), 'raw_segment': tf.FixedLenFeature([], tf.string)}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "decode_raw_14": {
                "variable": {
                    "value": "segment",
                    "type": "variable",
                    "possible_values": []
                },
                "input_bytes": {
                    "value": "features['raw_segment']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_type": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "decode_raw_17": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "input_bytes": {
                    "value": "features['raw_labels']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_type": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_19": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.decode_raw(features['raw_labels'], tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.cast(labels, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.decode_raw(context['raw_labels'], tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.cast(labels, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TFRecordReader_26": {
                "variable": {
                    "value": "reader",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "parse_single_sequence_example_28": {
                "variable": {
                    "value": "(context, sequence)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "serialized": {
                    "value": "serialized_example",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reader.read(filename_queue)",
                            "Call"
                        ],
                        [
                            "reader.read(filename_queue)",
                            "Call"
                        ]
                    ]
                },
                "context_features": {
                    "value": "{'raw_labels': tf.FixedLenFeature([], dtype=tf.string)}",
                    "type": "Dict",
                    "possible_values": []
                },
                "sequence_features": {
                    "value": "{'raw_segments': tf.FixedLenSequenceFeature([], dtype=tf.string)}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "decode_raw_37": {
                "variable": {
                    "value": "segments",
                    "type": "variable",
                    "possible_values": []
                },
                "input_bytes": {
                    "value": "sequence['raw_segments']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_type": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "decode_raw_40": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "input_bytes": {
                    "value": "context['raw_labels']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_type": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_42": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.decode_raw(features['raw_labels'], tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.cast(labels, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.decode_raw(context['raw_labels'], tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.cast(labels, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_63": {
                "msg": {
                    "value": "Prefetching values from %d files matching %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "len(data_files)",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "file_pattern",
                    "type": "variable",
                    "possible_values": [
                        [
                            "file_pattern",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "string_input_producer_72": {
                "variable": {
                    "value": "filename_queue",
                    "type": "variable",
                    "possible_values": []
                },
                "string_tensor": {
                    "value": "data_files",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "capacity": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "shard_queue_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'filename_queue'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shuffle_batch_join_91": {
                "variable": {
                    "value": "(segment, label)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensors_list": {
                    "value": "example_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[read_example_fn(filename_queue) for _ in range(n_read_threads)]",
                            "ListComp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "capacity": {
                    "value": "capacity",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min_queue_examples + 3 * batch_size",
                            "BinOp"
                        ],
                        [
                            "examples_per_shard + 2 * batch_size",
                            "BinOp"
                        ]
                    ]
                },
                "min_after_dequeue": {
                    "value": "min_queue_examples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "examples_per_shard * input_queue_capacity_factor",
                            "BinOp"
                        ]
                    ]
                },
                "name": {
                    "value": "'shuffle_' + example_queue_name",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "string_input_producer_102": {
                "variable": {
                    "value": "filename_queue",
                    "type": "variable",
                    "possible_values": []
                },
                "string_tensor": {
                    "value": "data_files",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "capacity": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "shard_queue_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'filename_queue'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "batch_108": {
                "variable": {
                    "value": "(segment_batch, label_batch)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[segment, label]",
                    "type": "List",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "num_threads": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "capacity": {
                    "value": "capacity",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min_queue_examples + 3 * batch_size",
                            "BinOp"
                        ],
                        [
                            "examples_per_shard + 2 * batch_size",
                            "BinOp"
                        ]
                    ]
                },
                "name": {
                    "value": "'fifo_' + example_queue_name",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Glob_58": {
                "filename": {
                    "value": "pattern",
                    "type": "variable",
                    "possible_values": [
                        [
                            "file_pattern.split(',')",
                            "Call"
                        ]
                    ]
                }
            },
            "FixedLenFeature_10": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_11": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_31": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenSequenceFeature_34": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "sample_cnn/train.py": {
        "tensorflow": {
            "set_verbosity_16": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DEFINE_string_19": {
                "name": {
                    "value": "train_input_file_pattern",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "File pattern of TFRecord input files.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_21": {
                "name": {
                    "value": "val_input_file_pattern",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "File pattern of validation TFRecord input files.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_23": {
                "name": {
                    "value": "test_input_file_pattern",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "File pattern of test TFRecord input files.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_25": {
                "name": {
                    "value": "train_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Directory where to write event logs and checkpoints.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_27": {
                "name": {
                    "value": "checkpoint_prefix",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "best_weights",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Prefix of the checkpoint filename.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_31": {
                "name": {
                    "value": "batch_size",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "23",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Batch size.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_32": {
                "name": {
                    "value": "n_audios_per_shard",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of audios per shard.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_34": {
                "name": {
                    "value": "n_segments_per_audio",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of segments per audio.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_36": {
                "name": {
                    "value": "n_train_examples",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "15250",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of examples in training dataset.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_38": {
                "name": {
                    "value": "n_val_examples",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "1529",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of examples in validation dataset.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_40": {
                "name": {
                    "value": "n_test_examples",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "4332",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of examples in test dataset.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_43": {
                "name": {
                    "value": "n_read_threads",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of example reader.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_46": {
                "name": {
                    "value": "initial_learning_rate",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "Initial learning rate.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_47": {
                "name": {
                    "value": "momentum",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "Momentum.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_48": {
                "name": {
                    "value": "dropout_rate",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "Dropout keep probability.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_49": {
                "name": {
                    "value": "global_lr_decay",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "Global learning rate decay.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_50": {
                "name": {
                    "value": "local_lr_decay",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "Local learning rate decay.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_53": {
                "name": {
                    "value": "patience",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "A patience for the early stopping.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_54": {
                "name": {
                    "value": "max_trains",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of re-training.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_55": {
                "name": {
                    "value": "initial_stage",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "The stage where to start training.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "run_234": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Exists_95": {
                "filename": {
                    "value": "stage_train_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "make_path(FLAGS.train_dir, i)",
                            "Call"
                        ],
                        [
                            "stage_train_dir",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "info_96": {
                "msg": {
                    "value": "Creating training directory: %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "stage_train_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "make_path(FLAGS.train_dir, i)",
                            "Call"
                        ],
                        [
                            "stage_train_dir",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "MakeDirs_97": {
                "dirname": {
                    "value": "stage_train_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "make_path(FLAGS.train_dir, i)",
                            "Call"
                        ],
                        [
                            "stage_train_dir",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "tests/tfrecord_model_test_mnist.py": {
        "tensorflow": {
            "string_input_producer_46": {
                "variable": {
                    "value": "filename_queue",
                    "type": "variable",
                    "possible_values": []
                },
                "string_tensor": {
                    "value": "[filename]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TFRecordReader_47": {
                "variable": {
                    "value": "reader",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "parse_single_example_49": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "serialized": {
                    "value": "serialized_example",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reader.read(filename_queue)",
                            "Call"
                        ]
                    ]
                },
                "features": {
                    "value": "{'label': tf.FixedLenFeature([], tf.int64), 'image_raw': tf.FixedLenFeature([], tf.string)}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "decode_raw_57": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "input_bytes": {
                    "value": "features['image_raw']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_type": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_59": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.decode_raw(features['image_raw'], tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.reshape(img, [28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(img, tf.float32) * (1.0 / 255) - 0.5",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[28, 28, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_62": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "features['label']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shuffle_batch_122": {
                "variable": {
                    "value": "(x_train_batch, y_train_batch)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x_train, y_train]",
                    "type": "List",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "int"
                        ]
                    ]
                },
                "capacity": {
                    "value": "2000",
                    "type": "int",
                    "possible_values": []
                },
                "min_after_dequeue": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "train_batch",
                    "type": "str",
                    "possible_values": []
                }
            },
            "shuffle_batch_127": {
                "variable": {
                    "value": "(x_val_batch, y_val_batch)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x_val, y_val]",
                    "type": "List",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "int"
                        ]
                    ]
                },
                "capacity": {
                    "value": "2000",
                    "type": "int",
                    "possible_values": []
                },
                "min_after_dequeue": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "val_batch",
                    "type": "str",
                    "possible_values": []
                }
            },
            "shuffle_batch_132": {
                "variable": {
                    "value": "(x_test_batch, y_test_batch)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x_test, y_test]",
                    "type": "List",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "int"
                        ]
                    ]
                },
                "capacity": {
                    "value": "2000",
                    "type": "int",
                    "possible_values": []
                },
                "min_after_dequeue": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "test_batch",
                    "type": "str",
                    "possible_values": []
                }
            },
            "TFRecordWriter_29": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "path": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filename",
                            "Method Argument"
                        ],
                        [
                            "filename",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "one_hot_64": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(features['label'], tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(label, n_classes)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Feature_15": {
                "int64_list": {
                    "value": "tf.train.Int64List(value=[value])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_18": {
                "bytes_list": {
                    "value": "tf.train.BytesList(value=[value])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Example_32": {
                "variable": {
                    "value": "example",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.train.Features(feature={'height': _int64_feature(rows), 'width': _int64_feature(cols), 'depth': _int64_feature(depth), 'label': _int64_feature(int(labels[index])), 'image_raw': _bytes_feature(image_raw)})",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_60": {
                "x": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.decode_raw(features['image_raw'], tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.reshape(img, [28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(img, tf.float32) * (1.0 / 255) - 0.5",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Int64List_15": {
                "value": {
                    "value": "[value]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "BytesList_18": {
                "value": {
                    "value": "[value]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "FixedLenFeature_51": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_53": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Features_32": {
                "feature": {
                    "value": "{'height': _int64_feature(rows), 'width': _int64_feature(cols), 'depth': _int64_feature(depth), 'label': _int64_feature(int(labels[index])), 'image_raw': _bytes_feature(image_raw)}",
                    "type": "Dict",
                    "possible_values": []
                }
            }
        }
    }
}