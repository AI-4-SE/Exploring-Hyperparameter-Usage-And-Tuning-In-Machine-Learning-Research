{
    "evaluate/ranking.py": {
        "sklearn": {
            "average_precision_score_112": {
                "y_true": {
                    "value": "y_true",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matches[i, valid]",
                            "Subscript"
                        ]
                    ]
                },
                "y_score": {
                    "value": "y_score",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "-distmat[i][indices[i]][valid]",
                            "UnaryOp"
                        ]
                    ]
                }
            }
        }
    },
    "visualization/plot_feature_radius.py": {
        "sklearn": {
            "normalize_118": {
                "variable": {
                    "value": "w1_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "X": {
                    "value": "w1",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "normalize_119": {
                "variable": {
                    "value": "w2_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "X": {
                    "value": "w2",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "DataParallel_94": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "models.Norm_ResNet50(pretrained=pretrained, num_features=embedding_size, dropout=dropout, F_norm=F_norm, W_norm=W_norm, num_classes=num_classes)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model).cuda()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Model/MobileNet.py": {
        "torch": {
            "Sequential_35": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv_bn(3, 32, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_52": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_53": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_84": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_c",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_c",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "groups": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_85": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_c",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Sequential_97": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(mid_channels, out_channels, 1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_122": {
                "variable": {
                    "value": "self.block3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Bottleneck(16, 24, 6, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_126": {
                "variable": {
                    "value": "self.block4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Bottleneck(24, 32, 6, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_131": {
                "variable": {
                    "value": "self.block5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Bottleneck(32, 64, 6, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_137": {
                "variable": {
                    "value": "self.block6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Bottleneck(64, 96, 6, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_142": {
                "variable": {
                    "value": "self.block7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Bottleneck(96, 160, 6, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_149": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1280",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_150": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "avg_pool2d_163": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.model(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1024)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "self.block3(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x)",
                            "Call"
                        ],
                        [
                            "self.block5(x)",
                            "Call"
                        ],
                        [
                            "self.block6(x)",
                            "Call"
                        ],
                        [
                            "self.block7(x)",
                            "Call"
                        ],
                        [
                            "self.block8(x)",
                            "Call"
                        ],
                        [
                            "self.conv9(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, x.size()[2:]).view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "x.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "dropout_164": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.model(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1024)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "self.block3(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x)",
                            "Call"
                        ],
                        [
                            "self.block5(x)",
                            "Call"
                        ],
                        [
                            "self.block6(x)",
                            "Call"
                        ],
                        [
                            "self.block7(x)",
                            "Call"
                        ],
                        [
                            "self.block8(x)",
                            "Call"
                        ],
                        [
                            "self.conv9(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, x.size()[2:]).view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu6_88": {
                "input": {
                    "value": "self.bn(self.conv(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_16": {
                "*args": {
                    "value": "nn.Conv2d(inchannel, outchannel, 3, stride, 1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_25": {
                "*args": {
                    "value": "nn.Conv2d(inchannel, inchannel, 3, stride, 1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AvgPool2d_50": {
                "kernel_size": {
                    "value": "9",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_98": {
                "in_channels": {
                    "value": "mid_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "in_channels * expansion_factor",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_99": {
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_17": {
                "in_channels": {
                    "value": "inchannel",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "outchannel",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_18": {
                "num_features": {
                    "value": "outchannel",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_19": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_26": {
                "in_channels": {
                    "value": "inchannel",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "inchannel",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_27": {
                "num_features": {
                    "value": "inchannel",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_28": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_30": {
                "in_channels": {
                    "value": "inchannel",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "outchannel",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_31": {
                "num_features": {
                    "value": "outchannel",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_32": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "Model/ResNet.py": {
        "torch": {
            "Sequential_16": {
                "variable": {
                    "value": "self.base",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(resnet50.children())[:-2]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_17": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_18": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "avg_pool2d_23": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.base(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, x.size()[2:])",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "x.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "Model/light_cnn.py": {
        "torch": {
            "split_23": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.filter(x)",
                            "Call"
                        ],
                        [
                            "self.conv_a(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.pool1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.group1(x)",
                            "Call"
                        ],
                        [
                            "self.pool2(x)",
                            "Call"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "self.group2(x)",
                            "Call"
                        ],
                        [
                            "self.pool3(x)",
                            "Call"
                        ],
                        [
                            "self.block3(x)",
                            "Call"
                        ],
                        [
                            "self.group3(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x)",
                            "Call"
                        ],
                        [
                            "self.group4(x)",
                            "Call"
                        ],
                        [
                            "self.pool4(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2) + F.avg_pool2d(x, 2)",
                            "BinOp"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.group1(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2) + F.avg_pool2d(x, 2)",
                            "BinOp"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "self.group2(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2) + F.avg_pool2d(x, 2)",
                            "BinOp"
                        ],
                        [
                            "self.block3(x)",
                            "Call"
                        ],
                        [
                            "self.group3(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x)",
                            "Call"
                        ],
                        [
                            "self.group4(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2) + F.avg_pool2d(x, 2)",
                            "BinOp"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.dropout(fc, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "self.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_53": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "mfm(3, 48, 5, 1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_65": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "79077",
                            "MethodArgument"
                        ],
                        [
                            "79077",
                            "MethodArgument"
                        ],
                        [
                            "79077",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "dropout_71": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.filter(x)",
                            "Call"
                        ],
                        [
                            "self.conv_a(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.pool1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.group1(x)",
                            "Call"
                        ],
                        [
                            "self.pool2(x)",
                            "Call"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "self.group2(x)",
                            "Call"
                        ],
                        [
                            "self.pool3(x)",
                            "Call"
                        ],
                        [
                            "self.block3(x)",
                            "Call"
                        ],
                        [
                            "self.group3(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x)",
                            "Call"
                        ],
                        [
                            "self.group4(x)",
                            "Call"
                        ],
                        [
                            "self.pool4(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2) + F.avg_pool2d(x, 2)",
                            "BinOp"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.group1(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2) + F.avg_pool2d(x, 2)",
                            "BinOp"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "self.group2(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2) + F.avg_pool2d(x, 2)",
                            "BinOp"
                        ],
                        [
                            "self.block3(x)",
                            "Call"
                        ],
                        [
                            "self.group3(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x)",
                            "Call"
                        ],
                        [
                            "self.group4(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2) + F.avg_pool2d(x, 2)",
                            "BinOp"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.dropout(fc, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MaxPool2d_79": {
                "variable": {
                    "value": "self.pool1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_82": {
                "variable": {
                    "value": "self.pool2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_85": {
                "variable": {
                    "value": "self.pool3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_90": {
                "variable": {
                    "value": "self.pool4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_92": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "79077",
                            "MethodArgument"
                        ],
                        [
                            "79077",
                            "MethodArgument"
                        ],
                        [
                            "79077",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "dropout_120": {
                "variable": {
                    "value": "fc",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fc",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(fc, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_137": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "8 * 8 * 128",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_138": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "79077",
                            "MethodArgument"
                        ],
                        [
                            "79077",
                            "MethodArgument"
                        ],
                        [
                            "79077",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "dropout_166": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fc",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(fc, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_17": {
                "variable": {
                    "value": "self.filter",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2 * out_channels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_19": {
                "variable": {
                    "value": "self.filter",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2 * out_channels",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_24": {
                "input": {
                    "value": "out[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Sequential_98": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_144": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "MaxPool2d_55": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_57": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_59": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_62": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_pool2d_148": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.filter(x)",
                            "Call"
                        ],
                        [
                            "self.conv_a(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.pool1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.group1(x)",
                            "Call"
                        ],
                        [
                            "self.pool2(x)",
                            "Call"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "self.group2(x)",
                            "Call"
                        ],
                        [
                            "self.pool3(x)",
                            "Call"
                        ],
                        [
                            "self.block3(x)",
                            "Call"
                        ],
                        [
                            "self.group3(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x)",
                            "Call"
                        ],
                        [
                            "self.group4(x)",
                            "Call"
                        ],
                        [
                            "self.pool4(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2) + F.avg_pool2d(x, 2)",
                            "BinOp"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.group1(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2) + F.avg_pool2d(x, 2)",
                            "BinOp"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "self.group2(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2) + F.avg_pool2d(x, 2)",
                            "BinOp"
                        ],
                        [
                            "self.block3(x)",
                            "Call"
                        ],
                        [
                            "self.group3(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x)",
                            "Call"
                        ],
                        [
                            "self.group4(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2) + F.avg_pool2d(x, 2)",
                            "BinOp"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.dropout(fc, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "avg_pool2d_148": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.filter(x)",
                            "Call"
                        ],
                        [
                            "self.conv_a(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.pool1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.group1(x)",
                            "Call"
                        ],
                        [
                            "self.pool2(x)",
                            "Call"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "self.group2(x)",
                            "Call"
                        ],
                        [
                            "self.pool3(x)",
                            "Call"
                        ],
                        [
                            "self.block3(x)",
                            "Call"
                        ],
                        [
                            "self.group3(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x)",
                            "Call"
                        ],
                        [
                            "self.group4(x)",
                            "Call"
                        ],
                        [
                            "self.pool4(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2) + F.avg_pool2d(x, 2)",
                            "BinOp"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.group1(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2) + F.avg_pool2d(x, 2)",
                            "BinOp"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "self.group2(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2) + F.avg_pool2d(x, 2)",
                            "BinOp"
                        ],
                        [
                            "self.block3(x)",
                            "Call"
                        ],
                        [
                            "self.group3(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x)",
                            "Call"
                        ],
                        [
                            "self.group4(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2) + F.avg_pool2d(x, 2)",
                            "BinOp"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.dropout(fc, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_152": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.filter(x)",
                            "Call"
                        ],
                        [
                            "self.conv_a(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.pool1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.group1(x)",
                            "Call"
                        ],
                        [
                            "self.pool2(x)",
                            "Call"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "self.group2(x)",
                            "Call"
                        ],
                        [
                            "self.pool3(x)",
                            "Call"
                        ],
                        [
                            "self.block3(x)",
                            "Call"
                        ],
                        [
                            "self.group3(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x)",
                            "Call"
                        ],
                        [
                            "self.group4(x)",
                            "Call"
                        ],
                        [
                            "self.pool4(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2) + F.avg_pool2d(x, 2)",
                            "BinOp"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.group1(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2) + F.avg_pool2d(x, 2)",
                            "BinOp"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "self.group2(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2) + F.avg_pool2d(x, 2)",
                            "BinOp"
                        ],
                        [
                            "self.block3(x)",
                            "Call"
                        ],
                        [
                            "self.group3(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x)",
                            "Call"
                        ],
                        [
                            "self.group4(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2) + F.avg_pool2d(x, 2)",
                            "BinOp"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.dropout(fc, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "avg_pool2d_152": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.filter(x)",
                            "Call"
                        ],
                        [
                            "self.conv_a(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.pool1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.group1(x)",
                            "Call"
                        ],
                        [
                            "self.pool2(x)",
                            "Call"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "self.group2(x)",
                            "Call"
                        ],
                        [
                            "self.pool3(x)",
                            "Call"
                        ],
                        [
                            "self.block3(x)",
                            "Call"
                        ],
                        [
                            "self.group3(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x)",
                            "Call"
                        ],
                        [
                            "self.group4(x)",
                            "Call"
                        ],
                        [
                            "self.pool4(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2) + F.avg_pool2d(x, 2)",
                            "BinOp"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.group1(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2) + F.avg_pool2d(x, 2)",
                            "BinOp"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "self.group2(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2) + F.avg_pool2d(x, 2)",
                            "BinOp"
                        ],
                        [
                            "self.block3(x)",
                            "Call"
                        ],
                        [
                            "self.group3(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x)",
                            "Call"
                        ],
                        [
                            "self.group4(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2) + F.avg_pool2d(x, 2)",
                            "BinOp"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.dropout(fc, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_156": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.filter(x)",
                            "Call"
                        ],
                        [
                            "self.conv_a(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.pool1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.group1(x)",
                            "Call"
                        ],
                        [
                            "self.pool2(x)",
                            "Call"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "self.group2(x)",
                            "Call"
                        ],
                        [
                            "self.pool3(x)",
                            "Call"
                        ],
                        [
                            "self.block3(x)",
                            "Call"
                        ],
                        [
                            "self.group3(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x)",
                            "Call"
                        ],
                        [
                            "self.group4(x)",
                            "Call"
                        ],
                        [
                            "self.pool4(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2) + F.avg_pool2d(x, 2)",
                            "BinOp"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.group1(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2) + F.avg_pool2d(x, 2)",
                            "BinOp"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "self.group2(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2) + F.avg_pool2d(x, 2)",
                            "BinOp"
                        ],
                        [
                            "self.block3(x)",
                            "Call"
                        ],
                        [
                            "self.group3(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x)",
                            "Call"
                        ],
                        [
                            "self.group4(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2) + F.avg_pool2d(x, 2)",
                            "BinOp"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.dropout(fc, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "avg_pool2d_156": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.filter(x)",
                            "Call"
                        ],
                        [
                            "self.conv_a(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.pool1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.group1(x)",
                            "Call"
                        ],
                        [
                            "self.pool2(x)",
                            "Call"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "self.group2(x)",
                            "Call"
                        ],
                        [
                            "self.pool3(x)",
                            "Call"
                        ],
                        [
                            "self.block3(x)",
                            "Call"
                        ],
                        [
                            "self.group3(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x)",
                            "Call"
                        ],
                        [
                            "self.group4(x)",
                            "Call"
                        ],
                        [
                            "self.pool4(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2) + F.avg_pool2d(x, 2)",
                            "BinOp"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.group1(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2) + F.avg_pool2d(x, 2)",
                            "BinOp"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "self.group2(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2) + F.avg_pool2d(x, 2)",
                            "BinOp"
                        ],
                        [
                            "self.block3(x)",
                            "Call"
                        ],
                        [
                            "self.group3(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x)",
                            "Call"
                        ],
                        [
                            "self.group4(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2) + F.avg_pool2d(x, 2)",
                            "BinOp"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.dropout(fc, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_162": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.filter(x)",
                            "Call"
                        ],
                        [
                            "self.conv_a(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.pool1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.group1(x)",
                            "Call"
                        ],
                        [
                            "self.pool2(x)",
                            "Call"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "self.group2(x)",
                            "Call"
                        ],
                        [
                            "self.pool3(x)",
                            "Call"
                        ],
                        [
                            "self.block3(x)",
                            "Call"
                        ],
                        [
                            "self.group3(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x)",
                            "Call"
                        ],
                        [
                            "self.group4(x)",
                            "Call"
                        ],
                        [
                            "self.pool4(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2) + F.avg_pool2d(x, 2)",
                            "BinOp"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.group1(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2) + F.avg_pool2d(x, 2)",
                            "BinOp"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "self.group2(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2) + F.avg_pool2d(x, 2)",
                            "BinOp"
                        ],
                        [
                            "self.block3(x)",
                            "Call"
                        ],
                        [
                            "self.group3(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x)",
                            "Call"
                        ],
                        [
                            "self.group4(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2) + F.avg_pool2d(x, 2)",
                            "BinOp"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.dropout(fc, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "avg_pool2d_162": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.filter(x)",
                            "Call"
                        ],
                        [
                            "self.conv_a(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.pool1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.group1(x)",
                            "Call"
                        ],
                        [
                            "self.pool2(x)",
                            "Call"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "self.group2(x)",
                            "Call"
                        ],
                        [
                            "self.pool3(x)",
                            "Call"
                        ],
                        [
                            "self.block3(x)",
                            "Call"
                        ],
                        [
                            "self.group3(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x)",
                            "Call"
                        ],
                        [
                            "self.group4(x)",
                            "Call"
                        ],
                        [
                            "self.pool4(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2) + F.avg_pool2d(x, 2)",
                            "BinOp"
                        ],
                        [
                            "self.block1(x)",
                            "Call"
                        ],
                        [
                            "self.group1(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2) + F.avg_pool2d(x, 2)",
                            "BinOp"
                        ],
                        [
                            "self.block2(x)",
                            "Call"
                        ],
                        [
                            "self.group2(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2) + F.avg_pool2d(x, 2)",
                            "BinOp"
                        ],
                        [
                            "self.block3(x)",
                            "Call"
                        ],
                        [
                            "self.group3(x)",
                            "Call"
                        ],
                        [
                            "self.block4(x)",
                            "Call"
                        ],
                        [
                            "self.group4(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, 2) + F.avg_pool2d(x, 2)",
                            "BinOp"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.dropout(fc, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "Model/norm_model.py": {
        "torch": {
            "normalize_19": {
                "variable": {
                    "value": "input_",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "normalize_26": {
                "variable": {
                    "value": "input_",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Parameter_63": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.num_features, num_classes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_65": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.num_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Tensor_75": {
                "variable": {
                    "value": "loss_up",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "exp_140": {
                "variable": {
                    "value": "similarity",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dist / (-2.0 * self.sigma)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softplus_31": {
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "mm_87": {
                "variable": {
                    "value": "temp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input / input.norm(p=2, dim=0, keepdim=True).clamp(min=1e-12).expand_as(input).detach()",
                            "BinOp"
                        ],
                        [
                            "F.normalize(input)",
                            "Call"
                        ],
                        [
                            "input.norm(p=2, dim=0, keepdim=True).clamp(min=1e-12).expand_as(input).detach()",
                            "Call"
                        ],
                        [
                            "F.normalize(input)",
                            "Call"
                        ],
                        [
                            "norm_detach(x, self.is_norm_detach) if self.CCS else x",
                            "IfExp"
                        ]
                    ]
                },
                "mat2": {
                    "value": "W_.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eye_94": {
                "variable": {
                    "value": "index",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "class_num",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1501",
                            "Constant"
                        ]
                    ]
                }
            },
            "index_select_95": {
                "variable": {
                    "value": "one_hot_label",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "index",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.eye(class_num)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "targets.cpu()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mul_111": {
                "variable": {
                    "value": "W_k_base",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "W_k_base",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "W[0:base_set, :].norm(p=2, dim=1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.mul(W_k_base, W_k_base)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "W_k_base",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "W[0:base_set, :].norm(p=2, dim=1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.mul(W_k_base, W_k_base)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_112": {
                "variable": {
                    "value": "alpha_temp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "W_k_base",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "W[0:base_set, :].norm(p=2, dim=1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.mul(W_k_base, W_k_base)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_121": {
                "variable": {
                    "value": "alpha_temp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "W_k_low",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "W[base_set:base_set + low_shot_set, :].norm(p=2, dim=1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.mul(W_k_low, W_k_low) - alpha",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Tensor_63": {},
            "normalize_73": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.resnet34(inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_136": {
                "input": {
                    "value": "norm_input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.norm_detach(input=input, is_detach=is_detach)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_136": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pow_137": {
                "input": {
                    "value": "norm_weight",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.norm_detach(input=self.classifier.weight, is_detach=is_detach)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_137": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "t_137": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_98": {
                "input": {
                    "value": "torch.mul(temp, one_hot_label)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mul_119": {
                "input": {
                    "value": "W_k_low",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "W[base_set:base_set + low_shot_set, :].norm(p=2, dim=1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.mul(W_k_low, W_k_low) - alpha",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "W_k_low",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "W[base_set:base_set + low_shot_set, :].norm(p=2, dim=1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.mul(W_k_low, W_k_low) - alpha",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mul_98": {
                "input": {
                    "value": "temp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.mm(input_, W_.t())",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "one_hot_label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.index_select(index, dim=0, index=targets.cpu()).cuda()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Model/our_norm_model.py": {
        "torch": {
            "normalize_18": {
                "variable": {
                    "value": "input_",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Parameter_35": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_features, in_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_136": {
                "variable": {
                    "value": "similarity",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dist / (-2.0 * self.sigma)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softplus_25": {
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Parameter_37": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linear_57": {
                "input": {
                    "value": "input_",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input / input.norm(p=2, dim=1, keepdim=True).clamp(min=1e-12).expand_as(input).detach()",
                            "BinOp"
                        ],
                        [
                            "F.normalize(input)",
                            "Call"
                        ],
                        [
                            "norm_detach(input, is_detach) if F_norm else input",
                            "IfExp"
                        ]
                    ]
                },
                "weight": {
                    "value": "W_",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "norm_detach(W, is_detach) if W_norm else W",
                            "IfExp"
                        ]
                    ]
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_96": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.num_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "mul_121": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cosine",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.classifier(x, self.F_norm, self.W_norm, self.W_softp, self.is_norm_detach)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "normalize_104": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.resnet34(inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_132": {
                "input": {
                    "value": "norm_input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.norm_detach(input=input, is_detach=is_detach)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_132": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pow_133": {
                "input": {
                    "value": "norm_weight",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.norm_detach(input=self.classifier.weight, is_detach=is_detach)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_133": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "t_133": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "Model/resnet_our.py": {
        "torch": {
            "avg_pool2d_74": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "module(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, x.size()[2:])",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.feat(x)",
                            "Call"
                        ],
                        [
                            "self.feat_bn(x)",
                            "Call"
                        ],
                        [
                            "F.normalize(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "self.classifier(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "x.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "normalize_81": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "module(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, x.size()[2:])",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.feat(x)",
                            "Call"
                        ],
                        [
                            "self.feat_bn(x)",
                            "Call"
                        ],
                        [
                            "F.normalize(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "self.classifier(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_46": {
                "variable": {
                    "value": "self.feat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.base.fc.in_features",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.num_features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm1d_47": {
                "variable": {
                    "value": "self.feat_bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.num_features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_56": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_58": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.num_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_83": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "module(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, x.size()[2:])",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.feat(x)",
                            "Call"
                        ],
                        [
                            "self.feat_bn(x)",
                            "Call"
                        ],
                        [
                            "F.normalize(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "self.classifier(x)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "centerlosses.py": {
        "torch": {
            "arange_43": {
                "variable": {
                    "value": "classes",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_53": {
                "variable": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(dist)",
                            "Call"
                        ],
                        [
                            "torch.pow(inputs, 2).sum(dim=1, keepdim=True).expand(n, n)",
                            "Call"
                        ],
                        [
                            "dist + dist.t()",
                            "BinOp"
                        ],
                        [
                            "dist.clamp(min=1e-12).sqrt()",
                            "Call"
                        ],
                        [
                            "torch.mm(inputs, self.M_).mm(inputs.t())",
                            "Call"
                        ],
                        [
                            "self.distance(inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "MarginRankingLoss_63": {
                "variable": {
                    "value": "self.ranking_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "margin": {
                    "value": "margin",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0.4",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "pow_68": {
                "variable": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_68": {
                "variable": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_78": {
                "variable": {
                    "value": "dist_ap",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "dist_ap",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat(dist_ap)",
                            "Call"
                        ],
                        [
                            "torch.cat(dist_ap)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_79": {
                "variable": {
                    "value": "dist_an",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "dist_an",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat(dist_an)",
                            "Call"
                        ],
                        [
                            "torch.cat(dist_an)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_106": {
                "variable": {
                    "value": "mask_",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs.size(0)",
                            "Call"
                        ],
                        [
                            "targets.size(0)",
                            "Call"
                        ],
                        [
                            "inputs.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "mul_106": {
                "variable": {
                    "value": "mask_",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.inv_lamda",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_107": {
                "variable": {
                    "value": "mask_negative",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs.size(0)",
                            "Call"
                        ],
                        [
                            "targets.size(0)",
                            "Call"
                        ],
                        [
                            "inputs.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_108": {
                "variable": {
                    "value": "margin_",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs.size(0)",
                            "Call"
                        ],
                        [
                            "targets.size(0)",
                            "Call"
                        ],
                        [
                            "inputs.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "mul_108": {
                "variable": {
                    "value": "margin_",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.max_margin",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mul_115": {
                "variable": {
                    "value": "loss_m",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Variable(mask_)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "inputs - Variable(margin_)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_115": {
                "variable": {
                    "value": "loss_m",
                    "type": "Variable",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "mul_116": {
                "variable": {
                    "value": "loss_inter",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss_m",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.mul(Variable(mask_), inputs - Variable(margin_)).clamp(min=0.0)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "Variable(mask_negative)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_164": {
                "variable": {
                    "value": "self.M_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(feature_size, feature_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MarginRankingLoss_167": {
                "variable": {
                    "value": "self.ranking_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "margin": {
                    "value": "margin",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0.4",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "mm_170": {
                "variable": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_186": {
                "variable": {
                    "value": "dist_ap",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "dist_ap",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat(dist_ap)",
                            "Call"
                        ],
                        [
                            "torch.cat(dist_ap)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_187": {
                "variable": {
                    "value": "dist_an",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "dist_an",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat(dist_an)",
                            "Call"
                        ],
                        [
                            "torch.cat(dist_an)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_28": {
                "variable": {
                    "value": "self.centers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(self.num_classes, self.feat_dim).cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_30": {
                "variable": {
                    "value": "self.centers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(self.num_classes, self.feat_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pow_39": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_39": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pow_40": {
                "input": {
                    "value": "self.centers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_40": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "t_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_143": {
                "*size": {
                    "value": "cosine.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_28": {
                "*size": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.feat_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_30": {
                "*size": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.feat_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "cifar10.py": {
        "torch": {
            "DataLoader_23": {
                "variable": {
                    "value": "trainloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tv.datasets.CIFAR10(root='./data/cifar10', train=True, download=True, transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_37": {
                "variable": {
                    "value": "testloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tv.datasets.CIFAR10(root='./data/cifar10', train=False, download=True, transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "dataset_market.py": {
        "torch": {
            "DataLoader_37": {
                "dataset": {
                    "value": "image_datasets[x]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "dist_metric.py": {
        "torch": {
            "stack_19": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "features.values()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tensor_20": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "is_tensor_24": {
                "obj": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "X.numpy()",
                            "Call"
                        ],
                        [
                            "self.metric.transform(X)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(X)",
                            "Call"
                        ],
                        [
                            "self.metric.transform(X)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_27": {
                "variable": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "X.numpy()",
                            "Call"
                        ],
                        [
                            "self.metric.transform(X)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(X)",
                            "Call"
                        ],
                        [
                            "self.metric.transform(X)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "evaluate/evaluators.py": {
        "torch": {
            "cat_76": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[features[f].unsqueeze(0) for (f, _, _) in query]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_77": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[features[f].unsqueeze(0) for (f, _, _) in gallery]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_68": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "list(features.values())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pow_19": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.view(m, -1)",
                            "Call"
                        ],
                        [
                            "metric.transform(x)",
                            "Call"
                        ],
                        [
                            "torch.cat(list(features.values()))",
                            "Call"
                        ],
                        [
                            "x.view(n, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat([features[f].unsqueeze(0) for (f, _, _) in query], 0)",
                            "Call"
                        ],
                        [
                            "x.view(m, -1)",
                            "Call"
                        ],
                        [
                            "metric.transform(x)",
                            "Call"
                        ],
                        [
                            "metric.transform(x)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_19": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pow_20": {
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "y.view(n, -1)",
                            "Call"
                        ],
                        [
                            "metric.transform(y)",
                            "Call"
                        ],
                        [
                            "torch.cat([features[f].unsqueeze(0) for (f, _, _) in gallery], 0)",
                            "Call"
                        ],
                        [
                            "y.view(n, -1)",
                            "Call"
                        ],
                        [
                            "metric.transform(y)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_20": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "t_20": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pow_86": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.view(m, -1)",
                            "Call"
                        ],
                        [
                            "metric.transform(x)",
                            "Call"
                        ],
                        [
                            "torch.cat(list(features.values()))",
                            "Call"
                        ],
                        [
                            "x.view(n, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat([features[f].unsqueeze(0) for (f, _, _) in query], 0)",
                            "Call"
                        ],
                        [
                            "x.view(m, -1)",
                            "Call"
                        ],
                        [
                            "metric.transform(x)",
                            "Call"
                        ],
                        [
                            "metric.transform(x)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_86": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pow_87": {
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "y.view(n, -1)",
                            "Call"
                        ],
                        [
                            "metric.transform(y)",
                            "Call"
                        ],
                        [
                            "torch.cat([features[f].unsqueeze(0) for (f, _, _) in gallery], 0)",
                            "Call"
                        ],
                        [
                            "y.view(n, -1)",
                            "Call"
                        ],
                        [
                            "metric.transform(y)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_87": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "t_87": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_201": {
                "variable": {
                    "value": "accuracy",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "acc",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_201": {
                "variable": {
                    "value": "accuracy",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pow_72": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.view(m, -1)",
                            "Call"
                        ],
                        [
                            "metric.transform(x)",
                            "Call"
                        ],
                        [
                            "torch.cat(list(features.values()))",
                            "Call"
                        ],
                        [
                            "x.view(n, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat([features[f].unsqueeze(0) for (f, _, _) in query], 0)",
                            "Call"
                        ],
                        [
                            "x.view(m, -1)",
                            "Call"
                        ],
                        [
                            "metric.transform(x)",
                            "Call"
                        ],
                        [
                            "metric.transform(x)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_72": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_155": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mm_73": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.view(m, -1)",
                            "Call"
                        ],
                        [
                            "metric.transform(x)",
                            "Call"
                        ],
                        [
                            "torch.cat(list(features.values()))",
                            "Call"
                        ],
                        [
                            "x.view(n, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat([features[f].unsqueeze(0) for (f, _, _) in query], 0)",
                            "Call"
                        ],
                        [
                            "x.view(m, -1)",
                            "Call"
                        ],
                        [
                            "metric.transform(x)",
                            "Call"
                        ],
                        [
                            "metric.transform(x)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "x.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_163": {
                "variable": {
                    "value": "(_, predicted)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "outputs.data.cpu()",
                            "Call"
                        ],
                        [
                            "extract_cnn_feature(model, imgs, norm_test=norm_test)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_174": {
                "variable": {
                    "value": "(_, predicted)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "outputs.data.cpu()",
                            "Call"
                        ],
                        [
                            "extract_cnn_feature(model, imgs, norm_test=norm_test)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_185": {
                "variable": {
                    "value": "(_, predicted)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "outputs.data.cpu()",
                            "Call"
                        ],
                        [
                            "extract_cnn_feature(model, imgs, norm_test=norm_test)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_196": {
                "variable": {
                    "value": "(_, predicted)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "outputs.data.cpu()",
                            "Call"
                        ],
                        [
                            "extract_cnn_feature(model, imgs, norm_test=norm_test)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "losses.py": {
        "torch": {
            "arange_43": {
                "variable": {
                    "value": "classes",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_53": {
                "variable": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(dist)",
                            "Call"
                        ],
                        [
                            "torch.pow(inputs, 2).sum(dim=1, keepdim=True).expand(n, n)",
                            "Call"
                        ],
                        [
                            "dist + dist.t()",
                            "BinOp"
                        ],
                        [
                            "dist.clamp(min=1e-12).sqrt()",
                            "Call"
                        ],
                        [
                            "torch.mm(inputs, self.M_).mm(inputs.t())",
                            "Call"
                        ],
                        [
                            "self.distance(inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "MarginRankingLoss_63": {
                "variable": {
                    "value": "self.ranking_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "margin": {
                    "value": "margin",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0.4",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "pow_68": {
                "variable": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_68": {
                "variable": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_78": {
                "variable": {
                    "value": "dist_ap",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "dist_ap",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat(dist_ap)",
                            "Call"
                        ],
                        [
                            "torch.cat(dist_ap)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_79": {
                "variable": {
                    "value": "dist_an",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "dist_an",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat(dist_an)",
                            "Call"
                        ],
                        [
                            "torch.cat(dist_an)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_106": {
                "variable": {
                    "value": "mask_",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs.size(0)",
                            "Call"
                        ],
                        [
                            "targets.size(0)",
                            "Call"
                        ],
                        [
                            "inputs.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "mul_106": {
                "variable": {
                    "value": "mask_",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.inv_lamda",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_107": {
                "variable": {
                    "value": "mask_negative",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs.size(0)",
                            "Call"
                        ],
                        [
                            "targets.size(0)",
                            "Call"
                        ],
                        [
                            "inputs.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_108": {
                "variable": {
                    "value": "margin_",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs.size(0)",
                            "Call"
                        ],
                        [
                            "targets.size(0)",
                            "Call"
                        ],
                        [
                            "inputs.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "mul_108": {
                "variable": {
                    "value": "margin_",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.max_margin",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mul_115": {
                "variable": {
                    "value": "loss_m",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Variable(mask_)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "inputs - Variable(margin_)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_115": {
                "variable": {
                    "value": "loss_m",
                    "type": "Variable",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "mul_116": {
                "variable": {
                    "value": "loss_inter",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss_m",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.mul(Variable(mask_), inputs - Variable(margin_)).clamp(min=0.0)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "Variable(mask_negative)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_164": {
                "variable": {
                    "value": "self.M_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(feature_size, feature_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MarginRankingLoss_167": {
                "variable": {
                    "value": "self.ranking_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "margin": {
                    "value": "margin",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0.4",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "mm_170": {
                "variable": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_186": {
                "variable": {
                    "value": "dist_ap",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "dist_ap",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat(dist_ap)",
                            "Call"
                        ],
                        [
                            "torch.cat(dist_ap)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_187": {
                "variable": {
                    "value": "dist_an",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "dist_an",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat(dist_an)",
                            "Call"
                        ],
                        [
                            "torch.cat(dist_an)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_28": {
                "variable": {
                    "value": "self.centers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(self.num_classes, self.feat_dim).cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_30": {
                "variable": {
                    "value": "self.centers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(self.num_classes, self.feat_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pow_39": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_39": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pow_40": {
                "input": {
                    "value": "self.centers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_40": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "t_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_143": {
                "*size": {
                    "value": "cosine.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_28": {
                "*size": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.feat_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_30": {
                "*size": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.feat_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "metric_learning/tmm.py": {
        "torch": {
            "is_available_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "metric_triplet_loss.py": {
        "torch": {
            "DataLoader_47": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "Preprocessor(train_set, root=dataset.images_dir, transform=train_transformer)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "workers",
                    "type": "Variable",
                    "possible_values": []
                },
                "sampler": {
                    "value": "RandomIdentitySampler(train_set, num_instances)",
                    "type": "Call",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_54": {
                "variable": {
                    "value": "val_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "Preprocessor(dataset.val, root=dataset.images_dir, transform=test_transformer)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "workers",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_60": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "Preprocessor(list(set(dataset.query) | set(dataset.gallery)), root=dataset.images_dir, transform=test_transformer)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "workers",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataParallel_111": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "models.Norm_ResNet50(num_features=kwargs['features'], dropout=kwargs['dropout'], W_std=kwargs['W_std'], F_norm=False, W_norm=False, is_norm_detach=False, is_gaussian_detach=False, num_classes=num_classes, gamma=kwargs['gamma'])",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_136": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "kwargs['lr']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "kwargs['weight_decay']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "minist.py": {
        "torch": {
            "DataLoader_26": {
                "variable": {
                    "value": "data[train]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dsets.MNIST(root='./data/mnist', train=True, transform=transforms.ToTensor(), download=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "100",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_29": {
                "variable": {
                    "value": "data[test]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dsets.MNIST(root='./data/mnist', train=False, transform=transforms.ToTensor(), download=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "100",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "softmax_loss.py": {
        "torch": {
            "DataLoader_47": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "Preprocessor(train_set, root=dataset.images_dir, transform=train_transformer)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "workers",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_53": {
                "variable": {
                    "value": "val_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "Preprocessor(dataset.val, root=dataset.images_dir, transform=test_transformer)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "workers",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_59": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "Preprocessor(list(set(dataset.query) | set(dataset.gallery)), root=dataset.images_dir, transform=test_transformer)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "workers",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_65": {
                "variable": {
                    "value": "query_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "Preprocessor(dataset.query, root=dataset.images_dir, transform=test_transformer)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "workers",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_71": {
                "variable": {
                    "value": "gallery_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "Preprocessor(dataset.gallery, root=dataset.images_dir, transform=test_transformer)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "workers",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataParallel_122": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "models.Norm_ResNet50(num_features=kwargs['features'], dropout=kwargs['dropout'], W_std=kwargs['W_std'], F_norm=kwargs['F_norm'], W_norm=kwargs['W_norm'], is_norm_detach=False, is_gaussian_detach=False, num_classes=num_classes, gamma=kwargs['gamma'])",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_135": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_147": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "param_groups",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[{'params': model.module.base.parameters(), 'lr_mult': 0.1}, {'params': new_params, 'lr_mult': 1.0}]",
                            "List"
                        ],
                        [
                            "model.parameters()",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "kwargs['lr']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "momentum": {
                    "value": "kwargs['momentum']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "kwargs['weight_decay']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataParallel_204": {
                "variable": {
                    "value": "model_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model_test",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "models.Norm_ResNet50(num_features=kwargs['features'], dropout=kwargs['dropout'], W_std=kwargs['W_std'], F_norm=kwargs['F_norm'], W_norm=kwargs['W_norm'], is_norm_detach=False, is_gaussian_detach=False, num_classes=num_classes, gamma=kwargs['gamma'], fixed=True)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model_test).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "SGD_218": {
                "variable": {
                    "value": "optimizer_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model_test.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "kwargs['lr']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "momentum": {
                    "value": "kwargs['momentum']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "kwargs['weight_decay']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "softmax_loss_modified.py": {
        "torch": {
            "DataParallel_60": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model_norm.Norm_ResNet50(num_features=kwargs['features'], dropout=kwargs['dropout'], CCS=kwargs['CCS'], up_term=kwargs['up_term'], is_norm_detach=True, is_gaussian_detach=False, num_classes=num_classes, gamma=kwargs['gamma'])",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_66": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_78": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "param_groups",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[{'params': model.module.base.parameters(), 'lr_mult': 0.1}, {'params': new_params, 'lr_mult': 1.0}]",
                            "List"
                        ],
                        [
                            "model.parameters()",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "kwargs['lr']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "momentum": {
                    "value": "kwargs['momentum']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "kwargs['weight_decay']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "train_bth_exps.py": {
        "torch": {}
    },
    "train_bth_exps_2.py": {
        "torch": {}
    },
    "trainers.py": {
        "torch": {
            "sum_45": {
                "variable": {
                    "value": "loss_a",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss_a",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sum(loss_a)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_46": {
                "variable": {
                    "value": "loss_up",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss_up",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sum(loss_up)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_66": {
                "input": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.criterion(outputs, targets)",
                            "Call"
                        ],
                        [
                            "loss + loss_a",
                            "BinOp"
                        ],
                        [
                            "self.criterion(outputs, targets)",
                            "Call"
                        ],
                        [
                            "loss + loss_up",
                            "BinOp"
                        ],
                        [
                            "self.criterion(outputs, targets)",
                            "Call"
                        ],
                        [
                            "loss + loss_a + loss_up",
                            "BinOp"
                        ],
                        [
                            "0",
                            "Constant"
                        ]
                    ]
                }
            }
        }
    },
    "utils.py": {
        "torch": {
            "randperm_34": {
                "variable": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "self.num_samples",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_75": {
                "obj": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "fpath",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'checkpoint.pth.tar'",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "load_82": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "fpath",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'checkpoint.pth.tar'",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "is_tensor_124": {
                "obj": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "from_numpy_134": {
                "ndarray": {
                    "value": "ndarray",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "is_tensor_135": {
                "obj": {
                    "value": "ndarray",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    }
}