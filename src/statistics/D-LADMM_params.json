{
    "main_lena.py": {
        "torch": {
            "is_available_159": {
                "variable": {
                    "value": "use_cuda",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "zeros_180": {
                "variable": {
                    "value": "E0",
                    "possible_values": []
                },
                "*size": {
                    "value": "m",
                    "possible_values": [
                        [
                            "self.modules()",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "batch_size",
                    "possible_values": [
                        [
                            "20",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            },
            "zeros_181": {
                "variable": {
                    "value": "L0",
                    "possible_values": []
                },
                "*size": {
                    "value": "m",
                    "possible_values": [
                        [
                            "self.modules()",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "batch_size",
                    "possible_values": [
                        [
                            "20",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            },
            "from_numpy_182": {
                "variable": {
                    "value": "A_tensor",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "A_ori",
                    "possible_values": [
                        [
                            "img_data['D']",
                            "Subscript"
                        ],
                        [
                            "A_ori.astype(np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "MSELoss_192": {
                "variable": {
                    "value": "criterion",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "zeros_196": {
                "variable": {
                    "value": "best_pic",
                    "possible_values": []
                },
                "*size": {
                    "value": "256",
                    "possible_values": []
                },
                "out": {
                    "value": "1024",
                    "possible_values": []
                }
            },
            "mul_119": {
                "variable": {
                    "value": "inputs2",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "possible_values": []
                },
                "other": {
                    "value": "inputs",
                    "possible_values": []
                }
            },
            "sum_120": {
                "variable": {
                    "value": "norm2",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs2",
                    "possible_values": [
                        [
                            "torch.mul(inputs, inputs)",
                            "Call"
                        ],
                        [
                            "np.multiply(inputs, inputs)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "rsqrt_121": {
                "variable": {
                    "value": "root_inv",
                    "possible_values": []
                },
                "input": {
                    "value": "norm2",
                    "possible_values": [
                        [
                            "torch.sum(inputs2, 1)",
                            "Call"
                        ],
                        [
                            "np.sum(inputs2, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "t_123": {
                "variable": {
                    "value": "tmp_var2",
                    "possible_values": []
                },
                "input": {
                    "value": "tmp_var1",
                    "possible_values": [
                        [
                            "root_inv.expand(dim, batch_size)",
                            "Call"
                        ],
                        [
                            "np.tile(root_inv, dim1)",
                            "Call"
                        ]
                    ]
                }
            },
            "mul_124": {
                "variable": {
                    "value": "nml_inputs",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "possible_values": []
                },
                "other": {
                    "value": "tmp_var2",
                    "possible_values": [
                        [
                            "torch.t(tmp_var1)",
                            "Call"
                        ],
                        [
                            "tmp_var1.reshape(dim1, dim2)",
                            "Call"
                        ]
                    ]
                }
            },
            "mse_loss_141": {
                "variable": {
                    "value": "mse",
                    "possible_values": []
                },
                "input": {
                    "value": "x1",
                    "possible_values": [
                        [
                            "x1 * 255.0",
                            "BinOp"
                        ]
                    ]
                },
                "target": {
                    "value": "x2",
                    "possible_values": [
                        [
                            "x2 * 255.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_231": {
                "variable": {
                    "value": "mse_value",
                    "possible_values": []
                },
                "*size": {
                    "value": "layers",
                    "possible_values": [
                        [
                            "15",
                            "Constant"
                        ]
                    ]
                }
            },
            "ParameterList_30": {
                "variable": {
                    "value": "self.beta1",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ParameterList_31": {
                "variable": {
                    "value": "self.beta2",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ModuleList_32": {
                "variable": {
                    "value": "self.fc",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "tensor_40": {
                "variable": {
                    "value": "self.active_para",
                    "possible_values": []
                },
                "data": {
                    "value": "0.025",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            },
            "tensor_41": {
                "variable": {
                    "value": "self.active_para1",
                    "possible_values": []
                },
                "data": {
                    "value": "0.06",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            },
            "rand_179": {
                "*size": {
                    "value": "d",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "possible_values": [
                        [
                            "20",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            },
            "from_numpy_207": {
                "variable": {
                    "value": "input_bs",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "input_bs",
                    "possible_values": [
                        [
                            "X[:, address]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(input_bs)",
                            "Call"
                        ],
                        [
                            "X_ts[:, j * batch_size:(j + 1) * batch_size]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(input_bs)",
                            "Call"
                        ],
                        [
                            "X_ts[:, jjj * batch_size:(jjj + 1) * batch_size]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(input_bs)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_228": {
                "obj": {
                    "value": "model.state_dict()",
                    "possible_values": []
                },
                "f": {
                    "value": "model.name()",
                    "possible_values": []
                }
            },
            "from_numpy_234": {
                "variable": {
                    "value": "input_bs",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "input_bs",
                    "possible_values": [
                        [
                            "X[:, address]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(input_bs)",
                            "Call"
                        ],
                        [
                            "X_ts[:, j * batch_size:(j + 1) * batch_size]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(input_bs)",
                            "Call"
                        ],
                        [
                            "X_ts[:, jjj * batch_size:(jjj + 1) * batch_size]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(input_bs)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_239": {
                "variable": {
                    "value": "input_gt",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "input_gt",
                    "possible_values": [
                        [
                            "X_gt[:, j * batch_size:(j + 1) * batch_size]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(input_gt)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_142": {
                "data": {
                    "value": "48.131",
                    "possible_values": []
                }
            },
            "softplus_146": {
                "input": {
                    "value": "-x - alpha",
                    "possible_values": []
                }
            },
            "Adam_201": {
                "params": {
                    "value": "model.parameters()",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "possible_values": [
                        [
                            "0.0002 * 0.5 ** (epoch // 30)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "SGD_201": {
                "params": {
                    "value": "model.parameters()",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "possible_values": [
                        [
                            "0.0002 * 0.5 ** (epoch // 30)",
                            "BinOp"
                        ]
                    ]
                },
                "momentum": {
                    "value": "0.9",
                    "possible_values": []
                }
            },
            "tensor_246": {
                "data": {
                    "value": "48.131",
                    "possible_values": []
                }
            },
            "Parameter_49": {
                "variable": {
                    "value": "m.weight",
                    "possible_values": []
                },
                "data": {
                    "value": "self.A.t() + 0.001 * torch.randn_like(self.A.t())",
                    "possible_values": []
                }
            },
            "relu_53": {
                "input": {
                    "value": "-1.0 * x - thershold",
                    "possible_values": []
                }
            },
            "log10_142": {
                "input": {
                    "value": "mse",
                    "possible_values": [
                        [
                            "F.mse_loss(x1, x2)",
                            "Call"
                        ]
                    ]
                }
            },
            "log10_246": {
                "input": {
                    "value": "mse_value",
                    "possible_values": [
                        [
                            "torch.zeros(layers)",
                            "Call"
                        ],
                        [
                            "mse_value / (n_test // batch_size)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "from_numpy_252": {
                "variable": {
                    "value": "input_bs",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "input_bs",
                    "possible_values": [
                        [
                            "X[:, address]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(input_bs)",
                            "Call"
                        ],
                        [
                            "X_ts[:, j * batch_size:(j + 1) * batch_size]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(input_bs)",
                            "Call"
                        ],
                        [
                            "X_ts[:, jjj * batch_size:(jjj + 1) * batch_size]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(input_bs)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_35": {
                "data": {
                    "value": "torch.ones(self.m, self.batch_size, dtype=torch.float32)",
                    "possible_values": []
                }
            },
            "Parameter_36": {
                "data": {
                    "value": "torch.ones(self.m, self.batch_size, dtype=torch.float32)",
                    "possible_values": []
                }
            },
            "Linear_37": {
                "in_features": {
                    "value": "self.m",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.d",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "mse_loss_243": {
                "input": {
                    "value": "255 * input_gt_var.cuda()",
                    "possible_values": []
                },
                "target": {
                    "value": "255 * torch.mm(A_tensor, Z[jj])",
                    "possible_values": []
                }
            },
            "ones_35": {
                "*size": {
                    "value": "self.m",
                    "possible_values": []
                },
                "out": {
                    "value": "self.batch_size",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            },
            "ones_36": {
                "*size": {
                    "value": "self.m",
                    "possible_values": []
                },
                "out": {
                    "value": "self.batch_size",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            },
            "mean_215": {
                "input": {
                    "value": "torch.abs(Z[k])",
                    "possible_values": []
                }
            },
            "mm_255": {
                "input": {
                    "value": "A_tensor",
                    "possible_values": [
                        [
                            "torch.from_numpy(A_ori)",
                            "Call"
                        ],
                        [
                            "A_tensor.cuda()",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "Z[jj]",
                    "possible_values": []
                }
            },
            "mm_243": {
                "input": {
                    "value": "A_tensor",
                    "possible_values": [
                        [
                            "torch.from_numpy(A_ori)",
                            "Call"
                        ],
                        [
                            "A_tensor.cuda()",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "Z[jj]",
                    "possible_values": []
                }
            },
            "randn_like_49": {
                "input": {
                    "value": "self.A.t()",
                    "possible_values": []
                }
            },
            "abs_215": {
                "input": {
                    "value": "Z[k]",
                    "possible_values": []
                }
            },
            "mm_215": {
                "input": {
                    "value": "A_tensor.t()",
                    "possible_values": []
                },
                "mat2": {
                    "value": "L[k]",
                    "possible_values": []
                }
            }
        }
    }
}