{
    "train.py": {
        "sklearn": {
            "accuracy_score_166": {
                "variable": {
                    "value": "train_acc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "y_true_train + list(y.cpu().data.numpy())",
                            "BinOp"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "y_pred_train + list(pred_idx.cpu().data.numpy())",
                            "BinOp"
                        ]
                    ]
                }
            },
            "accuracy_score_190": {
                "variable": {
                    "value": "valacc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "y_true_val + list(y.cpu().data.numpy())",
                            "BinOp"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "y_pred_val + list(pred_idx.cpu().data.numpy())",
                            "BinOp"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "manual_seed_16": {
                "seed": {
                    "value": "163",
                    "type": "int",
                    "possible_values": []
                }
            },
            "NLLLoss_61": {
                "variable": {
                    "value": "self.loss_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_63": {
                "variable": {
                    "value": "self.opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, self.model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "config.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "config.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_105": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "self.model_file",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LambdaLR_79": {
                "variable": {
                    "value": "lr_scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr_lambda": {
                    "value": "lrd_func(config)",
                    "type": "Call",
                    "possible_values": []
                },
                "last_epoch": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "save_124": {
                "obj": {
                    "value": "save_parameters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'state_dict': self.model.state_dict(), 'opt': self.opt, 'opt_state': self.opt.state_dict(), 'train_loss': self.total_train_loss, 'train_acc': self.total_train_acc, 'val_loss': self.total_val_loss, 'val_acc': self.total_val_acc, 'epochs': self.epochs}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "self.model_file",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_160": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(X, p)",
                            "Call"
                        ],
                        [
                            "self.model(X, None)",
                            "Call"
                        ],
                        [
                            "self.model(X, p)",
                            "Call"
                        ],
                        [
                            "self.model(X, None)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_185": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(X, p)",
                            "Call"
                        ],
                        [
                            "self.model(X, None)",
                            "Call"
                        ],
                        [
                            "self.model(X, p)",
                            "Call"
                        ],
                        [
                            "self.model(X, None)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "app.py": {
        "torch": {
            "max_55": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(X, None)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_68": {
                "f": {
                    "value": "config.model_file",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "config.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/models.py": {
        "torch": {
            "LSTM_41": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "self.bidirectional",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "self.num_layers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_50": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_softmax_73": {
                "variable": {
                    "value": "tag_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tag_space",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.hidden2tag(X.view(-1, X.shape[2]))",
                            "Call"
                        ],
                        [
                            "self.hidden2tag(X.view(-1, X.shape[2]))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LSTM_119": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "self.bidirectional",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "self.num_layers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_128": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_129": {
                "variable": {
                    "value": "self.dropout_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.dropout_embed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_135": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Conv3d(in_channels=1, out_channels=self.conv_filter_nums, kernel_size=(1, fs, self.char_dim)) for fs in self.conv_filter_sizes]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_142": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "len(self.conv_filter_sizes) * self.conv_filter_nums",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.char_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_186": {
                "variable": {
                    "value": "X_char",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "X_char",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([[xi + [0] * (length - len(xi)) for xi in each] for each in word_int])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(X_char)",
                            "Call"
                        ],
                        [
                            "self.get_char_tensor(X)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_241": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(X, char_conv)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_softmax_250": {
                "variable": {
                    "value": "tag_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tag_space",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.hidden2tag(X.view(-1, X.shape[2]))",
                            "Call"
                        ],
                        [
                            "self.hidden2tag(X.view(-1, X.shape[2]))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_32": {
                "variable": {
                    "value": "self.word_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_38": {
                "variable": {
                    "value": "one_hot_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pos_one_hot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.eye(self.pos_size)",
                            "Call"
                        ],
                        [
                            "np.eye(self.pos_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "Embedding_39": {
                "variable": {
                    "value": "self.one_hot_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.pos_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.pos_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "_weight": {
                    "value": "one_hot_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(pos_one_hot).float()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(pos_one_hot).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_46": {
                "variable": {
                    "value": "self.hidden2tag",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.tagset_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_48": {
                "variable": {
                    "value": "self.hidden2tag",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.tagset_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_54": {
                "variable": {
                    "value": "h0",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2 * self.num_layers",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "tensor_size[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_55": {
                "variable": {
                    "value": "c0",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2 * self.num_layers",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "tensor_size[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_57": {
                "variable": {
                    "value": "h0",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.num_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "tensor_size[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_58": {
                "variable": {
                    "value": "c0",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.num_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "tensor_size[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_69": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(X, POS)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Embedding_98": {
                "variable": {
                    "value": "self.char_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.char_embed_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.char_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_99": {
                "variable": {
                    "value": "self.graph_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.graph_embed_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.char_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_111": {
                "variable": {
                    "value": "one_hot_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pos_one_hot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.eye(self.pos_size)",
                            "Call"
                        ],
                        [
                            "np.eye(self.pos_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "Embedding_112": {
                "variable": {
                    "value": "self.one_hot_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.pos_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.pos_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "_weight": {
                    "value": "one_hot_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(pos_one_hot).float()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(pos_one_hot).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "Embedding_117": {
                "variable": {
                    "value": "self.word_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_124": {
                "variable": {
                    "value": "self.hidden2tag",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.tagset_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_126": {
                "variable": {
                    "value": "self.hidden2tag",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.tagset_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_226": {
                "variable": {
                    "value": "h0",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2 * self.num_layers",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "tensor_size[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_227": {
                "variable": {
                    "value": "c0",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2 * self.num_layers",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "tensor_size[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_229": {
                "variable": {
                    "value": "h0",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.num_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "tensor_size[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_230": {
                "variable": {
                    "value": "c0",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.num_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "tensor_size[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_246": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(X, POS)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "relu_213": {
                "input": {
                    "value": "conv(input_embed)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_216": {
                "input": {
                    "value": "torch.max(conv, -2)[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_218": {
                "tensors": {
                    "value": "pooled",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.squeeze(torch.max(conv, -2)[0], -1) for conv in conved]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv3d_136": {
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.conv_filter_nums",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, fs, self.char_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "max_216": {
                "input": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "utils/dataloader.py": {
        "torch": {
            "from_numpy_96": {
                "variable": {
                    "value": "self.one_hot_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.pos_one_hot",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "utils/eval.py": {
        "torch": {
            "max_162": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(X, p)",
                            "Call"
                        ],
                        [
                            "self.model(X, None)",
                            "Call"
                        ],
                        [
                            "self.model(X, p)",
                            "Call"
                        ],
                        [
                            "self.model(X, None)",
                            "Call"
                        ],
                        [
                            "self.model(X, p)",
                            "Call"
                        ],
                        [
                            "self.model(X, None)",
                            "Call"
                        ],
                        [
                            "self.model(X, None)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_65": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(X, p)",
                            "Call"
                        ],
                        [
                            "self.model(X, None)",
                            "Call"
                        ],
                        [
                            "self.model(X, p)",
                            "Call"
                        ],
                        [
                            "self.model(X, None)",
                            "Call"
                        ],
                        [
                            "self.model(X, p)",
                            "Call"
                        ],
                        [
                            "self.model(X, None)",
                            "Call"
                        ],
                        [
                            "self.model(X, None)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_91": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(X, p)",
                            "Call"
                        ],
                        [
                            "self.model(X, None)",
                            "Call"
                        ],
                        [
                            "self.model(X, p)",
                            "Call"
                        ],
                        [
                            "self.model(X, None)",
                            "Call"
                        ],
                        [
                            "self.model(X, p)",
                            "Call"
                        ],
                        [
                            "self.model(X, None)",
                            "Call"
                        ],
                        [
                            "self.model(X, None)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_117": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(X, p)",
                            "Call"
                        ],
                        [
                            "self.model(X, None)",
                            "Call"
                        ],
                        [
                            "self.model(X, p)",
                            "Call"
                        ],
                        [
                            "self.model(X, None)",
                            "Call"
                        ],
                        [
                            "self.model(X, p)",
                            "Call"
                        ],
                        [
                            "self.model(X, None)",
                            "Call"
                        ],
                        [
                            "self.model(X, None)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}