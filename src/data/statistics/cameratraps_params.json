{
    "api/batch_processing/postprocessing/postprocess_batch_results.py": {
        "sklearn": {
            "precision_recall_curve_663": {
                "variable": {
                    "value": "(precisions, recalls, thresholds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "gt_detections_pr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "gt_detections[b_valid_ground_truth] == 1.0",
                            "Compare"
                        ]
                    ]
                },
                "probas_pred": {
                    "value": "p_detection_pr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "p_detection[b_valid_ground_truth]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "average_precision_score_675": {
                "variable": {
                    "value": "average_precision",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "gt_detections_pr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "gt_detections[b_valid_ground_truth] == 1.0",
                            "Compare"
                        ]
                    ]
                },
                "y_score": {
                    "value": "p_detection_pr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "p_detection[b_valid_ground_truth]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "confusion_matrix_698": {
                "variable": {
                    "value": "cm",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "gt_detections_pr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "gt_detections[b_valid_ground_truth] == 1.0",
                            "Compare"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "cm_predictions",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.array(p_detection_pr) > options.confidence_threshold",
                            "Compare"
                        ]
                    ]
                },
                "labels": {
                    "value": "[False, True]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "api/batch_processing/postprocessing/repeat_detection_elimination/repeat_detections_core.py": {
        "sklearn": {}
    },
    "archive/classification_marcel/eval_two_class_pr.py": {
        "sklearn": {
            "precision_recall_curve_92": {
                "variable": {
                    "value": "(precision, recall, threshold)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "gt_labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "probas_pred": {
                    "value": "pred_scores",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        },
        "tensorflow": {
            "Graph_39": {
                "variable": {
                    "value": "model_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GraphDef_41": {
                "variable": {
                    "value": "od_graph_def",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_graph_55": {
                "variable": {
                    "value": "image_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_graph_56": {
                "variable": {
                    "value": "predictions_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "squeeze_57": {
                "variable": {
                    "value": "predictions_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "predictions_tensor",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_default_graph().get_tensor_by_name('output:0')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(predictions_tensor, [0])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "GFile_42": {
                "name": {
                    "value": "args.frozen_graph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "rb",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "import_graph_def_44": {
                "graph_def": {
                    "value": "od_graph_def",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.GraphDef()",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Session_53": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "archive/runapp.py": {
        "sklearn": {
            "MLPClassifier_157": {
                "variable": {
                    "value": "kwargs[model]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "alpha": {
                    "value": "0.0001",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "DataParallel_93": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "embedding_net",
                    "type": "Call",
                    "possible_values": [
                        [
                            "SoftmaxNet(checkpoint['arch'], checkpoint['feat_dim'], checkpoint['num_classes'], False)",
                            "Call"
                        ],
                        [
                            "NormalizedEmbeddingNet(checkpoint['arch'], checkpoint['feat_dim'], False)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "classification/evaluate_model.py": {
        "sklearn": {},
        "torch": {
            "rand_100": {
                "variable": {
                    "value": "ex_img",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "img_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "efficientnet.EfficientNet.get_image_size(model_name)",
                            "Call"
                        ],
                        [
                            "224",
                            "Constant"
                        ]
                    ]
                },
                "layout": {
                    "value": "img_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "efficientnet.EfficientNet.get_image_size(model_name)",
                            "Call"
                        ],
                        [
                            "224",
                            "Constant"
                        ]
                    ]
                }
            },
            "trace_101": {
                "variable": {
                    "value": "scripted_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "train_classifier.build_model(model_name, num_classes=num_classes, pretrained=ckpt_path, finetune=False)",
                            "Call"
                        ],
                        [
                            "torch.jit.load(ckpt_path, map_location='cpu')",
                            "Call"
                        ],
                        [
                            "torch.jit.load(compiled_path, map_location='cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_174": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "ckpt_path",
                    "type": "Variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_220": {
                "variable": {
                    "value": "loss_fn",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_222": {
                "variable": {
                    "value": "loss_fn",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_177": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "compiled_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "root + '_compiled' + ext",
                            "BinOp"
                        ],
                        [
                            "trace_model(model_name, ckpt_path, num_labels, img_size)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_347": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_382": {
                "variable": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model(inputs)",
                            "Call"
                        ],
                        [
                            "outputs_mapped",
                            "Name"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_374": {
                "variable": {
                    "value": "outputs_mapped",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[batch_size, num_labels]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "outputs.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "outputs.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "logsumexp_378": {
                "variable": {
                    "value": "outputs_mapped[:, target]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs[:, cols]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "classification/train_classifier.py": {
        "sklearn": {},
        "torch": {
            "SummaryWriter_356": {
                "variable": {
                    "value": "writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "logdir",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(logdir, timestamp)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_197": {
                "variable": {
                    "value": "dataloaders[split]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "SimpleDataset(img_files=split_df['path'].tolist(), labels=split_df['label_index'].tolist(), sample_weights=weights, img_base_dir=cropped_images_dir, transform=train_transform if is_train else test_transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "labels.size(0)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "sampler",
                    "type": "Call",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "torch.utils.data.SubsetRandomSampler(range(len(split_df)))",
                            "Call"
                        ],
                        [
                            "torch.utils.data.WeightedRandomSampler(weights, num_samples=len(split_df), replacement=True)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "Variable",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_252": {
                "variable": {
                    "value": "model.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "model.fc.in_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "outputs.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_256": {
                "variable": {
                    "value": "ckpt",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "pretrained",
                    "type": "Variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "is_available_276": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_290": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_323": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.random.randint(10000) if seed is None else seed",
                            "IfExp"
                        ]
                    ]
                }
            },
            "manual_seed_all_324": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.random.randint(10000) if seed is None else seed",
                            "IfExp"
                        ]
                    ]
                }
            },
            "BCEWithLogitsLoss_366": {
                "variable": {
                    "value": "loss_fn",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_368": {
                "variable": {
                    "value": "loss_fn",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "RMSprop_378": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": []
                },
                "alpha": {
                    "value": "0.9",
                    "type": "Constant",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "Constant",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "StepLR_380": {
                "variable": {
                    "value": "lr_scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.optim.RMSprop(model.parameters(), lr, alpha=0.9, momentum=0.9, weight_decay=weight_decay)",
                            "Call"
                        ],
                        [
                            "torch.optim.SGD(model.parameters(), lr, momentum=0.9, weight_decay=weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.97 ** (1 / 2.4)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "SGD_383": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "Constant",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "StepLR_385": {
                "variable": {
                    "value": "lr_scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.optim.RMSprop(model.parameters(), lr, alpha=0.9, momentum=0.9, weight_decay=weight_decay)",
                            "Call"
                        ],
                        [
                            "torch.optim.SGD(model.parameters(), lr, momentum=0.9, weight_decay=weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_564": {
                "variable": {
                    "value": "batch_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_280": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "'cuda:{}'.format(str(device_id))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_282": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_561": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_598": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_grad_enabled_677": {
                "mode": {
                    "value": "optimizer is not None",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "WeightedRandomSampler_184": {
                "variable": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "weights": {
                    "value": "weights",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "split_df['weights'].to_numpy()",
                            "Call"
                        ],
                        [
                            "weights.to(device, non_blocking=True)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "len(split_df)",
                    "type": "Call",
                    "possible_values": []
                },
                "replacement": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "SubsetRandomSampler_188": {
                "variable": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "range(len(split_df))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataParallel_287": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "model_class(pretrained=pretrained is True)",
                            "Call"
                        ],
                        [
                            "efficientnet.EfficientNet.from_pretrained(model_name, num_classes=num_classes)",
                            "Call"
                        ],
                        [
                            "efficientnet.EfficientNet.from_name(model_name, num_classes=num_classes)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model, device_ids=device_ids)",
                            "Call"
                        ],
                        [
                            "build_model(model_name, num_classes=len(label_names), pretrained=pretrained, finetune=finetune > 0)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "device_ids",
                    "type": "Name",
                    "possible_values": [
                        [
                            "list(range(torch.cuda.device_count()))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_427": {
                "obj": {
                    "value": "state",
                    "type": "Name",
                    "possible_values": [
                        [
                            "{'epoch': epoch, 'model': getattr(model, 'module', model).state_dict(), 'val/acc': val_metrics['val/acc_top1'], 'optimizer': optimizer.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "filename",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(logdir, f'ckpt_{epoch}.pt')",
                            "Call"
                        ]
                    ]
                }
            },
            "device_count_284": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "classification/train_classifier_tf.py": {
        "sklearn": {},
        "tensorflow": {
            "Input_230": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(img_size, img_size, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Model_246": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "inputs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.keras.layers.Input(shape=(img_size, img_size, 3))",
                            "Call"
                        ],
                        [
                            "inputs.numpy().astype(np.uint8)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "outputs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.keras.layers.Dense(num_classes, kernel_initializer=tf.keras.initializers.VarianceScaling(scale=1.0 / 3.0, mode='fan_out', distribution='uniform'), name='logits')(x)",
                            "Call"
                        ],
                        [
                            "model(inputs, training=train_dropout_and_bn)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "complete_model",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "list_physical_devices_287": {
                "variable": {
                    "value": "gpus",
                    "type": "Variable",
                    "possible_values": []
                },
                "device_type": {
                    "value": "GPU",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "create_file_writer_307": {
                "variable": {
                    "value": "writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "logdir",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(logdir, timestamp)",
                            "Call"
                        ]
                    ]
                }
            },
            "ExponentialDecay_329": {
                "variable": {
                    "value": "lr_schedule",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_learning_rate": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": []
                },
                "decay_steps": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "decay_rate": {
                    "value": "0.97",
                    "type": "Constant",
                    "possible_values": []
                },
                "staircase": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "RMSprop_331": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": []
                },
                "rho": {
                    "value": "0.9",
                    "type": "Constant",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "convert_to_tensor_413": {
                "variable": {
                    "value": "cm_fig_img",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "fig_to_img(cm_fig)[np.newaxis, ...]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "softmax_478": {
                "variable": {
                    "value": "batch_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "resize_with_pad_171": {
                "variable": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "img",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.resize_with_pad(img, img_size, img_size, method=tf.image.ResizeMethod.BICUBIC)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(img)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(img, max_delta=0.25)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(img, lower=0.75, upper=1.25)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(img, lower=0.75, upper=1.25)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_with_pad(img, img_size, img_size, method=tf.image.ResizeMethod.BICUBIC)",
                            "Call"
                        ]
                    ]
                },
                "target_height": {
                    "value": "img_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "EFFICIENTNET_MODELS[model_name]['img_size']",
                            "Subscript"
                        ]
                    ]
                },
                "target_width": {
                    "value": "img_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "EFFICIENTNET_MODELS[model_name]['img_size']",
                            "Subscript"
                        ]
                    ]
                },
                "method": {
                    "value": "tf.image.ResizeMethod.BICUBIC",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "random_flip_left_right_173": {
                "variable": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "img",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.resize_with_pad(img, img_size, img_size, method=tf.image.ResizeMethod.BICUBIC)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(img)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(img, max_delta=0.25)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(img, lower=0.75, upper=1.25)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(img, lower=0.75, upper=1.25)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_with_pad(img, img_size, img_size, method=tf.image.ResizeMethod.BICUBIC)",
                            "Call"
                        ]
                    ]
                }
            },
            "random_brightness_174": {
                "variable": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "img",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.resize_with_pad(img, img_size, img_size, method=tf.image.ResizeMethod.BICUBIC)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(img)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(img, max_delta=0.25)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(img, lower=0.75, upper=1.25)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(img, lower=0.75, upper=1.25)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_with_pad(img, img_size, img_size, method=tf.image.ResizeMethod.BICUBIC)",
                            "Call"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "0.25",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "random_contrast_175": {
                "variable": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "img",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.resize_with_pad(img, img_size, img_size, method=tf.image.ResizeMethod.BICUBIC)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(img)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(img, max_delta=0.25)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(img, lower=0.75, upper=1.25)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(img, lower=0.75, upper=1.25)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_with_pad(img, img_size, img_size, method=tf.image.ResizeMethod.BICUBIC)",
                            "Call"
                        ]
                    ]
                },
                "lower": {
                    "value": "0.75",
                    "type": "Constant",
                    "possible_values": []
                },
                "upper": {
                    "value": "1.25",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "random_saturation_176": {
                "variable": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "img",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.resize_with_pad(img, img_size, img_size, method=tf.image.ResizeMethod.BICUBIC)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(img)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(img, max_delta=0.25)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(img, lower=0.75, upper=1.25)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(img, lower=0.75, upper=1.25)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_with_pad(img, img_size, img_size, method=tf.image.ResizeMethod.BICUBIC)",
                            "Call"
                        ]
                    ]
                },
                "lower": {
                    "value": "0.75",
                    "type": "Constant",
                    "possible_values": []
                },
                "upper": {
                    "value": "1.25",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "resize_with_pad_182": {
                "variable": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "img",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.resize_with_pad(img, img_size, img_size, method=tf.image.ResizeMethod.BICUBIC)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(img)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(img, max_delta=0.25)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(img, lower=0.75, upper=1.25)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(img, lower=0.75, upper=1.25)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_with_pad(img, img_size, img_size, method=tf.image.ResizeMethod.BICUBIC)",
                            "Call"
                        ]
                    ]
                },
                "target_height": {
                    "value": "img_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "EFFICIENTNET_MODELS[model_name]['img_size']",
                            "Subscript"
                        ]
                    ]
                },
                "target_width": {
                    "value": "img_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "EFFICIENTNET_MODELS[model_name]['img_size']",
                            "Subscript"
                        ]
                    ]
                },
                "method": {
                    "value": "tf.image.ResizeMethod.BICUBIC",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_seed_276": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.random.randint(10000) if seed is None else seed",
                            "IfExp"
                        ]
                    ]
                }
            },
            "BinaryCrossentropy_317": {
                "variable": {
                    "value": "loss_fn",
                    "type": "Variable",
                    "possible_values": []
                },
                "from_logits": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "reduction": {
                    "value": "tf.keras.losses.Reduction.NONE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SparseCategoricalCrossentropy_320": {
                "variable": {
                    "value": "loss_fn",
                    "type": "Variable",
                    "possible_values": []
                },
                "from_logits": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "reduction": {
                    "value": "tf.keras.losses.Reduction.NONE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "image_414": {
                "name": {
                    "value": "f'confusion_matrix/{split}'",
                    "type": "JoinedStr",
                    "possible_values": []
                },
                "data": {
                    "value": "cm_fig_img",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(fig_to_img(cm_fig)[np.newaxis, ...])",
                            "Call"
                        ]
                    ]
                },
                "step": {
                    "value": "epoch",
                    "type": "Name",
                    "possible_values": [
                        [
                            "range(epochs)",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_to_tensor_445": {
                "variable": {
                    "value": "fig_img",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "fig_to_img(fig)[np.newaxis, ...]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "top_k_483": {
                "variable": {
                    "value": "(top3_conf, top3_preds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "confs",
                    "type": "Variable",
                    "possible_values": []
                },
                "k": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "sorted": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Mean_556": {
                "variable": {
                    "value": "losses",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_240": {
                "rate": {
                    "value": "dropout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "EFFICIENTNET_MODELS[model_name]['dropout']",
                            "Subscript"
                        ]
                    ]
                },
                "name": {
                    "value": "top_dropout",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dense_241": {
                "units": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.keras.initializers.VarianceScaling(scale=1.0 / 3.0, mode='fan_out', distribution='uniform')",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "logits",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "set_memory_growth_289": {
                "device": {
                    "value": "gpu",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "gpus",
                            "Name"
                        ]
                    ]
                },
                "enable": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "scalar_338": {
                "name": {
                    "value": "lr",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "optimizer.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "step": {
                    "value": "epoch",
                    "type": "Name",
                    "possible_values": [
                        [
                            "range(epochs)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_408": {
                "name": {
                    "value": "metric",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                },
                "step": {
                    "value": "epoch",
                    "type": "Name",
                    "possible_values": [
                        [
                            "range(epochs)",
                            "Call"
                        ]
                    ]
                }
            },
            "image_446": {
                "name": {
                    "value": "f'{label_name}/{tag}'",
                    "type": "JoinedStr",
                    "possible_values": []
                },
                "data": {
                    "value": "fig_img",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(fig_to_img(fig)[np.newaxis, ...])",
                            "Call"
                        ]
                    ]
                },
                "step": {
                    "value": "epoch",
                    "type": "Name",
                    "possible_values": [
                        [
                            "range(epochs)",
                            "Call"
                        ]
                    ]
                }
            },
            "text_447": {
                "name": {
                    "value": "f'{label_name}/{tag}_files'",
                    "type": "JoinedStr",
                    "possible_values": []
                },
                "data": {
                    "value": "'\\n\\n'.join(img_files)",
                    "type": "Call",
                    "possible_values": []
                },
                "step": {
                    "value": "epoch",
                    "type": "Name",
                    "possible_values": [
                        [
                            "range(epochs)",
                            "Call"
                        ]
                    ]
                }
            },
            "SparseTopKCategoricalAccuracy_558": {
                "k": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "read_file_90": {
                "filename": {
                    "value": "img_base_dir + os.sep + p",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "decode_jpeg_103": {
                "contents": {
                    "value": "img",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.resize_with_pad(img, img_size, img_size, method=tf.image.ResizeMethod.BICUBIC)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(img)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(img, max_delta=0.25)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(img, lower=0.75, upper=1.25)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(img, lower=0.75, upper=1.25)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_with_pad(img, img_size, img_size, method=tf.image.ResizeMethod.BICUBIC)",
                            "Call"
                        ]
                    ]
                },
                "channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "GradientTape_580": {
                "watch_accessed_variables": {
                    "value": "is_train",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "split == 'train' and augment_train",
                            "BoolOp"
                        ],
                        [
                            "False",
                            "Constant"
                        ],
                        [
                            "True",
                            "Constant"
                        ]
                    ]
                }
            },
            "reduce_mean_591": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "loss_fn(labels, outputs)",
                            "Call"
                        ],
                        [
                            "loss + weight_decay * tf.add_n((tf.nn.l2_loss(v) for v in reg_vars))",
                            "BinOp"
                        ],
                        [
                            "tf.math.reduce_mean(loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_596": {
                "input": {
                    "value": "outputs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.keras.layers.Dense(num_classes, kernel_initializer=tf.keras.initializers.VarianceScaling(scale=1.0 / 3.0, mode='fan_out', distribution='uniform'), name='logits')(x)",
                            "Call"
                        ],
                        [
                            "model(inputs, training=train_dropout_and_bn)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "VarianceScaling_243": {
                "scale": {
                    "value": "1.0 / 3.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "mode": {
                    "value": "fan_out",
                    "type": "Constant",
                    "possible_values": []
                },
                "distribution": {
                    "value": "uniform",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "add_n_593": {
                "inputs": {
                    "value": "(tf.nn.l2_loss(v) for v in reg_vars)",
                    "type": "GeneratorExp",
                    "possible_values": []
                }
            },
            "l2_loss_594": {
                "t": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "research/active_learning/DL/utils.py": {
        "sklearn": {},
        "torch": {
            "save_204": {
                "obj": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'checkpoint.pth.tar'",
                            "MethodArgument"
                        ],
                        [
                            "'model_best.pth.tar'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "load_209": {
                "f": {
                    "value": "filename",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'checkpoint.pth.tar'",
                            "MethodArgument"
                        ],
                        [
                            "'model_best.pth.tar'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "no_grad_237": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "t_252": {
                "input": {
                    "value": "vectors",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randperm_287": {
                "n": {
                    "value": "len(negative_pairs)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "research/active_learning/active_learning_methods/graph_density.py": {
        "sklearn": {
            "kneighbors_graph_49": {
                "variable": {
                    "value": "connect",
                    "type": "Variable",
                    "possible_values": []
                },
                "X": {
                    "value": "self.flat_X",
                    "type": "Attribute",
                    "possible_values": []
                },
                "n_neighbors": {
                    "value": "n_neighbor",
                    "type": "Name",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                },
                "p": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pairwise_distances_60": {
                "variable": {
                    "value": "distance",
                    "type": "Variable",
                    "possible_values": []
                },
                "X": {
                    "value": "self.flat_X[[i]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "Y": {
                    "value": "self.flat_X[[j]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "metric": {
                    "value": "manhattan",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "research/active_learning/active_learning_methods/hierarchical_clustering_AL.py": {
        "sklearn": {
            "PCA_92": {
                "variable": {
                    "value": "transformer",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "max_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "AgglomerativeClustering_96": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "affinity": {
                    "value": "affinity",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'euclidean'",
                            "MethodArgument"
                        ]
                    ]
                },
                "linkage": {
                    "value": "linkage",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'ward'",
                            "MethodArgument"
                        ]
                    ]
                },
                "n_clusters": {
                    "value": "len(classes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AgglomerativeClustering_100": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "affinity": {
                    "value": "affinity",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'euclidean'",
                            "MethodArgument"
                        ]
                    ]
                },
                "linkage": {
                    "value": "linkage",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'ward'",
                            "MethodArgument"
                        ]
                    ]
                },
                "n_clusters": {
                    "value": "len(classes)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "research/active_learning/active_learning_methods/informative_diverse.py": {
        "sklearn": {
            "MiniBatchKMeans_49": {
                "variable": {
                    "value": "self.cluster_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "self.n_clusters",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "research/active_learning/active_learning_methods/kcenter_greedy.py": {
        "sklearn": {
            "pairwise_distances_69": {
                "variable": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "X": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "Y": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.features[cluster_centers]",
                            "Subscript"
                        ]
                    ]
                },
                "metric": {
                    "value": "self.metric",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "research/active_learning/active_learning_methods/represent_cluster_centers.py": {
        "sklearn": {
            "MiniBatchKMeans_70": {
                "variable": {
                    "value": "clustering_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "research/active_learning/archive/UI.py": {
        "sklearn": {
            "DBSCAN_121": {
                "variable": {
                    "value": "db",
                    "type": "Variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "min_samples": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "n_jobs": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "pairwise_distances_argmin_min_135": {
                "X": {
                    "value": "embd[sample].reshape(1, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "Y": {
                    "value": "embd[np.asarray(list(archive), dtype=np.int32)]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "research/active_learning/archive/filebased_run_dirty.py": {
        "sklearn": {
            "MLPClassifier_234": {
                "variable": {
                    "value": "clf",
                    "type": "Variable",
                    "possible_values": []
                },
                "hidden_layer_sizes": {
                    "value": "(200, 100)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "max_iter": {
                    "value": "300",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MiniBatchKMeans_278": {
                "variable": {
                    "value": "clusters",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "k",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "k + len(images)",
                            "BinOp"
                        ],
                        [
                            "20",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "silhouette_samples_279": {
                "variable": {
                    "value": "uncertainty",
                    "type": "Variable",
                    "possible_values": []
                },
                "X": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "clusters",
                    "type": "Call",
                    "possible_values": [
                        [
                            "set(clustering_labels)",
                            "Call"
                        ],
                        [
                            "MiniBatchKMeans(n_clusters=k).fit_predict(X)",
                            "Call"
                        ]
                    ]
                }
            },
            "MLPClassifier_288": {
                "variable": {
                    "value": "clf",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SVC_263": {
                "gamma": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "C": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "probability": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MLPClassifier_263": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        },
        "torch": {
            "TensorDataset_95": {
                "variable": {
                    "value": "trainset",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.from_numpy(X_train)",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_96": {
                "variable": {
                    "value": "trainloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "TensorDataset(torch.from_numpy(X_train), torch.from_numpy(y_train))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "TensorDataset_97": {
                "variable": {
                    "value": "testset",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.from_numpy(X_test)",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_98": {
                "variable": {
                    "value": "testloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "TensorDataset(torch.from_numpy(X_test), torch.from_numpy(y_test))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_100": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_102": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataParallel_323": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "ClassificationNet(embedding_net, n_classes=14)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataParallel_325": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "embedding_net",
                    "type": "Name",
                    "possible_values": [
                        [
                            "EmbeddingNet(checkpoint['arch'], checkpoint['feat_dim'])",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_95": {
                "ndarray": {
                    "value": "y_train",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "y[list(base_ind)]",
                            "Subscript"
                        ],
                        [
                            "y[list(base_ind)]",
                            "Subscript"
                        ],
                        [
                            "y[base_ind]",
                            "Subscript"
                        ],
                        [
                            "y[base_ind]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_97": {
                "ndarray": {
                    "value": "y_test",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "no_grad_131": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_381": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "research/active_learning/archive/good_run.py": {
        "sklearn": {
            "SVC_292": {
                "variable": {
                    "value": "kwargs[model]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel": {
                    "value": "linear",
                    "type": "Constant",
                    "possible_values": []
                },
                "C": {
                    "value": "0.025",
                    "type": "Constant",
                    "possible_values": []
                },
                "probability": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "class_weight": {
                    "value": "balanced",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DBSCAN_113": {
                "variable": {
                    "value": "db",
                    "type": "Variable",
                    "possible_values": []
                },
                "min_samples": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "n_jobs": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "MLPClassifier_265": {
                "alpha": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pairwise_distances_argmin_min_144": {
                "X": {
                    "value": "embd[sample].reshape(1, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "Y": {
                    "value": "embd[np.asarray(list(archive), dtype=np.int32)]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "CrossEntropyLoss_160": {
                "variable": {
                    "value": "clf_criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_161": {
                "variable": {
                    "value": "clf_optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "clf_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "Constant",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0005",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Adam_193": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model.parameters()",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "0.0001",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataParallel_213": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "embedding_net",
                    "type": "Name",
                    "possible_values": [
                        [
                            "EmbeddingNet(checkpoint['arch'], checkpoint['feat_dim'], False)",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_247": {
                "variable": {
                    "value": "clf_optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "clf_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "Constant",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0005",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "research/active_learning/archive/run_backup.py": {
        "sklearn": {
            "MiniBatchKMeans_339": {
                "variable": {
                    "value": "clusters",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "k",
                    "type": "Name",
                    "possible_values": [
                        [
                            "20",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "silhouette_samples_340": {
                "variable": {
                    "value": "uncertainty",
                    "type": "Variable",
                    "possible_values": []
                },
                "X": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "clusters",
                    "type": "Call",
                    "possible_values": [
                        [
                            "set(clustering_labels)",
                            "Call"
                        ],
                        [
                            "MiniBatchKMeans(n_clusters=k).fit_predict(X)",
                            "Call"
                        ]
                    ]
                }
            },
            "MLPClassifier_349": {
                "variable": {
                    "value": "clf",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DBSCAN_379": {
                "variable": {
                    "value": "db",
                    "type": "Variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "min_samples": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "n_jobs": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "SVC_324": {
                "gamma": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "C": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "probability": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MLPClassifier_324": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pairwise_distances_argmin_min_393": {
                "X": {
                    "value": "embd[sample].reshape(1, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "Y": {
                    "value": "embd[np.asarray(list(archive), dtype=np.int32)]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "TensorDataset_99": {
                "variable": {
                    "value": "trainset",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.from_numpy(X_train)",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_100": {
                "variable": {
                    "value": "trainloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "TensorDataset(torch.from_numpy(X_train), torch.from_numpy(y_train))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "TensorDataset_101": {
                "variable": {
                    "value": "testset",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.from_numpy(X_test)",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_102": {
                "variable": {
                    "value": "testloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "type": "Call",
                    "possible_values": [
                        [
                            "TensorDataset(torch.from_numpy(X_test), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "TensorDataset(torch.from_numpy(test_em), torch.from_numpy(test_lb))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_104": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_106": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataParallel_236": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "embedding_net",
                    "type": "Name",
                    "possible_values": [
                        [
                            "EmbeddingNet('densenet161', 256, True)",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_241": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model.parameters()",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "0.0001",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_276": {
                "variable": {
                    "value": "clf_criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_277": {
                "variable": {
                    "value": "clf_optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "clf_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "Constant",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0005",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "TensorDataset_290": {
                "variable": {
                    "value": "testset",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.from_numpy(test_em)",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_99": {
                "ndarray": {
                    "value": "y_train",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "y[base_ind]",
                            "Subscript"
                        ],
                        [
                            "y[base_ind]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_101": {
                "ndarray": {
                    "value": "y_test",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "no_grad_135": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_290": {
                "ndarray": {
                    "value": "test_lb",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.asarray([x[1] for x in test_dataset.samples])",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_291": {
                "dataset": {
                    "value": "testset",
                    "type": "Call",
                    "possible_values": [
                        [
                            "TensorDataset(torch.from_numpy(X_test), torch.from_numpy(y_test))",
                            "Call"
                        ],
                        [
                            "TensorDataset(torch.from_numpy(test_em), torch.from_numpy(test_lb))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "research/active_learning/archive/run_bk.py": {
        "sklearn": {
            "DBSCAN_95": {
                "variable": {
                    "value": "db",
                    "type": "Variable",
                    "possible_values": []
                },
                "min_samples": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "n_jobs": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "pairwise_distances_argmin_min_126": {
                "X": {
                    "value": "embd[sample].reshape(1, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "Y": {
                    "value": "embd[np.asarray(list(archive), dtype=np.int32)]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "CrossEntropyLoss_139": {
                "variable": {
                    "value": "clf_criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_140": {
                "variable": {
                    "value": "clf_optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "clf_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "Constant",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0005",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Adam_172": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model.parameters()",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "0.0001",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataParallel_192": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "embedding_net",
                    "type": "Name",
                    "possible_values": [
                        [
                            "EmbeddingNet(checkpoint['arch'], checkpoint['feat_dim'], False)",
                            "Call"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_224": {
                "variable": {
                    "value": "clf_criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_225": {
                "variable": {
                    "value": "clf_optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "clf_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "Constant",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0005",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "research/active_learning/data_preprocessing/prepare_crops_subset.py": {
        "sklearn": {},
        "torch": {
            "DataParallel_52": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "embedding_net",
                    "type": "Call",
                    "possible_values": [
                        [
                            "SoftmaxNet(checkpoint['arch'], checkpoint['feat_dim'], checkpoint['num_classes'], False)",
                            "Call"
                        ],
                        [
                            "NormalizedEmbeddingNet(checkpoint['arch'], checkpoint['feat_dim'], False)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "research/active_learning/deep_learning/engine.py": {
        "sklearn": {
            "MinMaxScaler_169": {
                "variable": {
                    "value": "scaler",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "research/active_learning/deep_learning/utils.py": {
        "sklearn": {},
        "torch": {
            "save_77": {
                "obj": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'checkpoint.pth.tar'",
                            "MethodArgument"
                        ],
                        [
                            "'model_best.pth.tar'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "load_82": {
                "f": {
                    "value": "filename",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'checkpoint.pth.tar'",
                            "MethodArgument"
                        ],
                        [
                            "'model_best.pth.tar'",
                            "MethodArgument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "torch.device('cpu')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_103": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_124": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_82": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "t_118": {
                "input": {
                    "value": "vectors",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randperm_171": {
                "n": {
                    "value": "len(negative_pairs)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "research/active_learning/experiments/extract_features.py": {
        "sklearn": {
            "NearestNeighbors_166": {
                "variable": {
                    "value": "nbrs",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_neighbors": {
                    "value": "args.num",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "DataParallel_117": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "embedding_net",
                    "type": "Call",
                    "possible_values": [
                        [
                            "SoftmaxNet(checkpoint['arch'], checkpoint['feat_dim'], checkpoint['num_classes'], False)",
                            "Call"
                        ],
                        [
                            "NormalizedEmbeddingNet(checkpoint['arch'], checkpoint['feat_dim'], False)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "research/active_learning/experiments/sampling_methods.py": {
        "sklearn": {
            "NearestNeighbors_81": {
                "variable": {
                    "value": "nbrs",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_neighbors": {
                    "value": "11",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "DataParallel_47": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "embedding_net",
                    "type": "Call",
                    "possible_values": [
                        [
                            "SoftmaxNet(checkpoint['arch'], checkpoint['feat_dim'], checkpoint['num_classes'], False)",
                            "Call"
                        ],
                        [
                            "NormalizedEmbeddingNet(checkpoint['arch'], checkpoint['feat_dim'], False)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "research/active_learning/labeling_tool/runapp.py": {
        "sklearn": {
            "MLPClassifier_157": {
                "variable": {
                    "value": "kwargs[model]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "alpha": {
                    "value": "0.0001",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "DataParallel_93": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "embedding_net",
                    "type": "Call",
                    "possible_values": [
                        [
                            "SoftmaxNet(checkpoint['arch'], checkpoint['feat_dim'], checkpoint['num_classes'], False)",
                            "Call"
                        ],
                        [
                            "NormalizedEmbeddingNet(checkpoint['arch'], checkpoint['feat_dim'], False)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "research/active_learning/run.py": {
        "sklearn": {
            "MLPClassifier_183": {
                "variable": {
                    "value": "kwargs[model]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "alpha": {
                    "value": "0.0001",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "Adam_112": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model.parameters()",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "0.0001",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataParallel_146": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "embedding_net",
                    "type": "Call",
                    "possible_values": [
                        [
                            "SoftmaxNet(checkpoint['arch'], checkpoint['feat_dim'], checkpoint['num_classes'], False)",
                            "Call"
                        ],
                        [
                            "NormalizedEmbeddingNet(checkpoint['arch'], checkpoint['feat_dim'], False)",
                            "Call"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_102": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "research/active_learning/run_active_learning.py": {
        "sklearn": {
            "MLPClassifier_95": {
                "variable": {
                    "value": "classifier",
                    "type": "Variable",
                    "possible_values": []
                },
                "hidden_layer_sizes": {
                    "value": "(150, 100)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "alpha": {
                    "value": "0.0001",
                    "type": "Constant",
                    "possible_values": []
                },
                "max_iter": {
                    "value": "2000",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "confusion_matrix_127": {
                "variable": {
                    "value": "cm",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "classifier.predict(X_test)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "DataParallel_84": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "embedding_net",
                    "type": "Call",
                    "possible_values": [
                        [
                            "SoftmaxNet(checkpoint['arch'], checkpoint['feat_dim'], checkpoint['num_classes'], False)",
                            "Call"
                        ],
                        [
                            "NormalizedEmbeddingNet(checkpoint['arch'], checkpoint['feat_dim'], False)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_69": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_130": {
                "obj": {
                    "value": "{'classifier': pickle.dumps(classifier), 'pools': env.get_pools(), 'confusion_matrix': cm, 'per_class_accuracy': pc_acc, 'class_to_idx': target_dataset.class_to_idx}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "'%s/%s_%04d.pth' % (args.experiment_name, 'AL_snapshot', numQueries)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "pickle_protocol": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "research/active_learning/sampling_methods/graph_density.py": {
        "sklearn": {
            "kneighbors_graph_49": {
                "variable": {
                    "value": "connect",
                    "type": "Variable",
                    "possible_values": []
                },
                "X": {
                    "value": "self.flat_X",
                    "type": "Attribute",
                    "possible_values": []
                },
                "n_neighbors": {
                    "value": "n_neighbor",
                    "type": "Name",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                },
                "p": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pairwise_distances_60": {
                "variable": {
                    "value": "distance",
                    "type": "Variable",
                    "possible_values": []
                },
                "X": {
                    "value": "self.flat_X[[i]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "Y": {
                    "value": "self.flat_X[[j]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "metric": {
                    "value": "manhattan",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "research/active_learning/sampling_methods/hierarchical_clustering_AL.py": {
        "sklearn": {
            "PCA_92": {
                "variable": {
                    "value": "transformer",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "max_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "AgglomerativeClustering_96": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "affinity": {
                    "value": "affinity",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'euclidean'",
                            "MethodArgument"
                        ]
                    ]
                },
                "linkage": {
                    "value": "linkage",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'ward'",
                            "MethodArgument"
                        ]
                    ]
                },
                "n_clusters": {
                    "value": "len(classes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AgglomerativeClustering_100": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "affinity": {
                    "value": "affinity",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'euclidean'",
                            "MethodArgument"
                        ]
                    ]
                },
                "linkage": {
                    "value": "linkage",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'ward'",
                            "MethodArgument"
                        ]
                    ]
                },
                "n_clusters": {
                    "value": "len(classes)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "research/active_learning/sampling_methods/informative_diverse.py": {
        "sklearn": {
            "MiniBatchKMeans_49": {
                "variable": {
                    "value": "self.cluster_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "self.n_clusters",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "research/active_learning/sampling_methods/kcenter_greedy.py": {
        "sklearn": {
            "pairwise_distances_69": {
                "variable": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "X": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "Y": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.features[cluster_centers]",
                            "Subscript"
                        ]
                    ]
                },
                "metric": {
                    "value": "self.metric",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "research/active_learning/sampling_methods/represent_cluster_centers.py": {
        "sklearn": {
            "MiniBatchKMeans_70": {
                "variable": {
                    "value": "clustering_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "research/snapshot-safari-pr-analysis.py": {
        "sklearn": {
            "precision_recall_curve_314": {
                "variable": {
                    "value": "(precisions, recalls, thresholds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "gt_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "probas_pred": {
                    "value": "prediction_probs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "confusion_matrix_339": {
                "variable": {
                    "value": "cm",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "gt_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "np.array(prediction_probs) > confidence_threshold",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    },
    "research/umn-pr-analysis.py": {
        "sklearn": {
            "precision_recall_curve_330": {
                "variable": {
                    "value": "(precisions, recalls, thresholds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "gt_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "probas_pred": {
                    "value": "prediction_probs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "confusion_matrix_342": {
                "variable": {
                    "value": "cm",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "gt_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "np.array(prediction_probs) > confidence_threshold",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    },
    "api/batch_processing/api_core/batch_service/score.py": {
        "tensorflow": {
            "is_gpu_available_17": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_151": {
                "variable": {
                    "value": "self.tf_session",
                    "type": "Attribute",
                    "possible_values": []
                },
                "graph": {
                    "value": "detection_graph",
                    "type": "Call",
                    "possible_values": [
                        [
                            "TFDetector.__load_model(model_path)",
                            "Call"
                        ],
                        [
                            "tf.Graph()",
                            "Call"
                        ]
                    ]
                }
            },
            "Graph_205": {
                "variable": {
                    "value": "detection_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GraphDef_207": {
                "variable": {
                    "value": "od_graph_def",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GFile_208": {
                "name": {
                    "value": "model_path",
                    "type": "Variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "rb",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "import_graph_def_211": {
                "graph_def": {
                    "value": "od_graph_def",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.GraphDef()",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "api/synchronous/api_core/animal_detection_classification_api/tf_classifer.py": {
        "tensorflow": {
            "Graph_47": {
                "variable": {
                    "value": "graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GraphDef_49": {
                "variable": {
                    "value": "od_graph_def",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "squeeze_108": {
                "variable": {
                    "value": "predictions_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "predictions_tensor",
                    "type": "Call",
                    "possible_values": [
                        [
                            "classification_graph.get_tensor_by_name('output:0')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(predictions_tensor, [0])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "GFile_50": {
                "name": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "rb",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "import_graph_def_53": {
                "graph_def": {
                    "value": "od_graph_def",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.GraphDef()",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Session_104": {
                "graph": {
                    "value": "classification_graph",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.models[classification]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "archive/classification_marcel/api_apply_classifier_single_node.py": {
        "tensorflow": {
            "Graph_57": {
                "variable": {
                    "value": "graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GraphDef_59": {
                "variable": {
                    "value": "od_graph_def",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "squeeze_142": {
                "variable": {
                    "value": "predictions_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "predictions_tensor",
                    "type": "Call",
                    "possible_values": [
                        [
                            "classification_graph.get_tensor_by_name('output:0')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(predictions_tensor, [0])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "GFile_60": {
                "name": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "rb",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "import_graph_def_63": {
                "graph_def": {
                    "value": "od_graph_def",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.GraphDef()",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Session_137": {
                "graph": {
                    "value": "classification_graph",
                    "type": "Name",
                    "possible_values": [
                        [
                            "load_model(classifier_file)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "archive/classification_marcel/detect_and_predict_image.py": {
        "tensorflow": {
            "Graph_50": {
                "variable": {
                    "value": "graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GraphDef_52": {
                "variable": {
                    "value": "od_graph_def",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "squeeze_226": {
                "variable": {
                    "value": "predictions_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "predictions_tensor",
                    "type": "Call",
                    "possible_values": [
                        [
                            "classification_graph.get_tensor_by_name('output:0')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(predictions_tensor, [0])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "GFile_53": {
                "name": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "rb",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "import_graph_def_56": {
                "graph_def": {
                    "value": "od_graph_def",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.GraphDef()",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Session_122": {
                "graph": {
                    "value": "detection_graph",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "load_model(detector_file)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Session_221": {
                "graph": {
                    "value": "classification_graph",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "load_model(classifier_file)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "archive/classification_marcel/eval_frozen_graph.py": {
        "tensorflow": {
            "Graph_35": {
                "variable": {
                    "value": "model_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GraphDef_37": {
                "variable": {
                    "value": "od_graph_def",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_graph_48": {
                "variable": {
                    "value": "image_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_graph_49": {
                "variable": {
                    "value": "predictions_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "squeeze_50": {
                "variable": {
                    "value": "predictions_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "predictions_tensor",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_default_graph().get_tensor_by_name('output:0')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(predictions_tensor, [0])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "GFile_38": {
                "name": {
                    "value": "args.frozen_graph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "rb",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "import_graph_def_40": {
                "graph_def": {
                    "value": "od_graph_def",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.GraphDef()",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Session_46": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "decode_jpeg_64": {
                "contents": {
                    "value": "fi.read()",
                    "type": "Call",
                    "possible_values": []
                },
                "channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "archive/classification_marcel/export_inference_graph_definition.py": {
        "tensorflow": {
            "DEFINE_string_77": {
                "name": {
                    "value": "model_name",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "inception_v3",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "The name of the architecture to save.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_80": {
                "name": {
                    "value": "preprocessing_name",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "The name of the preprocessing to use. If left as `None`, then the model_name flag is used.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_88": {
                "name": {
                    "value": "image_size",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "The image size to use, otherwise use the model default_image_size.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_97": {
                "name": {
                    "value": "dataset_name",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "imagenet",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "The name of the dataset to use with the model.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_100": {
                "name": {
                    "value": "labels_offset",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "An offset for the labels in the dataset. This flag is primarily used to evaluate the VGG and ResNet architectures which do not use a background class for the ImageNet dataset.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_106": {
                "name": {
                    "value": "output_file",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Where to save the resulting file to.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_109": {
                "name": {
                    "value": "dataset_dir",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Directory to save intermediate dataset files to",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_bool_112": {
                "name": {
                    "value": "quantize",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "whether to use quantized graph or not.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_bool_115": {
                "name": {
                    "value": "write_text_graphdef",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Whether to write a text version of graphdef.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "set_verbosity_124": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_140": {
                "variable": {
                    "value": "placeholder",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "input",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "input_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[None, None, 3]",
                            "List"
                        ]
                    ]
                }
            },
            "expand_dims_143": {
                "variable": {
                    "value": "input_preprocessed",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_preprocessed",
                    "type": "Call",
                    "possible_values": [
                        [
                            "image_preprocessing_fn(placeholder, image_size, image_size)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(input_preprocessed, 0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "run_163": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_125": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "identity_145": {
                "input": {
                    "value": "predictions",
                    "type": "Name",
                    "possible_values": [
                        [
                            "network_fn(input_preprocessed)[1]['Predictions']",
                            "Subscript"
                        ]
                    ]
                },
                "name": {
                    "value": "output",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "write_graph_152": {
                "graph_or_graph_def": {
                    "value": "graph_def",
                    "type": "Name",
                    "possible_values": [
                        [
                            "graph.as_graph_def()",
                            "Call"
                        ]
                    ]
                },
                "logdir": {
                    "value": "os.path.dirname(FLAGS.output_file)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "os.path.basename(FLAGS.output_file)",
                    "type": "Call",
                    "possible_values": []
                },
                "as_text": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "GFile_158": {
                "name": {
                    "value": "FLAGS.output_file",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "wb",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "archive/classification_marcel/freeze_graph.py": {
        "tensorflow": {
            "GraphDef_261": {
                "variable": {
                    "value": "input_graph_def",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MetaGraphDef_275": {
                "variable": {
                    "value": "input_meta_graph_def",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "import_graph_def_155": {
                "variable": {
                    "value": "_",
                    "type": "Variable",
                    "possible_values": []
                },
                "graph_def": {
                    "value": "input_graph_def",
                    "type": "Call",
                    "possible_values": [
                        [
                            "graph_pb2.GraphDef()",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "saved_model_utils.get_meta_graph_def(input_saved_model_dir, saved_model_tags).graph_def",
                            "Attribute"
                        ],
                        [
                            "_parse_input_graph_proto(input_graph, input_binary)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "SaverDef_292": {
                "variable": {
                    "value": "saver_def",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_508": {
                "main": {
                    "value": "my_main",
                    "type": "Name",
                    "possible_values": [
                        [
                            "lambda unused_args: main(unused_args, flags)",
                            "Lambda"
                        ]
                    ]
                },
                "argv": {
                    "value": "[sys.argv[0]] + unparsed",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Session_156": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_158": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "saver_def": {
                    "value": "input_saver_def",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "_parse_input_saver_proto(input_saver, input_binary)",
                            "Call"
                        ]
                    ]
                },
                "write_version": {
                    "value": "checkpoint_version",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "saver_pb2.SaverDef.V1",
                            "Attribute"
                        ],
                        [
                            "saver_pb2.SaverDef.V2",
                            "Attribute"
                        ],
                        [
                            "saver_pb2.SaverDef.V2",
                            "MethodArgument"
                        ],
                        [
                            "saver_pb2.SaverDef.V2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "convert_variables_to_constants_230": {
                "variable": {
                    "value": "output_graph_def",
                    "type": "Variable",
                    "possible_values": []
                },
                "sess": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_graph_def": {
                    "value": "input_meta_graph_def.graph_def",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_node_names": {
                    "value": "output_node_names.replace(' ', '').split(',')",
                    "type": "Call",
                    "possible_values": []
                },
                "variable_names_whitelist": {
                    "value": "variable_names_whitelist",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "variable_names_whitelist.replace(' ', '').split(',') if variable_names_whitelist else None",
                            "IfExp"
                        ],
                        [
                            "''",
                            "MethodArgument"
                        ],
                        [
                            "''",
                            "MethodArgument"
                        ]
                    ]
                },
                "variable_names_blacklist": {
                    "value": "variable_names_blacklist",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "variable_names_blacklist.replace(' ', '').split(',') if variable_names_blacklist else None",
                            "IfExp"
                        ],
                        [
                            "''",
                            "MethodArgument"
                        ],
                        [
                            "''",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "convert_variables_to_constants_237": {
                "variable": {
                    "value": "output_graph_def",
                    "type": "Variable",
                    "possible_values": []
                },
                "sess": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_graph_def": {
                    "value": "input_graph_def",
                    "type": "Call",
                    "possible_values": [
                        [
                            "graph_pb2.GraphDef()",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "saved_model_utils.get_meta_graph_def(input_saved_model_dir, saved_model_tags).graph_def",
                            "Attribute"
                        ],
                        [
                            "_parse_input_graph_proto(input_graph, input_binary)",
                            "Call"
                        ]
                    ]
                },
                "output_node_names": {
                    "value": "output_node_names.replace(' ', '').split(',')",
                    "type": "Call",
                    "possible_values": []
                },
                "variable_names_whitelist": {
                    "value": "variable_names_whitelist",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "variable_names_whitelist.replace(' ', '').split(',') if variable_names_whitelist else None",
                            "IfExp"
                        ],
                        [
                            "''",
                            "MethodArgument"
                        ],
                        [
                            "''",
                            "MethodArgument"
                        ]
                    ]
                },
                "variable_names_blacklist": {
                    "value": "variable_names_blacklist",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "variable_names_blacklist.replace(' ', '').split(',') if variable_names_blacklist else None",
                            "IfExp"
                        ],
                        [
                            "''",
                            "MethodArgument"
                        ],
                        [
                            "''",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Exists_259": {
                "filename": {
                    "value": "input_graph",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "GFile_263": {
                "name": {
                    "value": "input_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "mode",
                    "type": "IfExp",
                    "possible_values": [
                        [
                            "'rb' if input_binary else 'r'",
                            "IfExp"
                        ],
                        [
                            "'rb' if input_binary else 'r'",
                            "IfExp"
                        ],
                        [
                            "'rb' if input_binary else 'r'",
                            "IfExp"
                        ]
                    ]
                }
            },
            "Exists_273": {
                "filename": {
                    "value": "input_graph",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "GFile_277": {
                "name": {
                    "value": "input_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "mode",
                    "type": "IfExp",
                    "possible_values": [
                        [
                            "'rb' if input_binary else 'r'",
                            "IfExp"
                        ],
                        [
                            "'rb' if input_binary else 'r'",
                            "IfExp"
                        ],
                        [
                            "'rb' if input_binary else 'r'",
                            "IfExp"
                        ]
                    ]
                }
            },
            "Exists_288": {
                "filename": {
                    "value": "input_saver",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "GFile_291": {
                "name": {
                    "value": "input_saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "mode",
                    "type": "IfExp",
                    "possible_values": [
                        [
                            "'rb' if input_binary else 'r'",
                            "IfExp"
                        ],
                        [
                            "'rb' if input_binary else 'r'",
                            "IfExp"
                        ],
                        [
                            "'rb' if input_binary else 'r'",
                            "IfExp"
                        ]
                    ]
                }
            },
            "checkpoint_exists_136": {
                "checkpoint_prefix": {
                    "value": "input_checkpoint",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "import_meta_graph_162": {
                "variable": {
                    "value": "restorer",
                    "type": "Variable",
                    "possible_values": []
                },
                "meta_graph_or_file": {
                    "value": "input_meta_graph_def",
                    "type": "Call",
                    "possible_values": [
                        [
                            "MetaGraphDef()",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "_parse_input_meta_graph_proto(input_meta_graph, input_binary)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "clear_devices": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "GFile_251": {
                "name": {
                    "value": "output_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "wb",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "NewCheckpointReader_173": {
                "variable": {
                    "value": "reader",
                    "type": "Variable",
                    "possible_values": []
                },
                "filepattern": {
                    "value": "input_checkpoint",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "load_170": {
                "export_dir": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "tags": {
                    "value": "saved_model_tags",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "tag_constants.SERVING",
                            "MethodArgument"
                        ]
                    ]
                },
                "options": {
                    "value": "input_saved_model_dir",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Saver_198": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "var_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "write_version": {
                    "value": "checkpoint_version",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "saver_pb2.SaverDef.V1",
                            "Attribute"
                        ],
                        [
                            "saver_pb2.SaverDef.V2",
                            "Attribute"
                        ],
                        [
                            "saver_pb2.SaverDef.V2",
                            "MethodArgument"
                        ],
                        [
                            "saver_pb2.SaverDef.V2",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "archive/classification_marcel/generate_html_sample.py": {
        "tensorflow": {
            "Graph_59": {
                "variable": {
                    "value": "model_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GraphDef_61": {
                "variable": {
                    "value": "od_graph_def",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_graph_85": {
                "variable": {
                    "value": "image_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_graph_86": {
                "variable": {
                    "value": "predictions_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "squeeze_87": {
                "variable": {
                    "value": "predictions_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "predictions_tensor",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_default_graph().get_tensor_by_name('output:0')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(predictions_tensor, [0])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "GFile_62": {
                "name": {
                    "value": "args.frozen_graph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "rb",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "import_graph_def_64": {
                "graph_def": {
                    "value": "od_graph_def",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.GraphDef()",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Session_82": {
                "config": {
                    "value": "tf.ConfigProto()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ConfigProto_82": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "archive/classification_marcel/generate_sample_predictions.py": {
        "tensorflow": {
            "Graph_46": {
                "variable": {
                    "value": "model_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GraphDef_48": {
                "variable": {
                    "value": "od_graph_def",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_graph_99": {
                "variable": {
                    "value": "image_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_graph_100": {
                "variable": {
                    "value": "predictions_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "squeeze_101": {
                "variable": {
                    "value": "predictions_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "predictions_tensor",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_default_graph().get_tensor_by_name('output:0')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(predictions_tensor, [0])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "GFile_49": {
                "name": {
                    "value": "args.frozen_graph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "rb",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "import_graph_def_51": {
                "graph_def": {
                    "value": "od_graph_def",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.GraphDef()",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Session_96": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "decode_jpeg_107": {
                "contents": {
                    "value": "fi.read()",
                    "type": "Call",
                    "possible_values": []
                },
                "channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "archive/classification_marcel/predict_image.py": {
        "tensorflow": {
            "Graph_38": {
                "variable": {
                    "value": "model_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GraphDef_40": {
                "variable": {
                    "value": "od_graph_def",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_graph_57": {
                "variable": {
                    "value": "image_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_graph_58": {
                "variable": {
                    "value": "predictions_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "squeeze_59": {
                "variable": {
                    "value": "predictions_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "predictions_tensor",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_default_graph().get_tensor_by_name('output:0')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(predictions_tensor, [0])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "GFile_41": {
                "name": {
                    "value": "args.frozen_graph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "rb",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "import_graph_def_43": {
                "graph_def": {
                    "value": "od_graph_def",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.GraphDef()",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Session_54": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "decode_jpeg_63": {
                "contents": {
                    "value": "fi.read()",
                    "type": "Call",
                    "possible_values": []
                },
                "channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "archive/classification_marcel/tf-slim/datasets/build_imagenet_data.py": {
        "tensorflow": {
            "DEFINE_string_100": {
                "name": {
                    "value": "train_directory",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "/tmp/",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Training data directory",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_102": {
                "name": {
                    "value": "validation_directory",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "/tmp/",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Validation data directory",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_104": {
                "name": {
                    "value": "output_directory",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "/tmp/",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Output data directory",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_107": {
                "name": {
                    "value": "train_shards",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of shards in training TFRecord files.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_109": {
                "name": {
                    "value": "validation_shards",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of shards in validation TFRecord files.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_112": {
                "name": {
                    "value": "num_threads",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of threads to preprocess the images.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_123": {
                "name": {
                    "value": "labels_file",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "imagenet_lsvrc_2015_synsets.txt",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Labels file",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_136": {
                "name": {
                    "value": "imagenet_metadata_file",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "imagenet_metadata.txt",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "ImageNet metadata file",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_152": {
                "name": {
                    "value": "bounding_box_file",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "./imagenet_2012_bounding_boxes.csv",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Bounding box file",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Example_210": {
                "variable": {
                    "value": "example",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.train.Features(feature={'image/height': _int64_feature(height), 'image/width': _int64_feature(width), 'image/colorspace': _bytes_feature(colorspace), 'image/channels': _int64_feature(channels), 'image/class/label': _int64_feature(label), 'image/class/synset': _bytes_feature(synset), 'image/class/text': _bytes_feature(human), 'image/object/bbox/xmin': _float_feature(xmin), 'image/object/bbox/xmax': _float_feature(xmax), 'image/object/bbox/ymin': _float_feature(ymin), 'image/object/bbox/ymax': _float_feature(ymax), 'image/object/bbox/label': _int64_feature([label] * len(xmin)), 'image/format': _bytes_feature(image_format), 'image/filename': _bytes_feature(os.path.basename(filename)), 'image/encoded': _bytes_feature(image_buffer)})",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "FastGFile_317": {
                "variable": {
                    "value": "image_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "filename",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "filenames[i]",
                            "Subscript"
                        ],
                        [
                            "parts[0]",
                            "Subscript"
                        ]
                    ]
                },
                "mode": {
                    "value": "r",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Coordinator_445": {
                "variable": {
                    "value": "coord",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FastGFile_624": {
                "variable": {
                    "value": "lines",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "imagenet_metadata_file",
                    "type": "Variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "r",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "FastGFile_658": {
                "variable": {
                    "value": "lines",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bounding_box_file",
                    "type": "Variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "r",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Feature_163": {
                "int64_list": {
                    "value": "tf.train.Int64List(value=value)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_170": {
                "float_list": {
                    "value": "tf.train.FloatList(value=value)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_175": {
                "bytes_list": {
                    "value": "tf.train.BytesList(value=[value])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Session_234": {
                "variable": {
                    "value": "self._sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_237": {
                "variable": {
                    "value": "self._png_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "decode_png_238": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "self._png_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "encode_jpeg_239": {
                "variable": {
                    "value": "self._png_to_jpeg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "coder.decode_jpeg(image_data)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_png(self._png_data, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(self._cmyk_data, channels=0)",
                            "Call"
                        ],
                        [
                            "self._sess.run(self._decode_jpeg, feed_dict={self._decode_jpeg_data: image_data})",
                            "Call"
                        ]
                    ]
                },
                "format": {
                    "value": "rgb",
                    "type": "Constant",
                    "possible_values": []
                },
                "quality": {
                    "value": "100",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_242": {
                "variable": {
                    "value": "self._cmyk_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "decode_jpeg_243": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "self._cmyk_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "channels": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "encode_jpeg_244": {
                "variable": {
                    "value": "self._cmyk_to_rgb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "coder.decode_jpeg(image_data)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_png(self._png_data, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_jpeg(self._cmyk_data, channels=0)",
                            "Call"
                        ],
                        [
                            "self._sess.run(self._decode_jpeg, feed_dict={self._decode_jpeg_data: image_data})",
                            "Call"
                        ]
                    ]
                },
                "format": {
                    "value": "rgb",
                    "type": "Constant",
                    "possible_values": []
                },
                "quality": {
                    "value": "100",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_247": {
                "variable": {
                    "value": "self._decode_jpeg_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "decode_jpeg_248": {
                "variable": {
                    "value": "self._decode_jpeg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "contents": {
                    "value": "self._decode_jpeg_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "TFRecordWriter_378": {
                "variable": {
                    "value": "writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "path": {
                    "value": "output_file",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(FLAGS.output_directory, output_filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "Glob_513": {
                "variable": {
                    "value": "matching_files",
                    "type": "Variable",
                    "possible_values": []
                },
                "filename": {
                    "value": "jpeg_file_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'%s/%s/*.JPEG' % (data_dir, synset)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "run_704": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Int64List_163": {
                "value": {
                    "value": "value",
                    "type": "List",
                    "possible_values": [
                        [
                            "[value]",
                            "List"
                        ],
                        [
                            "[value]",
                            "List"
                        ]
                    ]
                }
            },
            "FloatList_170": {
                "value": {
                    "value": "value",
                    "type": "List",
                    "possible_values": [
                        [
                            "[value]",
                            "List"
                        ],
                        [
                            "[value]",
                            "List"
                        ]
                    ]
                }
            },
            "BytesList_175": {
                "value": {
                    "value": "[value]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Features_210": {
                "feature": {
                    "value": "{'image/height': _int64_feature(height), 'image/width': _int64_feature(width), 'image/colorspace': _bytes_feature(colorspace), 'image/channels': _int64_feature(channels), 'image/class/label': _int64_feature(label), 'image/class/synset': _bytes_feature(synset), 'image/class/text': _bytes_feature(human), 'image/object/bbox/xmin': _float_feature(xmin), 'image/object/bbox/xmax': _float_feature(xmax), 'image/object/bbox/ymin': _float_feature(ymin), 'image/object/bbox/ymax': _float_feature(ymax), 'image/object/bbox/label': _int64_feature([label] * len(xmin)), 'image/format': _bytes_feature(image_format), 'image/filename': _bytes_feature(os.path.basename(filename)), 'image/encoded': _bytes_feature(image_buffer)}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "FastGFile_501": {
                "name": {
                    "value": "labels_file",
                    "type": "Variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "r",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "archive/classification_marcel/tf-slim/datasets/cct.py": {
        "tensorflow": {
            "FixedLenFeature_59": {
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "FixedLenFeature_60": {
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "jpg",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "FixedLenFeature_61": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "tf.zeros([], dtype=tf.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_62": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "archive/classification_marcel/tf-slim/datasets/cifar10.py": {
        "tensorflow": {
            "FixedLenFeature_73": {
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "FixedLenFeature_74": {
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "png",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "FixedLenFeature_75": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "tf.zeros([], dtype=tf.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_76": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "archive/classification_marcel/tf-slim/datasets/dataset_utils.py": {
        "tensorflow": {
            "Feature_41": {
                "int64_list": {
                    "value": "tf.train.Int64List(value=values)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_53": {
                "bytes_list": {
                    "value": "tf.train.BytesList(value=[values])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_67": {
                "float_list": {
                    "value": "tf.train.FloatList(value=values)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Example_71": {
                "features": {
                    "value": "tf.train.Features(feature={'image/encoded': bytes_feature(image_data), 'image/format': bytes_feature(image_format), 'image/class/label': int64_feature(class_id), 'image/height': int64_feature(height), 'image/width': int64_feature(width)})",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Exists_127": {
                "filename": {
                    "value": "os.path.join(dataset_dir, filename)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Int64List_41": {
                "value": {
                    "value": "values",
                    "type": "List",
                    "possible_values": [
                        [
                            "[values]",
                            "List"
                        ],
                        [
                            "[values]",
                            "List"
                        ]
                    ]
                }
            },
            "BytesList_53": {
                "value": {
                    "value": "[values]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "FloatList_67": {
                "value": {
                    "value": "values",
                    "type": "List",
                    "possible_values": [
                        [
                            "[values]",
                            "List"
                        ],
                        [
                            "[values]",
                            "List"
                        ]
                    ]
                }
            },
            "Features_71": {
                "feature": {
                    "value": "{'image/encoded': bytes_feature(image_data), 'image/format': bytes_feature(image_format), 'image/class/label': int64_feature(class_id), 'image/height': int64_feature(height), 'image/width': int64_feature(width)}",
                    "type": "Dict",
                    "possible_values": []
                }
            }
        }
    },
    "archive/classification_marcel/tf-slim/datasets/download_and_convert_cifar10.py": {
        "tensorflow": {
            "placeholder_88": {
                "variable": {
                    "value": "image_placeholder",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "encode_png_89": {
                "variable": {
                    "value": "encoded_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image_placeholder",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.placeholder(dtype=tf.uint8)",
                            "Call"
                        ]
                    ]
                }
            },
            "Remove_153": {
                "filename": {
                    "value": "filepath",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(dataset_dir, filename)",
                            "Call"
                        ],
                        [
                            "os.path.join(dataset_dir, filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "DeleteRecursively_156": {
                "dirname": {
                    "value": "tmp_dir",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(dataset_dir, 'cifar-10-batches-py')",
                            "Call"
                        ]
                    ]
                }
            },
            "Graph_87": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Exists_165": {
                "filename": {
                    "value": "dataset_dir",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "MakeDirs_166": {
                "dirname": {
                    "value": "dataset_dir",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Exists_171": {
                "filename": {
                    "value": "testing_filename",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_get_output_filename(dataset_dir, 'test')",
                            "Call"
                        ]
                    ]
                }
            },
            "TFRecordWriter_178": {
                "path": {
                    "value": "training_filename",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_get_output_filename(dataset_dir, 'train')",
                            "Call"
                        ]
                    ]
                }
            },
            "TFRecordWriter_187": {
                "path": {
                    "value": "testing_filename",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_get_output_filename(dataset_dir, 'test')",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_91": {
                "target": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "archive/classification_marcel/tf-slim/datasets/download_and_convert_flowers.py": {
        "tensorflow": {
            "placeholder_57": {
                "variable": {
                    "value": "self._decode_jpeg_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "decode_jpeg_58": {
                "variable": {
                    "value": "self._decode_jpeg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "contents": {
                    "value": "self._decode_jpeg_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Remove_161": {
                "filename": {
                    "value": "filepath",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(dataset_dir, filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "DeleteRecursively_164": {
                "dirname": {
                    "value": "tmp_dir",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(dataset_dir, 'flower_photos')",
                            "Call"
                        ]
                    ]
                }
            },
            "Graph_121": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Exists_183": {
                "filename": {
                    "value": "dataset_dir",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "MakeDirs_184": {
                "dirname": {
                    "value": "dataset_dir",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Session_124": {
                "target": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Exists_172": {
                "filename": {
                    "value": "output_filename",
                    "type": "Call",
                    "possible_values": [
                        [
                            "'flowers_%s_%05d-of-%05d.tfrecord' % (split_name, shard_id, _NUM_SHARDS)",
                            "BinOp"
                        ],
                        [
                            "_get_dataset_filename(dataset_dir, split_name, shard_id)",
                            "Call"
                        ],
                        [
                            "_get_dataset_filename(dataset_dir, split_name, shard_id)",
                            "Call"
                        ]
                    ]
                }
            },
            "TFRecordWriter_130": {
                "path": {
                    "value": "output_filename",
                    "type": "Call",
                    "possible_values": [
                        [
                            "'flowers_%s_%05d-of-%05d.tfrecord' % (split_name, shard_id, _NUM_SHARDS)",
                            "BinOp"
                        ],
                        [
                            "_get_dataset_filename(dataset_dir, split_name, shard_id)",
                            "Call"
                        ],
                        [
                            "_get_dataset_filename(dataset_dir, split_name, shard_id)",
                            "Call"
                        ]
                    ]
                }
            },
            "FastGFile_139": {
                "variable": {
                    "value": "image_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "filenames[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "rb",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "archive/classification_marcel/tf-slim/datasets/download_and_convert_mnist.py": {
        "tensorflow": {
            "placeholder_117": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(_IMAGE_SIZE, _IMAGE_SIZE, _NUM_CHANNELS)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "encode_png_118": {
                "variable": {
                    "value": "encoded_png",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.placeholder(dtype=tf.uint8, shape=shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "Graph_116": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Remove_183": {
                "filename": {
                    "value": "filepath",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(dataset_dir, filename)",
                            "Call"
                        ],
                        [
                            "os.path.join(dataset_dir, filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "Exists_192": {
                "filename": {
                    "value": "dataset_dir",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "MakeDirs_193": {
                "dirname": {
                    "value": "dataset_dir",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Exists_198": {
                "filename": {
                    "value": "testing_filename",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_get_output_filename(dataset_dir, 'test')",
                            "Call"
                        ]
                    ]
                }
            },
            "TFRecordWriter_205": {
                "path": {
                    "value": "training_filename",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_get_output_filename(dataset_dir, 'train')",
                            "Call"
                        ]
                    ]
                }
            },
            "TFRecordWriter_211": {
                "path": {
                    "value": "testing_filename",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_get_output_filename(dataset_dir, 'test')",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_120": {
                "target": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "GFile_167": {
                "name": {
                    "value": "filepath",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(dataset_dir, filename)",
                            "Call"
                        ],
                        [
                            "os.path.join(dataset_dir, filename)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "archive/classification_marcel/tf-slim/datasets/flowers.py": {
        "tensorflow": {
            "FixedLenFeature_73": {
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "FixedLenFeature_74": {
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "png",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "FixedLenFeature_75": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "tf.zeros([], dtype=tf.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_76": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "archive/classification_marcel/tf-slim/datasets/idfg.py": {
        "tensorflow": {
            "FixedLenFeature_59": {
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "FixedLenFeature_60": {
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "jpg",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "FixedLenFeature_61": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "tf.zeros([], dtype=tf.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_62": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "archive/classification_marcel/tf-slim/datasets/imagenet.py": {
        "tensorflow": {
            "FixedLenFeature_151": {
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "FixedLenFeature_153": {
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "jpeg",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "FixedLenFeature_155": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "FixedLenFeature_157": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "VarLenFeature_159": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "VarLenFeature_161": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "VarLenFeature_163": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "VarLenFeature_165": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "VarLenFeature_167": {
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "archive/classification_marcel/tf-slim/datasets/mnist.py": {
        "tensorflow": {
            "FixedLenFeature_73": {
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "FixedLenFeature_74": {
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "raw",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "FixedLenFeature_75": {
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "tf.zeros([1], dtype=tf.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_76": {
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "archive/classification_marcel/tf-slim/datasets/nacti.py": {
        "tensorflow": {
            "FixedLenFeature_59": {
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "FixedLenFeature_60": {
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "jpg",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "FixedLenFeature_61": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "tf.zeros([], dtype=tf.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_62": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "archive/classification_marcel/tf-slim/datasets/obscured.py": {
        "tensorflow": {
            "FixedLenFeature_59": {
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "FixedLenFeature_60": {
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "jpg",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "FixedLenFeature_61": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "tf.zeros([], dtype=tf.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_62": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "archive/classification_marcel/tf-slim/datasets/obscured_large.py": {
        "tensorflow": {
            "FixedLenFeature_59": {
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "FixedLenFeature_60": {
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "jpg",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "FixedLenFeature_61": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "tf.zeros([], dtype=tf.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_62": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "archive/classification_marcel/tf-slim/datasets/rspb.py": {
        "tensorflow": {
            "FixedLenFeature_59": {
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "FixedLenFeature_60": {
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "jpg",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "FixedLenFeature_61": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "tf.zeros([], dtype=tf.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_62": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "archive/classification_marcel/tf-slim/datasets/serengeti.py": {
        "tensorflow": {
            "FixedLenFeature_61": {
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "FixedLenFeature_62": {
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "jpg",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "FixedLenFeature_63": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "tf.zeros([], dtype=tf.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_64": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "archive/classification_marcel/tf-slim/datasets/wellington.py": {
        "tensorflow": {
            "FixedLenFeature_59": {
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "FixedLenFeature_60": {
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "jpg",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "FixedLenFeature_61": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "tf.zeros([], dtype=tf.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_62": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "archive/classification_marcel/tf-slim/datasets/wiitigers.py": {
        "tensorflow": {
            "FixedLenFeature_59": {
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "FixedLenFeature_60": {
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "jpg",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "FixedLenFeature_61": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_value": {
                    "value": "tf.zeros([], dtype=tf.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_62": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "archive/classification_marcel/tf-slim/deployment/model_deploy.py": {
        "tensorflow": {
            "add_n_306": {
                "variable": {
                    "value": "total_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "clones_losses",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "name": {
                    "value": "total_loss",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_collection_357": {
                "variable": {
                    "value": "update_ops",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "first_clone.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_218": {
                "variable": {
                    "value": "clone_losses",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.LOSSES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "clone.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_294": {
                "variable": {
                    "value": "regularization_losses",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.REGULARIZATION_LOSSES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_216": {
                "device_name": {
                    "value": "clone.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_n_220": {
                "variable": {
                    "value": "clone_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "clone_losses",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.LOSSES, clone.scope)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "clone_loss",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "add_n_226": {
                "variable": {
                    "value": "regularization_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "regularization_losses",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.REGULARIZATION_LOSSES)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tf.get_collection(tf.GraphKeys.REGULARIZATION_LOSSES)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "name": {
                    "value": "regularization_loss",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "add_n_230": {
                "variable": {
                    "value": "sum_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "all_losses",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "scalar_233": {
                "name": {
                    "value": "'/'.join(filter(None, ['Losses', clone.scope, 'clone_loss']))",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "clone_loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tf.add_n(clone_losses, name='clone_loss')",
                            "Call"
                        ],
                        [
                            "tf.div(clone_loss, 1.0 * num_clones, name='scaled_clone_loss')",
                            "Call"
                        ],
                        [
                            "_gather_clone_loss(clone, len(clones), regularization_losses)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_237": {
                "name": {
                    "value": "Losses/regularization_loss",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "regularization_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tf.add_n(regularization_losses, name='regularization_loss')",
                            "Call"
                        ]
                    ]
                }
            },
            "get_collection_349": {
                "key": {
                    "value": "tf.GraphKeys.SUMMARIES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_361": {
                "device_name": {
                    "value": "config.optimizer_device()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_collection_385": {
                "variable": {
                    "value": "regularization_losses",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.REGULARIZATION_LOSSES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "merge_409": {
                "variable": {
                    "value": "summary_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "list(summaries)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "summary_op",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "div_222": {
                "variable": {
                    "value": "clone_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "clone_loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tf.add_n(clone_losses, name='clone_loss')",
                            "Call"
                        ],
                        [
                            "tf.div(clone_loss, 1.0 * num_clones, name='scaled_clone_loss')",
                            "Call"
                        ],
                        [
                            "_gather_clone_loss(clone, len(clones), regularization_losses)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1.0 * num_clones",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "scaled_clone_loss",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_262": {
                "device_name": {
                    "value": "clone.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_297": {
                "name": {
                    "value": "clone.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "group_380": {
                "variable": {
                    "value": "update_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "*update_ops",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "add_n_396": {
                "variable": {
                    "value": "total_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "clones_losses",
                    "type": "List",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "name": {
                    "value": "total_loss",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_collection_400": {
                "key": {
                    "value": "tf.GraphKeys.SUMMARIES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "first_clone.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_n_442": {
                "variable": {
                    "value": "sum_grad",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "grads",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "name": {
                    "value": "var.op.name + '/sum_grads'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_472": {
                "msg": {
                    "value": "Var %s has no gradient",
                    "type": "Constant",
                    "possible_values": []
                },
                "*args": {
                    "value": "var.op.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_188": {
                "name": {
                    "value": "config.clone_scope(i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_364": {
                "device_name": {
                    "value": "config.variables_device()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "identity_382": {
                "variable": {
                    "value": "train_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "total_loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.add_n(clones_losses, name='total_loss')",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tf.add_n(clones_losses, name='total_loss')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "train_op",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "scalar_405": {
                "name": {
                    "value": "total_loss",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "total_loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.add_n(clones_losses, name='total_loss')",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tf.add_n(clones_losses, name='total_loss')",
                            "Call"
                        ]
                    ]
                }
            },
            "histogram_467": {
                "name": {
                    "value": "var.op.name + ':gradient'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "grad_values",
                    "type": "Name",
                    "possible_values": [
                        [
                            "grad.values",
                            "Attribute"
                        ],
                        [
                            "grad",
                            "Name"
                        ]
                    ]
                }
            },
            "histogram_469": {
                "name": {
                    "value": "var.op.name + ':gradient_norm'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.global_norm([grad_values])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_190": {
                "device_name": {
                    "value": "clone_device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "config.clone_device(i)",
                            "Call"
                        ]
                    ]
                }
            },
            "control_dependencies_381": {
                "control_inputs": {
                    "value": "[update_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "name_scope_388": {
                "name": {
                    "value": "clone.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_norm_470": {
                "t_list": {
                    "value": "[grad_values]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_191": {
                "name_or_scope": {
                    "value": "tf.get_variable_scope()",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True if i > 0 else None",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "get_variable_scope_191": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "archive/classification_marcel/tf-slim/deployment/model_deploy_test.py": {
        "tensorflow": {
            "Graph_184": {
                "variable": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_210": {
                "variable": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_236": {
                "variable": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_264": {
                "variable": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_289": {
                "variable": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_331": {
                "variable": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_357": {
                "variable": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_383": {
                "variable": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_410": {
                "variable": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_438": {
                "variable": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_485": {
                "variable": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "main_572": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Variable_75": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Variable_76": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_op_77": {
                "variable": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Variable_134": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Variable_135": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_op_136": {
                "variable": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_150": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "LogisticClassifier",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs, labels]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_159": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "BatchNormClassifier",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs, labels]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "constant_187": {
                "variable": {
                    "value": "tf_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self._inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_188": {
                "variable": {
                    "value": "tf_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self._labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_206": {
                "variable": {
                    "value": "update_ops",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_213": {
                "variable": {
                    "value": "tf_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self._inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_214": {
                "variable": {
                    "value": "tf_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self._labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_232": {
                "variable": {
                    "value": "update_ops",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_239": {
                "variable": {
                    "value": "tf_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self._inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_240": {
                "variable": {
                    "value": "tf_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self._labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_267": {
                "variable": {
                    "value": "tf_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self._inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_268": {
                "variable": {
                    "value": "tf_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self._labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_292": {
                "variable": {
                    "value": "tf_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self._inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_293": {
                "variable": {
                    "value": "tf_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self._labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_334": {
                "variable": {
                    "value": "tf_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self._inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_335": {
                "variable": {
                    "value": "tf_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self._labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_344": {
                "variable": {
                    "value": "update_ops",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_347": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_360": {
                "variable": {
                    "value": "tf_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self._inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_361": {
                "variable": {
                    "value": "tf_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self._labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_370": {
                "variable": {
                    "value": "update_ops",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_373": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_386": {
                "variable": {
                    "value": "tf_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self._inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_387": {
                "variable": {
                    "value": "tf_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self._labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_397": {
                "variable": {
                    "value": "update_ops",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_400": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_413": {
                "variable": {
                    "value": "tf_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self._inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_414": {
                "variable": {
                    "value": "tf_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self._labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_425": {
                "variable": {
                    "value": "update_ops",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_428": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_441": {
                "variable": {
                    "value": "tf_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self._inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_442": {
                "variable": {
                    "value": "tf_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self._labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_452": {
                "variable": {
                    "value": "update_ops",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_455": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_488": {
                "variable": {
                    "value": "tf_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self._inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_489": {
                "variable": {
                    "value": "tf_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self._labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_496": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_collection_502": {
                "variable": {
                    "value": "update_ops",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_74": {
                "device_name": {
                    "value": "deploy_config.variables_device()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_133": {
                "device_name": {
                    "value": "deploy_config.variables_device()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_random_seed_186": {
                "seed": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "set_random_seed_212": {
                "seed": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "set_random_seed_238": {
                "seed": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_collection_258": {
                "variable": {
                    "value": "update_ops",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "clone.scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_random_seed_266": {
                "seed": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "set_random_seed_291": {
                "seed": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "set_random_seed_333": {
                "seed": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "set_random_seed_359": {
                "seed": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "set_random_seed_385": {
                "seed": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "set_random_seed_412": {
                "seed": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "set_random_seed_440": {
                "seed": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "set_random_seed_487": {
                "seed": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Graph_534": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_539": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "(10, 20)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Graph_553": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_558": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "(10, 20)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_op_91": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_509": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_350": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_376": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_403": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_431": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_458": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_510": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_545": {
                "learning_rate": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "archive/classification_marcel/tf-slim/download_and_convert_data.py": {
        "tensorflow": {
            "DEFINE_string_45": {
                "name": {
                    "value": "dataset_name",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "The name of the dataset to convert, one of \"cifar10\", \"flowers\", \"mnist\".",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_50": {
                "name": {
                    "value": "dataset_dir",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "The directory where the output TFRecords and temporary files are saved.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "run_73": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "archive/classification_marcel/tf-slim/eval_image_classifier.py": {
        "tensorflow": {
            "DEFINE_integer_30": {
                "name": {
                    "value": "batch_size",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "100",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "The number of samples in each batch.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_33": {
                "name": {
                    "value": "max_num_batches",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Max number of batches to evaluate by default use all.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_37": {
                "name": {
                    "value": "master",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "The address of the TensorFlow master to use.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_40": {
                "name": {
                    "value": "checkpoint_path",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "/tmp/tfmodel/",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "The directory where the model was written to or an absolute path to a checkpoint file.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_45": {
                "name": {
                    "value": "eval_dir",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "/tmp/tfmodel/",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Directory where the results are saved to.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_48": {
                "name": {
                    "value": "num_preprocessing_threads",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "The number of threads used to create the batches.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_52": {
                "name": {
                    "value": "dataset_name",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "imagenet",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "The name of the dataset to load.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_55": {
                "name": {
                    "value": "dataset_split_name",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "test",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "The name of the train/test split.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_58": {
                "name": {
                    "value": "dataset_dir",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "The directory where the dataset files are stored.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_61": {
                "name": {
                    "value": "labels_offset",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "An offset for the labels in the dataset. This flag is primarily used to evaluate the VGG and ResNet architectures which do not use a background class for the ImageNet dataset.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_67": {
                "name": {
                    "value": "model_name",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "inception_v3",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "The name of the architecture to evaluate.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_70": {
                "name": {
                    "value": "preprocessing_name",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "The name of the preprocessing to use. If left as `None`, then the model_name flag is used.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_float_74": {
                "name": {
                    "value": "moving_average_decay",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "The decay to use for the moving average.If left as None, then moving averages are not used.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_79": {
                "name": {
                    "value": "eval_image_size",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Eval image size",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_bool_82": {
                "name": {
                    "value": "quantize",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "whether to use quantized graph or not.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "set_verbosity_92": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "batch_133": {
                "variable": {
                    "value": "(images, labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[image, label]",
                    "type": "List",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "FLAGS.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_threads": {
                    "value": "FLAGS.num_preprocessing_threads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "capacity": {
                    "value": "5 * FLAGS.batch_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "argmax_156": {
                "variable": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_157": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.squeeze(labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "run_197": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_93": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ExponentialMovingAverage_148": {
                "variable": {
                    "value": "variable_averages",
                    "type": "Variable",
                    "possible_values": []
                },
                "decay": {
                    "value": "FLAGS.moving_average_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_updates": {
                    "value": "tf_global_step",
                    "type": "Name",
                    "possible_values": [
                        [
                            "slim.get_or_create_global_step()",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_169": {
                "variable": {
                    "value": "op",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "summary_name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'eval/%s' % name",
                            "BinOp"
                        ]
                    ]
                },
                "data": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                },
                "collections": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Print_170": {
                "variable": {
                    "value": "op",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "op",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.summary.scalar(summary_name, value, collections=[])",
                            "Call"
                        ],
                        [
                            "tf.Print(op, [value], summary_name)",
                            "Call"
                        ]
                    ]
                },
                "data": {
                    "value": "[value]",
                    "type": "List",
                    "possible_values": []
                },
                "message": {
                    "value": "summary_name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'eval/%s' % name",
                            "BinOp"
                        ]
                    ]
                }
            },
            "IsDirectory_180": {
                "dirname": {
                    "value": "FLAGS.checkpoint_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "latest_checkpoint_181": {
                "variable": {
                    "value": "checkpoint_path",
                    "type": "Variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "FLAGS.checkpoint_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_185": {
                "msg": {
                    "value": "'Evaluating %s' % checkpoint_path",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "add_to_collection_171": {
                "name": {
                    "value": "tf.GraphKeys.SUMMARIES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "op",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.summary.scalar(summary_name, value, collections=[])",
                            "Call"
                        ],
                        [
                            "tf.Print(op, [value], summary_name)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "archive/classification_marcel/tf-slim/export_inference_graph.py": {
        "tensorflow": {
            "DEFINE_string_69": {
                "name": {
                    "value": "model_name",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "inception_v3",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "The name of the architecture to save.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_76": {
                "name": {
                    "value": "image_size",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "The image size to use, otherwise use the model default_image_size.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_80": {
                "name": {
                    "value": "batch_size",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Batch size for the exported model. Defaulted to \"None\" so batch size can be specified at model runtime.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_85": {
                "name": {
                    "value": "dataset_name",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "imagenet",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "The name of the dataset to use with the model.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_88": {
                "name": {
                    "value": "labels_offset",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "An offset for the labels in the dataset. This flag is primarily used to evaluate the VGG and ResNet architectures which do not use a background class for the ImageNet dataset.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_94": {
                "name": {
                    "value": "output_file",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Where to save the resulting file to.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_97": {
                "name": {
                    "value": "dataset_dir",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Directory to save intermediate dataset files to",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_bool_100": {
                "name": {
                    "value": "quantize",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "whether to use quantized graph or not.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_bool_103": {
                "name": {
                    "value": "is_video_model",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "whether to use 5-D inputs for video model.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_106": {
                "name": {
                    "value": "num_frames",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "The number of frames to use. Only used if is_video_model is True.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_bool_110": {
                "name": {
                    "value": "write_text_graphdef",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Whether to write a text version of graphdef.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "set_verbosity_122": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_136": {
                "variable": {
                    "value": "placeholder",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "input",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "input_shape",
                    "type": "List",
                    "possible_values": [
                        [
                            "[FLAGS.batch_size, FLAGS.num_frames, image_size, image_size, 3]",
                            "List"
                        ],
                        [
                            "[FLAGS.batch_size, image_size, image_size, 3]",
                            "List"
                        ]
                    ]
                }
            },
            "run_156": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_123": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "write_graph_145": {
                "graph_or_graph_def": {
                    "value": "graph_def",
                    "type": "Name",
                    "possible_values": [
                        [
                            "graph.as_graph_def()",
                            "Call"
                        ]
                    ]
                },
                "logdir": {
                    "value": "os.path.dirname(FLAGS.output_file)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "os.path.basename(FLAGS.output_file)",
                    "type": "Call",
                    "possible_values": []
                },
                "as_text": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "GFile_151": {
                "name": {
                    "value": "FLAGS.output_file",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "wb",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "archive/classification_marcel/tf-slim/export_inference_graph_test.py": {
        "tensorflow": {
            "main_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Exists_41": {
                "filename": {
                    "value": "output_file",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(tmpdir, 'inception_v3.pb')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "archive/classification_marcel/tf-slim/nets/alexnet.py": {
        "tensorflow": {
            "truncated_normal_initializer_42": {
                "mean": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "stddev": {
                    "value": "stddev",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "variable_scope_96": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'alexnet_v2'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "alexnet_v2",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_initializer_48": {
                "value": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_124": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "net",
                    "type": "Call",
                    "possible_values": [
                        [
                            "slim.conv2d(inputs, 64, [11, 11], 4, padding='VALID', scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [3, 3], 2, scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 192, [5, 5], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [3, 3], 2, scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 384, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 384, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 256, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [3, 3], 2, scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [5, 5], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(net, [1, 2], keep_dims=True, name='global_pool')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, biases_initializer=tf.zeros_initializer(), scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "global_pool",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_135": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "Call",
                    "possible_values": [
                        [
                            "slim.conv2d(inputs, 64, [11, 11], 4, padding='VALID', scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [3, 3], 2, scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 192, [5, 5], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [3, 3], 2, scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 384, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 384, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 256, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [3, 3], 2, scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [5, 5], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(net, [1, 2], keep_dims=True, name='global_pool')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, biases_initializer=tf.zeros_initializer(), scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "fc8/squeezed",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_114": {
                "value": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_initializer_132": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "archive/classification_marcel/tf-slim/nets/alexnet_test.py": {
        "tensorflow": {
            "main_180": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_143": {
                "variable": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_165": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "argmax_166": {
                "variable": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_scope_158": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_175": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "archive/classification_marcel/tf-slim/nets/cifarnet.py": {
        "tensorflow": {
            "truncated_normal_initializer_25": {
                "stddev": {
                    "value": "stddev",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "variable_scope_63": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'CifarNet'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "CifarNet",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "[images]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_initializer_85": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_109": {
                "stddev": {
                    "value": "0.05",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_113": {
                "value": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "archive/classification_marcel/tf-slim/nets/cyclegan.py": {
        "tensorflow": {
            "shape_126": {
                "variable": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "constant_value_127": {
                "variable": {
                    "value": "static_shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "pylist": {
                    "value": "shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.shape(tensor)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_91": {
                "variable": {
                    "value": "net_shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.resize_nearest_neighbor(net, [stride[0] * height, stride[1] * width])",
                            "Call"
                        ],
                        [
                            "tf.pad(net, spatial_pad_1, pad_mode)",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_outputs, kernel_size=[3, 3], padding='valid')",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(net, [stride[0] * height, stride[1] * width], align_corners=align_corners)",
                            "Call"
                        ],
                        [
                            "tf.pad(net, spatial_pad_1, pad_mode)",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_outputs, kernel_size=[3, 3], padding='valid')",
                            "Call"
                        ],
                        [
                            "layers.conv2d_transpose(net, num_outputs, kernel_size=[3, 3], stride=stride, padding='valid')",
                            "Call"
                        ],
                        [
                            "net[:, 1:, 1:, :]",
                            "Subscript"
                        ],
                        [
                            "tf.pad(images, spatial_pad_3, 'REFLECT')",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_filters, kernel_size=[7, 7], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.pad(net, paddings, 'REFLECT')",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_filters * 2)",
                            "Call"
                        ],
                        [
                            "tf.pad(net, paddings, 'REFLECT')",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_filters * 4)",
                            "Call"
                        ],
                        [
                            "net + res_net",
                            "BinOp"
                        ],
                        [
                            "upsample_fn(net, num_outputs=num_filters * 2, stride=[2, 2])",
                            "Call"
                        ],
                        [
                            "upsample_fn(net, num_outputs=num_filters, stride=[2, 2])",
                            "Call"
                        ],
                        [
                            "tf.pad(net, spatial_pad_3, 'REFLECT')",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_90": {
                "name_or_scope": {
                    "value": "upconv",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "resize_nearest_neighbor_101": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "images": {
                    "value": "net",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.resize_nearest_neighbor(net, [stride[0] * height, stride[1] * width])",
                            "Call"
                        ],
                        [
                            "tf.pad(net, spatial_pad_1, pad_mode)",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_outputs, kernel_size=[3, 3], padding='valid')",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(net, [stride[0] * height, stride[1] * width], align_corners=align_corners)",
                            "Call"
                        ],
                        [
                            "tf.pad(net, spatial_pad_1, pad_mode)",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_outputs, kernel_size=[3, 3], padding='valid')",
                            "Call"
                        ],
                        [
                            "layers.conv2d_transpose(net, num_outputs, kernel_size=[3, 3], stride=stride, padding='valid')",
                            "Call"
                        ],
                        [
                            "net[:, 1:, 1:, :]",
                            "Subscript"
                        ],
                        [
                            "tf.pad(images, spatial_pad_3, 'REFLECT')",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_filters, kernel_size=[7, 7], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.pad(net, paddings, 'REFLECT')",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_filters * 2)",
                            "Call"
                        ],
                        [
                            "tf.pad(net, paddings, 'REFLECT')",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_filters * 4)",
                            "Call"
                        ],
                        [
                            "net + res_net",
                            "BinOp"
                        ],
                        [
                            "upsample_fn(net, num_outputs=num_filters * 2, stride=[2, 2])",
                            "Call"
                        ],
                        [
                            "upsample_fn(net, num_outputs=num_filters, stride=[2, 2])",
                            "Call"
                        ],
                        [
                            "tf.pad(net, spatial_pad_3, 'REFLECT')",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[stride[0] * height, stride[1] * width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_103": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "net",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.resize_nearest_neighbor(net, [stride[0] * height, stride[1] * width])",
                            "Call"
                        ],
                        [
                            "tf.pad(net, spatial_pad_1, pad_mode)",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_outputs, kernel_size=[3, 3], padding='valid')",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(net, [stride[0] * height, stride[1] * width], align_corners=align_corners)",
                            "Call"
                        ],
                        [
                            "tf.pad(net, spatial_pad_1, pad_mode)",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_outputs, kernel_size=[3, 3], padding='valid')",
                            "Call"
                        ],
                        [
                            "layers.conv2d_transpose(net, num_outputs, kernel_size=[3, 3], stride=stride, padding='valid')",
                            "Call"
                        ],
                        [
                            "net[:, 1:, 1:, :]",
                            "Subscript"
                        ],
                        [
                            "tf.pad(images, spatial_pad_3, 'REFLECT')",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_filters, kernel_size=[7, 7], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.pad(net, paddings, 'REFLECT')",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_filters * 2)",
                            "Call"
                        ],
                        [
                            "tf.pad(net, paddings, 'REFLECT')",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_filters * 4)",
                            "Call"
                        ],
                        [
                            "net + res_net",
                            "BinOp"
                        ],
                        [
                            "upsample_fn(net, num_outputs=num_filters * 2, stride=[2, 2])",
                            "Call"
                        ],
                        [
                            "upsample_fn(net, num_outputs=num_filters, stride=[2, 2])",
                            "Call"
                        ],
                        [
                            "tf.pad(net, spatial_pad_3, 'REFLECT')",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "spatial_pad_1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.array([[0, 0], [1, 1], [1, 1], [0, 0]])",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "pad_mode",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'REFLECT'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "pad_206": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "paddings": {
                    "value": "spatial_pad_3",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.array([[0, 0], [3, 3], [3, 3], [0, 0]])",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "REFLECT",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pad_266": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "net",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.resize_nearest_neighbor(net, [stride[0] * height, stride[1] * width])",
                            "Call"
                        ],
                        [
                            "tf.pad(net, spatial_pad_1, pad_mode)",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_outputs, kernel_size=[3, 3], padding='valid')",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(net, [stride[0] * height, stride[1] * width], align_corners=align_corners)",
                            "Call"
                        ],
                        [
                            "tf.pad(net, spatial_pad_1, pad_mode)",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_outputs, kernel_size=[3, 3], padding='valid')",
                            "Call"
                        ],
                        [
                            "layers.conv2d_transpose(net, num_outputs, kernel_size=[3, 3], stride=stride, padding='valid')",
                            "Call"
                        ],
                        [
                            "net[:, 1:, 1:, :]",
                            "Subscript"
                        ],
                        [
                            "tf.pad(images, spatial_pad_3, 'REFLECT')",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_filters, kernel_size=[7, 7], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.pad(net, paddings, 'REFLECT')",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_filters * 2)",
                            "Call"
                        ],
                        [
                            "tf.pad(net, paddings, 'REFLECT')",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_filters * 4)",
                            "Call"
                        ],
                        [
                            "net + res_net",
                            "BinOp"
                        ],
                        [
                            "upsample_fn(net, num_outputs=num_filters * 2, stride=[2, 2])",
                            "Call"
                        ],
                        [
                            "upsample_fn(net, num_outputs=num_filters, stride=[2, 2])",
                            "Call"
                        ],
                        [
                            "tf.pad(net, spatial_pad_3, 'REFLECT')",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "spatial_pad_3",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.array([[0, 0], [3, 3], [3, 3], [0, 0]])",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "REFLECT",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_273": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "layers.conv2d(net, num_outputs, [7, 7], activation_fn=None, normalizer_fn=None, padding='valid')",
                            "Call"
                        ],
                        [
                            "tf.reshape(logits, _dynamic_or_static_shape(images))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "_dynamic_or_static_shape(images)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "resize_bilinear_106": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "images": {
                    "value": "net",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.resize_nearest_neighbor(net, [stride[0] * height, stride[1] * width])",
                            "Call"
                        ],
                        [
                            "tf.pad(net, spatial_pad_1, pad_mode)",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_outputs, kernel_size=[3, 3], padding='valid')",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(net, [stride[0] * height, stride[1] * width], align_corners=align_corners)",
                            "Call"
                        ],
                        [
                            "tf.pad(net, spatial_pad_1, pad_mode)",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_outputs, kernel_size=[3, 3], padding='valid')",
                            "Call"
                        ],
                        [
                            "layers.conv2d_transpose(net, num_outputs, kernel_size=[3, 3], stride=stride, padding='valid')",
                            "Call"
                        ],
                        [
                            "net[:, 1:, 1:, :]",
                            "Subscript"
                        ],
                        [
                            "tf.pad(images, spatial_pad_3, 'REFLECT')",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_filters, kernel_size=[7, 7], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.pad(net, paddings, 'REFLECT')",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_filters * 2)",
                            "Call"
                        ],
                        [
                            "tf.pad(net, paddings, 'REFLECT')",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_filters * 4)",
                            "Call"
                        ],
                        [
                            "net + res_net",
                            "BinOp"
                        ],
                        [
                            "upsample_fn(net, num_outputs=num_filters * 2, stride=[2, 2])",
                            "Call"
                        ],
                        [
                            "upsample_fn(net, num_outputs=num_filters, stride=[2, 2])",
                            "Call"
                        ],
                        [
                            "tf.pad(net, spatial_pad_3, 'REFLECT')",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[stride[0] * height, stride[1] * width]",
                    "type": "List",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "align_corners",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "pad_109": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "net",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.resize_nearest_neighbor(net, [stride[0] * height, stride[1] * width])",
                            "Call"
                        ],
                        [
                            "tf.pad(net, spatial_pad_1, pad_mode)",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_outputs, kernel_size=[3, 3], padding='valid')",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(net, [stride[0] * height, stride[1] * width], align_corners=align_corners)",
                            "Call"
                        ],
                        [
                            "tf.pad(net, spatial_pad_1, pad_mode)",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_outputs, kernel_size=[3, 3], padding='valid')",
                            "Call"
                        ],
                        [
                            "layers.conv2d_transpose(net, num_outputs, kernel_size=[3, 3], stride=stride, padding='valid')",
                            "Call"
                        ],
                        [
                            "net[:, 1:, 1:, :]",
                            "Subscript"
                        ],
                        [
                            "tf.pad(images, spatial_pad_3, 'REFLECT')",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_filters, kernel_size=[7, 7], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.pad(net, paddings, 'REFLECT')",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_filters * 2)",
                            "Call"
                        ],
                        [
                            "tf.pad(net, paddings, 'REFLECT')",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_filters * 4)",
                            "Call"
                        ],
                        [
                            "net + res_net",
                            "BinOp"
                        ],
                        [
                            "upsample_fn(net, num_outputs=num_filters * 2, stride=[2, 2])",
                            "Call"
                        ],
                        [
                            "upsample_fn(net, num_outputs=num_filters, stride=[2, 2])",
                            "Call"
                        ],
                        [
                            "tf.pad(net, spatial_pad_3, 'REFLECT')",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "spatial_pad_1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.array([[0, 0], [1, 1], [1, 1], [0, 0]])",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "pad_mode",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'REFLECT'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_204": {
                "name_or_scope": {
                    "value": "input",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_210": {
                "name_or_scope": {
                    "value": "encoder",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pad_218": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "net",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.resize_nearest_neighbor(net, [stride[0] * height, stride[1] * width])",
                            "Call"
                        ],
                        [
                            "tf.pad(net, spatial_pad_1, pad_mode)",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_outputs, kernel_size=[3, 3], padding='valid')",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(net, [stride[0] * height, stride[1] * width], align_corners=align_corners)",
                            "Call"
                        ],
                        [
                            "tf.pad(net, spatial_pad_1, pad_mode)",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_outputs, kernel_size=[3, 3], padding='valid')",
                            "Call"
                        ],
                        [
                            "layers.conv2d_transpose(net, num_outputs, kernel_size=[3, 3], stride=stride, padding='valid')",
                            "Call"
                        ],
                        [
                            "net[:, 1:, 1:, :]",
                            "Subscript"
                        ],
                        [
                            "tf.pad(images, spatial_pad_3, 'REFLECT')",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_filters, kernel_size=[7, 7], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.pad(net, paddings, 'REFLECT')",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_filters * 2)",
                            "Call"
                        ],
                        [
                            "tf.pad(net, paddings, 'REFLECT')",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_filters * 4)",
                            "Call"
                        ],
                        [
                            "net + res_net",
                            "BinOp"
                        ],
                        [
                            "upsample_fn(net, num_outputs=num_filters * 2, stride=[2, 2])",
                            "Call"
                        ],
                        [
                            "upsample_fn(net, num_outputs=num_filters, stride=[2, 2])",
                            "Call"
                        ],
                        [
                            "tf.pad(net, spatial_pad_3, 'REFLECT')",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "paddings",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.array([[0, 0], [pad_top, pad_bottom], [pad_left, pad_right], [0, 0]], dtype=np.int32)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "REFLECT",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pad_221": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "net",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.resize_nearest_neighbor(net, [stride[0] * height, stride[1] * width])",
                            "Call"
                        ],
                        [
                            "tf.pad(net, spatial_pad_1, pad_mode)",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_outputs, kernel_size=[3, 3], padding='valid')",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(net, [stride[0] * height, stride[1] * width], align_corners=align_corners)",
                            "Call"
                        ],
                        [
                            "tf.pad(net, spatial_pad_1, pad_mode)",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_outputs, kernel_size=[3, 3], padding='valid')",
                            "Call"
                        ],
                        [
                            "layers.conv2d_transpose(net, num_outputs, kernel_size=[3, 3], stride=stride, padding='valid')",
                            "Call"
                        ],
                        [
                            "net[:, 1:, 1:, :]",
                            "Subscript"
                        ],
                        [
                            "tf.pad(images, spatial_pad_3, 'REFLECT')",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_filters, kernel_size=[7, 7], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.pad(net, paddings, 'REFLECT')",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_filters * 2)",
                            "Call"
                        ],
                        [
                            "tf.pad(net, paddings, 'REFLECT')",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_filters * 4)",
                            "Call"
                        ],
                        [
                            "net + res_net",
                            "BinOp"
                        ],
                        [
                            "upsample_fn(net, num_outputs=num_filters * 2, stride=[2, 2])",
                            "Call"
                        ],
                        [
                            "upsample_fn(net, num_outputs=num_filters, stride=[2, 2])",
                            "Call"
                        ],
                        [
                            "tf.pad(net, spatial_pad_3, 'REFLECT')",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "paddings",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.array([[0, 0], [pad_top, pad_bottom], [pad_left, pad_right], [0, 0]], dtype=np.int32)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "REFLECT",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_228": {
                "name_or_scope": {
                    "value": "residual_blocks",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_249": {
                "name_or_scope": {
                    "value": "decoder",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_265": {
                "name_or_scope": {
                    "value": "output",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "random_normal_initializer_61": {
                "mean": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "stddev": {
                    "value": "weights_init_stddev",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.02",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tanh_276": {
                "x": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "layers.conv2d(net, num_outputs, [7, 7], activation_fn=None, normalizer_fn=None, padding='valid')",
                            "Call"
                        ],
                        [
                            "tf.reshape(logits, _dynamic_or_static_shape(images))",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_237": {
                "variable": {
                    "value": "res_net",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "net",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.resize_nearest_neighbor(net, [stride[0] * height, stride[1] * width])",
                            "Call"
                        ],
                        [
                            "tf.pad(net, spatial_pad_1, pad_mode)",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_outputs, kernel_size=[3, 3], padding='valid')",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(net, [stride[0] * height, stride[1] * width], align_corners=align_corners)",
                            "Call"
                        ],
                        [
                            "tf.pad(net, spatial_pad_1, pad_mode)",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_outputs, kernel_size=[3, 3], padding='valid')",
                            "Call"
                        ],
                        [
                            "layers.conv2d_transpose(net, num_outputs, kernel_size=[3, 3], stride=stride, padding='valid')",
                            "Call"
                        ],
                        [
                            "net[:, 1:, 1:, :]",
                            "Subscript"
                        ],
                        [
                            "tf.pad(images, spatial_pad_3, 'REFLECT')",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_filters, kernel_size=[7, 7], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.pad(net, paddings, 'REFLECT')",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_filters * 2)",
                            "Call"
                        ],
                        [
                            "tf.pad(net, paddings, 'REFLECT')",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_filters * 4)",
                            "Call"
                        ],
                        [
                            "net + res_net",
                            "BinOp"
                        ],
                        [
                            "upsample_fn(net, num_outputs=num_filters * 2, stride=[2, 2])",
                            "Call"
                        ],
                        [
                            "upsample_fn(net, num_outputs=num_filters, stride=[2, 2])",
                            "Call"
                        ],
                        [
                            "tf.pad(net, spatial_pad_3, 'REFLECT')",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "paddings",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.array([[0, 0], [pad_top, pad_bottom], [pad_left, pad_right], [0, 0]], dtype=np.int32)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "REFLECT",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pad_239": {
                "variable": {
                    "value": "res_net",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "res_net",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.pad(net, paddings, 'REFLECT')",
                            "Call"
                        ],
                        [
                            "layers.conv2d(res_net, num_filters * 4)",
                            "Call"
                        ],
                        [
                            "tf.pad(res_net, paddings, 'REFLECT')",
                            "Call"
                        ],
                        [
                            "layers.conv2d(res_net, num_filters * 4, activation_fn=None)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "paddings",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.array([[0, 0], [pad_top, pad_bottom], [pad_left, pad_right], [0, 0]], dtype=np.int32)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "REFLECT",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_257": {
                "name_or_scope": {
                    "value": "decoder1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_261": {
                "name_or_scope": {
                    "value": "decoder2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_236": {
                "name_or_scope": {
                    "value": "'block_{}'.format(block_id)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "archive/classification_marcel/tf-slim/nets/cyclegan_test.py": {
        "tensorflow": {
            "zeros_31": {
                "variable": {
                    "value": "img_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2, 32, 32, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_53": {
                "variable": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 32, None, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_59": {
                "variable": {
                    "value": "img_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 32, 32, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "main_112": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_39": {
                "shape": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "placeholder_83": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, height, 32, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_99": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 32, width, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "global_variables_initializer_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "archive/classification_marcel/tf-slim/nets/dcgan.py": {
        "tensorflow": {
            "variable_scope_84": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "'conv%i' % (i + 1)",
                            "BinOp"
                        ],
                        [
                            "'deconv1'",
                            "Constant"
                        ],
                        [
                            "'deconv%i' % i",
                            "BinOp"
                        ],
                        [
                            "'deconv%i' % num_layers",
                            "BinOp"
                        ],
                        [
                            "'logits'",
                            "Constant"
                        ],
                        [
                            "'Discriminator'",
                            "MethodArgument"
                        ],
                        [
                            "'Generator'",
                            "MethodArgument"
                        ]
                    ]
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_158": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "'conv%i' % (i + 1)",
                            "BinOp"
                        ],
                        [
                            "'deconv1'",
                            "Constant"
                        ],
                        [
                            "'deconv%i' % i",
                            "BinOp"
                        ],
                        [
                            "'deconv%i' % num_layers",
                            "BinOp"
                        ],
                        [
                            "'logits'",
                            "Constant"
                        ],
                        [
                            "'Discriminator'",
                            "MethodArgument"
                        ],
                        [
                            "'Generator'",
                            "MethodArgument"
                        ]
                    ]
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reshape_101": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "slim.conv2d(net, 1, kernel_size=1, stride=1, padding='VALID', normalizer_fn=None, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.reshape(logits, [-1, 1])",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_outputs, normalizer_fn=None, activation_fn=None, kernel_size=1, stride=1, padding='VALID', scope=scope)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_164": {
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "archive/classification_marcel/tf-slim/nets/dcgan_test.py": {
        "tensorflow": {
            "zeros_62": {
                "variable": {
                    "value": "wrong_dim_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[5, 32, 32]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_66": {
                "variable": {
                    "value": "correct_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[3, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_102": {
                "variable": {
                    "value": "wrong_dim_img",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[5, 32, 32]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_106": {
                "variable": {
                    "value": "spatially_undefined_shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[5, 32, None, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_110": {
                "variable": {
                    "value": "not_square",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[5, 32, 16, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_114": {
                "variable": {
                    "value": "not_power_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[5, 30, 30, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "main_120": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_random_seed_30": {
                "seed": {
                    "value": "1234",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "set_random_seed_38": {
                "seed": {
                    "value": "1234",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reset_default_graph_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_84": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_77": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "archive/classification_marcel/tf-slim/nets/i3d.py": {
        "tensorflow": {
            "truncated_normal_initializer_33": {
                "mean": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "stddev": {
                    "value": "stddev",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "variable_scope_151": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'InceptionV1'",
                            "MethodArgument"
                        ],
                        [
                            "'InceptionV1'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "InceptionV1",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs, num_classes]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reduce_mean_168": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "slim.conv3d(net, num_classes, [1, 1, 1], activation_fn=None, normalizer_fn=None, scope='Conv2d_0c_1x1')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(logits, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(logits, [1, 2], name='SpatialSqueeze')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_156": {
                "name_or_scope": {
                    "value": "Logits",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_170": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "slim.conv3d(net, num_classes, [1, 1, 1], activation_fn=None, normalizer_fn=None, scope='Conv2d_0c_1x1')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(logits, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(logits, [1, 2], name='SpatialSqueeze')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "SpatialSqueeze",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "archive/classification_marcel/tf-slim/nets/i3d_test.py": {
        "tensorflow": {
            "argmax_140": {
                "variable": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "main_149": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_143": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "archive/classification_marcel/tf-slim/nets/i3d_utils.py": {
        "tensorflow": {
            "constant_73": {
                "variable": {
                    "value": "init_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "init_mat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros([shape[0], shape[1], shape[2], shape[3], shape[4]], dtype=np.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "concat_259": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "index_c",
                    "type": "Name",
                    "possible_values": [
                        [
                            "data_format.index('C')",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_229": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "''",
                            "MethodArgument"
                        ],
                        [
                            "''",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_230": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_235": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_243": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_251": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "archive/classification_marcel/tf-slim/nets/inception_resnet_v2.py": {
        "tensorflow": {
            "concat_45": {
                "variable": {
                    "value": "mixed",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "[tower_conv, tower_conv1_1, tower_conv2_2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_70": {
                "variable": {
                    "value": "mixed",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "[tower_conv, tower_conv1_2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_96": {
                "variable": {
                    "value": "mixed",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "[tower_conv, tower_conv1_2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_35": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'InceptionResnetV2'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "Block35",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "[net]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "clip_by_value_51": {
                "variable": {
                    "value": "scaled_up",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "scaled_up",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "up * scale",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(scaled_up, -6.0, 6.0)",
                            "Call"
                        ],
                        [
                            "up * scale",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(scaled_up, -6.0, 6.0)",
                            "Call"
                        ],
                        [
                            "up * scale",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(scaled_up, -6.0, 6.0)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-6.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "6.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_61": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'InceptionResnetV2'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "Block17",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "[net]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "clip_by_value_77": {
                "variable": {
                    "value": "scaled_up",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "scaled_up",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "up * scale",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(scaled_up, -6.0, 6.0)",
                            "Call"
                        ],
                        [
                            "up * scale",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(scaled_up, -6.0, 6.0)",
                            "Call"
                        ],
                        [
                            "up * scale",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(scaled_up, -6.0, 6.0)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-6.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "6.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_87": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'InceptionResnetV2'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "Block8",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "[net]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "clip_by_value_103": {
                "variable": {
                    "value": "scaled_up",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "scaled_up",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "up * scale",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(scaled_up, -6.0, 6.0)",
                            "Call"
                        ],
                        [
                            "up * scale",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(scaled_up, -6.0, 6.0)",
                            "Call"
                        ],
                        [
                            "up * scale",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(scaled_up, -6.0, 6.0)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-6.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "6.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_157": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'InceptionResnetV2'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "InceptionResnetV2",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_322": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'InceptionResnetV2'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "InceptionResnetV2",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_36": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_38": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_41": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_62": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_64": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_88": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_90": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_208": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tower_conv, tower_conv1_1, tower_conv2_2, tower_pool_1]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_237": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tower_conv, tower_conv1_2, tower_pool]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_275": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tower_conv_1, tower_conv1_1, tower_conv2_2, tower_pool]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_362": {
                "variable": {
                    "value": "end_points[Predictions]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "slim.fully_connected(net, num_classes, activation_fn=None, scope='Logits')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "Predictions",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_190": {
                "name_or_scope": {
                    "value": "Mixed_5b",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_220": {
                "name_or_scope": {
                    "value": "Mixed_6a",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_253": {
                "name_or_scope": {
                    "value": "Mixed_7a",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_343": {
                "name_or_scope": {
                    "value": "Logits",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_351": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "net",
                    "type": "Call",
                    "possible_values": [
                        [
                            "net + scaled_up",
                            "BinOp"
                        ],
                        [
                            "activation_fn(net)",
                            "Call"
                        ],
                        [
                            "activation_fn(net)",
                            "Call"
                        ],
                        [
                            "activation_fn(net)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(inputs, 32, 3, stride=2, padding=padding, scope='Conv2d_1a_3x3')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 32, 3, padding=padding, scope='Conv2d_2a_3x3')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 64, 3, scope='Conv2d_2b_3x3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, 3, stride=2, padding=padding, scope='MaxPool_3a_3x3')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 80, 1, padding=padding, scope='Conv2d_3b_1x1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 192, 3, padding=padding, scope='Conv2d_4a_3x3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, 3, stride=2, padding=padding, scope='MaxPool_5a_3x3')",
                            "Call"
                        ],
                        [
                            "tf.concat([tower_conv, tower_conv1_1, tower_conv2_2, tower_pool_1], 3)",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 10, block35, scale=0.17, activation_fn=activation_fn)",
                            "Call"
                        ],
                        [
                            "tf.concat([tower_conv, tower_conv1_2, tower_pool], 3)",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 20, block17, scale=0.1, activation_fn=activation_fn)",
                            "Call"
                        ],
                        [
                            "tf.concat([tower_conv_1, tower_conv1_1, tower_conv2_2, tower_pool], 3)",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 9, block8, scale=0.2, activation_fn=activation_fn)",
                            "Call"
                        ],
                        [
                            "block8(net, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 1536, 1, scope='Conv2d_7b_1x1')",
                            "Call"
                        ],
                        [
                            "slim.avg_pool2d(net, kernel_size, padding='VALID', scope='AvgPool_1a_8x8')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(net, [1, 2], keep_dims=True, name='global_pool')",
                            "Call"
                        ],
                        [
                            "slim.flatten(net)",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='Dropout')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "global_pool",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_191": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_193": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_197": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_203": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_221": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_225": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_233": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_254": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_259": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_264": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_271": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_331": {
                "name_or_scope": {
                    "value": "AuxLogits",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "archive/classification_marcel/tf-slim/nets/inception_resnet_v2_test.py": {
        "tensorflow": {
            "placeholder_312": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, height, width, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_321": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, height, width, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "main_334": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_248": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, None, None, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_267": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, height, width, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "argmax_286": {
                "variable": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "end_points['Logits']",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "argmax_304": {
                "variable": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "end_points['Logits']",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "global_variables_329": {
                "scope": {
                    "value": ".*/BatchNorm/moving_mean:0$",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_collection_210": {
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "on_cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_collection_212": {
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "on_gpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "global_variables_316": {
                "scope": {
                    "value": ".*/BatchNorm/gamma:0$",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Graph_112": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_206": {
                "name_or_scope": {
                    "value": "on_cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_206": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_208": {
                "name_or_scope": {
                    "value": "on_gpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_208": {
                "device_name": {
                    "value": "/gpu:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "global_variables_initializer_256": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_273": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_287": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_305": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_327": {
                "scope": {
                    "value": ".*/BatchNorm/gamma:0$",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "archive/classification_marcel/tf-slim/nets/inception_utils.py": {
        "tensorflow": {}
    },
    "archive/classification_marcel/tf-slim/nets/inception_v1.py": {
        "tensorflow": {
            "truncated_normal_initializer_26": {
                "mean": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "stddev": {
                    "value": "stddev",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "variable_scope_56": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'InceptionV1'",
                            "MethodArgument"
                        ],
                        [
                            "'InceptionV1'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "InceptionV1",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_303": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'InceptionV1'",
                            "MethodArgument"
                        ],
                        [
                            "'InceptionV1'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "InceptionV1",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "concat_96": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_114": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_137": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_155": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_173": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_191": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_209": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_232": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_250": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_307": {
                "name_or_scope": {
                    "value": "Logits",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_310": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "net",
                    "type": "Call",
                    "possible_values": [
                        [
                            "slim.conv2d(inputs, 64, [7, 7], stride=2, scope=end_point)",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [3, 3], stride=2, scope=end_point)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 64, [1, 1], scope=end_point)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 192, [3, 3], scope=end_point)",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [3, 3], stride=2, scope=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat(axis=3, values=[branch_0, branch_1, branch_2, branch_3])",
                            "Call"
                        ],
                        [
                            "tf.concat(axis=3, values=[branch_0, branch_1, branch_2, branch_3])",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [3, 3], stride=2, scope=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat(axis=3, values=[branch_0, branch_1, branch_2, branch_3])",
                            "Call"
                        ],
                        [
                            "tf.concat(axis=3, values=[branch_0, branch_1, branch_2, branch_3])",
                            "Call"
                        ],
                        [
                            "tf.concat(axis=3, values=[branch_0, branch_1, branch_2, branch_3])",
                            "Call"
                        ],
                        [
                            "tf.concat(axis=3, values=[branch_0, branch_1, branch_2, branch_3])",
                            "Call"
                        ],
                        [
                            "tf.concat(axis=3, values=[branch_0, branch_1, branch_2, branch_3])",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], stride=2, scope=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat(axis=3, values=[branch_0, branch_1, branch_2, branch_3])",
                            "Call"
                        ],
                        [
                            "tf.concat(axis=3, values=[branch_0, branch_1, branch_2, branch_3])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(net, [1, 2], keep_dims=True, name='global_pool')",
                            "Call"
                        ],
                        [
                            "slim.avg_pool2d(net, [7, 7], stride=1, scope='AvgPool_0a_7x7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, scope='Dropout_0b')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "global_pool",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_322": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='Conv2d_0c_1x1')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(logits, [1, 2], name='SpatialSqueeze')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "SpatialSqueeze",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_84": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "'Conv2d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_5a_2x2'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ]
                    ]
                }
            },
            "variable_scope_102": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "'Conv2d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_5a_2x2'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ]
                    ]
                }
            },
            "variable_scope_125": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "'Conv2d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_5a_2x2'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ]
                    ]
                }
            },
            "variable_scope_143": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "'Conv2d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_5a_2x2'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ]
                    ]
                }
            },
            "variable_scope_161": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "'Conv2d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_5a_2x2'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ]
                    ]
                }
            },
            "variable_scope_179": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "'Conv2d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_5a_2x2'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ]
                    ]
                }
            },
            "variable_scope_197": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "'Conv2d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_5a_2x2'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ]
                    ]
                }
            },
            "variable_scope_220": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "'Conv2d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_5a_2x2'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ]
                    ]
                }
            },
            "variable_scope_238": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "'Conv2d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4f'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_5a_2x2'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ]
                    ]
                }
            },
            "variable_scope_85": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_87": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_90": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_93": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_103": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_105": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_108": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_111": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_126": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_128": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_131": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_134": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_144": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_146": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_149": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_152": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_162": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_164": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_167": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_170": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_180": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_182": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_185": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_188": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_198": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_200": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_203": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_206": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_221": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_223": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_226": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_229": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_239": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_241": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_244": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_247": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "archive/classification_marcel/tf-slim/nets/inception_v1_test.py": {
        "tensorflow": {
            "placeholder_184": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, height, width, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "argmax_204": {
                "variable": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "argmax_221": {
                "variable": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_243": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, height, width, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_252": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, height, width, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "main_265": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_143": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_149": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, None, None, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reset_default_graph_161": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_167": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, None, None, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "global_variables_260": {
                "scope": {
                    "value": ".*/BatchNorm/moving_mean:0$",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "global_variables_initializer_156": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_156": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_175": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_175": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_236": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_236": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_247": {
                "scope": {
                    "value": ".*/BatchNorm/gamma:0$",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Graph_83": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_192": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_207": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_224": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_258": {
                "scope": {
                    "value": ".*/BatchNorm/gamma:0$",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "archive/classification_marcel/tf-slim/nets/inception_v2.py": {
        "tensorflow": {
            "truncated_normal_initializer_26": {
                "mean": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "stddev": {
                    "value": "stddev",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "variable_scope_89": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'InceptionV2'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "InceptionV2",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_510": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'InceptionV2'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "InceptionV2",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "concat_177": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "concat_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3 if data_format == 'NHWC' else 1",
                            "IfExp"
                        ]
                    ]
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_208": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "concat_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3 if data_format == 'NHWC' else 1",
                            "IfExp"
                        ]
                    ]
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_234": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "concat_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3 if data_format == 'NHWC' else 1",
                            "IfExp"
                        ]
                    ]
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_264": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "concat_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3 if data_format == 'NHWC' else 1",
                            "IfExp"
                        ]
                    ]
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_295": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "concat_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3 if data_format == 'NHWC' else 1",
                            "IfExp"
                        ]
                    ]
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_326": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "concat_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3 if data_format == 'NHWC' else 1",
                            "IfExp"
                        ]
                    ]
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_357": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "concat_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3 if data_format == 'NHWC' else 1",
                            "IfExp"
                        ]
                    ]
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_383": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "concat_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3 if data_format == 'NHWC' else 1",
                            "IfExp"
                        ]
                    ]
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_414": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "concat_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3 if data_format == 'NHWC' else 1",
                            "IfExp"
                        ]
                    ]
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_445": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "concat_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3 if data_format == 'NHWC' else 1",
                            "IfExp"
                        ]
                    ]
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_152": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "'Conv2d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ]
                    ]
                }
            },
            "variable_scope_183": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "'Conv2d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ]
                    ]
                }
            },
            "variable_scope_214": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "'Conv2d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ]
                    ]
                }
            },
            "variable_scope_239": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "'Conv2d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ]
                    ]
                }
            },
            "variable_scope_270": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "'Conv2d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ]
                    ]
                }
            },
            "variable_scope_301": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "'Conv2d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ]
                    ]
                }
            },
            "variable_scope_332": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "'Conv2d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ]
                    ]
                }
            },
            "variable_scope_363": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "'Conv2d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ]
                    ]
                }
            },
            "variable_scope_389": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "'Conv2d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ]
                    ]
                }
            },
            "variable_scope_420": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "'Conv2d_1a_7x7'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2c_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_3c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_4e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ]
                    ]
                }
            },
            "variable_scope_516": {
                "name_or_scope": {
                    "value": "Logits",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_519": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "net",
                    "type": "Call",
                    "possible_values": [
                        [
                            "slim.separable_conv2d(inputs, depth(64), [7, 7], depth_multiplier=depthwise_multiplier, stride=2, padding='SAME', weights_initializer=trunc_normal(1.0), scope=end_point)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(inputs, depth(64), [7, 7], stride=2, weights_initializer=trunc_normal(1.0), scope=end_point)",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [3, 3], scope=end_point, stride=2)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, depth(64), [1, 1], scope=end_point, weights_initializer=trunc_normal(0.1))",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, depth(192), [3, 3], scope=end_point)",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [3, 3], scope=end_point, stride=2)",
                            "Call"
                        ],
                        [
                            "tf.concat(axis=concat_dim, values=[branch_0, branch_1, branch_2, branch_3])",
                            "Call"
                        ],
                        [
                            "tf.concat(axis=concat_dim, values=[branch_0, branch_1, branch_2, branch_3])",
                            "Call"
                        ],
                        [
                            "tf.concat(axis=concat_dim, values=[branch_0, branch_1, branch_2])",
                            "Call"
                        ],
                        [
                            "tf.concat(axis=concat_dim, values=[branch_0, branch_1, branch_2, branch_3])",
                            "Call"
                        ],
                        [
                            "tf.concat(axis=concat_dim, values=[branch_0, branch_1, branch_2, branch_3])",
                            "Call"
                        ],
                        [
                            "tf.concat(axis=concat_dim, values=[branch_0, branch_1, branch_2, branch_3])",
                            "Call"
                        ],
                        [
                            "tf.concat(axis=concat_dim, values=[branch_0, branch_1, branch_2, branch_3])",
                            "Call"
                        ],
                        [
                            "tf.concat(axis=concat_dim, values=[branch_0, branch_1, branch_2])",
                            "Call"
                        ],
                        [
                            "tf.concat(axis=concat_dim, values=[branch_0, branch_1, branch_2, branch_3])",
                            "Call"
                        ],
                        [
                            "tf.concat(axis=concat_dim, values=[branch_0, branch_1, branch_2, branch_3])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(net, [1, 2], keep_dims=True, name='global_pool')",
                            "Call"
                        ],
                        [
                            "slim.avg_pool2d(net, kernel_size, padding='VALID', scope='AvgPool_1a_{}x{}'.format(*kernel_size))",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, keep_prob=dropout_keep_prob, scope='Dropout_1b')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "global_pool",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_534": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='Conv2d_1c_1x1')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(logits, [1, 2], name='SpatialSqueeze')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "SpatialSqueeze",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_153": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_155": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_162": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_171": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_184": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_186": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_193": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_202": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_215": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_222": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_231": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_240": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_242": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_249": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_258": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_271": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_273": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_280": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_289": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_302": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_304": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_311": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_320": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_333": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_335": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_342": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_351": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_364": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_371": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_380": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_390": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_392": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_399": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_408": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_421": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_423": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_430": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_439": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "archive/classification_marcel/tf-slim/nets/inception_v2_test.py": {
        "tensorflow": {
            "placeholder_298": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, height, width, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "argmax_318": {
                "variable": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "argmax_335": {
                "variable": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_357": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, height, width, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_366": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, height, width, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "main_379": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "transpose_222": {
                "variable": {
                    "value": "transposed_original_shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "end_points[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reset_default_graph_257": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_263": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, None, None, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reset_default_graph_275": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_281": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, None, None, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "global_variables_374": {
                "scope": {
                    "value": ".*/BatchNorm/moving_mean:0$",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "global_variables_initializer_270": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_270": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_289": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_289": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_350": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_350": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_361": {
                "scope": {
                    "value": ".*/BatchNorm/gamma:0$",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Graph_82": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_306": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_321": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_338": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_372": {
                "scope": {
                    "value": ".*/BatchNorm/gamma:0$",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "archive/classification_marcel/tf-slim/nets/inception_v3.py": {
        "tensorflow": {
            "truncated_normal_initializer_26": {
                "mean": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "stddev": {
                    "value": "stddev",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "variable_scope_99": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'InceptionV3'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "InceptionV3",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_485": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'InceptionV3'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "InceptionV3",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "concat_161": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_185": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_208": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_227": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_256": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_285": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_313": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_342": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_364": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_388": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_413": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_144": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "'Conv2d_1a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2b_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_3b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_5a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_7a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_7b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_7c'",
                            "Constant"
                        ]
                    ]
                }
            },
            "variable_scope_167": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "'Conv2d_1a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2b_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_3b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_5a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_7a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_7b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_7c'",
                            "Constant"
                        ]
                    ]
                }
            },
            "variable_scope_191": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "'Conv2d_1a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2b_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_3b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_5a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_7a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_7b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_7c'",
                            "Constant"
                        ]
                    ]
                }
            },
            "variable_scope_214": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "'Conv2d_1a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2b_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_3b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_5a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_7a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_7b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_7c'",
                            "Constant"
                        ]
                    ]
                }
            },
            "variable_scope_233": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "'Conv2d_1a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2b_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_3b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_5a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_7a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_7b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_7c'",
                            "Constant"
                        ]
                    ]
                }
            },
            "variable_scope_262": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "'Conv2d_1a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2b_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_3b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_5a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_7a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_7b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_7c'",
                            "Constant"
                        ]
                    ]
                }
            },
            "variable_scope_290": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "'Conv2d_1a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2b_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_3b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_5a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_7a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_7b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_7c'",
                            "Constant"
                        ]
                    ]
                }
            },
            "variable_scope_319": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "'Conv2d_1a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2b_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_3b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_5a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_7a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_7b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_7c'",
                            "Constant"
                        ]
                    ]
                }
            },
            "variable_scope_348": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "'Conv2d_1a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2b_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_3b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_5a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_7a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_7b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_7c'",
                            "Constant"
                        ]
                    ]
                }
            },
            "variable_scope_369": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "'Conv2d_1a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2b_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_3b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_5a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_7a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_7b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_7c'",
                            "Constant"
                        ]
                    ]
                }
            },
            "concat_374": {
                "variable": {
                    "value": "branch_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "[slim.conv2d(branch_1, depth(384), [1, 3], scope='Conv2d_0b_1x3'), slim.conv2d(branch_1, depth(384), [3, 1], scope='Conv2d_0b_3x1')]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_381": {
                "variable": {
                    "value": "branch_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "[slim.conv2d(branch_2, depth(384), [1, 3], scope='Conv2d_0c_1x3'), slim.conv2d(branch_2, depth(384), [3, 1], scope='Conv2d_0d_3x1')]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_394": {
                "name_or_scope": {
                    "value": "end_point",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "'Conv2d_1a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_2b_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_3a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_3b_1x1'",
                            "Constant"
                        ],
                        [
                            "'Conv2d_4a_3x3'",
                            "Constant"
                        ],
                        [
                            "'MaxPool_5a_3x3'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_5d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6c'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6d'",
                            "Constant"
                        ],
                        [
                            "'Mixed_6e'",
                            "Constant"
                        ],
                        [
                            "'Mixed_7a'",
                            "Constant"
                        ],
                        [
                            "'Mixed_7b'",
                            "Constant"
                        ],
                        [
                            "'Mixed_7c'",
                            "Constant"
                        ]
                    ]
                }
            },
            "concat_399": {
                "variable": {
                    "value": "branch_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "[slim.conv2d(branch_1, depth(384), [1, 3], scope='Conv2d_0b_1x3'), slim.conv2d(branch_1, depth(384), [3, 1], scope='Conv2d_0c_3x1')]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_406": {
                "variable": {
                    "value": "branch_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "[slim.conv2d(branch_2, depth(384), [1, 3], scope='Conv2d_0c_1x3'), slim.conv2d(branch_2, depth(384), [3, 1], scope='Conv2d_0d_3x1')]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_520": {
                "name_or_scope": {
                    "value": "Logits",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_523": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "net",
                    "type": "Call",
                    "possible_values": [
                        [
                            "slim.conv2d(inputs, depth(32), [3, 3], stride=2, scope=end_point)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, depth(32), [3, 3], scope=end_point)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, depth(64), [3, 3], padding='SAME', scope=end_point)",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [3, 3], stride=2, scope=end_point)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, depth(80), [1, 1], scope=end_point)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, depth(192), [3, 3], scope=end_point)",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [3, 3], stride=2, scope=end_point)",
                            "Call"
                        ],
                        [
                            "tf.concat(axis=3, values=[branch_0, branch_1, branch_2, branch_3])",
                            "Call"
                        ],
                        [
                            "tf.concat(axis=3, values=[branch_0, branch_1, branch_2, branch_3])",
                            "Call"
                        ],
                        [
                            "tf.concat(axis=3, values=[branch_0, branch_1, branch_2, branch_3])",
                            "Call"
                        ],
                        [
                            "tf.concat(axis=3, values=[branch_0, branch_1, branch_2])",
                            "Call"
                        ],
                        [
                            "tf.concat(axis=3, values=[branch_0, branch_1, branch_2, branch_3])",
                            "Call"
                        ],
                        [
                            "tf.concat(axis=3, values=[branch_0, branch_1, branch_2, branch_3])",
                            "Call"
                        ],
                        [
                            "tf.concat(axis=3, values=[branch_0, branch_1, branch_2, branch_3])",
                            "Call"
                        ],
                        [
                            "tf.concat(axis=3, values=[branch_0, branch_1, branch_2, branch_3])",
                            "Call"
                        ],
                        [
                            "tf.concat(axis=3, values=[branch_0, branch_1, branch_2])",
                            "Call"
                        ],
                        [
                            "tf.concat(axis=3, values=[branch_0, branch_1, branch_2, branch_3])",
                            "Call"
                        ],
                        [
                            "tf.concat(axis=3, values=[branch_0, branch_1, branch_2, branch_3])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(net, [1, 2], keep_dims=True, name='GlobalPool')",
                            "Call"
                        ],
                        [
                            "slim.avg_pool2d(net, kernel_size, padding='VALID', scope='AvgPool_1a_{}x{}'.format(*kernel_size))",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, keep_prob=dropout_keep_prob, scope='Dropout_1b')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "GlobalPool",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_540": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='Conv2d_1c_1x1')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(logits, [1, 2], name='SpatialSqueeze')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "SpatialSqueeze",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_145": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_147": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_151": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_157": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_168": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_170": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_174": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_181": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_192": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_194": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_198": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_204": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_215": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_218": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_224": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_234": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_236": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_242": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_252": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_263": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_265": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_271": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_281": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_291": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_293": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_299": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_309": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_320": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_322": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_328": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_338": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_349": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_353": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_361": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_370": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_372": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_377": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_384": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_395": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_397": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_402": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_409": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_497": {
                "name_or_scope": {
                    "value": "AuxLogits",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_516": {
                "variable": {
                    "value": "aux_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "aux_logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "end_points['Mixed_6e']",
                            "Subscript"
                        ],
                        [
                            "slim.avg_pool2d(aux_logits, [5, 5], stride=3, padding='VALID', scope='AvgPool_1a_5x5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(aux_logits, depth(128), [1, 1], scope='Conv2d_1b_1x1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(aux_logits, depth(768), kernel_size, weights_initializer=trunc_normal(0.01), padding='VALID', scope='Conv2d_2a_{}x{}'.format(*kernel_size))",
                            "Call"
                        ],
                        [
                            "slim.conv2d(aux_logits, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, weights_initializer=trunc_normal(0.001), scope='Conv2d_2b_1x1')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(aux_logits, [1, 2], name='SpatialSqueeze')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "SpatialSqueeze",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "archive/classification_marcel/tf-slim/nets/inception_v3_test.py": {
        "tensorflow": {
            "placeholder_264": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, height, width, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "argmax_284": {
                "variable": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "end_points['Logits']",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "argmax_302": {
                "variable": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "end_points['Logits']",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_324": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, height, width, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_333": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, height, width, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "main_346": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_225": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_231": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, None, None, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reset_default_graph_242": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_248": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, None, None, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "global_variables_341": {
                "scope": {
                    "value": ".*/BatchNorm/moving_mean:0$",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "global_variables_initializer_237": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_237": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_255": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_255": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_317": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_317": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_328": {
                "scope": {
                    "value": ".*/BatchNorm/gamma:0$",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Graph_85": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_272": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_287": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_305": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_339": {
                "scope": {
                    "value": ".*/BatchNorm/gamma:0$",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "archive/classification_marcel/tf-slim/nets/inception_v4.py": {
        "tensorflow": {
            "variable_scope_173": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'InceptionV4'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "InceptionV4",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_283": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'InceptionV4'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "InceptionV4",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_39": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'InceptionV4'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "BlockInceptionA",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "concat_52": {
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_60": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'InceptionV4'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "BlockReductionA",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "concat_72": {
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_80": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'InceptionV4'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "BlockInceptionB",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "concat_96": {
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_104": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'InceptionV4'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "BlockReductionB",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "concat_118": {
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_126": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'InceptionV4'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "BlockInceptionC",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "concat_131": {
                "variable": {
                    "value": "branch_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "[slim.conv2d(branch_1, 256, [1, 3], scope='Conv2d_0b_1x3'), slim.conv2d(branch_1, 256, [3, 1], scope='Conv2d_0c_3x1')]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_138": {
                "variable": {
                    "value": "branch_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "[slim.conv2d(branch_2, 256, [1, 3], scope='Conv2d_0d_1x3'), slim.conv2d(branch_2, 256, [3, 1], scope='Conv2d_0e_3x1')]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_144": {
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1, branch_2, branch_3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_195": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_210": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_221": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "[branch_0, branch_1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_40": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_42": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_45": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_49": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_61": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_64": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_69": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_81": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_83": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_87": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_93": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_105": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_109": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_115": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_127": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_129": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_134": {
                "name_or_scope": {
                    "value": "Branch_2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_141": {
                "name_or_scope": {
                    "value": "Branch_3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_188": {
                "name_or_scope": {
                    "value": "Mixed_3a",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_199": {
                "name_or_scope": {
                    "value": "Mixed_4a",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_214": {
                "name_or_scope": {
                    "value": "Mixed_5a",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_332": {
                "variable": {
                    "value": "end_points[Predictions]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "slim.fully_connected(net, num_classes, activation_fn=None, scope='Logits')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "Predictions",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_189": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_192": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_200": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_204": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_215": {
                "name_or_scope": {
                    "value": "Branch_0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_218": {
                "name_or_scope": {
                    "value": "Branch_1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_312": {
                "name_or_scope": {
                    "value": "Logits",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_319": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "net",
                    "type": "Call",
                    "possible_values": [
                        [
                            "slim.conv2d(inputs, 32, [3, 3], stride=2, padding='VALID', scope='Conv2d_1a_3x3')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 32, [3, 3], padding='VALID', scope='Conv2d_2a_3x3')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 64, [3, 3], scope='Conv2d_2b_3x3')",
                            "Call"
                        ],
                        [
                            "tf.concat(axis=3, values=[branch_0, branch_1])",
                            "Call"
                        ],
                        [
                            "tf.concat(axis=3, values=[branch_0, branch_1])",
                            "Call"
                        ],
                        [
                            "tf.concat(axis=3, values=[branch_0, branch_1])",
                            "Call"
                        ],
                        [
                            "block_inception_a(net, block_scope)",
                            "Call"
                        ],
                        [
                            "block_reduction_a(net, 'Mixed_6a')",
                            "Call"
                        ],
                        [
                            "block_inception_b(net, block_scope)",
                            "Call"
                        ],
                        [
                            "block_reduction_b(net, 'Mixed_7a')",
                            "Call"
                        ],
                        [
                            "block_inception_c(net, block_scope)",
                            "Call"
                        ],
                        [
                            "slim.avg_pool2d(net, kernel_size, padding='VALID', scope='AvgPool_1a')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(net, [1, 2], keep_dims=True, name='global_pool')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, scope='Dropout_1b')",
                            "Call"
                        ],
                        [
                            "slim.flatten(net, scope='PreLogitsFlatten')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "global_pool",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_292": {
                "name_or_scope": {
                    "value": "AuxLogits",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "archive/classification_marcel/tf-slim/nets/inception_v4_test.py": {
        "tensorflow": {
            "placeholder_261": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, height, width, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_270": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, height, width, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "main_283": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_collection_161": {
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "on_cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_collection_163": {
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "on_gpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_197": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, None, None, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_216": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, height, width, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "argmax_235": {
                "variable": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "argmax_253": {
                "variable": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "global_variables_278": {
                "scope": {
                    "value": ".*/BatchNorm/moving_mean:0$",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_157": {
                "name_or_scope": {
                    "value": "on_cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_157": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_159": {
                "name_or_scope": {
                    "value": "on_gpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_159": {
                "device_name": {
                    "value": "/gpu:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "global_variables_265": {
                "scope": {
                    "value": ".*/BatchNorm/gamma:0$",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Graph_143": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_205": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_222": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_236": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_254": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_276": {
                "scope": {
                    "value": ".*/BatchNorm/gamma:0$",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "archive/classification_marcel/tf-slim/nets/lenet.py": {
        "tensorflow": {
            "variable_scope_61": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'LeNet'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "LeNet",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "[images]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_95": {
                "stddev": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "archive/classification_marcel/tf-slim/nets/mobilenet/conv_blocks.py": {
        "tensorflow": {
            "pad_45": {
                "variable": {
                    "value": "padded_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.split(input_tensor, input_splits, axis=3, name='split_' + scope)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [pad_beg[0], pad_end[0]], [pad_beg[1], pad_end[1]], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "split_351": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "input_tensor",
                    "type": "Call",
                    "possible_values": [
                        [
                            "_fixed_padding(input_tensor, kernel_size, rate)",
                            "Call"
                        ],
                        [
                            "tf.identity(input_tensor, 'input')",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "input_splits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_split_divisible(b, num_ways, divisible_by=divisible_by)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "'split_' + scope",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "identity_252": {
                "variable": {
                    "value": "input_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_tensor",
                    "type": "Call",
                    "possible_values": [
                        [
                            "_fixed_padding(input_tensor, kernel_size, rate)",
                            "Call"
                        ],
                        [
                            "tf.identity(input_tensor, 'input')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "input",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "identity_282": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "Call",
                    "possible_values": [
                        [
                            "slim.separable_conv2d(input_tensor, None, kernel_size, depth_multiplier=1, stride=stride, rate=rate, normalizer_fn=normalizer_fn, padding=padding, scope=dw_scope)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_outputs, [1, 1], stride=1, normalizer_fn=normalizer_fn, scope=pw_scope)",
                            "Call"
                        ],
                        [
                            "input_tensor",
                            "Name"
                        ],
                        [
                            "_fixed_padding(net, kernel_size, rate)",
                            "Call"
                        ],
                        [
                            "depthwise_func(net, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "split_conv(net, inner_size, num_ways=split_expansion, scope='expand', stride=1, normalizer_fn=normalizer_fn)",
                            "Call"
                        ],
                        [
                            "tf.identity(net, 'expansion_output')",
                            "Call"
                        ],
                        [
                            "tf.identity(net, name='depthwise_output')",
                            "Call"
                        ],
                        [
                            "_fixed_padding(net, kernel_size, rate)",
                            "Call"
                        ],
                        [
                            "depthwise_func(net)",
                            "Call"
                        ],
                        [
                            "expansion_transform(expansion_tensor=net, input_tensor=input_tensor)",
                            "Call"
                        ],
                        [
                            "split_conv(net, num_outputs, num_ways=split_projection, stride=1, scope='project', normalizer_fn=normalizer_fn, activation_fn=project_activation_fn)",
                            "Call"
                        ],
                        [
                            "_fixed_padding(net, kernel_size, rate)",
                            "Call"
                        ],
                        [
                            "depthwise_func(net, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "residual(input_tensor=input_tensor, output_tensor=net)",
                            "Call"
                        ],
                        [
                            "net + input_tensor",
                            "BinOp"
                        ]
                    ]
                },
                "name": {
                    "value": "depthwise_output",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "identity_356": {
                "variable": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "n",
                    "type": "Call",
                    "possible_values": [
                        [
                            "slim.conv2d(input_tensor, out_size, [1, 1], scope=scope, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.identity(n, scope + '_output')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "scope + '_output'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concat_358": {
                "values": {
                    "value": "outs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "scope + '_concat'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_229": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "scope + '_'",
                            "BinOp"
                        ],
                        [
                            "base + '_part_%d' % (i,)",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "expanded_conv",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "name_scope_230": {
                "name": {
                    "value": "s.original_name_scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "identity_273": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "Call",
                    "possible_values": [
                        [
                            "slim.separable_conv2d(input_tensor, None, kernel_size, depth_multiplier=1, stride=stride, rate=rate, normalizer_fn=normalizer_fn, padding=padding, scope=dw_scope)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_outputs, [1, 1], stride=1, normalizer_fn=normalizer_fn, scope=pw_scope)",
                            "Call"
                        ],
                        [
                            "input_tensor",
                            "Name"
                        ],
                        [
                            "_fixed_padding(net, kernel_size, rate)",
                            "Call"
                        ],
                        [
                            "depthwise_func(net, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "split_conv(net, inner_size, num_ways=split_expansion, scope='expand', stride=1, normalizer_fn=normalizer_fn)",
                            "Call"
                        ],
                        [
                            "tf.identity(net, 'expansion_output')",
                            "Call"
                        ],
                        [
                            "tf.identity(net, name='depthwise_output')",
                            "Call"
                        ],
                        [
                            "_fixed_padding(net, kernel_size, rate)",
                            "Call"
                        ],
                        [
                            "depthwise_func(net)",
                            "Call"
                        ],
                        [
                            "expansion_transform(expansion_tensor=net, input_tensor=input_tensor)",
                            "Call"
                        ],
                        [
                            "split_conv(net, num_outputs, num_ways=split_projection, stride=1, scope='project', normalizer_fn=normalizer_fn, activation_fn=project_activation_fn)",
                            "Call"
                        ],
                        [
                            "_fixed_padding(net, kernel_size, rate)",
                            "Call"
                        ],
                        [
                            "depthwise_func(net, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "residual(input_tensor=input_tensor, output_tensor=net)",
                            "Call"
                        ],
                        [
                            "net + input_tensor",
                            "BinOp"
                        ]
                    ]
                },
                "name": {
                    "value": "expansion_output",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "identity_314": {
                "input": {
                    "value": "net",
                    "type": "Call",
                    "possible_values": [
                        [
                            "slim.separable_conv2d(input_tensor, None, kernel_size, depth_multiplier=1, stride=stride, rate=rate, normalizer_fn=normalizer_fn, padding=padding, scope=dw_scope)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_outputs, [1, 1], stride=1, normalizer_fn=normalizer_fn, scope=pw_scope)",
                            "Call"
                        ],
                        [
                            "input_tensor",
                            "Name"
                        ],
                        [
                            "_fixed_padding(net, kernel_size, rate)",
                            "Call"
                        ],
                        [
                            "depthwise_func(net, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "split_conv(net, inner_size, num_ways=split_expansion, scope='expand', stride=1, normalizer_fn=normalizer_fn)",
                            "Call"
                        ],
                        [
                            "tf.identity(net, 'expansion_output')",
                            "Call"
                        ],
                        [
                            "tf.identity(net, name='depthwise_output')",
                            "Call"
                        ],
                        [
                            "_fixed_padding(net, kernel_size, rate)",
                            "Call"
                        ],
                        [
                            "depthwise_func(net)",
                            "Call"
                        ],
                        [
                            "expansion_transform(expansion_tensor=net, input_tensor=input_tensor)",
                            "Call"
                        ],
                        [
                            "split_conv(net, num_outputs, num_ways=split_projection, stride=1, scope='project', normalizer_fn=normalizer_fn, activation_fn=project_activation_fn)",
                            "Call"
                        ],
                        [
                            "_fixed_padding(net, kernel_size, rate)",
                            "Call"
                        ],
                        [
                            "depthwise_func(net, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "residual(input_tensor=input_tensor, output_tensor=net)",
                            "Call"
                        ],
                        [
                            "net + input_tensor",
                            "BinOp"
                        ]
                    ]
                },
                "name": {
                    "value": "output",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_81": {
                "name_or_scope": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "default_name": {
                    "value": "separable",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "name_scope_82": {
                "name": {
                    "value": "s.original_name_scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "archive/classification_marcel/tf-slim/nets/mobilenet/mobilenet.py": {
        "tensorflow": {
            "pad_57": {
                "variable": {
                    "value": "padded_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.identity(inputs, 'input')",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [pad_beg[0], pad_end[0]], [pad_beg[1], pad_end[1]], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "identity_357": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.identity(inputs, 'input')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "input",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "identity_362": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "Call",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "_fixed_padding(net, params['kernel_size'], layer_rate)",
                            "Call"
                        ],
                        [
                            "opdef.op(net, **params)",
                            "Call"
                        ],
                        [
                            "tf.identity(net, name='embedding')",
                            "Call"
                        ],
                        [
                            "global_pool(net)",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, scope='Dropout', is_training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "embedding",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "convert_to_tensor_403": {
                "variable": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[1, tf.shape(input_tensor)[1], tf.shape(input_tensor)[2], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_453": {
                "variable": {
                    "value": "weight_intitializer",
                    "type": "Variable",
                    "possible_values": []
                },
                "stddev": {
                    "value": "stddev",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.09",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_299": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.dirname(t.name)",
                            "Call"
                        ],
                        [
                            "os.path.dirname(net.name)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'Mobilenet'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "default_scope",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "name_scope_300": {
                "name": {
                    "value": "s.original_name_scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_356": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.dirname(t.name)",
                            "Call"
                        ],
                        [
                            "os.path.dirname(net.name)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'Mobilenet'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "Mobilenet",
                    "type": "Constant",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "squeeze_380": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, biases_initializer=tf.zeros_initializer(), scope='Conv2d_1c_1x1')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(logits, [1, 2])",
                            "Call"
                        ],
                        [
                            "tf.identity(logits, name='output')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "identity_382": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, biases_initializer=tf.zeros_initializer(), scope='Conv2d_1c_1x1')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(logits, [1, 2])",
                            "Call"
                        ],
                        [
                            "tf.identity(logits, name='output')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "output",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_364": {
                "name_or_scope": {
                    "value": "Logits",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_initializer_377": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "shape_404": {
                "input": {
                    "value": "input_tensor",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "shape_405": {
                "input": {
                    "value": "input_tensor",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "archive/classification_marcel/tf-slim/nets/mobilenet/mobilenet_v2.py": {
        "tensorflow": {}
    },
    "archive/classification_marcel/tf-slim/nets/mobilenet/mobilenet_v2_test.py": {
        "tensorflow": {
            "get_default_graph_38": {
                "variable": {
                    "value": "gd",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "main_189": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_101": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_113": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_125": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_139": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_148": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_156": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_166": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_50": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(10, 224, 224, 16)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_66": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(10, 224, 224, 16)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reset_default_graph_73": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_86": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(10, 224, 224, 16)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_94": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(10, 224, 224, 16)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_103": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(10, 224, 224, 16)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_130": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(10, 224, 224, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_150": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(10, 224, 224, 16)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_158": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(10, 224, 224, 16)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_168": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(10, 224, 224, 16)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_75": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(10, input_size, input_size, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_118": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(10, 224, 224, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_143": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(10, 224, 224, 16)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "archive/classification_marcel/tf-slim/nets/mobilenet_v1.py": {
        "tensorflow": {
            "pad_163": {
                "variable": {
                    "value": "padded_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "paddings": {
                    "value": "[[0, 0], [pad_beg[0], pad_end[0]], [pad_beg[1], pad_end[1]], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_463": {
                "variable": {
                    "value": "weights_init",
                    "type": "Variable",
                    "possible_values": []
                },
                "stddev": {
                    "value": "stddev",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.09",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_232": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'MobilenetV1'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "MobilenetV1",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_358": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'MobilenetV1'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "MobilenetV1",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_365": {
                "name_or_scope": {
                    "value": "Logits",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_368": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "net",
                    "type": "Call",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "_fixed_padding(net, conv_def.kernel)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, depth(conv_def.depth), conv_def.kernel, stride=conv_def.stride, scope=end_point)",
                            "Call"
                        ],
                        [
                            "_fixed_padding(net, conv_def.kernel, layer_rate)",
                            "Call"
                        ],
                        [
                            "slim.separable_conv2d(net, None, conv_def.kernel, depth_multiplier=1, stride=layer_stride, rate=layer_rate, scope=end_point)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, depth(conv_def.depth), [1, 1], stride=1, scope=end_point)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(net, [1, 2], keep_dims=True, name='global_pool')",
                            "Call"
                        ],
                        [
                            "slim.avg_pool2d(net, kernel_size, padding='VALID', scope='AvgPool_1a')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, keep_prob=dropout_keep_prob, scope='Dropout_1b')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "global_pool",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_383": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='Conv2d_1c_1x1')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(logits, [1, 2], name='SpatialSqueeze')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "SpatialSqueeze",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "archive/classification_marcel/tf-slim/nets/mobilenet_v1_eval.py": {
        "tensorflow": {
            "batch_75": {
                "variable": {
                    "value": "(images, labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[image, label]",
                    "type": "List",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "FLAGS.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_threads": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "capacity": {
                    "value": "5 * FLAGS.batch_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squeeze_93": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.squeeze(labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "Graph_113": {
                "variable": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_152": {
                "main": {
                    "value": "main",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "accuracy_95": {
                "labels": {
                    "value": "tf.argmax(logits, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "predictions": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.squeeze(labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "recall_at_k_96": {
                "labels": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.squeeze(labels)",
                            "Call"
                        ]
                    ]
                },
                "predictions": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "k": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "argmax_95": {
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "archive/classification_marcel/tf-slim/nets/mobilenet_v1_test.py": {
        "tensorflow": {
            "placeholder_463": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, height, width, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "argmax_483": {
                "variable": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "argmax_501": {
                "variable": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "main_534": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_422": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_428": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, None, None, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reset_default_graph_440": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_446": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, None, None, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "global_variables_initializer_435": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_435": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_454": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_454": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_516": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_516": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_101": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_471": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_486": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_504": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "archive/classification_marcel/tf-slim/nets/mobilenet_v1_train.py": {
        "tensorflow": {
            "batch_105": {
                "variable": {
                    "value": "(images, labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[image, label]",
                    "type": "List",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "FLAGS.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_threads": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "capacity": {
                    "value": "5 * FLAGS.batch_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Graph_122": {
                "variable": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_total_loss_141": {
                "variable": {
                    "value": "total_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "total_loss",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exponential_decay_147": {
                "variable": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "get_learning_rate()",
                    "type": "Call",
                    "possible_values": []
                },
                "global_step": {
                    "value": "tf.train.get_or_create_global_step()",
                    "type": "Call",
                    "possible_values": []
                },
                "decay_steps": {
                    "value": "decay_steps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(imagenet_size / FLAGS.batch_size * num_epochs_per_decay)",
                            "Call"
                        ]
                    ]
                },
                "decay_rate": {
                    "value": "_LEARNING_RATE_DECAY_FACTOR",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.94",
                            "Constant"
                        ]
                    ]
                },
                "staircase": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_153": {
                "variable": {
                    "value": "opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.train.exponential_decay(get_learning_rate(), tf.train.get_or_create_global_step(), decay_steps, _LEARNING_RATE_DECAY_FACTOR, staircase=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "assign_168": {
                "variable": {
                    "value": "global_step_reset",
                    "type": "Variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "tf.train.get_or_create_global_step()",
                    "type": "Call",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "run_212": {
                "main": {
                    "value": "main",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "device_123": {
                "device_name": {
                    "value": "tf.train.replica_device_setter(FLAGS.ps_tasks)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_133": {
                "onehot_labels": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "slim.one_hot_encoding(labels, FLAGS.num_classes)",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "replica_device_setter_124": {
                "ps_tasks": {
                    "value": "FLAGS.ps_tasks",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_or_create_global_step_149": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_or_create_global_step_168": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_global_step_204": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "archive/classification_marcel/tf-slim/nets/nasnet/nasnet.py": {
        "tensorflow": {
            "identity_231": {
                "variable": {
                    "value": "aux_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "Call",
                    "possible_values": [
                        [
                            "slim.conv2d(inputs, num_stem_filters, [3, 3], stride=2, scope='conv0', padding='VALID')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='conv0_bn')",
                            "Call"
                        ],
                        [
                            "stem_cell(net, scope='cell_stem_{}'.format(cell_num), filter_scaling=filter_scaling, stride=2, prev_layer=cell_outputs[-2], cell_num=cell_num, current_step=current_step)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(inputs, num_stem_filters, 3, scope='l1_stem_3x3')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='l1_stem_bn')",
                            "Call"
                        ],
                        [
                            "activation_fn(net)",
                            "Call"
                        ],
                        [
                            "nasnet_utils.global_avg_pool(net)",
                            "Call"
                        ],
                        [
                            "reduction_cell(net, scope='reduction_cell_{}'.format(reduction_indices.index(cell_num)), filter_scaling=filter_scaling, stride=2, prev_layer=cell_outputs[-2], cell_num=true_cell_num, current_step=current_step)",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, hparams.dense_dropout_keep_prob, scope='dropout')",
                            "Call"
                        ],
                        [
                            "normal_cell(net, scope='cell_{}'.format(cell_num), filter_scaling=filter_scaling, stride=stride, prev_layer=prev_layer, cell_num=true_cell_num, current_step=current_step)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_305": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "images",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.transpose(images, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(images, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(images, [0, 3, 1, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_357": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "images",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.transpose(images, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(images, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(images, [0, 3, 1, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_412": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "images",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.transpose(images, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(images, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(images, [0, 3, 1, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_544": {
                "variable": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "slim.fully_connected(net, num_classes)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "predictions",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_230": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "flatten_247": {
                "variable": {
                    "value": "aux_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "aux_logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.identity(net)",
                            "Call"
                        ],
                        [
                            "slim.avg_pool2d(aux_logits, [5, 5], stride=3, padding='VALID')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(aux_logits, 128, [1, 1], scope='proj')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(aux_logits, scope='aux_bn0')",
                            "Call"
                        ],
                        [
                            "activation_fn(aux_logits)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(aux_logits, 768, shape, padding='VALID')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(aux_logits, scope='aux_bn1')",
                            "Call"
                        ],
                        [
                            "activation_fn(aux_logits)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(aux_logits)",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(aux_logits, num_classes)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_gpu_available_300": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "info_301": {
                "msg": {
                    "value": "A GPU is available on the machine, consider using NCHW data format for increased speed on GPU.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "is_gpu_available_352": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "info_353": {
                "msg": {
                    "value": "A GPU is available on the machine, consider using NCHW data format for increased speed on GPU.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "is_gpu_available_407": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "info_408": {
                "msg": {
                    "value": "A GPU is available on the machine, consider using NCHW data format for increased speed on GPU.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_533": {
                "name_or_scope": {
                    "value": "final_layer",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_232": {
                "name_or_scope": {
                    "value": "aux_logits",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "archive/classification_marcel/tf-slim/nets/nasnet/nasnet_test.py": {
        "tensorflow": {
            "create_global_step_379": {
                "variable": {
                    "value": "global_step",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "main_410": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "create_global_step_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "create_global_step_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "create_global_step_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "create_global_step_85": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "create_global_step_98": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "create_global_step_111": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "create_global_step_124": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "create_global_step_181": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "create_global_step_232": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "create_global_step_289": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_collection_297": {
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "on_cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_collection_299": {
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "on_gpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_307": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, height, width, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "argmax_327": {
                "variable": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "create_global_step_337": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "create_global_step_351": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "create_global_step_365": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "info_155": {
                "msg": {
                    "value": "'Endpoint name: {}'.format(endpoint_name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reset_default_graph_166": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "create_global_step_168": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "info_206": {
                "msg": {
                    "value": "'Endpoint name: {}'.format(endpoint_name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reset_default_graph_217": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "create_global_step_219": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "info_263": {
                "msg": {
                    "value": "'Endpoint name: {}'.format(endpoint_name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reset_default_graph_274": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "create_global_step_276": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_291": {
                "name_or_scope": {
                    "value": "on_cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_291": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_294": {
                "name_or_scope": {
                    "value": "on_gpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_294": {
                "device_name": {
                    "value": "/gpu:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reset_default_graph_398": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_313": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_328": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_graph_405": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "archive/classification_marcel/tf-slim/nets/nasnet/nasnet_utils.py": {
        "tensorflow": {
            "avg_pool_103": {
                "variable": {
                    "value": "path1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "Call",
                    "possible_values": [
                        [
                            "slim.conv2d(net, output_filters, 1, scope='path_conv')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='path_bn')",
                            "Call"
                        ],
                        [
                            "net * keep_prob_inv * binary_tensor",
                            "BinOp"
                        ],
                        [
                            "activation_fn(net)",
                            "Call"
                        ],
                        [
                            "slim.separable_conv2d(net, filter_size, kernel_size, depth_multiplier=1, scope='separable_{0}x{0}_{1}'.format(kernel_size, layer_num + 1), stride=stride)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_sep_{0}x{0}_{1}'.format(kernel_size, layer_num + 1))",
                            "Call"
                        ],
                        [
                            "activation_fn(net)",
                            "Call"
                        ],
                        [
                            "slim.separable_conv2d(net, filter_size, kernel_size, depth_multiplier=1, scope='separable_{0}x{0}_{1}'.format(kernel_size, num_layers), stride=stride)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_sep_{0}x{0}_{1}'.format(kernel_size, num_layers))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(net)",
                            "Call"
                        ],
                        [
                            "slim.avg_pool2d(net, pooling_shape, stride=stride, padding=padding)",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, pooling_shape, stride=stride, padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(net) if self._use_bounded_activation else tf.nn.relu(net)",
                            "IfExp"
                        ],
                        [
                            "slim.conv2d(net, num_filters, 1, scope='1x1')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='beginning_bn')",
                            "Call"
                        ],
                        [
                            "[net]",
                            "List"
                        ],
                        [
                            "self._cell_base(net, prev_layer)",
                            "Call"
                        ],
                        [
                            "self._combine_unused_states(net)",
                            "Call"
                        ],
                        [
                            "_stacked_separable_conv(net, stride, operation, filter_size, self._use_bounded_activation)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(net, -CLIP_BY_VALUE_CAP, CLIP_BY_VALUE_CAP)",
                            "Call"
                        ],
                        [
                            "self._apply_drop_path(net, current_step=current_step)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(net)",
                            "Call"
                        ],
                        [
                            "_pooling(net, stride, operation, self._use_bounded_activation)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, filter_size, 1, stride=1, scope='1x1')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, filter_size, 1, stride=stride, scope='1x1')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_1')",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(net, -CLIP_BY_VALUE_CAP, CLIP_BY_VALUE_CAP)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(net, -CLIP_BY_VALUE_CAP, CLIP_BY_VALUE_CAP)",
                            "Call"
                        ],
                        [
                            "tf.concat(values=states_to_combine, axis=concat_axis)",
                            "Call"
                        ],
                        [
                            "drop_path(net, drop_path_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "stride_spec",
                    "type": "List",
                    "possible_values": [
                        [
                            "[1, stride, stride, 1]",
                            "List"
                        ],
                        [
                            "[1, 1, stride, stride]",
                            "List"
                        ]
                    ]
                },
                "padding": {
                    "value": "VALID",
                    "type": "Constant",
                    "possible_values": []
                },
                "data_format": {
                    "value": "data_format",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "INVALID",
                            "MethodArgument"
                        ],
                        [
                            "INVALID",
                            "MethodArgument"
                        ],
                        [
                            "INVALID",
                            "MethodArgument"
                        ],
                        [
                            "INVALID",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "avg_pool_119": {
                "variable": {
                    "value": "path2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "path2",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "tf.pad(net, pad_arr)[:, 1:, 1:, :]",
                            "Subscript"
                        ],
                        [
                            "tf.pad(net, pad_arr)[:, :, 1:, 1:]",
                            "Subscript"
                        ],
                        [
                            "tf.nn.avg_pool(path2, [1, 1, 1, 1], stride_spec, 'VALID', data_format=data_format)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(path2, final_filter_size, 1, scope='path2_conv')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "stride_spec",
                    "type": "List",
                    "possible_values": [
                        [
                            "[1, stride, stride, 1]",
                            "List"
                        ],
                        [
                            "[1, 1, stride, stride]",
                            "List"
                        ]
                    ]
                },
                "padding": {
                    "value": "VALID",
                    "type": "Constant",
                    "possible_values": []
                },
                "data_format": {
                    "value": "data_format",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "INVALID",
                            "MethodArgument"
                        ],
                        [
                            "INVALID",
                            "MethodArgument"
                        ],
                        [
                            "INVALID",
                            "MethodArgument"
                        ],
                        [
                            "INVALID",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "concat_127": {
                "variable": {
                    "value": "final_path",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[path1, path2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "concat_axis",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "get_channel_index()",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_140": {
                "variable": {
                    "value": "binary_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.floor(random_tensor)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "net.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_141": {
                "variable": {
                    "value": "keep_prob_inv",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "1.0 / keep_prob",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "net.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu6_236": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "net",
                    "type": "Call",
                    "possible_values": [
                        [
                            "slim.conv2d(net, output_filters, 1, scope='path_conv')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='path_bn')",
                            "Call"
                        ],
                        [
                            "net * keep_prob_inv * binary_tensor",
                            "BinOp"
                        ],
                        [
                            "activation_fn(net)",
                            "Call"
                        ],
                        [
                            "slim.separable_conv2d(net, filter_size, kernel_size, depth_multiplier=1, scope='separable_{0}x{0}_{1}'.format(kernel_size, layer_num + 1), stride=stride)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_sep_{0}x{0}_{1}'.format(kernel_size, layer_num + 1))",
                            "Call"
                        ],
                        [
                            "activation_fn(net)",
                            "Call"
                        ],
                        [
                            "slim.separable_conv2d(net, filter_size, kernel_size, depth_multiplier=1, scope='separable_{0}x{0}_{1}'.format(kernel_size, num_layers), stride=stride)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_sep_{0}x{0}_{1}'.format(kernel_size, num_layers))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(net)",
                            "Call"
                        ],
                        [
                            "slim.avg_pool2d(net, pooling_shape, stride=stride, padding=padding)",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, pooling_shape, stride=stride, padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(net) if self._use_bounded_activation else tf.nn.relu(net)",
                            "IfExp"
                        ],
                        [
                            "slim.conv2d(net, num_filters, 1, scope='1x1')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='beginning_bn')",
                            "Call"
                        ],
                        [
                            "[net]",
                            "List"
                        ],
                        [
                            "self._cell_base(net, prev_layer)",
                            "Call"
                        ],
                        [
                            "self._combine_unused_states(net)",
                            "Call"
                        ],
                        [
                            "_stacked_separable_conv(net, stride, operation, filter_size, self._use_bounded_activation)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(net, -CLIP_BY_VALUE_CAP, CLIP_BY_VALUE_CAP)",
                            "Call"
                        ],
                        [
                            "self._apply_drop_path(net, current_step=current_step)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(net)",
                            "Call"
                        ],
                        [
                            "_pooling(net, stride, operation, self._use_bounded_activation)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, filter_size, 1, stride=1, scope='1x1')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, filter_size, 1, stride=stride, scope='1x1')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_1')",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(net, -CLIP_BY_VALUE_CAP, CLIP_BY_VALUE_CAP)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(net, -CLIP_BY_VALUE_CAP, CLIP_BY_VALUE_CAP)",
                            "Call"
                        ],
                        [
                            "tf.concat(values=states_to_combine, axis=concat_axis)",
                            "Call"
                        ],
                        [
                            "drop_path(net, drop_path_keep_prob)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_422": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "states_to_combine",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[h for (h, is_used) in zip(net, used_hiddenstates) if not is_used]",
                            "ListComp"
                        ]
                    ]
                },
                "axis": {
                    "value": "concat_axis",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "get_channel_index()",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_84": {
                "input_tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_86": {
                "input_tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_112": {
                "tensor": {
                    "value": "net",
                    "type": "Call",
                    "possible_values": [
                        [
                            "slim.conv2d(net, output_filters, 1, scope='path_conv')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='path_bn')",
                            "Call"
                        ],
                        [
                            "net * keep_prob_inv * binary_tensor",
                            "BinOp"
                        ],
                        [
                            "activation_fn(net)",
                            "Call"
                        ],
                        [
                            "slim.separable_conv2d(net, filter_size, kernel_size, depth_multiplier=1, scope='separable_{0}x{0}_{1}'.format(kernel_size, layer_num + 1), stride=stride)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_sep_{0}x{0}_{1}'.format(kernel_size, layer_num + 1))",
                            "Call"
                        ],
                        [
                            "activation_fn(net)",
                            "Call"
                        ],
                        [
                            "slim.separable_conv2d(net, filter_size, kernel_size, depth_multiplier=1, scope='separable_{0}x{0}_{1}'.format(kernel_size, num_layers), stride=stride)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_sep_{0}x{0}_{1}'.format(kernel_size, num_layers))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(net)",
                            "Call"
                        ],
                        [
                            "slim.avg_pool2d(net, pooling_shape, stride=stride, padding=padding)",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, pooling_shape, stride=stride, padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(net) if self._use_bounded_activation else tf.nn.relu(net)",
                            "IfExp"
                        ],
                        [
                            "slim.conv2d(net, num_filters, 1, scope='1x1')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='beginning_bn')",
                            "Call"
                        ],
                        [
                            "[net]",
                            "List"
                        ],
                        [
                            "self._cell_base(net, prev_layer)",
                            "Call"
                        ],
                        [
                            "self._combine_unused_states(net)",
                            "Call"
                        ],
                        [
                            "_stacked_separable_conv(net, stride, operation, filter_size, self._use_bounded_activation)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(net, -CLIP_BY_VALUE_CAP, CLIP_BY_VALUE_CAP)",
                            "Call"
                        ],
                        [
                            "self._apply_drop_path(net, current_step=current_step)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(net)",
                            "Call"
                        ],
                        [
                            "_pooling(net, stride, operation, self._use_bounded_activation)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, filter_size, 1, stride=1, scope='1x1')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, filter_size, 1, stride=stride, scope='1x1')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_1')",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(net, -CLIP_BY_VALUE_CAP, CLIP_BY_VALUE_CAP)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(net, -CLIP_BY_VALUE_CAP, CLIP_BY_VALUE_CAP)",
                            "Call"
                        ],
                        [
                            "tf.concat(values=states_to_combine, axis=concat_axis)",
                            "Call"
                        ],
                        [
                            "drop_path(net, drop_path_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "pad_arr",
                    "type": "List",
                    "possible_values": [
                        [
                            "[[0, 0], [0, 1], [0, 1], [0, 0]]",
                            "List"
                        ],
                        [
                            "[[0, 0], [0, 0], [0, 1], [0, 1]]",
                            "List"
                        ]
                    ]
                }
            },
            "pad_116": {
                "tensor": {
                    "value": "net",
                    "type": "Call",
                    "possible_values": [
                        [
                            "slim.conv2d(net, output_filters, 1, scope='path_conv')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='path_bn')",
                            "Call"
                        ],
                        [
                            "net * keep_prob_inv * binary_tensor",
                            "BinOp"
                        ],
                        [
                            "activation_fn(net)",
                            "Call"
                        ],
                        [
                            "slim.separable_conv2d(net, filter_size, kernel_size, depth_multiplier=1, scope='separable_{0}x{0}_{1}'.format(kernel_size, layer_num + 1), stride=stride)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_sep_{0}x{0}_{1}'.format(kernel_size, layer_num + 1))",
                            "Call"
                        ],
                        [
                            "activation_fn(net)",
                            "Call"
                        ],
                        [
                            "slim.separable_conv2d(net, filter_size, kernel_size, depth_multiplier=1, scope='separable_{0}x{0}_{1}'.format(kernel_size, num_layers), stride=stride)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_sep_{0}x{0}_{1}'.format(kernel_size, num_layers))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(net)",
                            "Call"
                        ],
                        [
                            "slim.avg_pool2d(net, pooling_shape, stride=stride, padding=padding)",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, pooling_shape, stride=stride, padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(net) if self._use_bounded_activation else tf.nn.relu(net)",
                            "IfExp"
                        ],
                        [
                            "slim.conv2d(net, num_filters, 1, scope='1x1')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='beginning_bn')",
                            "Call"
                        ],
                        [
                            "[net]",
                            "List"
                        ],
                        [
                            "self._cell_base(net, prev_layer)",
                            "Call"
                        ],
                        [
                            "self._combine_unused_states(net)",
                            "Call"
                        ],
                        [
                            "_stacked_separable_conv(net, stride, operation, filter_size, self._use_bounded_activation)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(net, -CLIP_BY_VALUE_CAP, CLIP_BY_VALUE_CAP)",
                            "Call"
                        ],
                        [
                            "self._apply_drop_path(net, current_step=current_step)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(net)",
                            "Call"
                        ],
                        [
                            "_pooling(net, stride, operation, self._use_bounded_activation)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, filter_size, 1, stride=1, scope='1x1')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, filter_size, 1, stride=stride, scope='1x1')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_1')",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(net, -CLIP_BY_VALUE_CAP, CLIP_BY_VALUE_CAP)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(net, -CLIP_BY_VALUE_CAP, CLIP_BY_VALUE_CAP)",
                            "Call"
                        ],
                        [
                            "tf.concat(values=states_to_combine, axis=concat_axis)",
                            "Call"
                        ],
                        [
                            "drop_path(net, drop_path_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "pad_arr",
                    "type": "List",
                    "possible_values": [
                        [
                            "[[0, 0], [0, 1], [0, 1], [0, 0]]",
                            "List"
                        ],
                        [
                            "[[0, 0], [0, 0], [0, 1], [0, 1]]",
                            "List"
                        ]
                    ]
                }
            },
            "shape_136": {
                "input": {
                    "value": "net",
                    "type": "Call",
                    "possible_values": [
                        [
                            "slim.conv2d(net, output_filters, 1, scope='path_conv')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='path_bn')",
                            "Call"
                        ],
                        [
                            "net * keep_prob_inv * binary_tensor",
                            "BinOp"
                        ],
                        [
                            "activation_fn(net)",
                            "Call"
                        ],
                        [
                            "slim.separable_conv2d(net, filter_size, kernel_size, depth_multiplier=1, scope='separable_{0}x{0}_{1}'.format(kernel_size, layer_num + 1), stride=stride)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_sep_{0}x{0}_{1}'.format(kernel_size, layer_num + 1))",
                            "Call"
                        ],
                        [
                            "activation_fn(net)",
                            "Call"
                        ],
                        [
                            "slim.separable_conv2d(net, filter_size, kernel_size, depth_multiplier=1, scope='separable_{0}x{0}_{1}'.format(kernel_size, num_layers), stride=stride)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_sep_{0}x{0}_{1}'.format(kernel_size, num_layers))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(net)",
                            "Call"
                        ],
                        [
                            "slim.avg_pool2d(net, pooling_shape, stride=stride, padding=padding)",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, pooling_shape, stride=stride, padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(net) if self._use_bounded_activation else tf.nn.relu(net)",
                            "IfExp"
                        ],
                        [
                            "slim.conv2d(net, num_filters, 1, scope='1x1')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='beginning_bn')",
                            "Call"
                        ],
                        [
                            "[net]",
                            "List"
                        ],
                        [
                            "self._cell_base(net, prev_layer)",
                            "Call"
                        ],
                        [
                            "self._combine_unused_states(net)",
                            "Call"
                        ],
                        [
                            "_stacked_separable_conv(net, stride, operation, filter_size, self._use_bounded_activation)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(net, -CLIP_BY_VALUE_CAP, CLIP_BY_VALUE_CAP)",
                            "Call"
                        ],
                        [
                            "self._apply_drop_path(net, current_step=current_step)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(net)",
                            "Call"
                        ],
                        [
                            "_pooling(net, stride, operation, self._use_bounded_activation)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, filter_size, 1, stride=1, scope='1x1')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, filter_size, 1, stride=stride, scope='1x1')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_1')",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(net, -CLIP_BY_VALUE_CAP, CLIP_BY_VALUE_CAP)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(net, -CLIP_BY_VALUE_CAP, CLIP_BY_VALUE_CAP)",
                            "Call"
                        ],
                        [
                            "tf.concat(values=states_to_combine, axis=concat_axis)",
                            "Call"
                        ],
                        [
                            "drop_path(net, drop_path_keep_prob)",
                            "Call"
                        ]
                    ]
                }
            },
            "floor_140": {
                "x": {
                    "value": "random_tensor",
                    "type": "Name",
                    "possible_values": [
                        [
                            "keep_prob",
                            "Name"
                        ],
                        [
                            "random_tensor + tf.random_uniform(noise_shape, dtype=tf.float32)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "relu6_302": {
                "features": {
                    "value": "net",
                    "type": "Call",
                    "possible_values": [
                        [
                            "slim.conv2d(net, output_filters, 1, scope='path_conv')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='path_bn')",
                            "Call"
                        ],
                        [
                            "net * keep_prob_inv * binary_tensor",
                            "BinOp"
                        ],
                        [
                            "activation_fn(net)",
                            "Call"
                        ],
                        [
                            "slim.separable_conv2d(net, filter_size, kernel_size, depth_multiplier=1, scope='separable_{0}x{0}_{1}'.format(kernel_size, layer_num + 1), stride=stride)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_sep_{0}x{0}_{1}'.format(kernel_size, layer_num + 1))",
                            "Call"
                        ],
                        [
                            "activation_fn(net)",
                            "Call"
                        ],
                        [
                            "slim.separable_conv2d(net, filter_size, kernel_size, depth_multiplier=1, scope='separable_{0}x{0}_{1}'.format(kernel_size, num_layers), stride=stride)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_sep_{0}x{0}_{1}'.format(kernel_size, num_layers))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(net)",
                            "Call"
                        ],
                        [
                            "slim.avg_pool2d(net, pooling_shape, stride=stride, padding=padding)",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, pooling_shape, stride=stride, padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(net) if self._use_bounded_activation else tf.nn.relu(net)",
                            "IfExp"
                        ],
                        [
                            "slim.conv2d(net, num_filters, 1, scope='1x1')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='beginning_bn')",
                            "Call"
                        ],
                        [
                            "[net]",
                            "List"
                        ],
                        [
                            "self._cell_base(net, prev_layer)",
                            "Call"
                        ],
                        [
                            "self._combine_unused_states(net)",
                            "Call"
                        ],
                        [
                            "_stacked_separable_conv(net, stride, operation, filter_size, self._use_bounded_activation)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(net, -CLIP_BY_VALUE_CAP, CLIP_BY_VALUE_CAP)",
                            "Call"
                        ],
                        [
                            "self._apply_drop_path(net, current_step=current_step)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(net)",
                            "Call"
                        ],
                        [
                            "_pooling(net, stride, operation, self._use_bounded_activation)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, filter_size, 1, stride=1, scope='1x1')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, filter_size, 1, stride=stride, scope='1x1')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_1')",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(net, -CLIP_BY_VALUE_CAP, CLIP_BY_VALUE_CAP)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(net, -CLIP_BY_VALUE_CAP, CLIP_BY_VALUE_CAP)",
                            "Call"
                        ],
                        [
                            "tf.concat(values=states_to_combine, axis=concat_axis)",
                            "Call"
                        ],
                        [
                            "drop_path(net, drop_path_keep_prob)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_302": {
                "features": {
                    "value": "net",
                    "type": "Call",
                    "possible_values": [
                        [
                            "slim.conv2d(net, output_filters, 1, scope='path_conv')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='path_bn')",
                            "Call"
                        ],
                        [
                            "net * keep_prob_inv * binary_tensor",
                            "BinOp"
                        ],
                        [
                            "activation_fn(net)",
                            "Call"
                        ],
                        [
                            "slim.separable_conv2d(net, filter_size, kernel_size, depth_multiplier=1, scope='separable_{0}x{0}_{1}'.format(kernel_size, layer_num + 1), stride=stride)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_sep_{0}x{0}_{1}'.format(kernel_size, layer_num + 1))",
                            "Call"
                        ],
                        [
                            "activation_fn(net)",
                            "Call"
                        ],
                        [
                            "slim.separable_conv2d(net, filter_size, kernel_size, depth_multiplier=1, scope='separable_{0}x{0}_{1}'.format(kernel_size, num_layers), stride=stride)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_sep_{0}x{0}_{1}'.format(kernel_size, num_layers))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(net)",
                            "Call"
                        ],
                        [
                            "slim.avg_pool2d(net, pooling_shape, stride=stride, padding=padding)",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, pooling_shape, stride=stride, padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(net) if self._use_bounded_activation else tf.nn.relu(net)",
                            "IfExp"
                        ],
                        [
                            "slim.conv2d(net, num_filters, 1, scope='1x1')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='beginning_bn')",
                            "Call"
                        ],
                        [
                            "[net]",
                            "List"
                        ],
                        [
                            "self._cell_base(net, prev_layer)",
                            "Call"
                        ],
                        [
                            "self._combine_unused_states(net)",
                            "Call"
                        ],
                        [
                            "_stacked_separable_conv(net, stride, operation, filter_size, self._use_bounded_activation)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(net, -CLIP_BY_VALUE_CAP, CLIP_BY_VALUE_CAP)",
                            "Call"
                        ],
                        [
                            "self._apply_drop_path(net, current_step=current_step)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(net)",
                            "Call"
                        ],
                        [
                            "_pooling(net, stride, operation, self._use_bounded_activation)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, filter_size, 1, stride=1, scope='1x1')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, filter_size, 1, stride=stride, scope='1x1')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_1')",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(net, -CLIP_BY_VALUE_CAP, CLIP_BY_VALUE_CAP)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(net, -CLIP_BY_VALUE_CAP, CLIP_BY_VALUE_CAP)",
                            "Call"
                        ],
                        [
                            "tf.concat(values=states_to_combine, axis=concat_axis)",
                            "Call"
                        ],
                        [
                            "drop_path(net, drop_path_keep_prob)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_318": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "clip_by_value_369": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "net",
                    "type": "Call",
                    "possible_values": [
                        [
                            "slim.conv2d(net, output_filters, 1, scope='path_conv')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='path_bn')",
                            "Call"
                        ],
                        [
                            "net * keep_prob_inv * binary_tensor",
                            "BinOp"
                        ],
                        [
                            "activation_fn(net)",
                            "Call"
                        ],
                        [
                            "slim.separable_conv2d(net, filter_size, kernel_size, depth_multiplier=1, scope='separable_{0}x{0}_{1}'.format(kernel_size, layer_num + 1), stride=stride)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_sep_{0}x{0}_{1}'.format(kernel_size, layer_num + 1))",
                            "Call"
                        ],
                        [
                            "activation_fn(net)",
                            "Call"
                        ],
                        [
                            "slim.separable_conv2d(net, filter_size, kernel_size, depth_multiplier=1, scope='separable_{0}x{0}_{1}'.format(kernel_size, num_layers), stride=stride)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_sep_{0}x{0}_{1}'.format(kernel_size, num_layers))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(net)",
                            "Call"
                        ],
                        [
                            "slim.avg_pool2d(net, pooling_shape, stride=stride, padding=padding)",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, pooling_shape, stride=stride, padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(net) if self._use_bounded_activation else tf.nn.relu(net)",
                            "IfExp"
                        ],
                        [
                            "slim.conv2d(net, num_filters, 1, scope='1x1')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='beginning_bn')",
                            "Call"
                        ],
                        [
                            "[net]",
                            "List"
                        ],
                        [
                            "self._cell_base(net, prev_layer)",
                            "Call"
                        ],
                        [
                            "self._combine_unused_states(net)",
                            "Call"
                        ],
                        [
                            "_stacked_separable_conv(net, stride, operation, filter_size, self._use_bounded_activation)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(net, -CLIP_BY_VALUE_CAP, CLIP_BY_VALUE_CAP)",
                            "Call"
                        ],
                        [
                            "self._apply_drop_path(net, current_step=current_step)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(net)",
                            "Call"
                        ],
                        [
                            "_pooling(net, stride, operation, self._use_bounded_activation)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, filter_size, 1, stride=1, scope='1x1')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, filter_size, 1, stride=stride, scope='1x1')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_1')",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(net, -CLIP_BY_VALUE_CAP, CLIP_BY_VALUE_CAP)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(net, -CLIP_BY_VALUE_CAP, CLIP_BY_VALUE_CAP)",
                            "Call"
                        ],
                        [
                            "tf.concat(values=states_to_combine, axis=concat_axis)",
                            "Call"
                        ],
                        [
                            "drop_path(net, drop_path_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-CLIP_BY_VALUE_CAP",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "CLIP_BY_VALUE_CAP",
                    "type": "Name",
                    "possible_values": [
                        [
                            "6",
                            "Constant"
                        ]
                    ]
                }
            },
            "cast_460": {
                "variable": {
                    "value": "current_step",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "current_step",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.train.get_or_create_global_step()",
                            "Call"
                        ],
                        [
                            "tf.cast(current_step, tf.float32)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "minimum_463": {
                "variable": {
                    "value": "current_ratio",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "y": {
                    "value": "current_ratio",
                    "type": "Name",
                    "possible_values": [
                        [
                            "current_step / drop_path_burn_in_steps",
                            "BinOp"
                        ],
                        [
                            "tf.minimum(1.0, current_ratio)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_352": {
                "name_or_scope": {
                    "value": "cell_output",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu6_372": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "net",
                    "type": "Call",
                    "possible_values": [
                        [
                            "slim.conv2d(net, output_filters, 1, scope='path_conv')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='path_bn')",
                            "Call"
                        ],
                        [
                            "net * keep_prob_inv * binary_tensor",
                            "BinOp"
                        ],
                        [
                            "activation_fn(net)",
                            "Call"
                        ],
                        [
                            "slim.separable_conv2d(net, filter_size, kernel_size, depth_multiplier=1, scope='separable_{0}x{0}_{1}'.format(kernel_size, layer_num + 1), stride=stride)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_sep_{0}x{0}_{1}'.format(kernel_size, layer_num + 1))",
                            "Call"
                        ],
                        [
                            "activation_fn(net)",
                            "Call"
                        ],
                        [
                            "slim.separable_conv2d(net, filter_size, kernel_size, depth_multiplier=1, scope='separable_{0}x{0}_{1}'.format(kernel_size, num_layers), stride=stride)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_sep_{0}x{0}_{1}'.format(kernel_size, num_layers))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(net)",
                            "Call"
                        ],
                        [
                            "slim.avg_pool2d(net, pooling_shape, stride=stride, padding=padding)",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, pooling_shape, stride=stride, padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(net) if self._use_bounded_activation else tf.nn.relu(net)",
                            "IfExp"
                        ],
                        [
                            "slim.conv2d(net, num_filters, 1, scope='1x1')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='beginning_bn')",
                            "Call"
                        ],
                        [
                            "[net]",
                            "List"
                        ],
                        [
                            "self._cell_base(net, prev_layer)",
                            "Call"
                        ],
                        [
                            "self._combine_unused_states(net)",
                            "Call"
                        ],
                        [
                            "_stacked_separable_conv(net, stride, operation, filter_size, self._use_bounded_activation)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(net, -CLIP_BY_VALUE_CAP, CLIP_BY_VALUE_CAP)",
                            "Call"
                        ],
                        [
                            "self._apply_drop_path(net, current_step=current_step)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(net)",
                            "Call"
                        ],
                        [
                            "_pooling(net, stride, operation, self._use_bounded_activation)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, filter_size, 1, stride=1, scope='1x1')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, filter_size, 1, stride=stride, scope='1x1')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_1')",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(net, -CLIP_BY_VALUE_CAP, CLIP_BY_VALUE_CAP)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(net, -CLIP_BY_VALUE_CAP, CLIP_BY_VALUE_CAP)",
                            "Call"
                        ],
                        [
                            "tf.concat(values=states_to_combine, axis=concat_axis)",
                            "Call"
                        ],
                        [
                            "drop_path(net, drop_path_keep_prob)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_or_create_global_step_459": {
                "variable": {
                    "value": "current_step",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_321": {
                "name_or_scope": {
                    "value": "'comb_iter_{}'.format(iteration)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_376": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "net",
                    "type": "Call",
                    "possible_values": [
                        [
                            "slim.conv2d(net, output_filters, 1, scope='path_conv')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='path_bn')",
                            "Call"
                        ],
                        [
                            "net * keep_prob_inv * binary_tensor",
                            "BinOp"
                        ],
                        [
                            "activation_fn(net)",
                            "Call"
                        ],
                        [
                            "slim.separable_conv2d(net, filter_size, kernel_size, depth_multiplier=1, scope='separable_{0}x{0}_{1}'.format(kernel_size, layer_num + 1), stride=stride)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_sep_{0}x{0}_{1}'.format(kernel_size, layer_num + 1))",
                            "Call"
                        ],
                        [
                            "activation_fn(net)",
                            "Call"
                        ],
                        [
                            "slim.separable_conv2d(net, filter_size, kernel_size, depth_multiplier=1, scope='separable_{0}x{0}_{1}'.format(kernel_size, num_layers), stride=stride)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_sep_{0}x{0}_{1}'.format(kernel_size, num_layers))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(net)",
                            "Call"
                        ],
                        [
                            "slim.avg_pool2d(net, pooling_shape, stride=stride, padding=padding)",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, pooling_shape, stride=stride, padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(net) if self._use_bounded_activation else tf.nn.relu(net)",
                            "IfExp"
                        ],
                        [
                            "slim.conv2d(net, num_filters, 1, scope='1x1')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='beginning_bn')",
                            "Call"
                        ],
                        [
                            "[net]",
                            "List"
                        ],
                        [
                            "self._cell_base(net, prev_layer)",
                            "Call"
                        ],
                        [
                            "self._combine_unused_states(net)",
                            "Call"
                        ],
                        [
                            "_stacked_separable_conv(net, stride, operation, filter_size, self._use_bounded_activation)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(net, -CLIP_BY_VALUE_CAP, CLIP_BY_VALUE_CAP)",
                            "Call"
                        ],
                        [
                            "self._apply_drop_path(net, current_step=current_step)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(net)",
                            "Call"
                        ],
                        [
                            "_pooling(net, stride, operation, self._use_bounded_activation)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, filter_size, 1, stride=1, scope='1x1')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, filter_size, 1, stride=stride, scope='1x1')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_1')",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(net, -CLIP_BY_VALUE_CAP, CLIP_BY_VALUE_CAP)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(net, -CLIP_BY_VALUE_CAP, CLIP_BY_VALUE_CAP)",
                            "Call"
                        ],
                        [
                            "tf.concat(values=states_to_combine, axis=concat_axis)",
                            "Call"
                        ],
                        [
                            "drop_path(net, drop_path_keep_prob)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_380": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "net",
                    "type": "Call",
                    "possible_values": [
                        [
                            "slim.conv2d(net, output_filters, 1, scope='path_conv')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='path_bn')",
                            "Call"
                        ],
                        [
                            "net * keep_prob_inv * binary_tensor",
                            "BinOp"
                        ],
                        [
                            "activation_fn(net)",
                            "Call"
                        ],
                        [
                            "slim.separable_conv2d(net, filter_size, kernel_size, depth_multiplier=1, scope='separable_{0}x{0}_{1}'.format(kernel_size, layer_num + 1), stride=stride)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_sep_{0}x{0}_{1}'.format(kernel_size, layer_num + 1))",
                            "Call"
                        ],
                        [
                            "activation_fn(net)",
                            "Call"
                        ],
                        [
                            "slim.separable_conv2d(net, filter_size, kernel_size, depth_multiplier=1, scope='separable_{0}x{0}_{1}'.format(kernel_size, num_layers), stride=stride)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_sep_{0}x{0}_{1}'.format(kernel_size, num_layers))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(net)",
                            "Call"
                        ],
                        [
                            "slim.avg_pool2d(net, pooling_shape, stride=stride, padding=padding)",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, pooling_shape, stride=stride, padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(net) if self._use_bounded_activation else tf.nn.relu(net)",
                            "IfExp"
                        ],
                        [
                            "slim.conv2d(net, num_filters, 1, scope='1x1')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='beginning_bn')",
                            "Call"
                        ],
                        [
                            "[net]",
                            "List"
                        ],
                        [
                            "self._cell_base(net, prev_layer)",
                            "Call"
                        ],
                        [
                            "self._combine_unused_states(net)",
                            "Call"
                        ],
                        [
                            "_stacked_separable_conv(net, stride, operation, filter_size, self._use_bounded_activation)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(net, -CLIP_BY_VALUE_CAP, CLIP_BY_VALUE_CAP)",
                            "Call"
                        ],
                        [
                            "self._apply_drop_path(net, current_step=current_step)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(net)",
                            "Call"
                        ],
                        [
                            "_pooling(net, stride, operation, self._use_bounded_activation)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, filter_size, 1, stride=1, scope='1x1')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, filter_size, 1, stride=stride, scope='1x1')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_1')",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(net, -CLIP_BY_VALUE_CAP, CLIP_BY_VALUE_CAP)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(net, -CLIP_BY_VALUE_CAP, CLIP_BY_VALUE_CAP)",
                            "Call"
                        ],
                        [
                            "tf.concat(values=states_to_combine, axis=concat_axis)",
                            "Call"
                        ],
                        [
                            "drop_path(net, drop_path_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-CLIP_BY_VALUE_CAP",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "CLIP_BY_VALUE_CAP",
                    "type": "Name",
                    "possible_values": [
                        [
                            "6",
                            "Constant"
                        ]
                    ]
                }
            },
            "clip_by_value_387": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "net",
                    "type": "Call",
                    "possible_values": [
                        [
                            "slim.conv2d(net, output_filters, 1, scope='path_conv')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='path_bn')",
                            "Call"
                        ],
                        [
                            "net * keep_prob_inv * binary_tensor",
                            "BinOp"
                        ],
                        [
                            "activation_fn(net)",
                            "Call"
                        ],
                        [
                            "slim.separable_conv2d(net, filter_size, kernel_size, depth_multiplier=1, scope='separable_{0}x{0}_{1}'.format(kernel_size, layer_num + 1), stride=stride)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_sep_{0}x{0}_{1}'.format(kernel_size, layer_num + 1))",
                            "Call"
                        ],
                        [
                            "activation_fn(net)",
                            "Call"
                        ],
                        [
                            "slim.separable_conv2d(net, filter_size, kernel_size, depth_multiplier=1, scope='separable_{0}x{0}_{1}'.format(kernel_size, num_layers), stride=stride)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_sep_{0}x{0}_{1}'.format(kernel_size, num_layers))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(net)",
                            "Call"
                        ],
                        [
                            "slim.avg_pool2d(net, pooling_shape, stride=stride, padding=padding)",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, pooling_shape, stride=stride, padding=padding)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(net) if self._use_bounded_activation else tf.nn.relu(net)",
                            "IfExp"
                        ],
                        [
                            "slim.conv2d(net, num_filters, 1, scope='1x1')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='beginning_bn')",
                            "Call"
                        ],
                        [
                            "[net]",
                            "List"
                        ],
                        [
                            "self._cell_base(net, prev_layer)",
                            "Call"
                        ],
                        [
                            "self._combine_unused_states(net)",
                            "Call"
                        ],
                        [
                            "_stacked_separable_conv(net, stride, operation, filter_size, self._use_bounded_activation)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(net, -CLIP_BY_VALUE_CAP, CLIP_BY_VALUE_CAP)",
                            "Call"
                        ],
                        [
                            "self._apply_drop_path(net, current_step=current_step)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu6(net)",
                            "Call"
                        ],
                        [
                            "_pooling(net, stride, operation, self._use_bounded_activation)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, filter_size, 1, stride=1, scope='1x1')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, filter_size, 1, stride=stride, scope='1x1')",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, scope='bn_1')",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(net, -CLIP_BY_VALUE_CAP, CLIP_BY_VALUE_CAP)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(net, -CLIP_BY_VALUE_CAP, CLIP_BY_VALUE_CAP)",
                            "Call"
                        ],
                        [
                            "tf.concat(values=states_to_combine, axis=concat_axis)",
                            "Call"
                        ],
                        [
                            "drop_path(net, drop_path_keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-CLIP_BY_VALUE_CAP",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "CLIP_BY_VALUE_CAP",
                    "type": "Name",
                    "possible_values": [
                        [
                            "6",
                            "Constant"
                        ]
                    ]
                }
            },
            "variable_scope_413": {
                "name_or_scope": {
                    "value": "'reduction_{}'.format(idx)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_469": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "scalar_470": {
                "name": {
                    "value": "drop_path_keep_prob",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "drop_path_keep_prob",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "self._drop_path_keep_prob",
                            "Attribute"
                        ],
                        [
                            "1 - layer_ratio * (1 - drop_path_keep_prob)",
                            "BinOp"
                        ],
                        [
                            "1 - current_ratio * (1 - drop_path_keep_prob)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "variable_scope_334": {
                "name_or_scope": {
                    "value": "left",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_338": {
                "name_or_scope": {
                    "value": "right",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_344": {
                "name_or_scope": {
                    "value": "combine",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu6_347": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "h",
                    "type": "Name",
                    "possible_values": [
                        [
                            "h1 + h2",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu6(h)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_453": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "scalar_454": {
                "name": {
                    "value": "layer_ratio",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "layer_ratio",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(self._cell_num + 1) / float(num_cells)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "device_465": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "scalar_466": {
                "name": {
                    "value": "current_ratio",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "current_ratio",
                    "type": "Name",
                    "possible_values": [
                        [
                            "current_step / drop_path_burn_in_steps",
                            "BinOp"
                        ],
                        [
                            "tf.minimum(1.0, current_ratio)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "archive/classification_marcel/tf-slim/nets/nasnet/nasnet_utils_test.py": {
        "tensorflow": {
            "placeholder_54": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(5, 10, 20, 10)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "main_62": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "archive/classification_marcel/tf-slim/nets/nasnet/pnasnet.py": {
        "tensorflow": {
            "softmax_158": {
                "variable": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "slim.fully_connected(net, num_classes)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "predictions",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_180": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "images",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.transpose(images, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(images, [0, 3, 1, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_228": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "images",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.transpose(images, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(images, [0, 3, 1, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_147": {
                "name_or_scope": {
                    "value": "final_layer",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "is_gpu_available_175": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "info_176": {
                "msg": {
                    "value": "A GPU is available on the machine, consider using NCHW data format for increased speed on GPU.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "is_gpu_available_223": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "info_224": {
                "msg": {
                    "value": "A GPU is available on the machine, consider using NCHW data format for increased speed on GPU.",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "archive/classification_marcel/tf-slim/nets/nasnet/pnasnet_test.py": {
        "tensorflow": {
            "main_256": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "create_global_step_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "create_global_step_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "create_global_step_66": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "create_global_step_76": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "create_global_step_88": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "create_global_step_101": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "create_global_step_114": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "create_global_step_151": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "create_global_step_216": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "create_global_step_230": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "info_140": {
                "msg": {
                    "value": "'Endpoint name: {}'.format(endpoint_name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "info_175": {
                "msg": {
                    "value": "'Endpoint name: {}'.format(endpoint_name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reset_default_graph_186": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "create_global_step_188": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_201": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "create_global_step_203": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_244": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_69": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_79": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_graph_251": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "archive/classification_marcel/tf-slim/nets/nets_factory.py": {
        "tensorflow": {}
    },
    "archive/classification_marcel/tf-slim/nets/nets_factory_test.py": {
        "tensorflow": {
            "main_81": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "archive/classification_marcel/tf-slim/nets/overfeat.py": {
        "tensorflow": {
            "truncated_normal_initializer_37": {
                "mean": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "stddev": {
                    "value": "stddev",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "variable_scope_90": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'overfeat'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "overfeat",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_initializer_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_mean_117": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "net",
                    "type": "Call",
                    "possible_values": [
                        [
                            "slim.conv2d(inputs, 64, [11, 11], 4, padding='VALID', scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 256, [5, 5], padding='VALID', scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 512, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 1024, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 1024, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 3072, [6, 6], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(net, [1, 2], keep_dims=True, name='global_pool')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, biases_initializer=tf.zeros_initializer(), scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "global_pool",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_128": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "Call",
                    "possible_values": [
                        [
                            "slim.conv2d(inputs, 64, [11, 11], 4, padding='VALID', scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 256, [5, 5], padding='VALID', scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 512, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 1024, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 1024, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 3072, [6, 6], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(net, [1, 2], keep_dims=True, name='global_pool')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, biases_initializer=tf.zeros_initializer(), scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "fc8/squeezed",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_108": {
                "value": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_initializer_125": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "archive/classification_marcel/tf-slim/nets/overfeat_test.py": {
        "tensorflow": {
            "main_178": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_141": {
                "variable": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_163": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "argmax_164": {
                "variable": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_scope_156": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_173": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "archive/classification_marcel/tf-slim/nets/pix2pix.py": {
        "tensorflow": {
            "shape_81": {
                "variable": {
                    "value": "net_shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.resize_nearest_neighbor(net, [kernel_size[0] * height, kernel_size[1] * width])",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_outputs, [4, 4], activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.conv2d_transpose(net, num_outputs, [4, 4], stride=kernel_size, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, block.num_filters, normalizer_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, block.num_filters)",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, block.num_filters, activation_fn=None, normalizer_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.concat([net, encoder_activations[-block_id - 1]], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "upsample_fn(net, block.num_filters, [2, 2])",
                            "Call"
                        ],
                        [
                            "layers.dropout(net, keep_prob=block.decoder_keep_prob)",
                            "Call"
                        ],
                        [
                            "layers.conv2d(padded(net, 'conv0'), num_filters[0], normalizer_fn=None, scope='conv0')",
                            "Call"
                        ],
                        [
                            "layers.conv2d(padded(net, 'conv%d' % i), num_filters[i], scope='conv%d' % i)",
                            "Call"
                        ],
                        [
                            "layers.conv2d(padded(net, 'conv%d' % (num_layers - 1)), num_filters[-1], stride=1, scope='conv%d' % (num_layers - 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "resize_nearest_neighbor_86": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "images": {
                    "value": "net",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.resize_nearest_neighbor(net, [kernel_size[0] * height, kernel_size[1] * width])",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_outputs, [4, 4], activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.conv2d_transpose(net, num_outputs, [4, 4], stride=kernel_size, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, block.num_filters, normalizer_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, block.num_filters)",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, block.num_filters, activation_fn=None, normalizer_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.concat([net, encoder_activations[-block_id - 1]], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "upsample_fn(net, block.num_filters, [2, 2])",
                            "Call"
                        ],
                        [
                            "layers.dropout(net, keep_prob=block.decoder_keep_prob)",
                            "Call"
                        ],
                        [
                            "layers.conv2d(padded(net, 'conv0'), num_filters[0], normalizer_fn=None, scope='conv0')",
                            "Call"
                        ],
                        [
                            "layers.conv2d(padded(net, 'conv%d' % i), num_filters[i], scope='conv%d' % i)",
                            "Call"
                        ],
                        [
                            "layers.conv2d(padded(net, 'conv%d' % (num_layers - 1)), num_filters[-1], stride=1, scope='conv%d' % (num_layers - 1))",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[kernel_size[0] * height, kernel_size[1] * width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_217": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "layers.conv2d(net, num_outputs, [4, 4], activation_fn=None, normalizer_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.reshape(logits, input_size)",
                            "Call"
                        ],
                        [
                            "layers.conv2d(padded(net, 'conv%d' % num_layers), 1, stride=1, activation_fn=None, normalizer_fn=None, scope='conv%d' % num_layers)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "input_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "net.get_shape().as_list()",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_220": {
                "variable": {
                    "value": "end_points[predictions]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "layers.conv2d(net, num_outputs, [4, 4], activation_fn=None, normalizer_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.reshape(logits, input_size)",
                            "Call"
                        ],
                        [
                            "layers.conv2d(padded(net, 'conv%d' % num_layers), 1, stride=1, activation_fn=None, normalizer_fn=None, scope='conv%d' % num_layers)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_294": {
                "variable": {
                    "value": "end_points[predictions]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "layers.conv2d(net, num_outputs, [4, 4], activation_fn=None, normalizer_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.reshape(logits, input_size)",
                            "Call"
                        ],
                        [
                            "layers.conv2d(padded(net, 'conv%d' % num_layers), 1, stride=1, activation_fn=None, normalizer_fn=None, scope='conv%d' % num_layers)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_167": {
                "name_or_scope": {
                    "value": "encoder",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_196": {
                "name_or_scope": {
                    "value": "decoder",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_212": {
                "name_or_scope": {
                    "value": "output",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_206": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "net",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.resize_nearest_neighbor(net, [kernel_size[0] * height, kernel_size[1] * width])",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_outputs, [4, 4], activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.conv2d_transpose(net, num_outputs, [4, 4], stride=kernel_size, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, block.num_filters, normalizer_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, block.num_filters)",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, block.num_filters, activation_fn=None, normalizer_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.concat([net, encoder_activations[-block_id - 1]], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "upsample_fn(net, block.num_filters, [2, 2])",
                            "Call"
                        ],
                        [
                            "layers.dropout(net, keep_prob=block.decoder_keep_prob)",
                            "Call"
                        ],
                        [
                            "layers.conv2d(padded(net, 'conv0'), num_filters[0], normalizer_fn=None, scope='conv0')",
                            "Call"
                        ],
                        [
                            "layers.conv2d(padded(net, 'conv%d' % i), num_filters[i], scope='conv%d' % i)",
                            "Call"
                        ],
                        [
                            "layers.conv2d(padded(net, 'conv%d' % (num_layers - 1)), num_filters[-1], stride=1, scope='conv%d' % (num_layers - 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_252": {
                "variable": {
                    "value": "spatial_pad",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0, 0], [padding, padding], [padding, padding], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "random_normal_initializer_59": {
                "mean": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.02",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_203": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[net, encoder_activations[-block_id - 1]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_251": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "pad_255": {
                "tensor": {
                    "value": "net",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.resize_nearest_neighbor(net, [kernel_size[0] * height, kernel_size[1] * width])",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, num_outputs, [4, 4], activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.conv2d_transpose(net, num_outputs, [4, 4], stride=kernel_size, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, block.num_filters, normalizer_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, block.num_filters)",
                            "Call"
                        ],
                        [
                            "layers.conv2d(net, block.num_filters, activation_fn=None, normalizer_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.concat([net, encoder_activations[-block_id - 1]], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(net)",
                            "Call"
                        ],
                        [
                            "upsample_fn(net, block.num_filters, [2, 2])",
                            "Call"
                        ],
                        [
                            "layers.dropout(net, keep_prob=block.decoder_keep_prob)",
                            "Call"
                        ],
                        [
                            "layers.conv2d(padded(net, 'conv0'), num_filters[0], normalizer_fn=None, scope='conv0')",
                            "Call"
                        ],
                        [
                            "layers.conv2d(padded(net, 'conv%d' % i), num_filters[i], scope='conv%d' % i)",
                            "Call"
                        ],
                        [
                            "layers.conv2d(padded(net, 'conv%d' % (num_layers - 1)), num_filters[-1], stride=1, scope='conv%d' % (num_layers - 1))",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "spatial_pad",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.constant([[0, 0], [padding, padding], [padding, padding], [0, 0]], dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "pad_mode",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'REFLECT'",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "archive/classification_marcel/tf-slim/nets/pix2pix_test.py": {
        "tensorflow": {
            "ones_37": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, height, width, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_54": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, height, width, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_71": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, height, width, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_107": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, input_size, input_size, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_126": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, input_size, input_size, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_139": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, input_size, input_size, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_149": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, input_size, input_size, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "main_156": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "archive/classification_marcel/tf-slim/nets/resnet_utils.py": {
        "tensorflow": {
            "pad_119": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.pad(inputs, [[0, 0], [pad_beg, pad_end], [pad_beg, pad_end], [0, 0]])",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [pad_beg, pad_end], [pad_beg, pad_end], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_182": {
                "name_or_scope": {
                    "value": "block.scope",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_name": {
                    "value": "block",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "[net]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_190": {
                "name_or_scope": {
                    "value": "'unit_%d' % (i + 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "values": {
                    "value": "[net]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "archive/classification_marcel/tf-slim/nets/resnet_v1.py": {
        "tensorflow": {
            "variable_scope_111": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'resnet_v1_50'",
                            "MethodArgument"
                        ],
                        [
                            "'resnet_v1_101'",
                            "MethodArgument"
                        ],
                        [
                            "'resnet_v1_152'",
                            "MethodArgument"
                        ],
                        [
                            "'resnet_v1_200'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "bottleneck_v1",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "clip_by_value_132": {
                "variable": {
                    "value": "residual",
                    "type": "Variable",
                    "possible_values": []
                },
                "t": {
                    "value": "residual",
                    "type": "Call",
                    "possible_values": [
                        [
                            "slim.conv2d(inputs, depth_bottleneck, [1, 1], stride=1, scope='conv1')",
                            "Call"
                        ],
                        [
                            "resnet_utils.conv2d_same(residual, depth_bottleneck, 3, stride, rate=rate, scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(residual, depth, [1, 1], stride=1, activation_fn=None, scope='conv3')",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(residual, -6.0, 6.0)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-6.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "6.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu6_133": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "shortcut + residual",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_135": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "shortcut + residual",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_221": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'resnet_v1_50'",
                            "MethodArgument"
                        ],
                        [
                            "'resnet_v1_101'",
                            "MethodArgument"
                        ],
                        [
                            "'resnet_v1_152'",
                            "MethodArgument"
                        ],
                        [
                            "'resnet_v1_200'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "resnet_v1",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reduce_mean_244": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "net",
                    "type": "Call",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "resnet_utils.stack_blocks_dense(net, blocks, output_stride, store_non_strided_activations)",
                            "Call"
                        ],
                        [
                            "resnet_utils.conv2d_same(net, 64, 7, stride=2, scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [3, 3], stride=2, scope='pool1')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(net, [1, 2], name='pool5', keep_dims=True)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='logits')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='SpatialSqueeze')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "pool5",
                    "type": "Constant",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_251": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "Call",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "resnet_utils.stack_blocks_dense(net, blocks, output_stride, store_non_strided_activations)",
                            "Call"
                        ],
                        [
                            "resnet_utils.conv2d_same(net, 64, 7, stride=2, scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [3, 3], stride=2, scope='pool1')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(net, [1, 2], name='pool5', keep_dims=True)",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='logits')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='SpatialSqueeze')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "SpatialSqueeze",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "archive/classification_marcel/tf-slim/nets/resnet_v1_test.py": {
        "tensorflow": {
            "reshape_59": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.to_float(tf.range(9))",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_61": {
                "variable": {
                    "value": "expected",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.constant([0, 2, 6, 8])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_66": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.to_float(tf.range(16))",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 4, 4, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_68": {
                "variable": {
                    "value": "expected",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.constant([0, 2, 8, 10])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_80": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "w",
                    "type": "Call",
                    "possible_values": [
                        [
                            "create_test_input(1, 3, 3, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [3, 3, 1, 1])",
                            "Call"
                        ],
                        [
                            "create_test_input(1, 3, 3, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [3, 3, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[3, 3, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_float_87": {
                "variable": {
                    "value": "y1_expected",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "[[14, 28, 43, 26], [28, 48, 66, 37], [43, 66, 84, 46], [26, 37, 46, 22]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_91": {
                "variable": {
                    "value": "y1_expected",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y1_expected",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.to_float([[14, 28, 43, 26], [28, 48, 66, 37], [43, 66, 84, 46], [26, 37, 46, 22]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(y1_expected, [1, n, n, 1])",
                            "Call"
                        ],
                        [
                            "tf.to_float([[14, 28, 43, 58, 34], [28, 48, 66, 84, 46], [43, 66, 84, 102, 55], [58, 84, 102, 120, 64], [34, 46, 55, 64, 30]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(y1_expected, [1, n, n, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, n, n, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_float_94": {
                "variable": {
                    "value": "y2_expected",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "[[14, 43], [43, 84]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_96": {
                "variable": {
                    "value": "y2_expected",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y2_expected",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.to_float([[14, 43], [43, 84]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(y2_expected, [1, n2, n2, 1])",
                            "Call"
                        ],
                        [
                            "tf.to_float([[14, 43, 34], [43, 84, 55], [34, 55, 30]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(y2_expected, [1, n2, n2, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, n2, n2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_float_102": {
                "variable": {
                    "value": "y4_expected",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "[[48, 37], [37, 22]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_104": {
                "variable": {
                    "value": "y4_expected",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y4_expected",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.to_float([[48, 37], [37, 22]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(y4_expected, [1, n2, n2, 1])",
                            "Call"
                        ],
                        [
                            "y2_expected",
                            "Name"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, n2, n2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_121": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "w",
                    "type": "Call",
                    "possible_values": [
                        [
                            "create_test_input(1, 3, 3, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [3, 3, 1, 1])",
                            "Call"
                        ],
                        [
                            "create_test_input(1, 3, 3, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [3, 3, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[3, 3, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_float_128": {
                "variable": {
                    "value": "y1_expected",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "[[14, 28, 43, 58, 34], [28, 48, 66, 84, 46], [43, 66, 84, 102, 55], [58, 84, 102, 120, 64], [34, 46, 55, 64, 30]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_133": {
                "variable": {
                    "value": "y1_expected",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y1_expected",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.to_float([[14, 28, 43, 26], [28, 48, 66, 37], [43, 66, 84, 46], [26, 37, 46, 22]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(y1_expected, [1, n, n, 1])",
                            "Call"
                        ],
                        [
                            "tf.to_float([[14, 28, 43, 58, 34], [28, 48, 66, 84, 46], [43, 66, 84, 102, 55], [58, 84, 102, 120, 64], [34, 46, 55, 64, 30]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(y1_expected, [1, n, n, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, n, n, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_float_136": {
                "variable": {
                    "value": "y2_expected",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "[[14, 43, 34], [43, 84, 55], [34, 55, 30]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_139": {
                "variable": {
                    "value": "y2_expected",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y2_expected",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.to_float([[14, 43], [43, 84]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(y2_expected, [1, n2, n2, 1])",
                            "Call"
                        ],
                        [
                            "tf.to_float([[14, 43, 34], [43, 84, 55], [34, 55, 30]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(y2_expected, [1, n2, n2, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, n2, n2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "main_555": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_45": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, height, width, channels)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "to_float_47": {
                "x": {
                    "value": "np.tile(np.reshape(np.reshape(np.arange(height), [height, 1]) + np.reshape(np.arange(width), [1, width]), [1, height, width, 1]), [batch_size, 1, 1, channels])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_82": {
                "name": {
                    "value": "Conv/weights",
                    "type": "Constant",
                    "possible_values": []
                },
                "initializer": {
                    "value": "w",
                    "type": "Call",
                    "possible_values": [
                        [
                            "create_test_input(1, 3, 3, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [3, 3, 1, 1])",
                            "Call"
                        ],
                        [
                            "create_test_input(1, 3, 3, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [3, 3, 1, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_83": {
                "name": {
                    "value": "Conv/biases",
                    "type": "Constant",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros([1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_scope_84": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_123": {
                "name": {
                    "value": "Conv/weights",
                    "type": "Constant",
                    "possible_values": []
                },
                "initializer": {
                    "value": "w",
                    "type": "Call",
                    "possible_values": [
                        [
                            "create_test_input(1, 3, 3, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [3, 3, 1, 1])",
                            "Call"
                        ],
                        [
                            "create_test_input(1, 3, 3, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [3, 3, 1, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_124": {
                "name": {
                    "value": "Conv/biases",
                    "type": "Constant",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros([1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_scope_125": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "to_float_59": {
                "x": {
                    "value": "tf.range(9)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_61": {
                "value": {
                    "value": "[0, 2, 6, 8]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_float_66": {
                "x": {
                    "value": "tf.range(16)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_68": {
                "value": {
                    "value": "[0, 2, 8, 10]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_156": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'resnet_v1_small'",
                            "MethodArgument"
                        ]
                    ]
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_83": {
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "global_variables_initializer_107": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_124": {
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "global_variables_initializer_148": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_193": {
                "name_or_scope": {
                    "value": "block.scope",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_name": {
                    "value": "block",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "[net]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "global_variables_initializer_515": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_530": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_549": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_477": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_195": {
                "name_or_scope": {
                    "value": "'unit_%d' % (i + 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "values": {
                    "value": "[net]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Graph_221": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_264": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_random_seed_479": {
                "seed": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_scope_491": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_random_seed_223": {
                "seed": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_scope_236": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_random_seed_266": {
                "seed": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_scope_278": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_495": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_239": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_288": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "archive/classification_marcel/tf-slim/nets/resnet_v2.py": {
        "tensorflow": {
            "variable_scope_86": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'resnet_v2_50'",
                            "MethodArgument"
                        ],
                        [
                            "'resnet_v2_101'",
                            "MethodArgument"
                        ],
                        [
                            "'resnet_v2_152'",
                            "MethodArgument"
                        ],
                        [
                            "'resnet_v2_200'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "bottleneck_v2",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_183": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'resnet_v2_50'",
                            "MethodArgument"
                        ],
                        [
                            "'resnet_v2_101'",
                            "MethodArgument"
                        ],
                        [
                            "'resnet_v2_152'",
                            "MethodArgument"
                        ],
                        [
                            "'resnet_v2_200'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "resnet_v2",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reduce_mean_213": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "net",
                    "type": "Call",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "resnet_utils.stack_blocks_dense(net, blocks, output_stride)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, activation_fn=tf.nn.relu, scope='postnorm')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(net, [1, 2], name='pool5', keep_dims=True)",
                            "Call"
                        ],
                        [
                            "resnet_utils.conv2d_same(net, 64, 7, stride=2, scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='logits')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [3, 3], stride=2, scope='pool1')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='SpatialSqueeze')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "pool5",
                    "type": "Constant",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_220": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "Call",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "resnet_utils.stack_blocks_dense(net, blocks, output_stride)",
                            "Call"
                        ],
                        [
                            "slim.batch_norm(net, activation_fn=tf.nn.relu, scope='postnorm')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(net, [1, 2], name='pool5', keep_dims=True)",
                            "Call"
                        ],
                        [
                            "resnet_utils.conv2d_same(net, 64, 7, stride=2, scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='logits')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [3, 3], stride=2, scope='pool1')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='SpatialSqueeze')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "SpatialSqueeze",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "archive/classification_marcel/tf-slim/nets/resnet_v2_test.py": {
        "tensorflow": {
            "reshape_59": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.to_float(tf.range(9))",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 3, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_61": {
                "variable": {
                    "value": "expected",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.constant([0, 2, 6, 8])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_66": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.to_float(tf.range(16))",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 4, 4, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_68": {
                "variable": {
                    "value": "expected",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.constant([0, 2, 8, 10])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_80": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "w",
                    "type": "Call",
                    "possible_values": [
                        [
                            "create_test_input(1, 3, 3, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [3, 3, 1, 1])",
                            "Call"
                        ],
                        [
                            "create_test_input(1, 3, 3, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [3, 3, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[3, 3, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_float_87": {
                "variable": {
                    "value": "y1_expected",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "[[14, 28, 43, 26], [28, 48, 66, 37], [43, 66, 84, 46], [26, 37, 46, 22]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_91": {
                "variable": {
                    "value": "y1_expected",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y1_expected",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.to_float([[14, 28, 43, 26], [28, 48, 66, 37], [43, 66, 84, 46], [26, 37, 46, 22]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(y1_expected, [1, n, n, 1])",
                            "Call"
                        ],
                        [
                            "tf.to_float([[14, 28, 43, 58, 34], [28, 48, 66, 84, 46], [43, 66, 84, 102, 55], [58, 84, 102, 120, 64], [34, 46, 55, 64, 30]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(y1_expected, [1, n, n, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, n, n, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_float_94": {
                "variable": {
                    "value": "y2_expected",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "[[14, 43], [43, 84]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_96": {
                "variable": {
                    "value": "y2_expected",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y2_expected",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.to_float([[14, 43], [43, 84]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(y2_expected, [1, n2, n2, 1])",
                            "Call"
                        ],
                        [
                            "tf.to_float([[14, 43, 34], [43, 84, 55], [34, 55, 30]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(y2_expected, [1, n2, n2, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, n2, n2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_float_102": {
                "variable": {
                    "value": "y4_expected",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "[[48, 37], [37, 22]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_104": {
                "variable": {
                    "value": "y4_expected",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y4_expected",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.to_float([[48, 37], [37, 22]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(y4_expected, [1, n2, n2, 1])",
                            "Call"
                        ],
                        [
                            "y2_expected",
                            "Name"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, n2, n2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_121": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "w",
                    "type": "Call",
                    "possible_values": [
                        [
                            "create_test_input(1, 3, 3, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [3, 3, 1, 1])",
                            "Call"
                        ],
                        [
                            "create_test_input(1, 3, 3, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [3, 3, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[3, 3, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_float_128": {
                "variable": {
                    "value": "y1_expected",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "[[14, 28, 43, 58, 34], [28, 48, 66, 84, 46], [43, 66, 84, 102, 55], [58, 84, 102, 120, 64], [34, 46, 55, 64, 30]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_133": {
                "variable": {
                    "value": "y1_expected",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y1_expected",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.to_float([[14, 28, 43, 26], [28, 48, 66, 37], [43, 66, 84, 46], [26, 37, 46, 22]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(y1_expected, [1, n, n, 1])",
                            "Call"
                        ],
                        [
                            "tf.to_float([[14, 28, 43, 58, 34], [28, 48, 66, 84, 46], [43, 66, 84, 102, 55], [58, 84, 102, 120, 64], [34, 46, 55, 64, 30]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(y1_expected, [1, n, n, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, n, n, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_float_136": {
                "variable": {
                    "value": "y2_expected",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "[[14, 43, 34], [43, 84, 55], [34, 55, 30]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_139": {
                "variable": {
                    "value": "y2_expected",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y2_expected",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.to_float([[14, 43], [43, 84]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(y2_expected, [1, n2, n2, 1])",
                            "Call"
                        ],
                        [
                            "tf.to_float([[14, 43, 34], [43, 84, 55], [34, 55, 30]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(y2_expected, [1, n2, n2, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, n2, n2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "main_475": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_45": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, height, width, channels)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "to_float_47": {
                "x": {
                    "value": "np.tile(np.reshape(np.reshape(np.arange(height), [height, 1]) + np.reshape(np.arange(width), [1, width]), [1, height, width, 1]), [batch_size, 1, 1, channels])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_82": {
                "name": {
                    "value": "Conv/weights",
                    "type": "Constant",
                    "possible_values": []
                },
                "initializer": {
                    "value": "w",
                    "type": "Call",
                    "possible_values": [
                        [
                            "create_test_input(1, 3, 3, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [3, 3, 1, 1])",
                            "Call"
                        ],
                        [
                            "create_test_input(1, 3, 3, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [3, 3, 1, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_83": {
                "name": {
                    "value": "Conv/biases",
                    "type": "Constant",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros([1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_scope_84": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_123": {
                "name": {
                    "value": "Conv/weights",
                    "type": "Constant",
                    "possible_values": []
                },
                "initializer": {
                    "value": "w",
                    "type": "Call",
                    "possible_values": [
                        [
                            "create_test_input(1, 3, 3, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [3, 3, 1, 1])",
                            "Call"
                        ],
                        [
                            "create_test_input(1, 3, 3, 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(w, [3, 3, 1, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_124": {
                "name": {
                    "value": "Conv/biases",
                    "type": "Constant",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros([1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_scope_125": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "to_float_59": {
                "x": {
                    "value": "tf.range(9)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_61": {
                "value": {
                    "value": "[0, 2, 6, 8]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_float_66": {
                "x": {
                    "value": "tf.range(16)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_68": {
                "value": {
                    "value": "[0, 2, 8, 10]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_156": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'resnet_v2_small'",
                            "MethodArgument"
                        ]
                    ]
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_83": {
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "global_variables_initializer_107": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_124": {
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "global_variables_initializer_148": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_193": {
                "name_or_scope": {
                    "value": "block.scope",
                    "type": "Attribute",
                    "possible_values": []
                },
                "default_name": {
                    "value": "block",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "[net]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "global_variables_initializer_434": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_450": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_469": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_394": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_195": {
                "name_or_scope": {
                    "value": "'unit_%d' % (i + 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "values": {
                    "value": "[net]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Graph_221": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_random_seed_396": {
                "seed": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_scope_409": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_random_seed_223": {
                "seed": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_scope_236": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_414": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_239": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "archive/classification_marcel/tf-slim/nets/s3dg.py": {
        "tensorflow": {
            "tile_132": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weights",
                    "type": "Call",
                    "possible_values": [
                        [
                            "layers.conv3d(spatiotemporal_average, num_channels, [1, 1, 1], activation_fn=None, normalizer_fn=None, biases_initializer=None, data_format=data_format, weights_initializer=trunc_normal(0.01), scope=scope + '/self_gating/transformer_W')",
                            "Call"
                        ],
                        [
                            "tf.tile(weights, tile_multiples)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(weights)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "tile_multiples",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[1, t, w, h]",
                            "List"
                        ]
                    ]
                }
            },
            "sigmoid_133": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "weights",
                    "type": "Call",
                    "possible_values": [
                        [
                            "layers.conv3d(spatiotemporal_average, num_channels, [1, 1, 1], activation_fn=None, normalizer_fn=None, biases_initializer=None, data_format=data_format, weights_initializer=trunc_normal(0.01), scope=scope + '/self_gating/transformer_W')",
                            "Call"
                        ],
                        [
                            "tf.tile(weights, tile_multiples)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(weights)",
                            "Call"
                        ]
                    ]
                }
            },
            "truncated_normal_initializer_31": {
                "mean": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "stddev": {
                    "value": "stddev",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "multiply_135": {
                "x": {
                    "value": "weights",
                    "type": "Call",
                    "possible_values": [
                        [
                            "layers.conv3d(spatiotemporal_average, num_channels, [1, 1, 1], activation_fn=None, normalizer_fn=None, biases_initializer=None, data_format=data_format, weights_initializer=trunc_normal(0.01), scope=scope + '/self_gating/transformer_W')",
                            "Call"
                        ],
                        [
                            "tf.tile(weights, tile_multiples)",
                            "Call"
                        ],
                        [
                            "tf.nn.sigmoid(weights)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "input_tensor",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "variable_scope_210": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'InceptionV1'",
                            "MethodArgument"
                        ],
                        [
                            "'InceptionV1'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "InceptionV1",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_557": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'InceptionV1'",
                            "MethodArgument"
                        ],
                        [
                            "'InceptionV1'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "InceptionV1",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs, num_classes]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reduce_mean_590": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "layers.conv3d(net, num_classes, [1, 1, 1], activation_fn=None, normalizer_fn=None, data_format='NDHWC', scope='Conv2d_0c_1x1')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(logits, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(logits, [1, 2], name='SpatialSqueeze')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_571": {
                "name_or_scope": {
                    "value": "Logits",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_573": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "net",
                    "type": "Call",
                    "possible_values": [
                        [
                            "conv3d_spatiotemporal(inputs, depth(64), [first_temporal_kernel_size, 7, 7], stride=2, separable=False, scope=end_point)",
                            "Call"
                        ],
                        [
                            "layers.max_pool3d(net, [1, 3, 3], stride=[1, 2, 2], scope=end_point)",
                            "Call"
                        ],
                        [
                            "layers.conv3d(net, depth(64), [1, 1, 1], scope=end_point)",
                            "Call"
                        ],
                        [
                            "conv3d_spatiotemporal(net, depth(192), [t, 3, 3], scope=end_point)",
                            "Call"
                        ],
                        [
                            "self_gating(net, scope=end_point, data_format=data_format)",
                            "Call"
                        ],
                        [
                            "layers.max_pool3d(net, [1, 3, 3], stride=[1, 2, 2], scope=end_point)",
                            "Call"
                        ],
                        [
                            "inception_block_v1_3d(net, num_outputs_0_0a=depth(64), num_outputs_1_0a=depth(96), num_outputs_1_0b=depth(128), num_outputs_2_0a=depth(16), num_outputs_2_0b=depth(32), num_outputs_3_0b=depth(32), temporal_kernel_size=t, self_gating_fn=self_gating_fn, data_format=data_format, scope=end_point)",
                            "Call"
                        ],
                        [
                            "inception_block_v1_3d(net, num_outputs_0_0a=depth(128), num_outputs_1_0a=depth(128), num_outputs_1_0b=depth(192), num_outputs_2_0a=depth(32), num_outputs_2_0b=depth(96), num_outputs_3_0b=depth(64), temporal_kernel_size=t, self_gating_fn=self_gating_fn, data_format=data_format, scope=end_point)",
                            "Call"
                        ],
                        [
                            "layers.max_pool3d(net, [3, 3, 3], stride=[2, 2, 2], scope=end_point)",
                            "Call"
                        ],
                        [
                            "inception_block_v1_3d(net, num_outputs_0_0a=depth(192), num_outputs_1_0a=depth(96), num_outputs_1_0b=depth(208), num_outputs_2_0a=depth(16), num_outputs_2_0b=depth(48), num_outputs_3_0b=depth(64), temporal_kernel_size=t, self_gating_fn=self_gating_fn, data_format=data_format, scope=end_point)",
                            "Call"
                        ],
                        [
                            "inception_block_v1_3d(net, num_outputs_0_0a=depth(160), num_outputs_1_0a=depth(112), num_outputs_1_0b=depth(224), num_outputs_2_0a=depth(24), num_outputs_2_0b=depth(64), num_outputs_3_0b=depth(64), temporal_kernel_size=t, self_gating_fn=self_gating_fn, data_format=data_format, scope=end_point)",
                            "Call"
                        ],
                        [
                            "inception_block_v1_3d(net, num_outputs_0_0a=depth(128), num_outputs_1_0a=depth(128), num_outputs_1_0b=depth(256), num_outputs_2_0a=depth(24), num_outputs_2_0b=depth(64), num_outputs_3_0b=depth(64), temporal_kernel_size=t, self_gating_fn=self_gating_fn, data_format=data_format, scope=end_point)",
                            "Call"
                        ],
                        [
                            "inception_block_v1_3d(net, num_outputs_0_0a=depth(112), num_outputs_1_0a=depth(144), num_outputs_1_0b=depth(288), num_outputs_2_0a=depth(32), num_outputs_2_0b=depth(64), num_outputs_3_0b=depth(64), temporal_kernel_size=t, self_gating_fn=self_gating_fn, data_format=data_format, scope=end_point)",
                            "Call"
                        ],
                        [
                            "inception_block_v1_3d(net, num_outputs_0_0a=depth(256), num_outputs_1_0a=depth(160), num_outputs_1_0b=depth(320), num_outputs_2_0a=depth(32), num_outputs_2_0b=depth(128), num_outputs_3_0b=depth(128), temporal_kernel_size=t, self_gating_fn=self_gating_fn, data_format=data_format, scope=end_point)",
                            "Call"
                        ],
                        [
                            "layers.max_pool3d(net, [2, 2, 2], stride=[2, 2, 2], scope=end_point)",
                            "Call"
                        ],
                        [
                            "inception_block_v1_3d(net, num_outputs_0_0a=depth(256), num_outputs_1_0a=depth(160), num_outputs_1_0b=depth(320), num_outputs_2_0a=depth(32), num_outputs_2_0b=depth(128), num_outputs_3_0b=depth(128), temporal_kernel_size=t, self_gating_fn=self_gating_fn, data_format=data_format, scope=end_point)",
                            "Call"
                        ],
                        [
                            "inception_block_v1_3d(net, num_outputs_0_0a=depth(384), num_outputs_1_0a=depth(192), num_outputs_1_0b=depth(384), num_outputs_2_0a=depth(48), num_outputs_2_0b=depth(128), num_outputs_3_0b=depth(128), temporal_kernel_size=t, self_gating_fn=self_gating_fn, data_format=data_format, scope=end_point)",
                            "Call"
                        ],
                        [
                            "tf.transpose(net, [0, 2, 3, 4, 1])",
                            "Call"
                        ],
                        [
                            "layers.avg_pool3d(net, kernel_size, stride=1, data_format='NDHWC', scope='AvgPool_0a_7x7')",
                            "Call"
                        ],
                        [
                            "layers.dropout(net, dropout_keep_prob, scope='Dropout_0b')",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 4, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_592": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "layers.conv3d(net, num_classes, [1, 1, 1], activation_fn=None, normalizer_fn=None, data_format='NDHWC', scope='Conv2d_0c_1x1')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(logits, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(logits, [1, 2], name='SpatialSqueeze')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "SpatialSqueeze",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "archive/classification_marcel/tf-slim/nets/s3dg_test.py": {
        "tensorflow": {
            "argmax_141": {
                "variable": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "main_150": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_144": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "archive/classification_marcel/tf-slim/nets/vgg.py": {
        "tensorflow": {
            "variable_scope_104": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'vgg_a'",
                            "MethodArgument"
                        ],
                        [
                            "'vgg_16'",
                            "MethodArgument"
                        ],
                        [
                            "'vgg_19'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "vgg_a",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_182": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'vgg_a'",
                            "MethodArgument"
                        ],
                        [
                            "'vgg_16'",
                            "MethodArgument"
                        ],
                        [
                            "'vgg_19'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "vgg_16",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_261": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'vgg_a'",
                            "MethodArgument"
                        ],
                        [
                            "'vgg_16'",
                            "MethodArgument"
                        ],
                        [
                            "'vgg_19'",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "vgg_19",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_128": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "net",
                    "type": "Call",
                    "possible_values": [
                        [
                            "slim.repeat(inputs, 1, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 1, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding=fc_conv_padding, scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(net, [1, 2], keep_dims=True, name='global_pool')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding=fc_conv_padding, scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(net, [1, 2], keep_dims=True, name='global_pool')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding=fc_conv_padding, scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(net, [1, 2], keep_dims=True, name='global_pool')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "global_pool",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_206": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "net",
                    "type": "Call",
                    "possible_values": [
                        [
                            "slim.repeat(inputs, 1, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 1, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding=fc_conv_padding, scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(net, [1, 2], keep_dims=True, name='global_pool')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding=fc_conv_padding, scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(net, [1, 2], keep_dims=True, name='global_pool')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding=fc_conv_padding, scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(net, [1, 2], keep_dims=True, name='global_pool')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "global_pool",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_285": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "net",
                    "type": "Call",
                    "possible_values": [
                        [
                            "slim.repeat(inputs, 1, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 1, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding=fc_conv_padding, scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(net, [1, 2], keep_dims=True, name='global_pool')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding=fc_conv_padding, scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(net, [1, 2], keep_dims=True, name='global_pool')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding=fc_conv_padding, scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(net, [1, 2], keep_dims=True, name='global_pool')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "global_pool",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_initializer_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "squeeze_138": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "Call",
                    "possible_values": [
                        [
                            "slim.repeat(inputs, 1, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 1, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding=fc_conv_padding, scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(net, [1, 2], keep_dims=True, name='global_pool')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding=fc_conv_padding, scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(net, [1, 2], keep_dims=True, name='global_pool')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding=fc_conv_padding, scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(net, [1, 2], keep_dims=True, name='global_pool')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "fc8/squeezed",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_216": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "Call",
                    "possible_values": [
                        [
                            "slim.repeat(inputs, 1, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 1, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding=fc_conv_padding, scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(net, [1, 2], keep_dims=True, name='global_pool')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding=fc_conv_padding, scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(net, [1, 2], keep_dims=True, name='global_pool')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding=fc_conv_padding, scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(net, [1, 2], keep_dims=True, name='global_pool')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "fc8/squeezed",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_295": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "Call",
                    "possible_values": [
                        [
                            "slim.repeat(inputs, 1, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 1, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding=fc_conv_padding, scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(net, [1, 2], keep_dims=True, name='global_pool')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding=fc_conv_padding, scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(net, [1, 2], keep_dims=True, name='global_pool')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding=fc_conv_padding, scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(net, [1, 2], keep_dims=True, name='global_pool')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "fc8/squeezed",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "archive/classification_marcel/tf-slim/nets/vgg_test.py": {
        "tensorflow": {
            "main_583": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_157": {
                "variable": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_179": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "argmax_180": {
                "variable": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "argmax_344": {
                "variable": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_366": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "argmax_367": {
                "variable": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "argmax_546": {
                "variable": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_568": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "argmax_569": {
                "variable": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(logits, [1, 2])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_scope_172": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_scope_359": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_scope_561": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_189": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_376": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_578": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "archive/classification_marcel/tf-slim/preprocessing/cifarnet_preprocessing.py": {
        "tensorflow": {
            "to_float_54": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.pad(image, [[padding, padding], [padding, padding], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ]
                    ]
                }
            },
            "random_crop_58": {
                "variable": {
                    "value": "distorted_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.pad(image, [[padding, padding], [padding, padding], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[output_height, output_width, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "random_flip_left_right_62": {
                "variable": {
                    "value": "distorted_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "distorted_image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.random_crop(image, [output_height, output_width, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(distorted_image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(distorted_image, max_delta=63)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(distorted_image, lower=0.2, upper=1.8)",
                            "Call"
                        ]
                    ]
                }
            },
            "random_brightness_69": {
                "variable": {
                    "value": "distorted_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "distorted_image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.random_crop(image, [output_height, output_width, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(distorted_image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(distorted_image, max_delta=63)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(distorted_image, lower=0.2, upper=1.8)",
                            "Call"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "63",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "random_contrast_71": {
                "variable": {
                    "value": "distorted_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "distorted_image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.random_crop(image, [output_height, output_width, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(distorted_image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(distorted_image, max_delta=63)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(distorted_image, lower=0.2, upper=1.8)",
                            "Call"
                        ]
                    ]
                },
                "lower": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                },
                "upper": {
                    "value": "1.8",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "to_float_93": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.pad(image, [[padding, padding], [padding, padding], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_56": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.pad(image, [[padding, padding], [padding, padding], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[padding, padding], [padding, padding], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "per_image_standardization_74": {
                "image": {
                    "value": "distorted_image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.random_crop(image, [output_height, output_width, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(distorted_image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(distorted_image, max_delta=63)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(distorted_image, lower=0.2, upper=1.8)",
                            "Call"
                        ]
                    ]
                }
            },
            "per_image_standardization_103": {
                "image": {
                    "value": "resized_image",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.image.resize_image_with_crop_or_pad(image, output_width, output_height)",
                            "Call"
                        ]
                    ]
                }
            },
            "image_51": {
                "name": {
                    "value": "image",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.expand_dims(image, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "image_65": {
                "name": {
                    "value": "distorted_image",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.expand_dims(distorted_image, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "image_91": {
                "name": {
                    "value": "image",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.expand_dims(image, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "image_100": {
                "name": {
                    "value": "resized_image",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.expand_dims(resized_image, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_51": {
                "input": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.pad(image, [[padding, padding], [padding, padding], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_65": {
                "input": {
                    "value": "distorted_image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.random_crop(image, [output_height, output_width, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(distorted_image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(distorted_image, max_delta=63)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(distorted_image, lower=0.2, upper=1.8)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_91": {
                "input": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.pad(image, [[padding, padding], [padding, padding], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_100": {
                "input": {
                    "value": "resized_image",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.image.resize_image_with_crop_or_pad(image, output_width, output_height)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "archive/classification_marcel/tf-slim/preprocessing/inception_preprocessing.py": {
        "tensorflow": {
            "sample_distorted_bounding_box_141": {
                "variable": {
                    "value": "sample_distorted_bounding_box",
                    "type": "Variable",
                    "possible_values": []
                },
                "image_size": {
                    "value": "tf.shape(image)",
                    "type": "Call",
                    "possible_values": []
                },
                "bounding_boxes": {
                    "value": "bbox",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.constant([0.0, 0.0, 1.0, 1.0], dtype=tf.float32, shape=[1, 1, 4])",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "min_object_covered": {
                    "value": "min_object_covered",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                },
                "aspect_ratio_range": {
                    "value": "aspect_ratio_range",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(0.75",
                            "MethodArgument"
                        ]
                    ]
                },
                "area_range": {
                    "value": "area_range",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(0.05",
                            "MethodArgument"
                        ]
                    ]
                },
                "max_attempts": {
                    "value": "max_attempts",
                    "type": "Name",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                },
                "use_image_if_no_bounding_boxes": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "slice_152": {
                "variable": {
                    "value": "cropped_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "bbox_begin",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "bbox_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "draw_bounding_boxes_195": {
                "variable": {
                    "value": "image_with_box",
                    "type": "Variable",
                    "possible_values": []
                },
                "images": {
                    "value": "tf.expand_dims(image, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "boxes": {
                    "value": "bbox",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.constant([0.0, 0.0, 1.0, 1.0], dtype=tf.float32, shape=[1, 1, 4])",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "draw_bounding_boxes_204": {
                "variable": {
                    "value": "image_with_distorted_box",
                    "type": "Variable",
                    "possible_values": []
                },
                "images": {
                    "value": "tf.expand_dims(image, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "boxes": {
                    "value": "distorted_bbox",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "random_flip_left_right_227": {
                "variable": {
                    "value": "distorted_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "distorted_image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "apply_with_random_selector(distorted_image, lambda x, method: tf.image.resize_images(x, [height, width], method), num_cases=num_resize_cases)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(distorted_image)",
                            "Call"
                        ],
                        [
                            "apply_with_random_selector(distorted_image, lambda x, ordering: distort_color(x, ordering, fast_mode), num_cases=num_distort_cases)",
                            "Call"
                        ],
                        [
                            "tf.subtract(distorted_image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(distorted_image, 2.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "subtract_239": {
                "variable": {
                    "value": "distorted_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "distorted_image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "apply_with_random_selector(distorted_image, lambda x, method: tf.image.resize_images(x, [height, width], method), num_cases=num_resize_cases)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(distorted_image)",
                            "Call"
                        ],
                        [
                            "apply_with_random_selector(distorted_image, lambda x, ordering: distort_color(x, ordering, fast_mode), num_cases=num_distort_cases)",
                            "Call"
                        ],
                        [
                            "tf.subtract(distorted_image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(distorted_image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "multiply_240": {
                "variable": {
                    "value": "distorted_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "distorted_image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "apply_with_random_selector(distorted_image, lambda x, method: tf.image.resize_images(x, [height, width], method), num_cases=num_resize_cases)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(distorted_image)",
                            "Call"
                        ],
                        [
                            "apply_with_random_selector(distorted_image, lambda x, ordering: distort_color(x, ordering, fast_mode), num_cases=num_distort_cases)",
                            "Call"
                        ],
                        [
                            "tf.subtract(distorted_image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(distorted_image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "2.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "subtract_280": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "multiply_281": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "2.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "merge_40": {
                "inputs": {
                    "value": "[func(control_flow_ops.switch(x, tf.equal(sel, case))[1], case) for case in range(num_cases)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "name_scope_63": {
                "name": {
                    "value": "scope",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "clip_by_value_96": {
                "t": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "name_scope_130": {
                "name": {
                    "value": "scope",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "name_scope_186": {
                "name": {
                    "value": "scope",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "constant_188": {
                "variable": {
                    "value": "bbox",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[0.0, 0.0, 1.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 1, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "convert_image_dtype_192": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_266": {
                "name": {
                    "value": "scope",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "convert_image_dtype_268": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "central_crop_272": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "central_fraction": {
                    "value": "central_fraction",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.875",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "expand_dims_276": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "resize_bilinear_277": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "images": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[height, width]",
                    "type": "List",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_279": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "random_brightness_66": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "32.0 / 255.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "random_saturation_67": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "lower": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                },
                "upper": {
                    "value": "1.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "random_saturation_69": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "lower": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                },
                "upper": {
                    "value": "1.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "random_brightness_70": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "32.0 / 255.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "random_brightness_73": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "32.0 / 255.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "random_saturation_74": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "lower": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                },
                "upper": {
                    "value": "1.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "random_hue_75": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "random_contrast_76": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "lower": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                },
                "upper": {
                    "value": "1.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "shape_142": {
                "input": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_195": {
                "input": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "image_198": {
                "name": {
                    "value": "image_with_bounding_boxes",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "image_with_box",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.image.draw_bounding_boxes(tf.expand_dims(image, 0), bbox)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_205": {
                "input": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "image_207": {
                "name": {
                    "value": "images_with_distorted_bounding_box",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "image_with_distorted_box",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.image.draw_bounding_boxes(tf.expand_dims(image, 0), distorted_bbox)",
                            "Call"
                        ]
                    ]
                }
            },
            "image_223": {
                "name": {
                    "value": "cropped_resized_image",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.expand_dims(distorted_image, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "image_237": {
                "name": {
                    "value": "final_distorted_image",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.expand_dims(distorted_image, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "random_saturation_78": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "lower": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                },
                "upper": {
                    "value": "1.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "random_brightness_79": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "32.0 / 255.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "random_contrast_80": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "lower": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                },
                "upper": {
                    "value": "1.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "random_hue_81": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_224": {
                "input": {
                    "value": "distorted_image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "apply_with_random_selector(distorted_image, lambda x, method: tf.image.resize_images(x, [height, width], method), num_cases=num_resize_cases)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(distorted_image)",
                            "Call"
                        ],
                        [
                            "apply_with_random_selector(distorted_image, lambda x, ordering: distort_color(x, ordering, fast_mode), num_cases=num_distort_cases)",
                            "Call"
                        ],
                        [
                            "tf.subtract(distorted_image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(distorted_image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_238": {
                "input": {
                    "value": "distorted_image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "apply_with_random_selector(distorted_image, lambda x, method: tf.image.resize_images(x, [height, width], method), num_cases=num_resize_cases)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(distorted_image)",
                            "Call"
                        ],
                        [
                            "apply_with_random_selector(distorted_image, lambda x, ordering: distort_color(x, ordering, fast_mode), num_cases=num_distort_cases)",
                            "Call"
                        ],
                        [
                            "tf.subtract(distorted_image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(distorted_image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "random_contrast_83": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "lower": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                },
                "upper": {
                    "value": "1.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "random_hue_84": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "random_brightness_85": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "32.0 / 255.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "random_saturation_86": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "lower": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                },
                "upper": {
                    "value": "1.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "random_hue_88": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "random_saturation_89": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "lower": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                },
                "upper": {
                    "value": "1.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "random_contrast_90": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "lower": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                },
                "upper": {
                    "value": "1.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "random_brightness_91": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(image, max_delta=0.2)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.5, upper=1.5)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=32.0 / 255.0)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.convert_image_dtype(image, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.central_crop(image, central_fraction=central_fraction)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(image, [height, width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(image, [0])",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 0.5)",
                            "Call"
                        ],
                        [
                            "tf.multiply(image, 2.0)",
                            "Call"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "32.0 / 255.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "equal_41": {
                "x": {
                    "value": "sel",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.random_uniform([], maxval=num_cases, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "case",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "archive/classification_marcel/tf-slim/preprocessing/lenet_preprocessing.py": {
        "tensorflow": {
            "to_float_39": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(image, output_width, output_height)",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 128.0)",
                            "Call"
                        ],
                        [
                            "tf.div(image, 128.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "subtract_42": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(image, output_width, output_height)",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 128.0)",
                            "Call"
                        ],
                        [
                            "tf.div(image, 128.0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "128.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "div_43": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(image, output_width, output_height)",
                            "Call"
                        ],
                        [
                            "tf.subtract(image, 128.0)",
                            "Call"
                        ],
                        [
                            "tf.div(image, 128.0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "128.0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "archive/classification_marcel/tf-slim/preprocessing/preprocessing_factory.py": {
        "tensorflow": {}
    },
    "archive/classification_marcel/tf-slim/preprocessing/vgg_preprocessing.py": {
        "tensorflow": {
            "shape_67": {
                "variable": {
                    "value": "original_shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.slice(image, offsets, cropped_shape)",
                            "Call"
                        ],
                        [
                            "image_list[i]",
                            "Subscript"
                        ],
                        [
                            "image_list",
                            "Name"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_random_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_central_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ]
                    ]
                }
            },
            "Assert_69": {
                "variable": {
                    "value": "rank_assertion",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.equal(tf.rank(image), 3)",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "['Rank of image must be equal to 3.']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Assert_75": {
                "variable": {
                    "value": "size_assertion",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.logical_and(tf.greater_equal(original_shape[0], crop_height), tf.greater_equal(original_shape[1], crop_width))",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "['Crop size greater than the image size.']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_int32_81": {
                "variable": {
                    "value": "offsets",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.stack([offset_height, offset_width, 0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Assert_129": {
                "variable": {
                    "value": "crop_size_assert",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.logical_and(tf.greater_equal(image_height, crop_height), tf.greater_equal(image_width, crop_width))",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "['Crop size greater than the image size.']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "split_225": {
                "variable": {
                    "value": "channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "num_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "image.get_shape().as_list()[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "value": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.slice(image, offsets, cropped_shape)",
                            "Call"
                        ],
                        [
                            "image_list[i]",
                            "Subscript"
                        ],
                        [
                            "image_list",
                            "Name"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_random_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_central_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_to_tensor_247": {
                "variable": {
                    "value": "smallest_side",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "smallest_side",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(smallest_side, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.to_float(smallest_side)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(smallest_side, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_float_249": {
                "variable": {
                    "value": "height",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "height",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "shape[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(height)",
                            "Call"
                        ],
                        [
                            "shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "to_float_250": {
                "variable": {
                    "value": "width",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "width",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "shape[1]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(width)",
                            "Call"
                        ],
                        [
                            "shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "to_float_251": {
                "variable": {
                    "value": "smallest_side",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "smallest_side",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(smallest_side, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.to_float(smallest_side)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(smallest_side, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "cond_253": {
                "variable": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.greater(height, width)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : smallest_side / width",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : smallest_side / height",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "to_int32_256": {
                "variable": {
                    "value": "new_height",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.rint(height * scale)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "to_int32_257": {
                "variable": {
                    "value": "new_width",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.rint(width * scale)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "convert_to_tensor_272": {
                "variable": {
                    "value": "smallest_side",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "smallest_side",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(smallest_side, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.to_float(smallest_side)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(smallest_side, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_274": {
                "variable": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.slice(image, offsets, cropped_shape)",
                            "Call"
                        ],
                        [
                            "image_list[i]",
                            "Subscript"
                        ],
                        [
                            "image_list",
                            "Name"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_random_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_central_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_278": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.slice(image, offsets, cropped_shape)",
                            "Call"
                        ],
                        [
                            "image_list[i]",
                            "Subscript"
                        ],
                        [
                            "image_list",
                            "Name"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_random_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_central_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "resize_bilinear_279": {
                "variable": {
                    "value": "resized_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "images": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.slice(image, offsets, cropped_shape)",
                            "Call"
                        ],
                        [
                            "image_list[i]",
                            "Subscript"
                        ],
                        [
                            "image_list",
                            "Name"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_random_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_central_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[new_height, new_width]",
                    "type": "List",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_281": {
                "variable": {
                    "value": "resized_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "resized_image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.image.resize_bilinear(image, [new_height, new_width], align_corners=False)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(resized_image)",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_314": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.slice(image, offsets, cropped_shape)",
                            "Call"
                        ],
                        [
                            "image_list[i]",
                            "Subscript"
                        ],
                        [
                            "image_list",
                            "Name"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_random_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_central_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ]
                    ]
                }
            },
            "random_flip_left_right_315": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.slice(image, offsets, cropped_shape)",
                            "Call"
                        ],
                        [
                            "image_list[i]",
                            "Subscript"
                        ],
                        [
                            "image_list",
                            "Name"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_random_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_central_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_334": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.slice(image, offsets, cropped_shape)",
                            "Call"
                        ],
                        [
                            "image_list[i]",
                            "Subscript"
                        ],
                        [
                            "image_list",
                            "Name"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_random_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_central_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_73": {
                "variable": {
                    "value": "cropped_shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[crop_height, crop_width, original_shape[2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_86": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.slice(image, offsets, cropped_shape)",
                            "Call"
                        ],
                        [
                            "image_list[i]",
                            "Subscript"
                        ],
                        [
                            "image_list",
                            "Name"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_random_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_central_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "offsets",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.to_int32(tf.stack([offset_height, offset_width, 0]))",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "cropped_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.stack([crop_height, crop_width, original_shape[2]])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_87": {
                "tensor": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.slice(image, offsets, cropped_shape)",
                            "Call"
                        ],
                        [
                            "image_list[i]",
                            "Subscript"
                        ],
                        [
                            "image_list",
                            "Name"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_random_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_central_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "cropped_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.stack([crop_height, crop_width, original_shape[2]])",
                            "Call"
                        ]
                    ]
                }
            },
            "rank_118": {
                "variable": {
                    "value": "image_rank",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Assert_119": {
                "variable": {
                    "value": "rank_assert",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.equal(image_rank, 3)",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "['Wrong rank for tensor  %s [expected] [actual]', image_list[i].name, 3, image_rank]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_126": {
                "variable": {
                    "value": "image_shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image_list[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Assert_145": {
                "variable": {
                    "value": "height_assert",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.equal(height, image_height)",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "['Wrong height for tensor %s [expected][actual]', image.name, height, image_height]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Assert_149": {
                "variable": {
                    "value": "width_assert",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.equal(width, image_width)",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "['Wrong width for tensor %s [expected][actual]', image.name, width, image_width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_161": {
                "variable": {
                    "value": "max_offset_height",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "image_height - crop_height + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_163": {
                "variable": {
                    "value": "max_offset_width",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "image_width - crop_width + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_228": {
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.split(axis=2, num_or_size_splits=num_channels, value=image)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_70": {
                "x": {
                    "value": "tf.rank(image)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "control_dependencies_72": {
                "control_inputs": {
                    "value": "[rank_assertion]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "logical_and_76": {
                "x": {
                    "value": "tf.greater_equal(original_shape[0], crop_height)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.greater_equal(original_shape[1], crop_width)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_81": {
                "values": {
                    "value": "[offset_height, offset_width, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "control_dependencies_85": {
                "control_inputs": {
                    "value": "[size_assertion]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "control_dependencies_125": {
                "control_inputs": {
                    "value": "[rank_assertions[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "logical_and_130": {
                "x": {
                    "value": "tf.greater_equal(image_height, crop_height)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.greater_equal(image_width, crop_width)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_141": {
                "variable": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.slice(image, offsets, cropped_shape)",
                            "Call"
                        ],
                        [
                            "image_list[i]",
                            "Subscript"
                        ],
                        [
                            "image_list",
                            "Name"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_random_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_central_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ]
                    ]
                }
            },
            "control_dependencies_160": {
                "control_inputs": {
                    "value": "asserts",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[rank_assertions[0], crop_size_assert]",
                            "List"
                        ]
                    ]
                }
            },
            "control_dependencies_162": {
                "control_inputs": {
                    "value": "asserts",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[rank_assertions[0], crop_size_assert]",
                            "List"
                        ]
                    ]
                }
            },
            "greater_253": {
                "x": {
                    "value": "height",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "shape[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(height)",
                            "Call"
                        ],
                        [
                            "shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "width",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "shape[1]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(width)",
                            "Call"
                        ],
                        [
                            "shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "rint_256": {
                "x": {
                    "value": "height * scale",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rint_257": {
                "x": {
                    "value": "width * scale",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rank_70": {
                "input": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.slice(image, offsets, cropped_shape)",
                            "Call"
                        ],
                        [
                            "image_list[i]",
                            "Subscript"
                        ],
                        [
                            "image_list",
                            "Name"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_random_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_central_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ]
                    ]
                }
            },
            "greater_equal_77": {
                "x": {
                    "value": "original_shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "crop_height",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "greater_equal_78": {
                "x": {
                    "value": "original_shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "crop_width",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "equal_120": {
                "x": {
                    "value": "image_rank",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.rank(image_list[i])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "greater_equal_131": {
                "x": {
                    "value": "image_height",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "image_shape[0]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(image)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "crop_height",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "greater_equal_132": {
                "x": {
                    "value": "image_width",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "image_shape[1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(image)[1]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "crop_width",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "control_dependencies_140": {
                "control_inputs": {
                    "value": "[rank_assertions[i]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "equal_146": {
                "x": {
                    "value": "height",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "shape[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(height)",
                            "Call"
                        ],
                        [
                            "shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "image_height",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "image_shape[0]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(image)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "equal_150": {
                "x": {
                    "value": "width",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "shape[1]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(width)",
                            "Call"
                        ],
                        [
                            "shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "image_width",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "image_shape[1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(image)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "shape_187": {
                "input": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.slice(image, offsets, cropped_shape)",
                            "Call"
                        ],
                        [
                            "image_list[i]",
                            "Subscript"
                        ],
                        [
                            "image_list",
                            "Name"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_random_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_central_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_188": {
                "input": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.slice(image, offsets, cropped_shape)",
                            "Call"
                        ],
                        [
                            "image_list[i]",
                            "Subscript"
                        ],
                        [
                            "image_list",
                            "Name"
                        ],
                        [
                            "tf.expand_dims(image, 0)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_random_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "_aspect_preserving_resize(image, resize_side)",
                            "Call"
                        ],
                        [
                            "_central_crop([image], output_height, output_width)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(image)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "archive/classification_marcel/tf-slim/train_image_classifier.py": {
        "tensorflow": {
            "set_verbosity_22": {
                "level": {
                    "value": "tf.logging.ERROR",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DEFINE_string_31": {
                "name": {
                    "value": "master",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "The address of the TensorFlow master to use.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_34": {
                "name": {
                    "value": "train_dir",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "/tmp/tfmodel/",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Directory where checkpoints and event logs are written to.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_38": {
                "name": {
                    "value": "num_clones",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of model clones to deploy. Note For historical reasons loss from all clones averaged out and learning rate decay happen per clone epochs",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_47": {
                "name": {
                    "value": "worker_replicas",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of worker replicas.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_49": {
                "name": {
                    "value": "num_ps_tasks",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "The number of parameter servers. If the value is 0, then the parameters are handled locally by the worker.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_54": {
                "name": {
                    "value": "num_readers",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "The number of parallel readers that read data from the dataset.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_58": {
                "name": {
                    "value": "num_preprocessing_threads",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "The number of threads used to create the batches.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_62": {
                "name": {
                    "value": "log_every_n_steps",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "The frequency with which logs are print.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_66": {
                "name": {
                    "value": "save_summaries_secs",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "600",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "The frequency with which summaries are saved, in seconds.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_70": {
                "name": {
                    "value": "save_interval_secs",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "600",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "The frequency with which the model is saved, in seconds.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_74": {
                "name": {
                    "value": "task",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Task id of the replica running the training.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_float_81": {
                "name": {
                    "value": "weight_decay",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "4e-05",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "The weight decay on the model weights.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_84": {
                "name": {
                    "value": "optimizer",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "rmsprop",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "The name of the optimizer, one of \"adadelta\", \"adagrad\", \"adam\",\"ftrl\", \"momentum\", \"sgd\" or \"rmsprop\".",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_float_89": {
                "name": {
                    "value": "adadelta_rho",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "0.95",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "The decay rate for adadelta.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_float_93": {
                "name": {
                    "value": "adagrad_initial_accumulator_value",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Starting value for the AdaGrad accumulators.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_float_97": {
                "name": {
                    "value": "adam_beta1",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "0.9",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "The exponential decay rate for the 1st moment estimates.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_float_101": {
                "name": {
                    "value": "adam_beta2",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "0.999",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "The exponential decay rate for the 2nd moment estimates.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_float_105": {
                "name": {
                    "value": "opt_epsilon",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Epsilon term for the optimizer.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_float_107": {
                "name": {
                    "value": "ftrl_learning_rate_power",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "-0.5",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "help": {
                    "value": "The learning rate power.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_float_110": {
                "name": {
                    "value": "ftrl_initial_accumulator_value",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Starting value for the FTRL accumulators.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_float_114": {
                "name": {
                    "value": "ftrl_l1",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "The FTRL l1 regularization strength.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_float_117": {
                "name": {
                    "value": "ftrl_l2",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "The FTRL l2 regularization strength.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_float_120": {
                "name": {
                    "value": "momentum",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "0.9",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "The momentum for the MomentumOptimizer and RMSPropOptimizer.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_float_124": {
                "name": {
                    "value": "rmsprop_momentum",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "0.9",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Momentum.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_float_126": {
                "name": {
                    "value": "rmsprop_decay",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "0.9",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Decay term for RMSProp.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_128": {
                "name": {
                    "value": "quantize_delay",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of steps to start quantized training. Set to -1 would disable quantized training.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_137": {
                "name": {
                    "value": "learning_rate_decay_type",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "exponential",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Specifies how the learning rate is decayed. One of \"fixed\", \"exponential\", or \"polynomial\"",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_float_143": {
                "name": {
                    "value": "learning_rate",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "0.01",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Initial learning rate.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_float_145": {
                "name": {
                    "value": "end_learning_rate",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "0.0001",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "The minimal end learning rate used by a polynomial decay learning rate.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_float_149": {
                "name": {
                    "value": "label_smoothing",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "The amount of label smoothing.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_float_152": {
                "name": {
                    "value": "learning_rate_decay_factor",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "0.94",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Learning rate decay factor.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_float_155": {
                "name": {
                    "value": "num_epochs_per_decay",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "2.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of epochs after which learning rate decays. Note: this flag counts epochs per clone but aggregates per sync replicas. So 1.0 means that each clone will go over full epoch individually, but replicas will go once across all replicas.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_bool_162": {
                "name": {
                    "value": "sync_replicas",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Whether or not to synchronize the replicas during training.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_166": {
                "name": {
                    "value": "replicas_to_aggregate",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "The Number of gradients to collect before updating params.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_float_170": {
                "name": {
                    "value": "moving_average_decay",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "The decay to use for the moving average.If left as None, then moving averages are not used.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_179": {
                "name": {
                    "value": "dataset_name",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "imagenet",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "The name of the dataset to load.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_182": {
                "name": {
                    "value": "dataset_split_name",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "train",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "The name of the train/test split.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_185": {
                "name": {
                    "value": "dataset_dir",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "The directory where the dataset files are stored.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_188": {
                "name": {
                    "value": "labels_offset",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "An offset for the labels in the dataset. This flag is primarily used to evaluate the VGG and ResNet architectures which do not use a background class for the ImageNet dataset.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_194": {
                "name": {
                    "value": "model_name",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "inception_v3",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "The name of the architecture to train.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_197": {
                "name": {
                    "value": "preprocessing_name",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "The name of the preprocessing to use. If left as `None`, then the model_name flag is used.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_201": {
                "name": {
                    "value": "batch_size",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "The number of samples in each batch.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_204": {
                "name": {
                    "value": "train_image_size",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Train image size",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_integer_207": {
                "name": {
                    "value": "max_number_of_steps",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "The maximum number of training steps.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_214": {
                "name": {
                    "value": "checkpoint_path",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "The path to a checkpoint from which to fine-tune.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_218": {
                "name": {
                    "value": "checkpoint_exclude_scopes",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Comma-separated list of scopes of variables to exclude when restoring from a checkpoint.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DEFINE_string_223": {
                "name": {
                    "value": "trainable_scopes",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "Comma-separated list of scopes to filter the set of variables to train.By default, None would train all the variables.",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdadeltaOptimizer_292": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_configure_learning_rate(dataset.num_samples, global_step)",
                            "Call"
                        ]
                    ]
                },
                "rho": {
                    "value": "FLAGS.adadelta_rho",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "FLAGS.opt_epsilon",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "latest_checkpoint_345": {
                "checkpoint_dir": {
                    "value": "FLAGS.train_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "IsDirectory_365": {
                "dirname": {
                    "value": "FLAGS.checkpoint_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "latest_checkpoint_366": {
                "variable": {
                    "value": "checkpoint_path",
                    "type": "Variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "FLAGS.checkpoint_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_370": {
                "msg": {
                    "value": "'Fine-tuning from %s' % checkpoint_path",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_collection_391": {
                "variable": {
                    "value": "variables",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "scopes",
                            "Name"
                        ]
                    ]
                }
            },
            "set_verbosity_400": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_492": {
                "variable": {
                    "value": "update_ops",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "first_clone_scope",
                    "type": "Name",
                    "possible_values": [
                        [
                            "deploy_config.clone_scope(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "group_561": {
                "variable": {
                    "value": "update_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "*update_ops",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "merge_571": {
                "variable": {
                    "value": "summary_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "list(summaries)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "summary_op",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "run_591": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "exponential_decay_258": {
                "learning_rate": {
                    "value": "FLAGS.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "global_step": {
                    "value": "global_step",
                    "type": "Name",
                    "possible_values": [
                        [
                            "slim.create_global_step()",
                            "Call"
                        ]
                    ]
                },
                "decay_steps": {
                    "value": "decay_steps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(num_samples_per_epoch * FLAGS.num_epochs_per_decay / FLAGS.batch_size)",
                            "Call"
                        ],
                        [
                            "decay_steps / FLAGS.replicas_to_aggregate",
                            "BinOp"
                        ]
                    ]
                },
                "decay_rate": {
                    "value": "FLAGS.learning_rate_decay_factor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "staircase": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "exponential_decay_learning_rate",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdagradOptimizer_297": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_configure_learning_rate(dataset.num_samples, global_step)",
                            "Call"
                        ]
                    ]
                },
                "initial_accumulator_value": {
                    "value": "FLAGS.adagrad_initial_accumulator_value",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_346": {
                "msg": {
                    "value": "'Ignoring --checkpoint_path because a checkpoint already exists in %s' % FLAGS.train_dir",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "trainable_variables_385": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_401": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "batch_455": {
                "variable": {
                    "value": "(images, labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[image, label]",
                    "type": "List",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "FLAGS.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_threads": {
                    "value": "FLAGS.num_preprocessing_threads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "capacity": {
                    "value": "5 * FLAGS.batch_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_collection_503": {
                "key": {
                    "value": "tf.GraphKeys.LOSSES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "first_clone_scope",
                    "type": "Name",
                    "possible_values": [
                        [
                            "deploy_config.clone_scope(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "ExponentialMovingAverage_515": {
                "variable": {
                    "value": "variable_averages",
                    "type": "Variable",
                    "possible_values": []
                },
                "decay": {
                    "value": "FLAGS.moving_average_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_updates": {
                    "value": "global_step",
                    "type": "Name",
                    "possible_values": [
                        [
                            "slim.create_global_step()",
                            "Call"
                        ]
                    ]
                }
            },
            "SyncReplicasOptimizer_535": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "opt": {
                    "value": "optimizer",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.train.AdadeltaOptimizer(learning_rate, rho=FLAGS.adadelta_rho, epsilon=FLAGS.opt_epsilon)",
                            "Call"
                        ],
                        [
                            "tf.train.AdagradOptimizer(learning_rate, initial_accumulator_value=FLAGS.adagrad_initial_accumulator_value)",
                            "Call"
                        ],
                        [
                            "tf.train.AdamOptimizer(learning_rate, beta1=FLAGS.adam_beta1, beta2=FLAGS.adam_beta2, epsilon=FLAGS.opt_epsilon)",
                            "Call"
                        ],
                        [
                            "tf.train.FtrlOptimizer(learning_rate, learning_rate_power=FLAGS.ftrl_learning_rate_power, initial_accumulator_value=FLAGS.ftrl_initial_accumulator_value, l1_regularization_strength=FLAGS.ftrl_l1, l2_regularization_strength=FLAGS.ftrl_l2)",
                            "Call"
                        ],
                        [
                            "tf.train.MomentumOptimizer(learning_rate, momentum=FLAGS.momentum, name='Momentum')",
                            "Call"
                        ],
                        [
                            "tf.train.RMSPropOptimizer(learning_rate, decay=FLAGS.rmsprop_decay, momentum=FLAGS.rmsprop_momentum, epsilon=FLAGS.opt_epsilon)",
                            "Call"
                        ],
                        [
                            "tf.train.GradientDescentOptimizer(learning_rate)",
                            "Call"
                        ],
                        [
                            "_configure_optimizer(learning_rate)",
                            "Call"
                        ],
                        [
                            "tf.train.SyncReplicasOptimizer(opt=optimizer, replicas_to_aggregate=FLAGS.replicas_to_aggregate, total_num_replicas=FLAGS.worker_replicas, variable_averages=variable_averages, variables_to_average=moving_average_variables)",
                            "Call"
                        ]
                    ]
                },
                "replicas_to_aggregate": {
                    "value": "FLAGS.replicas_to_aggregate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "total_num_replicas": {
                    "value": "FLAGS.worker_replicas",
                    "type": "Attribute",
                    "possible_values": []
                },
                "variable_averages": {
                    "value": "variable_averages",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.train.ExponentialMovingAverage(FLAGS.moving_average_decay, global_step)",
                            "Call"
                        ]
                    ]
                },
                "variables_to_average": {
                    "value": "moving_average_variables",
                    "type": "Name",
                    "possible_values": [
                        [
                            "slim.get_model_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "identity_563": {
                "variable": {
                    "value": "train_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "total_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "train_op",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_265": {
                "value": {
                    "value": "FLAGS.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "fixed_learning_rate",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdamOptimizer_301": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_configure_learning_rate(dataset.num_samples, global_step)",
                            "Call"
                        ]
                    ]
                },
                "beta1": {
                    "value": "FLAGS.adam_beta1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "beta2": {
                    "value": "FLAGS.adam_beta2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "FLAGS.opt_epsilon",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_413": {
                "device_name": {
                    "value": "deploy_config.variables_device()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_442": {
                "device_name": {
                    "value": "deploy_config.inputs_device()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_collection_486": {
                "key": {
                    "value": "tf.GraphKeys.SUMMARIES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_527": {
                "device_name": {
                    "value": "deploy_config.optimizer_device()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_554": {
                "name": {
                    "value": "total_loss",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "total_loss",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "control_dependencies_562": {
                "control_inputs": {
                    "value": "[update_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_collection_567": {
                "key": {
                    "value": "tf.GraphKeys.SUMMARIES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "first_clone_scope",
                    "type": "Name",
                    "possible_values": [
                        [
                            "deploy_config.clone_scope(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "polynomial_decay_267": {
                "learning_rate": {
                    "value": "FLAGS.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "global_step": {
                    "value": "global_step",
                    "type": "Name",
                    "possible_values": [
                        [
                            "slim.create_global_step()",
                            "Call"
                        ]
                    ]
                },
                "decay_steps": {
                    "value": "decay_steps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(num_samples_per_epoch * FLAGS.num_epochs_per_decay / FLAGS.batch_size)",
                            "Call"
                        ],
                        [
                            "decay_steps / FLAGS.replicas_to_aggregate",
                            "BinOp"
                        ]
                    ]
                },
                "end_learning_rate": {
                    "value": "FLAGS.end_learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "power": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "cycle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "polynomial_decay_learning_rate",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "FtrlOptimizer_307": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_configure_learning_rate(dataset.num_samples, global_step)",
                            "Call"
                        ]
                    ]
                },
                "learning_rate_power": {
                    "value": "FLAGS.ftrl_learning_rate_power",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_accumulator_value": {
                    "value": "FLAGS.ftrl_initial_accumulator_value",
                    "type": "Attribute",
                    "possible_values": []
                },
                "l1_regularization_strength": {
                    "value": "FLAGS.ftrl_l1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "l2_regularization_strength": {
                    "value": "FLAGS.ftrl_l2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "histogram_498": {
                "name": {
                    "value": "'activations/' + end_point",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "scalar_499": {
                "name": {
                    "value": "'sparsity/' + end_point",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.nn.zero_fraction(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_504": {
                "name": {
                    "value": "'losses/%s' % loss.op.name",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.LOSSES, first_clone_scope)",
                            "Call"
                        ]
                    ]
                }
            },
            "histogram_508": {
                "name": {
                    "value": "variable.op.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "variable",
                    "type": "Name",
                    "possible_values": [
                        [
                            "slim.get_model_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_530": {
                "name": {
                    "value": "learning_rate",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "learning_rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_configure_learning_rate(dataset.num_samples, global_step)",
                            "Call"
                        ]
                    ]
                }
            },
            "MomentumOptimizer_314": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_configure_learning_rate(dataset.num_samples, global_step)",
                            "Call"
                        ]
                    ]
                },
                "momentum": {
                    "value": "FLAGS.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "Momentum",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zero_fraction_500": {
                "value": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "end_points[end_point]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "RMSPropOptimizer_319": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_configure_learning_rate(dataset.num_samples, global_step)",
                            "Call"
                        ]
                    ]
                },
                "decay": {
                    "value": "FLAGS.rmsprop_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "FLAGS.rmsprop_momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "FLAGS.opt_epsilon",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_325": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_configure_learning_rate(dataset.num_samples, global_step)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "archive/data_management/tfrecords/make_tfrecords_cis_trans.py": {
        "tensorflow": {
            "read_file_57": {
                "variable": {
                    "value": "image_contents",
                    "type": "Variable",
                    "possible_values": []
                },
                "filename": {
                    "value": "fn",
                    "type": "Name",
                    "possible_values": [
                        [
                            "im['filename']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "decode_jpeg_58": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "image_contents",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.read_file(fn)",
                            "Call"
                        ]
                    ]
                },
                "channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "initialize_all_tables_59": {
                "variable": {
                    "value": "init_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_60": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "data_management/databases/classification/make_classification_dataset.py": {
        "tensorflow": {
            "Graph_196": {
                "variable": {
                    "value": "graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_graph_365": {
                "variable": {
                    "value": "graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GraphDef_198": {
                "variable": {
                    "value": "od_graph_def",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "TFRecordWriter_66": {
                "variable": {
                    "value": "self.writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "path": {
                    "value": "self.output_file.format(self.next_shard_idx)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "GFile_199": {
                "name": {
                    "value": "graph_path",
                    "type": "Variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "rb",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "import_graph_def_202": {
                "graph_def": {
                    "value": "od_graph_def",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.GraphDef()",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Session_299": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "data_management/databases/remove_corrupted_images_from_database.py": {
        "tensorflow": {
            "ConfigProto_59": {
                "variable": {
                    "value": "config",
                    "type": "Variable",
                    "possible_values": []
                },
                "log_device_placement": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Session_67": {
                "config": {
                    "value": "config",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.ConfigProto(log_device_placement=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "FastGFile_81": {
                "variable": {
                    "value": "image_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "image_file",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(image_file_root, im['file_name'])",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "rb",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "decode_jpeg_82": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "image_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.gfile.FastGFile(image_file, 'rb').read()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "data_management/tfrecords/tools/inspect_tfrecords_batch.py": {
        "tensorflow": {
            "TFRecordReader_27": {
                "variable": {
                    "value": "reader",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "parse_single_example_36": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "serialized": {
                    "value": "serialized_example",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "feat_keys",
                    "type": "Name",
                    "possible_values": [
                        [
                            "{'image/encoded': tf.FixedLenFeature([], tf.string), 'image/filename': tf.FixedLenFeature([], tf.string), 'image/class/label': tf.FixedLenFeature([], tf.int64), 'image/class/text': tf.FixedLenFeature([], tf.string), 'image/height': tf.FixedLenFeature([], tf.int64), 'image/width': tf.FixedLenFeature([], tf.int64)}",
                            "Dict"
                        ]
                    ]
                }
            },
            "decode_raw_41": {
                "variable": {
                    "value": "output[image/encoded]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input_bytes": {
                    "value": "features['image/encoded']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_type": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "string_input_producer_48": {
                "variable": {
                    "value": "filename_queue",
                    "type": "Variable",
                    "possible_values": []
                },
                "string_tensor": {
                    "value": "[TFRECORDS_PATH]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_50": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "output['image/encoded']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[output['image/height'], output['image/width'], 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "initialize_all_variables_51": {
                "variable": {
                    "value": "init_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Coordinator_53": {
                "variable": {
                    "value": "coord",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "start_queue_runners_54": {
                "variable": {
                    "value": "threads",
                    "type": "Variable",
                    "possible_values": []
                },
                "coord": {
                    "value": "coord",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ]
                    ]
                }
            },
            "reset_default_graph_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FixedLenFeature_29": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_30": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_31": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_32": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_33": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_34": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "data_management/tfrecords/tools/iterate_tfrecords.py": {
        "tensorflow": {
            "parse_single_example_59": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "serialized": {
                    "value": "serialized_example",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "feature_map",
                    "type": "Name",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                }
            },
            "Coordinator_157": {
                "variable": {
                    "value": "coord",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "string_input_producer_146": {
                "variable": {
                    "value": "filename_queue",
                    "type": "Variable",
                    "possible_values": []
                },
                "string_tensor": {
                    "value": "tfrecords",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_epochs": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "TFRecordReader_152": {
                "variable": {
                    "value": "reader",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_144": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Session_158": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_160": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_160": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_161": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_161": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "start_queue_runners_162": {
                "sess": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "coord": {
                    "value": "coord",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ]
                    ]
                }
            },
            "FixedLenFeature_24": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_25": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_26": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_27": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_28": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_29": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_30": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_31": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_32": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_33": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_34": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_35": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "VarLenFeature_36": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "VarLenFeature_37": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "VarLenFeature_38": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "VarLenFeature_39": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "VarLenFeature_40": {
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "VarLenFeature_41": {
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "VarLenFeature_42": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "VarLenFeature_43": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "VarLenFeature_44": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "VarLenFeature_45": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "VarLenFeature_46": {
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "VarLenFeature_47": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_48": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "VarLenFeature_49": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "VarLenFeature_50": {
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "VarLenFeature_51": {
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "VarLenFeature_52": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "VarLenFeature_53": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "VarLenFeature_54": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "VarLenFeature_55": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "VarLenFeature_56": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "decode_jpeg_84": {
                "variable": {
                    "value": "parsed_features[feature_name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "contents": {
                    "value": "features[feature_key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "data_management/tfrecords/tools/stat_tfrecords.py": {
        "tensorflow": {
            "string_input_producer_19": {
                "variable": {
                    "value": "filename_queue",
                    "type": "Variable",
                    "possible_values": []
                },
                "string_tensor": {
                    "value": "tfrecords",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_epochs": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "TFRecordReader_25": {
                "variable": {
                    "value": "reader",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "parse_single_example_28": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "serialized": {
                    "value": "serialized_example",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "{'image/class/label': tf.FixedLenFeature([], tf.int64)}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "Coordinator_40": {
                "variable": {
                    "value": "coord",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "string_input_producer_93": {
                "variable": {
                    "value": "filename_queue",
                    "type": "Variable",
                    "possible_values": []
                },
                "string_tensor": {
                    "value": "tfrecords",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_epochs": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "TFRecordReader_99": {
                "variable": {
                    "value": "reader",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "parse_single_example_102": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "serialized": {
                    "value": "serialized_example",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "{'image/id': tf.FixedLenFeature([], tf.string), 'image/height': tf.FixedLenFeature([], tf.int64), 'image/width': tf.FixedLenFeature([], tf.int64), 'image/object/bbox/xmin': tf.VarLenFeature(dtype=tf.float32), 'image/object/bbox/ymin': tf.VarLenFeature(dtype=tf.float32), 'image/object/bbox/xmax': tf.VarLenFeature(dtype=tf.float32), 'image/object/bbox/ymax': tf.VarLenFeature(dtype=tf.float32), 'image/object/count': tf.FixedLenFeature([], tf.int64)}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "cast_116": {
                "variable": {
                    "value": "image_height",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "features['image/height']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_117": {
                "variable": {
                    "value": "image_width",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "features['image/width']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_121": {
                "variable": {
                    "value": "xmin",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features['image/object/bbox/xmin'].values",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_122": {
                "variable": {
                    "value": "ymin",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features['image/object/bbox/ymin'].values",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_123": {
                "variable": {
                    "value": "xmax",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features['image/object/bbox/xmax'].values",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_124": {
                "variable": {
                    "value": "ymax",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features['image/object/bbox/ymax'].values",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_126": {
                "variable": {
                    "value": "num_bboxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "features['image/object/count']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_128": {
                "variable": {
                    "value": "bboxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "[xmin, ymin, xmax, ymax]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_129": {
                "variable": {
                    "value": "bboxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "bboxes",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.concat(axis=0, values=[xmin, ymin, xmax, ymax])",
                            "Call"
                        ],
                        [
                            "tf.transpose(bboxes, [1, 0])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Coordinator_140": {
                "variable": {
                    "value": "coord",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "start_queue_runners_45": {
                "sess": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "coord": {
                    "value": "coord",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ],
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_141": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_143": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_143": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_144": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_144": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "start_queue_runners_145": {
                "sess": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "coord": {
                    "value": "coord",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ],
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ]
                    ]
                }
            },
            "FixedLenFeature_31": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_105": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_106": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_107": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "VarLenFeature_108": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "VarLenFeature_109": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "VarLenFeature_110": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "VarLenFeature_111": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_112": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "data_management/tfrecords/utils/create_tfrecords.py": {
        "tensorflow": {
            "disable_v2_behavior_36": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Example_135": {
                "variable": {
                    "value": "example",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.train.Features(feature={'image/height': _int64_feature(height), 'image/width': _int64_feature(width), 'image/colorspace': _bytes_feature(colorspace.encode()), 'image/channels': _int64_feature(channels), 'image/format': _bytes_feature(image_format.encode()), 'image/filename': _bytes_feature(filename), 'image/id': _bytes_feature(image_id), 'image/encoded': _bytes_feature(image_buffer), 'image/extra': _bytes_feature(extra_info), 'image/class/label': _int64_feature(class_label), 'image/class/text': _bytes_feature(class_text), 'image/class/conf': _float_feature(class_conf), 'image/object/bbox/xmin': _float_feature(xmin), 'image/object/bbox/xmax': _float_feature(xmax), 'image/object/bbox/ymin': _float_feature(ymin), 'image/object/bbox/ymax': _float_feature(ymax), 'image/object/bbox/label': _int64_feature(bbox_labels), 'image/object/bbox/text': _bytes_feature(bbox_text), 'image/object/bbox/conf': _float_feature(bbox_label_confs), 'image/object/bbox/score': _float_feature(bbox_scores), 'image/object/parts/x': _float_feature(parts_x), 'image/object/parts/y': _float_feature(parts_y), 'image/object/parts/v': _int64_feature(parts_v), 'image/object/parts/score': _float_feature(parts_s), 'image/object/count': _int64_feature(object_count), 'image/object/area': _float_feature(object_areas), 'image/object/id': _bytes_feature(object_ids), 'image/source_id': _bytes_feature(image_id), 'image/key/sha256': _bytes_feature(key), 'image/object/class/label': _int64_feature(bbox_labels), 'image/object/class/text': _bytes_feature(bbox_text), 'image/object/is_crowd': _int64_feature(is_crowd)})",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "FastGFile_228": {
                "variable": {
                    "value": "image_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "filename",
                    "type": "Call",
                    "possible_values": [
                        [
                            "str(image_example['filename']).encode()",
                            "Call"
                        ],
                        [
                            "str(image_example['filename'])",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "rb",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Coordinator_394": {
                "variable": {
                    "value": "coord",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Feature_43": {
                "int64_list": {
                    "value": "tf.train.Int64List(value=value)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_50": {
                "float_list": {
                    "value": "tf.train.FloatList(value=value)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_57": {
                "bytes_list": {
                    "value": "tf.train.BytesList(value=value)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Session_179": {
                "variable": {
                    "value": "self._sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_182": {
                "variable": {
                    "value": "self._png_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "decode_png_183": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "self._png_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "encode_jpeg_184": {
                "variable": {
                    "value": "self._png_to_jpeg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "Call",
                    "possible_values": [
                        [
                            "coder.decode_jpeg(image_data)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_png(self._png_ph, channels=3)",
                            "Call"
                        ],
                        [
                            "self._sess.run(self._decode_jpeg, feed_dict={self._decode_jpeg_ph: image_data})",
                            "Call"
                        ]
                    ]
                },
                "format": {
                    "value": "rgb",
                    "type": "Constant",
                    "possible_values": []
                },
                "quality": {
                    "value": "100",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_188": {
                "variable": {
                    "value": "self._decode_jpeg_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "decode_jpeg_189": {
                "variable": {
                    "value": "self._decode_jpeg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "contents": {
                    "value": "self._decode_jpeg_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "TFRecordWriter_281": {
                "variable": {
                    "value": "writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "path": {
                    "value": "output_file",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(output_directory, output_filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "Int64List_43": {
                "value": {
                    "value": "value",
                    "type": "List",
                    "possible_values": [
                        [
                            "[value]",
                            "List"
                        ],
                        [
                            "[value]",
                            "List"
                        ],
                        [
                            "[value]",
                            "List"
                        ]
                    ]
                }
            },
            "FloatList_50": {
                "value": {
                    "value": "value",
                    "type": "List",
                    "possible_values": [
                        [
                            "[value]",
                            "List"
                        ],
                        [
                            "[value]",
                            "List"
                        ],
                        [
                            "[value]",
                            "List"
                        ]
                    ]
                }
            },
            "BytesList_57": {
                "value": {
                    "value": "value",
                    "type": "List",
                    "possible_values": [
                        [
                            "[value]",
                            "List"
                        ],
                        [
                            "[value]",
                            "List"
                        ],
                        [
                            "[value]",
                            "List"
                        ]
                    ]
                }
            },
            "Features_135": {
                "feature": {
                    "value": "{'image/height': _int64_feature(height), 'image/width': _int64_feature(width), 'image/colorspace': _bytes_feature(colorspace.encode()), 'image/channels': _int64_feature(channels), 'image/format': _bytes_feature(image_format.encode()), 'image/filename': _bytes_feature(filename), 'image/id': _bytes_feature(image_id), 'image/encoded': _bytes_feature(image_buffer), 'image/extra': _bytes_feature(extra_info), 'image/class/label': _int64_feature(class_label), 'image/class/text': _bytes_feature(class_text), 'image/class/conf': _float_feature(class_conf), 'image/object/bbox/xmin': _float_feature(xmin), 'image/object/bbox/xmax': _float_feature(xmax), 'image/object/bbox/ymin': _float_feature(ymin), 'image/object/bbox/ymax': _float_feature(ymax), 'image/object/bbox/label': _int64_feature(bbox_labels), 'image/object/bbox/text': _bytes_feature(bbox_text), 'image/object/bbox/conf': _float_feature(bbox_label_confs), 'image/object/bbox/score': _float_feature(bbox_scores), 'image/object/parts/x': _float_feature(parts_x), 'image/object/parts/y': _float_feature(parts_y), 'image/object/parts/v': _int64_feature(parts_v), 'image/object/parts/score': _float_feature(parts_s), 'image/object/count': _int64_feature(object_count), 'image/object/area': _float_feature(object_areas), 'image/object/id': _bytes_feature(object_ids), 'image/source_id': _bytes_feature(image_id), 'image/key/sha256': _bytes_feature(key), 'image/object/class/label': _int64_feature(bbox_labels), 'image/object/class/text': _bytes_feature(bbox_text), 'image/object/is_crowd': _int64_feature(is_crowd)}",
                    "type": "Dict",
                    "possible_values": []
                }
            }
        }
    },
    "demo/model.py": {
        "tensorflow": {
            "Graph_23": {
                "variable": {
                    "value": "self.detection_graph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GraphDef_25": {
                "variable": {
                    "value": "od_graph_def",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GFile_26": {
                "name": {
                    "value": "checkpoint",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'checkpoint/frozen_inference_graph.pb'",
                            "Constant"
                        ]
                    ]
                },
                "mode": {
                    "value": "rb",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "import_graph_def_29": {
                "graph_def": {
                    "value": "od_graph_def",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.GraphDef()",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Session_34": {
                "graph": {
                    "value": "self.detection_graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "demo/run_tf_detector.py": {
        "tensorflow": {
            "Graph_39": {
                "variable": {
                    "value": "detection_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GraphDef_41": {
                "variable": {
                    "value": "od_graph_def",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GFile_42": {
                "name": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "rb",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "import_graph_def_45": {
                "graph_def": {
                    "value": "od_graph_def",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.GraphDef()",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Session_55": {
                "graph": {
                    "value": "detection_graph",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.Graph()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "detection/detector_training/model_main_tf2.py": {
        "tensorflow": {
            "set_soft_device_placement_78": {
                "enabled": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "run_114": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "TPUClusterResolver_94": {
                "variable": {
                    "value": "resolver",
                    "type": "Variable",
                    "possible_values": []
                },
                "tpu": {
                    "value": "FLAGS.tpu_name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TPUStrategy_98": {
                "variable": {
                    "value": "strategy",
                    "type": "Variable",
                    "possible_values": []
                },
                "tpu_cluster_resolver": {
                    "value": "resolver",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.distribute.cluster_resolver.TPUClusterResolver(FLAGS.tpu_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "experimental_connect_to_cluster_96": {
                "cluster_spec_or_resolver": {
                    "value": "resolver",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.distribute.cluster_resolver.TPUClusterResolver(FLAGS.tpu_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "initialize_tpu_system_97": {
                "enable_coordination_service": {
                    "value": "resolver",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.distribute.cluster_resolver.TPUClusterResolver(FLAGS.tpu_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "MultiWorkerMirroredStrategy_100": {
                "variable": {
                    "value": "strategy",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MirroredStrategy_102": {
                "variable": {
                    "value": "strategy",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "detection/run_detector.py": {
        "tensorflow": {
            "is_gpu_available_214": {
                "variable": {
                    "value": "gpu_available",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        },
        "torch": {
            "is_available_220": {
                "variable": {
                    "value": "gpu_available",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_221": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "detection/tf_detector.py": {
        "tensorflow": {
            "is_gpu_available_14": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_32": {
                "variable": {
                    "value": "self.tf_session",
                    "type": "Attribute",
                    "possible_values": []
                },
                "graph": {
                    "value": "detection_graph",
                    "type": "Call",
                    "possible_values": [
                        [
                            "TFDetector.__load_model(model_path)",
                            "Call"
                        ],
                        [
                            "tf.Graph()",
                            "Call"
                        ]
                    ]
                }
            },
            "Graph_91": {
                "variable": {
                    "value": "detection_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GraphDef_93": {
                "variable": {
                    "value": "od_graph_def",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GFile_94": {
                "name": {
                    "value": "model_path",
                    "type": "Variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "rb",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "import_graph_def_97": {
                "graph_def": {
                    "value": "od_graph_def",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.GraphDef()",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "research/active_learning/archive/make_active_learning_classification_dataset.py": {
        "tensorflow": {
            "Graph_77": {
                "variable": {
                    "value": "detection_graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GraphDef_79": {
                "variable": {
                    "value": "od_graph_def",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_graph_92": {
                "variable": {
                    "value": "ops",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_graph_115": {
                "variable": {
                    "value": "image_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GFile_80": {
                "name": {
                    "value": "PATH_TO_FROZEN_GRAPH",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.frozen_graph",
                            "Attribute"
                        ]
                    ]
                },
                "mode": {
                    "value": "rb",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "import_graph_def_83": {
                "graph_def": {
                    "value": "od_graph_def",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.GraphDef()",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Session_90": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "squeeze_102": {
                "variable": {
                    "value": "detection_boxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor_dict['detection_boxes']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_103": {
                "variable": {
                    "value": "detection_masks",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor_dict['detection_masks']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_105": {
                "variable": {
                    "value": "real_num_detection",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tensor_dict['num_detections'][0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "slice_106": {
                "variable": {
                    "value": "detection_boxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "detection_boigxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[real_num_detection, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_107": {
                "variable": {
                    "value": "detection_masks",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "detection_masks",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.squeeze(tensor_dict['detection_masks'], [0])",
                            "Call"
                        ],
                        [
                            "tf.slice(detection_masks, [0, 0, 0], [real_num_detection, -1, -1])",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[real_num_detection, -1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_110": {
                "variable": {
                    "value": "detection_masks_reframed",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.greater(detection_masks_reframed, 0.5)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_113": {
                "variable": {
                    "value": "tensor_dict[detection_masks]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "detection_masks_reframed",
                    "type": "Call",
                    "possible_values": [
                        [
                            "utils_ops.reframe_box_masks_to_image_masks(detection_masks, detection_boxes, image.shape[0], image.shape[1])",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.greater(detection_masks_reframed, 0.5), tf.uint8)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_default_graph_98": {
                "variable": {
                    "value": "tensor_dict[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "greater_111": {
                "x": {
                    "value": "detection_masks_reframed",
                    "type": "Call",
                    "possible_values": [
                        [
                            "utils_ops.reframe_box_masks_to_image_masks(detection_masks, detection_boxes, image.shape[0], image.shape[1])",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.greater(detection_masks_reframed, 0.5), tf.uint8)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "classification/efficientnet/model.py": {
        "torch": {
            "BatchNorm2d_74": {
                "variable": {
                    "value": "self._bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "oup",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._block_args.input_filters * self._block_args.expand_ratio",
                            "BinOp"
                        ]
                    ]
                },
                "momentum": {
                    "value": "self._bn_mom",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "self._bn_eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm2d_88": {
                "variable": {
                    "value": "self._bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "final_oup",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._block_args.output_filters",
                            "Attribute"
                        ]
                    ]
                },
                "momentum": {
                    "value": "self._bn_mom",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "self._bn_eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm2d_184": {
                "variable": {
                    "value": "self._bn0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Call",
                    "possible_values": [
                        [
                            "round_filters(32, self._global_params)",
                            "Call"
                        ],
                        [
                            "round_filters(1280, self._global_params)",
                            "Call"
                        ],
                        [
                            "round_filters(32, self._global_params)",
                            "Call"
                        ]
                    ]
                },
                "momentum": {
                    "value": "bn_mom",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1 - self._global_params.batch_norm_momentum",
                            "BinOp"
                        ]
                    ]
                },
                "eps": {
                    "value": "bn_eps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._global_params.batch_norm_epsilon",
                            "Attribute"
                        ]
                    ]
                }
            },
            "ModuleList_188": {
                "variable": {
                    "value": "self._blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "BatchNorm2d_212": {
                "variable": {
                    "value": "self._bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Call",
                    "possible_values": [
                        [
                            "round_filters(32, self._global_params)",
                            "Call"
                        ],
                        [
                            "round_filters(1280, self._global_params)",
                            "Call"
                        ],
                        [
                            "round_filters(32, self._global_params)",
                            "Call"
                        ]
                    ]
                },
                "momentum": {
                    "value": "bn_mom",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1 - self._global_params.batch_norm_momentum",
                            "BinOp"
                        ]
                    ]
                },
                "eps": {
                    "value": "bn_eps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._global_params.batch_norm_epsilon",
                            "Attribute"
                        ]
                    ]
                }
            },
            "AdaptiveAvgPool2d_215": {
                "variable": {
                    "value": "self._avg_pooling",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_216": {
                "variable": {
                    "value": "self._dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self._global_params.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_217": {
                "variable": {
                    "value": "self._fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "out_channels",
                    "type": "Call",
                    "possible_values": [
                        [
                            "round_filters(32, self._global_params)",
                            "Call"
                        ],
                        [
                            "round_filters(1280, self._global_params)",
                            "Call"
                        ],
                        [
                            "round_filters(32, self._global_params)",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self._global_params.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm2d_64": {
                "variable": {
                    "value": "self._bn0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "oup",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._block_args.input_filters * self._block_args.expand_ratio",
                            "BinOp"
                        ]
                    ]
                },
                "momentum": {
                    "value": "self._bn_mom",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "self._bn_eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_115": {
                "variable": {
                    "value": "x_squeezed",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "self._expand_conv(inputs)",
                            "Call"
                        ],
                        [
                            "self._bn0(x)",
                            "Call"
                        ],
                        [
                            "self._swish(x)",
                            "Call"
                        ],
                        [
                            "self._depthwise_conv(x)",
                            "Call"
                        ],
                        [
                            "self._bn1(x)",
                            "Call"
                        ],
                        [
                            "self._swish(x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x_squeezed) * x",
                            "BinOp"
                        ],
                        [
                            "self._project_conv(x)",
                            "Call"
                        ],
                        [
                            "self._bn2(x)",
                            "Call"
                        ],
                        [
                            "drop_connect(x, p=drop_connect_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "x + inputs",
                            "BinOp"
                        ],
                        [
                            "self._swish(self._bn0(self._conv_stem(inputs)))",
                            "Call"
                        ],
                        [
                            "self._swish(self._bn1(self._conv_head(x)))",
                            "Call"
                        ],
                        [
                            "block(x, drop_connect_rate=drop_connect_rate)",
                            "Call"
                        ],
                        [
                            "self._swish(self._bn0(self._conv_stem(inputs)))",
                            "Call"
                        ],
                        [
                            "self._swish(self._bn1(self._conv_head(x)))",
                            "Call"
                        ],
                        [
                            "block(x, drop_connect_rate=drop_connect_rate)",
                            "Call"
                        ],
                        [
                            "self.extract_features(inputs)",
                            "Call"
                        ],
                        [
                            "self._avg_pooling(x)",
                            "Call"
                        ],
                        [
                            "x.flatten(start_dim=1)",
                            "Call"
                        ],
                        [
                            "self._dropout(x)",
                            "Call"
                        ],
                        [
                            "self._fc(x)",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_119": {
                "input": {
                    "value": "x_squeezed",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.adaptive_avg_pool2d(x, 1)",
                            "Call"
                        ],
                        [
                            "self._se_reduce(x_squeezed)",
                            "Call"
                        ],
                        [
                            "self._swish(x_squeezed)",
                            "Call"
                        ],
                        [
                            "self._se_expand(x_squeezed)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "classification/efficientnet/utils.py": {
        "torch": {
            "floor_147": {
                "variable": {
                    "value": "binary_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "random_tensor",
                    "type": "Name",
                    "possible_values": [
                        [
                            "keep_prob",
                            "Name"
                        ],
                        [
                            "random_tensor + torch.rand([batch_size, 1, 1, 1], dtype=inputs.dtype, device=inputs.device)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sigmoid_71": {
                "variable": {
                    "value": "sigmoid_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "i",
                    "type": "Name",
                    "possible_values": [
                        [
                            "ctx.saved_tensors[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "rand_146": {
                "*size": {
                    "value": "[batch_size, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "inputs.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "inputs.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_271": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.pad(x, [pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2])",
                            "Call"
                        ],
                        [
                            "self.static_padding(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.weight, self.bias, self.stride, self.padding, self.dilation, self.groups)",
                            "Call"
                        ],
                        [
                            "F.pad(x, [pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2])",
                            "Call"
                        ],
                        [
                            "self.static_padding(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, self.kernel_size, self.stride, self.padding, self.dilation, self.ceil_mode, self.return_indices)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_pool2d_340": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.pad(x, [pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2])",
                            "Call"
                        ],
                        [
                            "self.static_padding(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.weight, self.bias, self.stride, self.padding, self.dilation, self.groups)",
                            "Call"
                        ],
                        [
                            "F.pad(x, [pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2])",
                            "Call"
                        ],
                        [
                            "self.static_padding(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, self.kernel_size, self.stride, self.padding, self.dilation, self.ceil_mode, self.return_indices)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "self.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "self.ceil_mode",
                    "type": "Attribute",
                    "possible_values": []
                },
                "return_indices": {
                    "value": "self.return_indices",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_593": {
                "variable": {
                    "value": "state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "weights_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "pad_240": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.pad(x, [pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2])",
                            "Call"
                        ],
                        [
                            "self.static_padding(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.weight, self.bias, self.stride, self.padding, self.dilation, self.groups)",
                            "Call"
                        ],
                        [
                            "F.pad(x, [pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2])",
                            "Call"
                        ],
                        [
                            "self.static_padding(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, self.kernel_size, self.stride, self.padding, self.dilation, self.ceil_mode, self.return_indices)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "[pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_241": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.pad(x, [pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2])",
                            "Call"
                        ],
                        [
                            "self.static_padding(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.weight, self.bias, self.stride, self.padding, self.dilation, self.groups)",
                            "Call"
                        ],
                        [
                            "F.pad(x, [pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2])",
                            "Call"
                        ],
                        [
                            "self.static_padding(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, self.kernel_size, self.stride, self.padding, self.dilation, self.ceil_mode, self.return_indices)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ZeroPad2d_264": {
                "variable": {
                    "value": "self.static_padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "(pad_w - pad_w // 2, pad_w - pad_w // 2, pad_h - pad_h // 2, pad_h - pad_h // 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Identity_267": {
                "variable": {
                    "value": "self.static_padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pad_310": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.pad(x, [pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2])",
                            "Call"
                        ],
                        [
                            "self.static_padding(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.weight, self.bias, self.stride, self.padding, self.dilation, self.groups)",
                            "Call"
                        ],
                        [
                            "F.pad(x, [pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2])",
                            "Call"
                        ],
                        [
                            "self.static_padding(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, self.kernel_size, self.stride, self.padding, self.dilation, self.ceil_mode, self.return_indices)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "[pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "max_pool2d_311": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.pad(x, [pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2])",
                            "Call"
                        ],
                        [
                            "self.static_padding(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.weight, self.bias, self.stride, self.padding, self.dilation, self.groups)",
                            "Call"
                        ],
                        [
                            "F.pad(x, [pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2])",
                            "Call"
                        ],
                        [
                            "self.static_padding(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, self.kernel_size, self.stride, self.padding, self.dilation, self.ceil_mode, self.return_indices)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "self.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "self.ceil_mode",
                    "type": "Attribute",
                    "possible_values": []
                },
                "return_indices": {
                    "value": "self.return_indices",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ZeroPad2d_334": {
                "variable": {
                    "value": "self.static_padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "(pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Identity_336": {
                "variable": {
                    "value": "self.static_padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_57": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.pad(x, [pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2])",
                            "Call"
                        ],
                        [
                            "self.static_padding(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.weight, self.bias, self.stride, self.padding, self.dilation, self.groups)",
                            "Call"
                        ],
                        [
                            "F.pad(x, [pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2])",
                            "Call"
                        ],
                        [
                            "self.static_padding(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, self.kernel_size, self.stride, self.padding, self.dilation, self.ceil_mode, self.return_indices)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_64": {
                "input": {
                    "value": "i",
                    "type": "Name",
                    "possible_values": [
                        [
                            "ctx.saved_tensors[0]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "classification/run_classifier.py": {
        "torch": {
            "DataLoader_121": {
                "variable": {
                    "value": "loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "SimpleDataset(img_files=crop_files, images_dir=cropped_images_dir, transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "Variable",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_157": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "no_grad_186": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_190": {
                "variable": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model(inputs)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "detection/pytorch_detector.py": {
        "torch": {
            "load_44": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_pt_path",
                    "type": "Variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "device_34": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_78": {
                "variable": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img",
                    "type": "Call",
                    "possible_values": [
                        [
                            "letterbox(img_original, new_shape=PTDetector.IMAGE_SIZE, stride=PTDetector.STRIDE, auto=True)[0]",
                            "Subscript"
                        ],
                        [
                            "img.transpose((2, 0, 1))",
                            "Call"
                        ],
                        [
                            "np.ascontiguousarray(img)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(img)",
                            "Call"
                        ],
                        [
                            "img.to(self.device)",
                            "Call"
                        ],
                        [
                            "img.float()",
                            "Call"
                        ],
                        [
                            "img / 255",
                            "BinOp"
                        ],
                        [
                            "torch.unsqueeze(img, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "unsqueeze_84": {
                "variable": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "Call",
                    "possible_values": [
                        [
                            "letterbox(img_original, new_shape=PTDetector.IMAGE_SIZE, stride=PTDetector.STRIDE, auto=True)[0]",
                            "Subscript"
                        ],
                        [
                            "img.transpose((2, 0, 1))",
                            "Call"
                        ],
                        [
                            "np.ascontiguousarray(img)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(img)",
                            "Call"
                        ],
                        [
                            "img.to(self.device)",
                            "Call"
                        ],
                        [
                            "img.float()",
                            "Call"
                        ],
                        [
                            "img / 255",
                            "BinOp"
                        ],
                        [
                            "torch.unsqueeze(img, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_92": {
                "data": {
                    "value": "img_original.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_101": {
                "data": {
                    "value": "xyxy",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "research/active_learning/DL/losses.py": {
        "torch": {
            "log_softmax_22": {
                "variable": {
                    "value": "logpt",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Call",
                    "possible_values": [
                        [
                            "input.view(input.size(0), input.size(1), -1)",
                            "Call"
                        ],
                        [
                            "input.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "input.contiguous().view(-1, input.size(2))",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_51": {
                "variable": {
                    "value": "self.centers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(self.num_classes, self.feat_dim).cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_53": {
                "variable": {
                    "value": "self.nll",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_66": {
                "variable": {
                    "value": "classes",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_76": {
                "variable": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "dist",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(dist)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_100": {
                "variable": {
                    "value": "negative_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.margin - (embeddings[negative_pairs[:, 0]] - embeddings[negative_pairs[:, 1]]).pow(2).sum(1).sqrt()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pow_100": {
                "variable": {
                    "value": "negative_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_103": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[positive_loss, negative_loss]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_133": {
                "variable": {
                    "value": "losses",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ap_distances - an_distances + self.margin",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Tensor_11": {
                "variable": {
                    "value": "self.alpha",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_12": {
                "variable": {
                    "value": "self.alpha",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_51": {
                "*size": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.feat_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pow_62": {
                "input": {
                    "value": "embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_62": {
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pow_63": {
                "input": {
                    "value": "self.centers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_63": {
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "t_63": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "research/active_learning/DL/networks.py": {
        "torch": {
            "Linear_50": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "feat_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "relu_54": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.embedding(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_62": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "feat_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_63": {
                "variable": {
                    "value": "self.fc12",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm1d_64": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_67": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "relu_70": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_71": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.relu(embed)",
                            "Call"
                        ],
                        [
                            "self.classifier(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=0.2, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.fc12(x)))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "self.embedding_net(x)",
                            "Call"
                        ],
                        [
                            "self.classification_net(x)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_72": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.fc12(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_20": {
                "variable": {
                    "value": "self.inner_model.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_feats",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "self.inner_model.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "self.inner_model.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "self.inner_model.classifier.in_features",
                            "Attribute"
                        ],
                        [
                            "self.inner_model.classifier._modules['6'].in_features",
                            "Attribute"
                        ],
                        [
                            "self.inner_model.classifier._modules['6'].in_features",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "feat_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_26": {
                "variable": {
                    "value": "self.inner_model.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_feats",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "self.inner_model.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "self.inner_model.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "self.inner_model.classifier.in_features",
                            "Attribute"
                        ],
                        [
                            "self.inner_model.classifier._modules['6'].in_features",
                            "Attribute"
                        ],
                        [
                            "self.inner_model.classifier._modules['6'].in_features",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "feat_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_29": {
                "variable": {
                    "value": "self.inner_model.classifier._modules[6]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_feats",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "self.inner_model.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "self.inner_model.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "self.inner_model.classifier.in_features",
                            "Attribute"
                        ],
                        [
                            "self.inner_model.classifier._modules['6'].in_features",
                            "Attribute"
                        ],
                        [
                            "self.inner_model.classifier._modules['6'].in_features",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "feat_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_32": {
                "variable": {
                    "value": "self.inner_model.classifier._modules[6]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_feats",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "self.inner_model.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "self.inner_model.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "self.inner_model.classifier.in_features",
                            "Attribute"
                        ],
                        [
                            "self.inner_model.classifier._modules['6'].in_features",
                            "Attribute"
                        ],
                        [
                            "self.inner_model.classifier._modules['6'].in_features",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "feat_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_23": {
                "variable": {
                    "value": "self.inner_model.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_feats",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "self.inner_model.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "self.inner_model.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "self.inner_model.classifier.in_features",
                            "Attribute"
                        ],
                        [
                            "self.inner_model.classifier._modules['6'].in_features",
                            "Attribute"
                        ],
                        [
                            "self.inner_model.classifier._modules['6'].in_features",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "feat_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "normalize_42": {
                "input": {
                    "value": "self.inner_model.forward(x)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "research/active_learning/DL/sqlite_data_loader.py": {
        "torch": {
            "DataLoader_209": {
                "dataset": {
                    "value": "self",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_sampler": {
                    "value": "train_batch_sampler",
                    "type": "Name",
                    "possible_values": [
                        [
                            "BalancedBatchSampler(self, n_classes=P, n_samples=K)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "self.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_216": {
                "dataset": {
                    "value": "self",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "128 if self.is_training else 256",
                            "IfExp"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "self.is_training",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "research/active_learning/archive/data_loader.py": {
        "torch": {
            "DataLoader_95": {
                "dataset": {
                    "value": "self",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_sampler": {
                    "value": "train_batch_sampler",
                    "type": "Name",
                    "possible_values": [
                        [
                            "BalancedBatchSampler(self, n_classes=P, n_samples=K)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "self.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_98": {
                "dataset": {
                    "value": "self",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "self.shuffle",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "research/active_learning/archive/filebased_main.py": {
        "torch": {
            "SGD_148": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "Name",
                    "possible_values": [
                        [
                            "list(model.parameters()) + list(criterion.parameters())",
                            "BinOp"
                        ],
                        [
                            "model.parameters()",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataParallel_135": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "ClassificationNet(embedding_net, n_classes=num_classes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataParallel_139": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "embedding_net",
                    "type": "Name",
                    "possible_values": [
                        [
                            "EmbeddingNet(args.arch, args.feat_dim, args.pretrained)",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_98": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "research/active_learning/archive/sqlite_data_loader_bk.py": {
        "torch": {
            "DataLoader_122": {
                "dataset": {
                    "value": "self",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_sampler": {
                    "value": "train_batch_sampler",
                    "type": "Name",
                    "possible_values": [
                        [
                            "BalancedBatchSampler(self, n_classes=P, n_samples=K)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "self.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_127": {
                "dataset": {
                    "value": "self",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "128 if self.is_training else 256",
                            "IfExp"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "self.is_training",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "research/active_learning/deep_learning/active_learning_manager.py": {
        "torch": {
            "Adam_16": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0001",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "research/active_learning/deep_learning/data_loader.py": {
        "torch": {
            "Subset_104": {
                "variable": {
                    "value": "subset",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "sub_indices",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "DataLoader_108": {
                "dataset": {
                    "value": "self",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_sampler": {
                    "value": "train_batch_sampler",
                    "type": "Call",
                    "possible_values": [
                        [
                            "BalancedBatchSampler(subset, n_classes=P, n_samples=K)",
                            "Call"
                        ],
                        [
                            "BalancedBatchSampler(self, n_classes=P, n_samples=K)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "DataLoader_114": {
                "dataset": {
                    "value": "self",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "DataLoader_106": {
                "dataset": {
                    "value": "subset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Subset(self, sub_indices)",
                            "Call"
                        ]
                    ]
                },
                "batch_sampler": {
                    "value": "train_batch_sampler",
                    "type": "Call",
                    "possible_values": [
                        [
                            "BalancedBatchSampler(subset, n_classes=P, n_samples=K)",
                            "Call"
                        ],
                        [
                            "BalancedBatchSampler(self, n_classes=P, n_samples=K)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "DataLoader_113": {
                "dataset": {
                    "value": "Subset(self, sub_indices)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Subset_113": {
                "dataset": {
                    "value": "self",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "sub_indices",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "research/active_learning/deep_learning/losses.py": {
        "torch": {
            "relu_25": {
                "variable": {
                    "value": "negative_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.margin - (embeddings[negative_pairs[:, 0]] - embeddings[negative_pairs[:, 1]]).pow(2).sum(1).sqrt()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pow_25": {
                "variable": {
                    "value": "negative_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_28": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[positive_loss, negative_loss]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_52": {
                "variable": {
                    "value": "losses",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ap_distances - an_distances + self.margin",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "research/active_learning/deep_learning/networks.py": {
        "torch": {
            "Linear_44": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "feat_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "relu_48": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.embedding(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_15": {
                "variable": {
                    "value": "self.inner_model.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_feats",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "self.inner_model.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "self.inner_model.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "self.inner_model.classifier.in_features",
                            "Attribute"
                        ],
                        [
                            "self.inner_model.classifier._modules['6'].in_features",
                            "Attribute"
                        ],
                        [
                            "self.inner_model.classifier._modules['6'].in_features",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "feat_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_21": {
                "variable": {
                    "value": "self.inner_model.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_feats",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "self.inner_model.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "self.inner_model.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "self.inner_model.classifier.in_features",
                            "Attribute"
                        ],
                        [
                            "self.inner_model.classifier._modules['6'].in_features",
                            "Attribute"
                        ],
                        [
                            "self.inner_model.classifier._modules['6'].in_features",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "feat_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_24": {
                "variable": {
                    "value": "self.inner_model.classifier._modules[6]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_feats",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "self.inner_model.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "self.inner_model.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "self.inner_model.classifier.in_features",
                            "Attribute"
                        ],
                        [
                            "self.inner_model.classifier._modules['6'].in_features",
                            "Attribute"
                        ],
                        [
                            "self.inner_model.classifier._modules['6'].in_features",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "feat_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_27": {
                "variable": {
                    "value": "self.inner_model.classifier._modules[6]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_feats",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "self.inner_model.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "self.inner_model.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "self.inner_model.classifier.in_features",
                            "Attribute"
                        ],
                        [
                            "self.inner_model.classifier._modules['6'].in_features",
                            "Attribute"
                        ],
                        [
                            "self.inner_model.classifier._modules['6'].in_features",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "feat_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_18": {
                "variable": {
                    "value": "self.inner_model.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_feats",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "self.inner_model.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "self.inner_model.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "self.inner_model.classifier.in_features",
                            "Attribute"
                        ],
                        [
                            "self.inner_model.classifier._modules['6'].in_features",
                            "Attribute"
                        ],
                        [
                            "self.inner_model.classifier._modules['6'].in_features",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "feat_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "research/active_learning/experiments/visualize_feature_maps.py": {
        "torch": {
            "DataParallel_48": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "embedding_net",
                    "type": "Call",
                    "possible_values": [
                        [
                            "SoftmaxNet(checkpoint['arch'], checkpoint['feat_dim'], checkpoint['num_classes'], False)",
                            "Call"
                        ],
                        [
                            "NormalizedEmbeddingNet(checkpoint['arch'], checkpoint['feat_dim'], False)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "research/active_learning/main.py": {
        "torch": {
            "Adam_169": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "Call",
                    "possible_values": [
                        [
                            "list(model.parameters()) + list(criterion.parameters())",
                            "BinOp"
                        ],
                        [
                            "model.parameters()",
                            "Call"
                        ],
                        [
                            "model.parameters()",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_153": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "SoftmaxNet(args.arch, args.feat_dim, num_classes, use_pretrained=args.pretrained)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataParallel_161": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "NormalizedEmbeddingNet(args.arch, args.feat_dim, use_pretrained=args.pretrained)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_102": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_158": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "research/active_learning/train_embedding.py": {
        "torch": {
            "Adam_119": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_109": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "SoftmaxNet(args.arch, args.feat_dim, num_classes, use_pretrained=args.pretrained)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataParallel_112": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "NormalizedEmbeddingNet(args.arch, args.feat_dim, use_pretrained=args.pretrained)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_104": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "sandbox/torch_test.py": {
        "torch": {
            "is_available_2": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_4": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}