{
    "arima.py": {
        "sklearn": {
            "mean_squared_error_91": {
                "y_true": {
                    "value": "y_actual",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_actual",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_predicted",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_predicted",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mean_absolute_error_73": {
                "y_true": {
                    "value": "sequence",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(test, test_sequence)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "pred_sequence",
                    "type": "variable",
                    "possible_values": [
                        [
                            "results.predict(start=start_index, end=end_index, dynamic=False)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "main.py": {
        "torch": {
            "device_87": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "is_available_89": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_90": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "ml_builder.py": {
        "torch": {
            "DataLoader_63": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "NetCDFDataset(ds, test_split=test_split, validation_split=validation_split)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_64": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "NetCDFDataset(ds, test_split=test_split, validation_split=validation_split, is_validation=True)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_65": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "NetCDFDataset(ds, test_split=test_split, validation_split=validation_split, is_test=True)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "RMSprop_98": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_108": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_109": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_168": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "number * 10 + 1000",
                            "BinOp"
                        ],
                        [
                            "number * 10 + 1000",
                            "BinOp"
                        ]
                    ]
                }
            },
            "manual_seed_169": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "number * 10 + 1000",
                            "BinOp"
                        ],
                        [
                            "number * 10 + 1000",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "model/ablation/spatial_block.py": {
        "torch": {
            "ModuleList_10": {
                "variable": {
                    "value": "self.conv_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_11": {
                "variable": {
                    "value": "self.dropout_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_61": {
                "variable": {
                    "value": "self.conv_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_62": {
                "variable": {
                    "value": "self.dropout_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_24": {
                "*args": {
                    "value": "nn.Conv3d(in_channels, intermed_channels, kernel_size=spatial_kernel_size, padding=spatial_padding, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_31": {
                "p": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_71": {
                "*args": {
                    "value": "nn.Conv3d(in_channels, out_channels, kernel_size=spatial_kernel_size, padding=spatial_padding, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_78": {
                "p": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv3d_25": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "intermed_channels",
                            "variable"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "intermed_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "intermed_channels * 2",
                            "BinOp"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "spatial_kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, kernel_size[1], kernel_size[2]]",
                            "List"
                        ],
                        [
                            "[1, kernel_size[1], kernel_size[2]]",
                            "List"
                        ]
                    ]
                },
                "padding": {
                    "value": "spatial_padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0, spatial_padding_value, spatial_padding_value]",
                            "List"
                        ],
                        [
                            "[0, spatial_padding_value, spatial_padding_value]",
                            "List"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm3d_27": {
                "num_features": {
                    "value": "intermed_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "intermed_channels * 2",
                            "BinOp"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ]
                    ]
                }
            },
            "LeakyReLU_28": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_72": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "intermed_channels",
                            "variable"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "spatial_kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, kernel_size[1], kernel_size[2]]",
                            "List"
                        ],
                        [
                            "[1, kernel_size[1], kernel_size[2]]",
                            "List"
                        ]
                    ]
                },
                "padding": {
                    "value": "spatial_padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0, spatial_padding_value, spatial_padding_value]",
                            "List"
                        ],
                        [
                            "[0, spatial_padding_value, spatial_padding_value]",
                            "List"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm3d_74": {
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LeakyReLU_75": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "model/ablation/stconvs2s.py": {
        "torch": {
            "Conv3d_85": {
                "variable": {
                    "value": "self.conv_final",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "initial_in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size[1]",
                            "Subscript"
                        ],
                        [
                            "input_size[1]",
                            "Subscript"
                        ],
                        [
                            "input_size[1]",
                            "Subscript"
                        ],
                        [
                            "input_size[1]",
                            "Subscript"
                        ],
                        [
                            "input_size[1]",
                            "Subscript"
                        ],
                        [
                            "input_size[1]",
                            "Subscript"
                        ],
                        [
                            "input_size[1]",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Util.generate_list_from(kernel_size)",
                            "Call"
                        ],
                        [
                            "Util.generate_list_from(kernel_size)",
                            "Call"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size // 2",
                            "BinOp"
                        ],
                        [
                            "[temporal_padding_value, spatial_padding_value, spatial_padding_value]",
                            "List"
                        ],
                        [
                            "kernel_size // 2",
                            "BinOp"
                        ],
                        [
                            "kernel_size // 2",
                            "BinOp"
                        ],
                        [
                            "kernel_size // 2",
                            "BinOp"
                        ],
                        [
                            "[self.temporal_padding_value, spatial_padding_value, spatial_padding_value]",
                            "List"
                        ],
                        [
                            "[0, spatial_padding_value, spatial_padding_value]",
                            "List"
                        ]
                    ]
                }
            },
            "ModuleList_98": {
                "variable": {
                    "value": "self.conv3D_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv3d_113": {
                "variable": {
                    "value": "self.conv_final",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "initial_in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size[1]",
                            "Subscript"
                        ],
                        [
                            "input_size[1]",
                            "Subscript"
                        ],
                        [
                            "input_size[1]",
                            "Subscript"
                        ],
                        [
                            "input_size[1]",
                            "Subscript"
                        ],
                        [
                            "input_size[1]",
                            "Subscript"
                        ],
                        [
                            "input_size[1]",
                            "Subscript"
                        ],
                        [
                            "input_size[1]",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Util.generate_list_from(kernel_size)",
                            "Call"
                        ],
                        [
                            "Util.generate_list_from(kernel_size)",
                            "Call"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size // 2",
                            "BinOp"
                        ],
                        [
                            "[temporal_padding_value, spatial_padding_value, spatial_padding_value]",
                            "List"
                        ],
                        [
                            "kernel_size // 2",
                            "BinOp"
                        ],
                        [
                            "kernel_size // 2",
                            "BinOp"
                        ],
                        [
                            "kernel_size // 2",
                            "BinOp"
                        ],
                        [
                            "[self.temporal_padding_value, spatial_padding_value, spatial_padding_value]",
                            "List"
                        ],
                        [
                            "[0, spatial_padding_value, spatial_padding_value]",
                            "List"
                        ]
                    ]
                }
            },
            "flip_117": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "torch.flip(x, [2])",
                            "Call"
                        ],
                        [
                            "conv(x)",
                            "Call"
                        ],
                        [
                            "conv(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dims": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "flip_121": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "torch.flip(x, [2])",
                            "Call"
                        ],
                        [
                            "conv(x)",
                            "Call"
                        ],
                        [
                            "conv(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dims": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_130": {
                "variable": {
                    "value": "self.conv3D_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv3d_145": {
                "variable": {
                    "value": "self.conv_final",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "initial_in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size[1]",
                            "Subscript"
                        ],
                        [
                            "input_size[1]",
                            "Subscript"
                        ],
                        [
                            "input_size[1]",
                            "Subscript"
                        ],
                        [
                            "input_size[1]",
                            "Subscript"
                        ],
                        [
                            "input_size[1]",
                            "Subscript"
                        ],
                        [
                            "input_size[1]",
                            "Subscript"
                        ],
                        [
                            "input_size[1]",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Util.generate_list_from(kernel_size)",
                            "Call"
                        ],
                        [
                            "Util.generate_list_from(kernel_size)",
                            "Call"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size // 2",
                            "BinOp"
                        ],
                        [
                            "[temporal_padding_value, spatial_padding_value, spatial_padding_value]",
                            "List"
                        ],
                        [
                            "kernel_size // 2",
                            "BinOp"
                        ],
                        [
                            "kernel_size // 2",
                            "BinOp"
                        ],
                        [
                            "kernel_size // 2",
                            "BinOp"
                        ],
                        [
                            "[self.temporal_padding_value, spatial_padding_value, spatial_padding_value]",
                            "List"
                        ],
                        [
                            "[0, spatial_padding_value, spatial_padding_value]",
                            "List"
                        ]
                    ]
                }
            },
            "Sequential_170": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "temporal_block",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv3d_173": {
                "variable": {
                    "value": "self.conv_final",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "initial_in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size[1]",
                            "Subscript"
                        ],
                        [
                            "input_size[1]",
                            "Subscript"
                        ],
                        [
                            "input_size[1]",
                            "Subscript"
                        ],
                        [
                            "input_size[1]",
                            "Subscript"
                        ],
                        [
                            "input_size[1]",
                            "Subscript"
                        ],
                        [
                            "input_size[1]",
                            "Subscript"
                        ],
                        [
                            "input_size[1]",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Util.generate_list_from(kernel_size)",
                            "Call"
                        ],
                        [
                            "Util.generate_list_from(kernel_size)",
                            "Call"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size // 2",
                            "BinOp"
                        ],
                        [
                            "[temporal_padding_value, spatial_padding_value, spatial_padding_value]",
                            "List"
                        ],
                        [
                            "kernel_size // 2",
                            "BinOp"
                        ],
                        [
                            "kernel_size // 2",
                            "BinOp"
                        ],
                        [
                            "kernel_size // 2",
                            "BinOp"
                        ],
                        [
                            "[self.temporal_padding_value, spatial_padding_value, spatial_padding_value]",
                            "List"
                        ],
                        [
                            "[0, spatial_padding_value, spatial_padding_value]",
                            "List"
                        ]
                    ]
                }
            },
            "Sequential_196": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "spatial_block",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv3d_199": {
                "variable": {
                    "value": "self.conv_final",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "initial_in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size[1]",
                            "Subscript"
                        ],
                        [
                            "input_size[1]",
                            "Subscript"
                        ],
                        [
                            "input_size[1]",
                            "Subscript"
                        ],
                        [
                            "input_size[1]",
                            "Subscript"
                        ],
                        [
                            "input_size[1]",
                            "Subscript"
                        ],
                        [
                            "input_size[1]",
                            "Subscript"
                        ],
                        [
                            "input_size[1]",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Util.generate_list_from(kernel_size)",
                            "Call"
                        ],
                        [
                            "Util.generate_list_from(kernel_size)",
                            "Call"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size // 2",
                            "BinOp"
                        ],
                        [
                            "[temporal_padding_value, spatial_padding_value, spatial_padding_value]",
                            "List"
                        ],
                        [
                            "kernel_size // 2",
                            "BinOp"
                        ],
                        [
                            "kernel_size // 2",
                            "BinOp"
                        ],
                        [
                            "kernel_size // 2",
                            "BinOp"
                        ],
                        [
                            "[self.temporal_padding_value, spatial_padding_value, spatial_padding_value]",
                            "List"
                        ],
                        [
                            "[0, spatial_padding_value, spatial_padding_value]",
                            "List"
                        ]
                    ]
                }
            },
            "Conv3d_218": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "initial_in_channels",
                            "variable"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "initial_in_channels",
                            "variable"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "variable"
                        ],
                        [
                            "hidden_dim",
                            "variable"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Util.generate_list_from(kernel_size)",
                            "Call"
                        ],
                        [
                            "Util.generate_list_from(kernel_size)",
                            "Call"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size // 2",
                            "BinOp"
                        ],
                        [
                            "[temporal_padding_value, spatial_padding_value, spatial_padding_value]",
                            "List"
                        ],
                        [
                            "kernel_size // 2",
                            "BinOp"
                        ],
                        [
                            "kernel_size // 2",
                            "BinOp"
                        ],
                        [
                            "kernel_size // 2",
                            "BinOp"
                        ],
                        [
                            "[self.temporal_padding_value, spatial_padding_value, spatial_padding_value]",
                            "List"
                        ],
                        [
                            "[0, spatial_padding_value, spatial_padding_value]",
                            "List"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bias",
                            "Method Argument"
                        ],
                        [
                            "bias",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_233": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(in_channels, out_channels, kernel_size=kernel_size, padding=padding, bias=bias)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_238": {
                "variable": {
                    "value": "self.conv_k2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(in_channels, out_channels, kernel_size=[2, 1, 1], bias=bias)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReplicationPad3d_243": {
                "variable": {
                    "value": "self.pad_k2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0, 0, 0, 0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_255": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[output_conv_part_1, output_conv_part_2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv3d_234": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "initial_in_channels",
                            "variable"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "initial_in_channels",
                            "variable"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "variable"
                        ],
                        [
                            "hidden_dim",
                            "variable"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Util.generate_list_from(kernel_size)",
                            "Call"
                        ],
                        [
                            "Util.generate_list_from(kernel_size)",
                            "Call"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size // 2",
                            "BinOp"
                        ],
                        [
                            "[temporal_padding_value, spatial_padding_value, spatial_padding_value]",
                            "List"
                        ],
                        [
                            "kernel_size // 2",
                            "BinOp"
                        ],
                        [
                            "kernel_size // 2",
                            "BinOp"
                        ],
                        [
                            "kernel_size // 2",
                            "BinOp"
                        ],
                        [
                            "[self.temporal_padding_value, spatial_padding_value, spatial_padding_value]",
                            "List"
                        ],
                        [
                            "[0, spatial_padding_value, spatial_padding_value]",
                            "List"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bias",
                            "Method Argument"
                        ],
                        [
                            "bias",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm3d_235": {
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "variable"
                        ],
                        [
                            "hidden_dim",
                            "variable"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LeakyReLU_236": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_239": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "initial_in_channels",
                            "variable"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "initial_in_channels",
                            "variable"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "variable"
                        ],
                        [
                            "hidden_dim",
                            "variable"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "[2, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bias",
                            "Method Argument"
                        ],
                        [
                            "bias",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm3d_240": {
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "variable"
                        ],
                        [
                            "hidden_dim",
                            "variable"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LeakyReLU_241": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_136": {
                "*args": {
                    "value": "Conv3DCausalBlock(kernel_size, in_channels, out_channels, dropout_rate, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm3d_138": {
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "variable"
                        ],
                        [
                            "hidden_dim",
                            "variable"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LeakyReLU_139": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "model/ablation/temporal_block.py": {
        "torch": {
            "ModuleList_10": {
                "variable": {
                    "value": "self.conv_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_11": {
                "variable": {
                    "value": "self.dropout_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "flip_44": {
                "variable": {
                    "value": "input_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.flip(input_, [2])",
                            "Call"
                        ],
                        [
                            "torch.flip(input_, [2])",
                            "Call"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ]
                    ]
                },
                "dims": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "flip_50": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.learning_with_dropout(input_)",
                            "Call"
                        ],
                        [
                            "self.learning_without_dropout(input_)",
                            "Call"
                        ],
                        [
                            "torch.flip(output, [2])",
                            "Call"
                        ],
                        [
                            "self.learning_with_dropout(input_)",
                            "Call"
                        ],
                        [
                            "self.learning_without_dropout(input_)",
                            "Call"
                        ],
                        [
                            "torch.flip(output, [2])",
                            "Call"
                        ],
                        [
                            "torch.cat([output_conv_part_1, output_conv_part_2], dim=2)",
                            "Call"
                        ],
                        [
                            "self.learning_with_dropout(input_)",
                            "Call"
                        ],
                        [
                            "self.learning_without_dropout(input_)",
                            "Call"
                        ],
                        [
                            "self.learning_with_dropout(input_)",
                            "Call"
                        ],
                        [
                            "self.learning_without_dropout(input_)",
                            "Call"
                        ],
                        [
                            "self.learning_with_dropout(input_)",
                            "Call"
                        ],
                        [
                            "self.learning_without_dropout(input_)",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_60": {
                "variable": {
                    "value": "self.conv_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_61": {
                "variable": {
                    "value": "self.lrelu_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_62": {
                "variable": {
                    "value": "self.batch_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_63": {
                "variable": {
                    "value": "self.dropout_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "flip_91": {
                "variable": {
                    "value": "input_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.flip(input_, [2])",
                            "Call"
                        ],
                        [
                            "torch.flip(input_, [2])",
                            "Call"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ]
                    ]
                },
                "dims": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "flip_97": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.learning_with_dropout(input_)",
                            "Call"
                        ],
                        [
                            "self.learning_without_dropout(input_)",
                            "Call"
                        ],
                        [
                            "torch.flip(output, [2])",
                            "Call"
                        ],
                        [
                            "self.learning_with_dropout(input_)",
                            "Call"
                        ],
                        [
                            "self.learning_without_dropout(input_)",
                            "Call"
                        ],
                        [
                            "torch.flip(output, [2])",
                            "Call"
                        ],
                        [
                            "torch.cat([output_conv_part_1, output_conv_part_2], dim=2)",
                            "Call"
                        ],
                        [
                            "self.learning_with_dropout(input_)",
                            "Call"
                        ],
                        [
                            "self.learning_without_dropout(input_)",
                            "Call"
                        ],
                        [
                            "self.learning_with_dropout(input_)",
                            "Call"
                        ],
                        [
                            "self.learning_without_dropout(input_)",
                            "Call"
                        ],
                        [
                            "self.learning_with_dropout(input_)",
                            "Call"
                        ],
                        [
                            "self.learning_without_dropout(input_)",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_106": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(in_channels, out_channels, kernel_size=kernel_size, bias=bias)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_111": {
                "variable": {
                    "value": "self.conv_k2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(in_channels, out_channels, kernel_size=[2, 1, 1], bias=bias)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReplicationPad3d_116": {
                "variable": {
                    "value": "self.pad_k2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0, 0, 0, 0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_128": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[output_conv_part_1, output_conv_part_2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_138": {
                "variable": {
                    "value": "self.conv_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_139": {
                "variable": {
                    "value": "self.lrelu_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_140": {
                "variable": {
                    "value": "self.batch_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_141": {
                "variable": {
                    "value": "self.dropout_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_195": {
                "variable": {
                    "value": "self.conv_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_196": {
                "variable": {
                    "value": "self.lrelu_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_197": {
                "variable": {
                    "value": "self.batch_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_198": {
                "variable": {
                    "value": "self.dropout_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_248": {
                "variable": {
                    "value": "self.conv_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_249": {
                "variable": {
                    "value": "self.dropout_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv3d_107": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "intermed_channels",
                            "variable"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "intermed_channels",
                            "variable"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "intermed_channels",
                            "variable"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Util.generate_list_from(kernel_size)",
                            "Call"
                        ],
                        [
                            "Util.generate_list_from(kernel_size)",
                            "Call"
                        ],
                        [
                            "Util.generate_list_from(kernel_size)",
                            "Call"
                        ],
                        [
                            "Util.generate_list_from(kernel_size)",
                            "Call"
                        ],
                        [
                            "Util.generate_list_from(kernel_size)",
                            "Call"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bias",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm3d_108": {
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LeakyReLU_109": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_112": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "intermed_channels",
                            "variable"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "intermed_channels",
                            "variable"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "intermed_channels",
                            "variable"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "[2, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bias",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm3d_113": {
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LeakyReLU_114": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_27": {
                "p": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_74": {
                "p": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv3d_156": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "intermed_channels",
                            "variable"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "intermed_channels",
                            "variable"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "intermed_channels",
                            "variable"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "intermed_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "intermed_channels * 2",
                            "BinOp"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "temporal_kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[kernel_size[0], 1, 1]",
                            "List"
                        ],
                        [
                            "[kernel_size[0], 1, 1]",
                            "List"
                        ],
                        [
                            "[kernel_size[0], 1, 1]",
                            "List"
                        ],
                        [
                            "[kernel_size[0], 1, 1]",
                            "List"
                        ],
                        [
                            "[kernel_size[0], 1, 1]",
                            "List"
                        ]
                    ]
                },
                "padding": {
                    "value": "temporal_padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[self.temporal_padding_value, 0, 0]",
                            "List"
                        ],
                        [
                            "[self.temporal_padding_value, 0, 0]",
                            "List"
                        ],
                        [
                            "[self.temporal_padding_value, 0, 0]",
                            "List"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_159": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm3d_160": {
                "num_features": {
                    "value": "intermed_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "intermed_channels * 2",
                            "BinOp"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ]
                    ]
                }
            },
            "Dropout_161": {
                "p": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv3d_209": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "intermed_channels",
                            "variable"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "intermed_channels",
                            "variable"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "intermed_channels",
                            "variable"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "temporal_kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[kernel_size[0], 1, 1]",
                            "List"
                        ],
                        [
                            "[kernel_size[0], 1, 1]",
                            "List"
                        ],
                        [
                            "[kernel_size[0], 1, 1]",
                            "List"
                        ],
                        [
                            "[kernel_size[0], 1, 1]",
                            "List"
                        ],
                        [
                            "[kernel_size[0], 1, 1]",
                            "List"
                        ]
                    ]
                },
                "padding": {
                    "value": "temporal_padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[self.temporal_padding_value, 0, 0]",
                            "List"
                        ],
                        [
                            "[self.temporal_padding_value, 0, 0]",
                            "List"
                        ],
                        [
                            "[self.temporal_padding_value, 0, 0]",
                            "List"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_212": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm3d_213": {
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_214": {
                "p": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_264": {
                "*args": {
                    "value": "nn.Conv3d(in_channels, intermed_channels, kernel_size=temporal_kernel_size, padding=temporal_padding, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_271": {
                "p": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv3d_265": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "intermed_channels",
                            "variable"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "intermed_channels",
                            "variable"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "intermed_channels",
                            "variable"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "intermed_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "intermed_channels * 2",
                            "BinOp"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "temporal_kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[kernel_size[0], 1, 1]",
                            "List"
                        ],
                        [
                            "[kernel_size[0], 1, 1]",
                            "List"
                        ],
                        [
                            "[kernel_size[0], 1, 1]",
                            "List"
                        ],
                        [
                            "[kernel_size[0], 1, 1]",
                            "List"
                        ],
                        [
                            "[kernel_size[0], 1, 1]",
                            "List"
                        ]
                    ]
                },
                "padding": {
                    "value": "temporal_padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[self.temporal_padding_value, 0, 0]",
                            "List"
                        ],
                        [
                            "[self.temporal_padding_value, 0, 0]",
                            "List"
                        ],
                        [
                            "[self.temporal_padding_value, 0, 0]",
                            "List"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm3d_267": {
                "num_features": {
                    "value": "intermed_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "intermed_channels * 2",
                            "BinOp"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ]
                    ]
                }
            },
            "LeakyReLU_268": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "model/baselines/conv2plus1d.py": {
        "torch": {
            "ModuleList_10": {
                "variable": {
                    "value": "self.conv2plus1_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv3d_25": {
                "variable": {
                    "value": "self.out_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "variable"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "initial_in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size[1]",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Util.generate_list_from(kernel_size)",
                            "Call"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Sequential_55": {
                "variable": {
                    "value": "self.spatial_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(in_channels, intermed_channels, spatial_kernel_size, padding=spatial_padding, bias=bias)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv3d_61": {
                "variable": {
                    "value": "self.temporal_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "intermed_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(math.floor(kernel_size[0] * kernel_size[1] * kernel_size[2] * in_channels * out_channels / (kernel_size[1] * kernel_size[2] * in_channels + kernel_size[0] * out_channels)))",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "variable"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "temporal_kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[kernel_size[0], 1, 1]",
                            "List"
                        ]
                    ]
                },
                "padding": {
                    "value": "temporal_padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[temporal_padding_value, 0, 0]",
                            "List"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bias",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv3d_56": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "initial_in_channels",
                            "variable"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "intermed_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(math.floor(kernel_size[0] * kernel_size[1] * kernel_size[2] * in_channels * out_channels / (kernel_size[1] * kernel_size[2] * in_channels + kernel_size[0] * out_channels)))",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "spatial_kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, kernel_size[1], kernel_size[2]]",
                            "List"
                        ]
                    ]
                },
                "padding": {
                    "value": "spatial_padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0, spatial_padding_value, spatial_padding_value]",
                            "List"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bias",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm3d_58": {
                "num_features": {
                    "value": "intermed_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(math.floor(kernel_size[0] * kernel_size[1] * kernel_size[2] * in_channels * out_channels / (kernel_size[1] * kernel_size[2] * in_channels + kernel_size[0] * out_channels)))",
                            "Call"
                        ]
                    ]
                }
            },
            "LeakyReLU_59": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_16": {
                "*args": {
                    "value": "Conv2Plus1Block(kernel_size, in_channels, out_channels, dropout_rate, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm3d_18": {
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "variable"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LeakyReLU_19": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "model/baselines/conv3d.py": {
        "torch": {
            "ModuleList_10": {
                "variable": {
                    "value": "self.conv3D_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv3d_25": {
                "variable": {
                    "value": "self.conv_final",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "initial_in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size[1]",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Util.generate_list_from(kernel_size)",
                            "Call"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size // 2",
                            "BinOp"
                        ],
                        [
                            "[temporal_padding_value, spatial_padding_value, spatial_padding_value]",
                            "List"
                        ]
                    ]
                }
            },
            "Conv3d_47": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "initial_in_channels",
                            "variable"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "variable"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Util.generate_list_from(kernel_size)",
                            "Call"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size // 2",
                            "BinOp"
                        ],
                        [
                            "[temporal_padding_value, spatial_padding_value, spatial_padding_value]",
                            "List"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bias",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_16": {
                "*args": {
                    "value": "Conv3DBlock(kernel_size, in_channels, out_channels, dropout_rate, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm3d_18": {
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "variable"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LeakyReLU_19": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "model/baselines/convlstm.py": {
        "torch": {
            "Conv3d_17": {
                "variable": {
                    "value": "self.conv_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._extend_for_multilayer(hidden_dim, num_layers)",
                            "Call"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dim",
                            "variable"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_64": {
                "variable": {
                    "value": "self.cell_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "cell_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "ModuleList_65": {
                "variable": {
                    "value": "self.conv_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "conv_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Sequential_131": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=self.input_dim + self.hidden_dim, out_channels=4 * self.hidden_dim, kernel_size=self.kernel_size, padding=self.padding, bias=self.bias)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_143": {
                "variable": {
                    "value": "combined",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input_tensor, h_cur]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_145": {
                "variable": {
                    "value": "(cc_i, cc_f, cc_o, cc_g)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "combined_conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv(combined)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_146": {
                "variable": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cc_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.split(combined_conv, self.hidden_dim, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_147": {
                "variable": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cc_f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.split(combined_conv, self.hidden_dim, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_148": {
                "variable": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cc_o",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.split(combined_conv, self.hidden_dim, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_149": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cc_g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.split(combined_conv, self.hidden_dim, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_157": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.height",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.width",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_93": {
                "variable": {
                    "value": "layer_output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output_inner",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_132": {
                "in_channels": {
                    "value": "self.input_dim + self.hidden_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "4 * self.hidden_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout2d_137": {
                "p": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tanh_152": {
                "input": {
                    "value": "c_next",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f * c_cur + i * g",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_61": {
                "in_channels": {
                    "value": "self.hidden_dim[num_layers - 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "cur_input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.input_dim if i == 0 else self.hidden_dim[i - 1]",
                            "IfExp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "model/baselines/encoder-decoder3d.py": {
        "torch": {
            "ModuleList_15": {
                "variable": {
                    "value": "self.down_block",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_16": {
                "variable": {
                    "value": "self.up_block",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm3d_30": {
                "variable": {
                    "value": "self.batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "variable"
                        ],
                        [
                            "out_channels * 2",
                            "BinOp"
                        ],
                        [
                            "out_channels // 2",
                            "BinOp"
                        ],
                        [
                            "int(out_channels / 2)",
                            "Call"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv3d_40": {
                "variable": {
                    "value": "self.out_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "variable"
                        ],
                        [
                            "out_channels * 2",
                            "BinOp"
                        ],
                        [
                            "out_channels // 2",
                            "BinOp"
                        ],
                        [
                            "int(out_channels / 2)",
                            "Call"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "initial_in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size[1]",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Util.generate_list_from(kernel_size)",
                            "Call"
                        ],
                        [
                            "Util.generate_list_from(kernel_size)",
                            "Call"
                        ],
                        [
                            "[1, spatial_value, spatial_value]",
                            "List"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size // 2",
                            "BinOp"
                        ],
                        [
                            "[temporal_value, spatial_value, spatial_value]",
                            "List"
                        ]
                    ]
                }
            },
            "Sequential_72": {
                "variable": {
                    "value": "self.down_block",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(in_channels, out_channels, kernel_size=kernel_size, padding=padding, stride=stride)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_90": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose3d(in_channels, out_channels, kernel_size=kernel_size, stride=stride)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv3d_73": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "initial_in_channels",
                            "variable"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "variable"
                        ],
                        [
                            "out_channels * 2",
                            "BinOp"
                        ],
                        [
                            "out_channels // 2",
                            "BinOp"
                        ],
                        [
                            "int(out_channels / 2)",
                            "Call"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Util.generate_list_from(kernel_size)",
                            "Call"
                        ],
                        [
                            "Util.generate_list_from(kernel_size)",
                            "Call"
                        ],
                        [
                            "[1, spatial_value, spatial_value]",
                            "List"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size // 2",
                            "BinOp"
                        ],
                        [
                            "[temporal_value, spatial_value, spatial_value]",
                            "List"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, spatial_value, spatial_value]",
                            "List"
                        ],
                        [
                            "[1, spatial_value, spatial_value]",
                            "List"
                        ]
                    ]
                }
            },
            "LeakyReLU_74": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose3d_91": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "initial_in_channels",
                            "variable"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "variable"
                        ],
                        [
                            "out_channels * 2",
                            "BinOp"
                        ],
                        [
                            "out_channels // 2",
                            "BinOp"
                        ],
                        [
                            "int(out_channels / 2)",
                            "Call"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Util.generate_list_from(kernel_size)",
                            "Call"
                        ],
                        [
                            "Util.generate_list_from(kernel_size)",
                            "Call"
                        ],
                        [
                            "[1, spatial_value, spatial_value]",
                            "List"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, spatial_value, spatial_value]",
                            "List"
                        ],
                        [
                            "[1, spatial_value, spatial_value]",
                            "List"
                        ]
                    ]
                }
            },
            "LeakyReLU_92": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "model/baselines/mim.py": {
        "torch": {
            "ModuleList_20": {
                "variable": {
                    "value": "self.stlstm_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_21": {
                "variable": {
                    "value": "self.stlstm_layer_diff",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_39": {
                "variable": {
                    "value": "self.conv_last",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.num_hidden[num_layers - 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_hidden_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_50": {
                "variable": {
                    "value": "schedual_sampling_bool",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch, self.step - self.input_length, frames.shape[2], height, width)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_66": {
                "variable": {
                    "value": "st_memory",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[batch, self.num_hidden[0], height, width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_99": {
                "variable": {
                    "value": "next_frames",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "next_frames",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(next_frames, dim=0).permute(1, 2, 0, 3, 4).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "permute_99": {
                "variable": {
                    "value": "next_frames",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_115": {
                "variable": {
                    "value": "self.t_cc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(num_hidden, num_hidden * 3, kernel_size=filter_size, stride=1, padding=pad, bias=bias)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_120": {
                "variable": {
                    "value": "self.s_cc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(num_hidden, num_hidden * 4, kernel_size=filter_size, stride=1, padding=pad, bias=bias)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_125": {
                "variable": {
                    "value": "self.x_cc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(num_hidden, num_hidden * 4, kernel_size=filter_size, stride=1, padding=pad, bias=bias)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_131": {
                "variable": {
                    "value": "self.last",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_hidden * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_146": {
                "variable": {
                    "value": "(i_s, g_s, f_s, o_s)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.s_cc(m)",
                    "type": "Call",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "self.num_hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_147": {
                "variable": {
                    "value": "(i_t, g_t, o_t)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.t_cc(h)",
                    "type": "Call",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "self.num_hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_148": {
                "variable": {
                    "value": "(i_x, g_x, f_x, o_x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.x_cc(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "self.num_hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_150": {
                "variable": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "i_x + i_t",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_151": {
                "variable": {
                    "value": "i_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "i_x + i_s",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_152": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "g_x + g_t",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_153": {
                "variable": {
                    "value": "g_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "g_x + g_s",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_154": {
                "variable": {
                    "value": "f_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f_x + f_s + self._forget_bias",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_155": {
                "variable": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "o_x + o_t + o_s",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_176": {
                "variable": {
                    "value": "self.conv_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(num_hidden, num_hidden * 4, kernel_size=filter_size, stride=1, padding=pad, bias=bias)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_181": {
                "variable": {
                    "value": "self.conv_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(num_hidden, num_hidden * 4, kernel_size=filter_size, stride=1, padding=pad, bias=bias)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_190": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[shape[0], self.num_hidden, shape[2], shape[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "split_200": {
                "variable": {
                    "value": "(i_h, g_h, f_h, o_h)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros([shape[0], self.num_hidden, shape[2], shape[3]]).to(self.device)",
                            "Call"
                        ],
                        [
                            "self.conv_h(h_t)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "self.num_hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_201": {
                "variable": {
                    "value": "ct_activation",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "c_t.repeat([1, 2, 1, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "self.ct_weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "split_202": {
                "variable": {
                    "value": "(i_c, f_c)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "ct_activation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(c_t.repeat([1, 2, 1, 1]), self.ct_weight)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "self.num_hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_217": {
                "variable": {
                    "value": "i_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "i_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(i_x + i_s)",
                            "Call"
                        ],
                        [
                            "i_h + i_c",
                            "BinOp"
                        ],
                        [
                            "i_ + i_x",
                            "BinOp"
                        ],
                        [
                            "torch.sigmoid(i_)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(i_x + i_s)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_218": {
                "variable": {
                    "value": "f_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f_ + self._forget_bias",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_221": {
                "variable": {
                    "value": "o_c",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "c_new",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f_ * c_t + i_ * torch.tanh(g_)",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "self.oc_weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_240": {
                "variable": {
                    "value": "self.t_cc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(num_hidden, num_hidden * 4, kernel_size=filter_size, stride=1, padding=pad, bias=bias)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_245": {
                "variable": {
                    "value": "self.s_cc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(num_hidden, num_hidden * 4, kernel_size=filter_size, stride=1, padding=pad, bias=bias)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_250": {
                "variable": {
                    "value": "self.x_cc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(num_hidden_in, num_hidden * 4, kernel_size=filter_size, stride=1, padding=pad, bias=bias)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_255": {
                "variable": {
                    "value": "self.last",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_hidden * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_268": {
                "variable": {
                    "value": "(i_s, g_s, f_s, o_s)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.s_cc(m)",
                    "type": "Call",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "self.num_hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_269": {
                "variable": {
                    "value": "(i_t, g_t, f_t, o_t)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.t_cc(h)",
                    "type": "Call",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "self.num_hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_270": {
                "variable": {
                    "value": "(i_x, g_x, f_x, o_x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.x_cc(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "self.num_hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_272": {
                "variable": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "i_x + i_t",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_273": {
                "variable": {
                    "value": "i_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "i_x + i_s",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_274": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "g_x + g_t",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_275": {
                "variable": {
                    "value": "g_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "g_x + g_s",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_276": {
                "variable": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f_x + f_t + self._forget_bias",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_277": {
                "variable": {
                    "value": "f_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f_x + f_s + self._forget_bias",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_278": {
                "variable": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "o_x + o_t + o_s",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_59": {
                "variable": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[batch, self.num_hidden[i], height, width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_134": {
                "*size": {
                    "value": "[shape[0], self.num_hidden, shape[2], shape[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_like_144": {
                "variable": {
                    "value": "diff_h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.init_state(x.shape)",
                            "Call"
                        ],
                        [
                            "self.init_state(x.shape)",
                            "Call"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "split_211": {
                "variable": {
                    "value": "(i_x, g_x, f_x, o_x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "outx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv_x(x)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "self.num_hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_258": {
                "*size": {
                    "value": "[shape[0], self.num_hidden, shape[2], shape[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Conv2d_116": {
                "in_channels": {
                    "value": "num_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_hidden",
                            "Method Argument"
                        ],
                        [
                            "num_hidden",
                            "Method Argument"
                        ],
                        [
                            "num_hidden",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_hidden * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "filter_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filter_size",
                            "Method Argument"
                        ],
                        [
                            "filter_size",
                            "Method Argument"
                        ],
                        [
                            "filter_size",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filter_size // 2",
                            "BinOp"
                        ],
                        [
                            "filter_size // 2",
                            "BinOp"
                        ],
                        [
                            "filter_size // 2",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LayerNorm_117": {
                "normalized_shape": {
                    "value": "[num_hidden * 3, self.width, self.width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Dropout2d_118": {
                "p": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_121": {
                "in_channels": {
                    "value": "num_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_hidden",
                            "Method Argument"
                        ],
                        [
                            "num_hidden",
                            "Method Argument"
                        ],
                        [
                            "num_hidden",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_hidden * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "filter_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filter_size",
                            "Method Argument"
                        ],
                        [
                            "filter_size",
                            "Method Argument"
                        ],
                        [
                            "filter_size",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filter_size // 2",
                            "BinOp"
                        ],
                        [
                            "filter_size // 2",
                            "BinOp"
                        ],
                        [
                            "filter_size // 2",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LayerNorm_122": {
                "normalized_shape": {
                    "value": "[num_hidden * 4, self.width, self.width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Dropout2d_123": {
                "p": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_126": {
                "in_channels": {
                    "value": "num_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_hidden",
                            "Method Argument"
                        ],
                        [
                            "num_hidden",
                            "Method Argument"
                        ],
                        [
                            "num_hidden",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_hidden * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "filter_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filter_size",
                            "Method Argument"
                        ],
                        [
                            "filter_size",
                            "Method Argument"
                        ],
                        [
                            "filter_size",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filter_size // 2",
                            "BinOp"
                        ],
                        [
                            "filter_size // 2",
                            "BinOp"
                        ],
                        [
                            "filter_size // 2",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LayerNorm_127": {
                "normalized_shape": {
                    "value": "[num_hidden * 4, self.width, self.width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Dropout2d_128": {
                "p": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_160": {
                "tensors": {
                    "value": "[new_c, new_m]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_161": {
                "input": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.last(torch.cat([new_c, new_m], 1))",
                            "Call"
                        ],
                        [
                            "self.last(torch.cat([new_c, new_m], 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_177": {
                "in_channels": {
                    "value": "num_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_hidden",
                            "Method Argument"
                        ],
                        [
                            "num_hidden",
                            "Method Argument"
                        ],
                        [
                            "num_hidden",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_hidden * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "filter_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filter_size",
                            "Method Argument"
                        ],
                        [
                            "filter_size",
                            "Method Argument"
                        ],
                        [
                            "filter_size",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filter_size // 2",
                            "BinOp"
                        ],
                        [
                            "filter_size // 2",
                            "BinOp"
                        ],
                        [
                            "filter_size // 2",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LayerNorm_178": {
                "normalized_shape": {
                    "value": "[num_hidden * 4, self.width, self.width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Dropout2d_179": {
                "p": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_182": {
                "in_channels": {
                    "value": "num_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_hidden",
                            "Method Argument"
                        ],
                        [
                            "num_hidden",
                            "Method Argument"
                        ],
                        [
                            "num_hidden",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_hidden * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "filter_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filter_size",
                            "Method Argument"
                        ],
                        [
                            "filter_size",
                            "Method Argument"
                        ],
                        [
                            "filter_size",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filter_size // 2",
                            "BinOp"
                        ],
                        [
                            "filter_size // 2",
                            "BinOp"
                        ],
                        [
                            "filter_size // 2",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LayerNorm_183": {
                "normalized_shape": {
                    "value": "[num_hidden * 4, self.width, self.width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Dropout2d_184": {
                "p": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_186": {
                "data": {
                    "value": "torch.Tensor(torch.zeros(num_hidden * 2, self.width, self.width))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_187": {
                "data": {
                    "value": "torch.Tensor(torch.zeros(num_hidden, self.width, self.width))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_223": {
                "input": {
                    "value": "o_ + o_c",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_223": {
                "input": {
                    "value": "c_new",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f_ * c_t + i_ * torch.tanh(g_)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_241": {
                "in_channels": {
                    "value": "num_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_hidden",
                            "Method Argument"
                        ],
                        [
                            "num_hidden",
                            "Method Argument"
                        ],
                        [
                            "num_hidden",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_hidden * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "filter_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filter_size",
                            "Method Argument"
                        ],
                        [
                            "filter_size",
                            "Method Argument"
                        ],
                        [
                            "filter_size",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filter_size // 2",
                            "BinOp"
                        ],
                        [
                            "filter_size // 2",
                            "BinOp"
                        ],
                        [
                            "filter_size // 2",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LayerNorm_242": {
                "normalized_shape": {
                    "value": "[num_hidden * 4, self.width, self.width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Dropout2d_243": {
                "p": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_246": {
                "in_channels": {
                    "value": "num_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_hidden",
                            "Method Argument"
                        ],
                        [
                            "num_hidden",
                            "Method Argument"
                        ],
                        [
                            "num_hidden",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_hidden * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "filter_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filter_size",
                            "Method Argument"
                        ],
                        [
                            "filter_size",
                            "Method Argument"
                        ],
                        [
                            "filter_size",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filter_size // 2",
                            "BinOp"
                        ],
                        [
                            "filter_size // 2",
                            "BinOp"
                        ],
                        [
                            "filter_size // 2",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LayerNorm_247": {
                "normalized_shape": {
                    "value": "[num_hidden * 4, self.width, self.width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Dropout2d_248": {
                "p": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_251": {
                "in_channels": {
                    "value": "num_hidden_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_hidden_in",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_hidden * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "filter_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filter_size",
                            "Method Argument"
                        ],
                        [
                            "filter_size",
                            "Method Argument"
                        ],
                        [
                            "filter_size",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filter_size // 2",
                            "BinOp"
                        ],
                        [
                            "filter_size // 2",
                            "BinOp"
                        ],
                        [
                            "filter_size // 2",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LayerNorm_252": {
                "normalized_shape": {
                    "value": "[num_hidden * 4, self.width, self.width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Dropout2d_253": {
                "p": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_282": {
                "tensors": {
                    "value": "[new_c, new_m]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_283": {
                "input": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.last(torch.cat([new_c, new_m], 1))",
                            "Call"
                        ],
                        [
                            "self.last(torch.cat([new_c, new_m], 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_219": {
                "input": {
                    "value": "g_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tanh(g_x + g_s)",
                            "Call"
                        ],
                        [
                            "g_h",
                            "variable"
                        ],
                        [
                            "g_ + g_x",
                            "BinOp"
                        ],
                        [
                            "torch.sigmoid(g_x + g_s)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_186": {
                "*size": {
                    "value": "num_hidden * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "self.width",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.width",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_187": {
                "*size": {
                    "value": "num_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_hidden",
                            "Method Argument"
                        ],
                        [
                            "num_hidden",
                            "Method Argument"
                        ],
                        [
                            "num_hidden",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "self.width",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.width",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_87": {
                "input": {
                    "value": "hidden_state[i - 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "model/baselines/predrnn.py": {
        "torch": {
            "ModuleList_28": {
                "variable": {
                    "value": "self.cell_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "cell_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Conv2d_29": {
                "variable": {
                    "value": "self.conv_last",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.num_hidden[num_layers - 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.frame_channel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_39": {
                "variable": {
                    "value": "mask_true",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch, self.step - self.input_length, frames.shape[2], height, width)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_51": {
                "variable": {
                    "value": "memory",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[batch, self.num_hidden[0], height, width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_68": {
                "variable": {
                    "value": "next_frames",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "next_frames",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(next_frames, dim=0).permute(1, 2, 0, 3, 4).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "permute_68": {
                "variable": {
                    "value": "next_frames",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_80": {
                "variable": {
                    "value": "self.conv_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channel, num_hidden * 7, kernel_size=filter_size, stride=stride, padding=self.padding)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_85": {
                "variable": {
                    "value": "self.conv_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(num_hidden, num_hidden * 4, kernel_size=filter_size, stride=stride, padding=self.padding)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_90": {
                "variable": {
                    "value": "self.conv_m",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(num_hidden, num_hidden * 3, kernel_size=filter_size, stride=stride, padding=self.padding)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_95": {
                "variable": {
                    "value": "self.conv_o",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(num_hidden * 2, num_hidden, kernel_size=filter_size, stride=stride, padding=self.padding)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_100": {
                "variable": {
                    "value": "self.conv_last",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_hidden * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_hidden",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_107": {
                "variable": {
                    "value": "(i_x, f_x, g_x, i_x_prime, f_x_prime, g_x_prime, o_x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x_concat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv_x(x_t)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "self.num_hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_108": {
                "variable": {
                    "value": "(i_h, f_h, g_h, o_h)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "h_concat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv_h(h_t)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "self.num_hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_109": {
                "variable": {
                    "value": "(i_m, f_m, g_m)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "m_concat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv_m(m_t)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "self.num_hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_111": {
                "variable": {
                    "value": "i_t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "i_x + i_h",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_112": {
                "variable": {
                    "value": "f_t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f_x + f_h + self._forget_bias",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_113": {
                "variable": {
                    "value": "g_t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "g_x + g_h",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_117": {
                "variable": {
                    "value": "i_t_prime",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "i_x_prime + i_m",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_118": {
                "variable": {
                    "value": "f_t_prime",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f_x_prime + f_m + self._forget_bias",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_119": {
                "variable": {
                    "value": "g_t_prime",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "g_x_prime + g_m",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_123": {
                "variable": {
                    "value": "mem",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(c_new, m_new)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_124": {
                "variable": {
                    "value": "o_t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "o_x + o_h + self.conv_o(mem)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_47": {
                "variable": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[batch, self.num_hidden[i], height, width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Conv2d_81": {
                "in_channels": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.frame_channel",
                            "Attribute"
                        ],
                        [
                            "self.frame_channel if i == 0 else self.num_hidden[i - 1]",
                            "IfExp"
                        ],
                        [
                            "in_channel",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_hidden * 7",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "filter_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filter_size",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNorm_82": {
                "normalized_shape": {
                    "value": "[num_hidden * 7, width, width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Dropout2d_83": {
                "p": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_86": {
                "in_channels": {
                    "value": "num_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_hidden",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_hidden * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "filter_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filter_size",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNorm_87": {
                "normalized_shape": {
                    "value": "[num_hidden * 4, width, width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Dropout2d_88": {
                "p": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_91": {
                "in_channels": {
                    "value": "num_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_hidden",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_hidden * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "filter_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filter_size",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNorm_92": {
                "normalized_shape": {
                    "value": "[num_hidden * 3, width, width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Dropout2d_93": {
                "p": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_96": {
                "in_channels": {
                    "value": "num_hidden * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_hidden",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "filter_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filter_size",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNorm_97": {
                "normalized_shape": {
                    "value": "[num_hidden, width, width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Dropout2d_98": {
                "p": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tanh_125": {
                "input": {
                    "value": "self.conv_last(mem)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "model/generator_block.py": {
        "torch": {
            "ModuleList_12": {
                "variable": {
                    "value": "self.tconv_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_13": {
                "variable": {
                    "value": "self.conv_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_60": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input_, x]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_27": {
                "*args": {
                    "value": "nn.ConvTranspose3d(in_channels, intermed_channels, [4, 1, 1], stride=[2, 1, 1], padding=[1, 0, 0], bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_40": {
                "*args": {
                    "value": "nn.Conv3d(in_channels, intermed_channels, kernel_size=spatial_kernel_size, padding=spatial_padding, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ConvTranspose3d_28": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "intermed_channels",
                            "variable"
                        ],
                        [
                            "intermed_channels",
                            "variable"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "intermed_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "intermed_channels * 2",
                            "BinOp"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "[4, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "[2, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "[1, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm3d_30": {
                "num_features": {
                    "value": "intermed_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "intermed_channels * 2",
                            "BinOp"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ]
                    ]
                }
            },
            "LeakyReLU_31": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_41": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "intermed_channels",
                            "variable"
                        ],
                        [
                            "intermed_channels",
                            "variable"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "intermed_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "intermed_channels * 2",
                            "BinOp"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "spatial_kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, kernel_size[1], kernel_size[2]]",
                            "List"
                        ]
                    ]
                },
                "padding": {
                    "value": "spatial_padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0, spatial_padding_value, spatial_padding_value]",
                            "List"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm3d_43": {
                "num_features": {
                    "value": "intermed_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "intermed_channels * 2",
                            "BinOp"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ]
                    ]
                }
            },
            "LeakyReLU_44": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "model/spatial_block.py": {
        "torch": {
            "ModuleList_10": {
                "variable": {
                    "value": "self.conv_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_11": {
                "variable": {
                    "value": "self.dropout_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_24": {
                "*args": {
                    "value": "nn.Conv3d(in_channels, intermed_channels, kernel_size=spatial_kernel_size, padding=spatial_padding, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_31": {
                "p": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout_rate",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv3d_25": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "intermed_channels",
                            "variable"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "intermed_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "intermed_channels * 2",
                            "BinOp"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "spatial_kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, kernel_size[1], kernel_size[2]]",
                            "List"
                        ]
                    ]
                },
                "padding": {
                    "value": "spatial_padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0, spatial_padding_value, spatial_padding_value]",
                            "List"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm3d_27": {
                "num_features": {
                    "value": "intermed_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "intermed_channels * 2",
                            "BinOp"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ]
                    ]
                }
            },
            "LeakyReLU_28": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "model/stconvs2s.py": {
        "torch": {
            "Conv3d_57": {
                "variable": {
                    "value": "self.conv_final",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ],
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "initial_in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size[1]",
                            "Subscript"
                        ],
                        [
                            "input_size[1]",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Sequential_52": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "temporal_block",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_54": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "temporal_block",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "model/temporal_block.py": {
        "torch": {
            "ModuleList_12": {
                "variable": {
                    "value": "self.conv_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_13": {
                "variable": {
                    "value": "self.dropout_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "flip_46": {
                "variable": {
                    "value": "input_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.flip(input_, [2])",
                            "Call"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ]
                    ]
                },
                "dims": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "flip_52": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.learning_with_dropout(input_)",
                            "Call"
                        ],
                        [
                            "self.learning_without_dropout(input_)",
                            "Call"
                        ],
                        [
                            "torch.flip(output, [2])",
                            "Call"
                        ],
                        [
                            "torch.cat([output_conv_part_1, output_conv_part_2], dim=2)",
                            "Call"
                        ],
                        [
                            "self.learning_with_dropout(input_)",
                            "Call"
                        ],
                        [
                            "self.learning_without_dropout(input_)",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_61": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(in_channels, out_channels, kernel_size=kernel_size, bias=bias)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_66": {
                "variable": {
                    "value": "self.conv_k2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv3d(in_channels, out_channels, kernel_size=[2, 1, 1], bias=bias)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReplicationPad3d_71": {
                "variable": {
                    "value": "self.pad_k2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0, 0, 0, 0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_83": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[output_conv_part_1, output_conv_part_2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_94": {
                "variable": {
                    "value": "self.conv_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_95": {
                "variable": {
                    "value": "self.lrelu_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_96": {
                "variable": {
                    "value": "self.batch_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_97": {
                "variable": {
                    "value": "self.dropout_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv3d_62": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "intermed_channels",
                            "variable"
                        ],
                        [
                            "intermed_channels",
                            "variable"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Util.generate_list_from(kernel_size)",
                            "Call"
                        ],
                        [
                            "Util.generate_list_from(kernel_size)",
                            "Call"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bias",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm3d_63": {
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LeakyReLU_64": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_67": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "intermed_channels",
                            "variable"
                        ],
                        [
                            "intermed_channels",
                            "variable"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "[2, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bias",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm3d_68": {
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LeakyReLU_69": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_29": {
                "p": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv3d_112": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "intermed_channels",
                            "variable"
                        ],
                        [
                            "intermed_channels",
                            "variable"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "intermed_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "intermed_channels * 2",
                            "BinOp"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "temporal_kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[kernel_size[0], 1, 1]",
                            "List"
                        ],
                        [
                            "[kernel_size[0], 1, 1]",
                            "List"
                        ]
                    ]
                },
                "padding": {
                    "value": "temporal_padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[self.temporal_padding_value, 0, 0]",
                            "List"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_115": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm3d_116": {
                "num_features": {
                    "value": "intermed_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "intermed_channels * 2",
                            "BinOp"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ]
                    ]
                }
            },
            "Dropout_117": {
                "p": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "tool/dataset.py": {
        "torch": {
            "from_numpy_23": {
                "variable": {
                    "value": "self.X",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "data.x.values",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "permute_23": {
                "variable": {
                    "value": "self.X",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_25": {
                "variable": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "data.y.values",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "permute_25": {
                "variable": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_28": {
                "variable": {
                    "value": "self.X",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.X",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_29": {
                "variable": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.y",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tool/loss.py": {
        "torch": {
            "MSELoss_7": {
                "variable": {
                    "value": "self.mse",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sqrt_11": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.mse(yhat, y) + self.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "tool/train_evaluate.py": {
        "torch": {
            "save_96": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'model_state_dict': model.state_dict(), 'optimizer_state_dict': optimizer.state_dict(), 'epoch': epoch, 'loss': loss}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join('output', dataset_type, 'checkpoints', model.lower(), filename)",
                            "Call"
                        ],
                        [
                            "filename",
                            "Method Argument"
                        ],
                        [
                            "filename",
                            "Method Argument"
                        ],
                        [
                            "filename",
                            "Method Argument"
                        ],
                        [
                            "filename",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_156": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join('output', dataset_type, 'checkpoints', model.lower(), filename)",
                            "Call"
                        ],
                        [
                            "filename",
                            "Method Argument"
                        ],
                        [
                            "filename",
                            "Method Argument"
                        ],
                        [
                            "filename",
                            "Method Argument"
                        ],
                        [
                            "filename",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_available_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_118": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "l1_loss_125": {
                "variable": {
                    "value": "mae_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(inputs)",
                            "Call"
                        ],
                        [
                            "mask_land * output",
                            "BinOp"
                        ],
                        [
                            "self.model(inputs)",
                            "Call"
                        ],
                        [
                            "mask_land * output",
                            "BinOp"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.to(self.device)",
                            "Call"
                        ],
                        [
                            "target.to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_cache_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "l1_loss_135": {
                "variable": {
                    "value": "mae_loss_obs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_observation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output[:, :, i, :, :]",
                            "Subscript"
                        ]
                    ]
                },
                "target": {
                    "value": "target_observation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target[:, :, i, :, :]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "tool/utils.py": {
        "torch": {
            "from_numpy_142": {
                "variable": {
                    "value": "mask_land",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mask_land",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.load(filename)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask_land).float()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}