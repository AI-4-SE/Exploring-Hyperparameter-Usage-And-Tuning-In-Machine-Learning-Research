{
    "dataset/dynamic/preprocessing.py": {
        "sklearn": {
            "StratifiedKFold_181": {
                "variable": {
                    "value": "skf",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "n_splits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "5",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "KFold_189": {
                "variable": {
                    "value": "kf",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "n_splits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "5",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "dataset/dynamic/util.py": {
        "sklearn": {
            "train_test_split_29": {
                "variable": {
                    "value": "(idxs_out[train], idxs_out[test])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "idxs_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "test_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "stratify": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "random_state": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "42",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "train_test_split_36": {
                "variable": {
                    "value": "(idxs_out[train], idxs_out[val])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "idxs_out['train']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "test_size": {
                    "value": "val_size / (1 - test_size)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "stratify": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "random_state": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "42",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "from_numpy_122": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(data)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_124": {
                "variable": {
                    "value": "out_dims",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "out_dims",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(out_dims)",
                            "Call"
                        ],
                        [
                            "[64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "full_125": {
                "variable": {
                    "value": "out_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "out_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[num_chan, *out_dims]",
                            "List"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "padding_value",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "data.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_128": {
                "variable": {
                    "value": "in_dims",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "data[i].shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_131": {
                "variable": {
                    "value": "start_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(out_dims - in_dims) / 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "narrow_176": {
                "variable": {
                    "value": "tensors[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "tensors[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "start": {
                    "value": "start_slice",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "int(np.clip(h_min + (h_max - h_min - narrow_size) * np.random.random(), 0, tensors[0].size(dim) - narrow_size))",
                            "Call"
                        ],
                        [
                            "int(np.clip(h_min + (h_max - h_min) / 2 - narrow_size / 2, 0, tensors[0].size(dim) - narrow_size))",
                            "Call"
                        ],
                        [
                            "np.random.randint(tensors[0].size(dim) - narrow_size)",
                            "Call"
                        ]
                    ]
                },
                "length": {
                    "value": "narrow_size",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "model/utils/metric.py": {
        "sklearn": {
            "f1_score_41": {
                "variable": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "metric_utils.flatten(target).cpu().detach().float()",
                            "Call"
                        ],
                        [
                            "np.argmax(target, axis=0)",
                            "Call"
                        ],
                        [
                            "metric_utils.flatten(target).cpu().detach().float()",
                            "Call"
                        ],
                        [
                            "np.argmax(target, axis=0)",
                            "Call"
                        ],
                        [
                            "metric_utils.flatten(target).cpu().detach().float()",
                            "Call"
                        ],
                        [
                            "np.argmax(target, axis=0)",
                            "Call"
                        ],
                        [
                            "metric_utils.flatten(target).cpu().detach().float()",
                            "Call"
                        ],
                        [
                            "np.argmax(target, axis=0)",
                            "Call"
                        ],
                        [
                            "metric_utils.flatten(target).cpu().detach().float()",
                            "Call"
                        ],
                        [
                            "np.argmax(target, axis=0)",
                            "Call"
                        ],
                        [
                            "metric_utils.flatten(target).cpu().detach().float()",
                            "Call"
                        ],
                        [
                            "np.argmax(target, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "metric_utils.flatten(output).cpu().detach().float()",
                            "Call"
                        ],
                        [
                            "np.argmax(output, axis=0)",
                            "Call"
                        ],
                        [
                            "metric_utils.flatten(output).cpu().detach().float()",
                            "Call"
                        ],
                        [
                            "np.argmax(output, axis=0)",
                            "Call"
                        ],
                        [
                            "metric_utils.flatten(output).cpu().detach().float()",
                            "Call"
                        ],
                        [
                            "np.argmax(output, axis=0)",
                            "Call"
                        ],
                        [
                            "metric_utils.flatten(output).cpu().detach().float()",
                            "Call"
                        ],
                        [
                            "np.argmax(output, axis=0)",
                            "Call"
                        ],
                        [
                            "metric_utils.flatten(output).cpu().detach().float()",
                            "Call"
                        ],
                        [
                            "np.argmax(output, axis=0)",
                            "Call"
                        ],
                        [
                            "metric_utils.flatten(output).cpu().detach().float()",
                            "Call"
                        ],
                        [
                            "np.argmax(output, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "precision_score_15": {
                "y_true": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "metric_utils.flatten(target).cpu().detach().float()",
                            "Call"
                        ],
                        [
                            "np.argmax(target, axis=0)",
                            "Call"
                        ],
                        [
                            "metric_utils.flatten(target).cpu().detach().float()",
                            "Call"
                        ],
                        [
                            "np.argmax(target, axis=0)",
                            "Call"
                        ],
                        [
                            "metric_utils.flatten(target).cpu().detach().float()",
                            "Call"
                        ],
                        [
                            "np.argmax(target, axis=0)",
                            "Call"
                        ],
                        [
                            "metric_utils.flatten(target).cpu().detach().float()",
                            "Call"
                        ],
                        [
                            "np.argmax(target, axis=0)",
                            "Call"
                        ],
                        [
                            "metric_utils.flatten(target).cpu().detach().float()",
                            "Call"
                        ],
                        [
                            "np.argmax(target, axis=0)",
                            "Call"
                        ],
                        [
                            "metric_utils.flatten(target).cpu().detach().float()",
                            "Call"
                        ],
                        [
                            "np.argmax(target, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "metric_utils.flatten(output).cpu().detach().float()",
                            "Call"
                        ],
                        [
                            "np.argmax(output, axis=0)",
                            "Call"
                        ],
                        [
                            "metric_utils.flatten(output).cpu().detach().float()",
                            "Call"
                        ],
                        [
                            "np.argmax(output, axis=0)",
                            "Call"
                        ],
                        [
                            "metric_utils.flatten(output).cpu().detach().float()",
                            "Call"
                        ],
                        [
                            "np.argmax(output, axis=0)",
                            "Call"
                        ],
                        [
                            "metric_utils.flatten(output).cpu().detach().float()",
                            "Call"
                        ],
                        [
                            "np.argmax(output, axis=0)",
                            "Call"
                        ],
                        [
                            "metric_utils.flatten(output).cpu().detach().float()",
                            "Call"
                        ],
                        [
                            "np.argmax(output, axis=0)",
                            "Call"
                        ],
                        [
                            "metric_utils.flatten(output).cpu().detach().float()",
                            "Call"
                        ],
                        [
                            "np.argmax(output, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "recall_score_25": {
                "y_true": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "metric_utils.flatten(target).cpu().detach().float()",
                            "Call"
                        ],
                        [
                            "np.argmax(target, axis=0)",
                            "Call"
                        ],
                        [
                            "metric_utils.flatten(target).cpu().detach().float()",
                            "Call"
                        ],
                        [
                            "np.argmax(target, axis=0)",
                            "Call"
                        ],
                        [
                            "metric_utils.flatten(target).cpu().detach().float()",
                            "Call"
                        ],
                        [
                            "np.argmax(target, axis=0)",
                            "Call"
                        ],
                        [
                            "metric_utils.flatten(target).cpu().detach().float()",
                            "Call"
                        ],
                        [
                            "np.argmax(target, axis=0)",
                            "Call"
                        ],
                        [
                            "metric_utils.flatten(target).cpu().detach().float()",
                            "Call"
                        ],
                        [
                            "np.argmax(target, axis=0)",
                            "Call"
                        ],
                        [
                            "metric_utils.flatten(target).cpu().detach().float()",
                            "Call"
                        ],
                        [
                            "np.argmax(target, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "metric_utils.flatten(output).cpu().detach().float()",
                            "Call"
                        ],
                        [
                            "np.argmax(output, axis=0)",
                            "Call"
                        ],
                        [
                            "metric_utils.flatten(output).cpu().detach().float()",
                            "Call"
                        ],
                        [
                            "np.argmax(output, axis=0)",
                            "Call"
                        ],
                        [
                            "metric_utils.flatten(output).cpu().detach().float()",
                            "Call"
                        ],
                        [
                            "np.argmax(output, axis=0)",
                            "Call"
                        ],
                        [
                            "metric_utils.flatten(output).cpu().detach().float()",
                            "Call"
                        ],
                        [
                            "np.argmax(output, axis=0)",
                            "Call"
                        ],
                        [
                            "metric_utils.flatten(output).cpu().detach().float()",
                            "Call"
                        ],
                        [
                            "np.argmax(output, axis=0)",
                            "Call"
                        ],
                        [
                            "metric_utils.flatten(output).cpu().detach().float()",
                            "Call"
                        ],
                        [
                            "np.argmax(output, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "no_grad_9": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_47": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_102": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_148": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "base/base_data_loader.py": {
        "torch": {
            "SubsetRandomSampler_49": {
                "variable": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "train_idx",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.delete(idx_full, np.arange(0, len_valid))",
                            "Call"
                        ]
                    ]
                }
            },
            "SubsetRandomSampler_50": {
                "variable": {
                    "value": "valid_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "valid_idx",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "idx_full[0:len_valid]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "DataLoader_62": {
                "sampler": {
                    "value": "self.valid_sampler",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "base/base_model.py": {
        "torch": {}
    },
    "base/base_trainer.py": {
        "torch": {
            "device_count_117": {
                "variable": {
                    "value": "n_gpu",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_125": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if n_gpu_use > 0 else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "load_162": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "resume_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "str(resume_path)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "DataParallel_22": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "device_ids",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "save_147": {
                "obj": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{'arch': arch, 'epoch': epoch, 'state_dict': self.model.state_dict(), 'optimizer': self.optimizer.state_dict(), 'monitor_best': self.mnt_best, 'config': self.config}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "filename",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "f'{str(self.checkpoint_dir)}/checkpoint-epoch{epoch}.pth'",
                            "JoinedStr"
                        ]
                    ]
                }
            },
            "save_151": {
                "obj": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{'arch': arch, 'epoch': epoch, 'state_dict': self.model.state_dict(), 'optimizer': self.optimizer.state_dict(), 'monitor_best': self.mnt_best, 'config': self.config}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "best_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "f'{str(self.checkpoint_dir)}/model_best' + self.fold + '.pth'",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "data_loader/Dataloader.py": {
        "torch": {
            "RandomSampler_22": {
                "variable": {
                    "value": "self.sampler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data_source": {
                    "value": "self.dataset",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SequentialSampler_24": {
                "variable": {
                    "value": "self.sampler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data_source": {
                    "value": "self.dataset",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "dataset/DatasetLongitudinal.py": {
        "torch": {
            "as_tensor_98": {
                "variable": {
                    "value": "mismatch",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "mismatch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "np.array(mismatch)",
                            "Call"
                        ],
                        [
                            "resize(mismatch, (1, self.size, self.size))",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(mismatch)",
                            "Call"
                        ]
                    ]
                }
            },
            "as_tensor_99": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.array(x)",
                            "Call"
                        ],
                        [
                            "resize(x, (1, self.size, self.size))",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "as_tensor_100": {
                "variable": {
                    "value": "x_ref",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "x_ref",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.array(x_ref)",
                            "Call"
                        ],
                        [
                            "resize(x_ref, (1, self.size, self.size))",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(x_ref)",
                            "Call"
                        ]
                    ]
                }
            },
            "as_tensor_102": {
                "data": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "resize(label, (self.n_classes, self.size, self.size), order=0)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(f['label'][()], dtype=torch.int64)",
                            "Call"
                        ],
                        [
                            "F.one_hot(label, num_classes=self.n_classes).permute(2, 0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "as_tensor_57": {
                "variable": {
                    "value": "ref_label",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "f['label'][()]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_59": {
                "variable": {
                    "value": "ref_label",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "ref_label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(f['label'][()], dtype=torch.int64)",
                            "Call"
                        ],
                        [
                            "F.one_hot(ref_label, num_classes=self.n_classes).permute(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "resize(ref_label, (self.n_classes, self.size, self.size), order=0)",
                            "Call"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "self.n_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "permute_59": {
                "variable": {
                    "value": "ref_label",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "as_tensor_64": {
                "variable": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "f['label'][()]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_66": {
                "variable": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "resize(label, (self.n_classes, self.size, self.size), order=0)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(f['label'][()], dtype=torch.int64)",
                            "Call"
                        ],
                        [
                            "F.one_hot(label, num_classes=self.n_classes).permute(2, 0, 1)",
                            "Call"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "self.n_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "permute_66": {
                "variable": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "dataset/DatasetStatic.py": {
        "torch": {
            "as_tensor_94": {
                "variable": {
                    "value": "mismatch",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "mismatch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.array(mismatch)",
                            "Call"
                        ],
                        [
                            "resize(mismatch, (1, self.size, self.size))",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(mismatch)",
                            "Call"
                        ]
                    ]
                }
            },
            "as_tensor_95": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.array(data)",
                            "Call"
                        ],
                        [
                            "resize(data, (1, self.size, self.size))",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(data).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "as_tensor_79": {
                "variable": {
                    "value": "mismatch_label",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "f['label'][()]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_81": {
                "variable": {
                    "value": "mismatch_label",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "mismatch_label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(f['label'][()], dtype=torch.int64)",
                            "Call"
                        ],
                        [
                            "F.one_hot(mismatch_label, num_classes=self.n_classes).permute(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "resize(mismatch_label, (self.n_classes, self.size, self.size), order=0)",
                            "Call"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "self.n_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "permute_81": {
                "variable": {
                    "value": "mismatch_label",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "as_tensor_97": {
                "data": {
                    "value": "mismatch_label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(f['label'][()], dtype=torch.int64)",
                            "Call"
                        ],
                        [
                            "F.one_hot(mismatch_label, num_classes=self.n_classes).permute(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "resize(mismatch_label, (self.n_classes, self.size, self.size), order=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "one_hot_61": {
                "variable": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "torch.as_tensor(label, dtype=torch.int64)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_classes": {
                    "value": "self.n_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "permute_61": {
                "variable": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "as_tensor_61": {
                "data": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "f['label'][()]",
                            "Subscript"
                        ],
                        [
                            "F.one_hot(torch.as_tensor(label, dtype=torch.int64), num_classes=self.n_classes).permute(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "resize(label, (self.n_classes, self.size, self.size), order=0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "dataset/rigid_and_deformable_registration.py": {
        "torch": {}
    },
    "main.py": {
        "torch": {
            "manual_seed_22": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_103": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "config['path']",
                            "Subscript"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            }
        }
    },
    "majority_voting.py": {
        "torch": {
            "load_49": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "resume",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "config['path']",
                            "Subscript"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "device_58": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "zeros_64": {
                "variable": {
                    "value": "total_metrics",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(metric_fns)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "config['dataset']['args']['n_classes']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_65": {
                "variable": {
                    "value": "volume_metrics",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(metric_fns)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "config['dataset']['args']['n_classes']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "DataParallel_51": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "config.initialize_class('arch', module_arch)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model.to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_75": {
                "variable": {
                    "value": "output_agg",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[config['dataset']['args']['n_classes'], *data_shape]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_77": {
                "variable": {
                    "value": "target_agg",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[config['dataset']['args']['n_classes'], *data_shape]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "no_grad_67": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_58": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_99": {
                "variable": {
                    "value": "output_agg[cl]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "np.transpose(z, alignment[axis])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_105": {
                "variable": {
                    "value": "target_agg[cl]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "np.transpose(z, alignment[axis])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_135": {
                "variable": {
                    "value": "volume_metrics",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(metric_fns)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_139": {
                "variable": {
                    "value": "output_agg",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[config['dataset']['args']['n_classes'], *data_shape]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_141": {
                "variable": {
                    "value": "target_agg",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[config['dataset']['args']['n_classes'], *data_shape]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "model/utils/layers.py": {
        "torch": {
            "unsqueeze_11": {
                "variable": {
                    "value": "grid",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.stack(torch.meshgrid(vectors))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_45": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[DenseLayer(in_channels + i * growth_rate, growth_rate) for i in range(n_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_78": {
                "variable": {
                    "value": "self.convTrans",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_83": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[out, skip_x]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grid_sample_26": {
                "input": {
                    "value": "src",
                    "type": "Variable",
                    "possible_values": []
                },
                "grid": {
                    "value": "new_locs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.grid + flow",
                            "BinOp"
                        ],
                        [
                            "new_locs.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "new_locs[..., [1, 0]]",
                            "Subscript"
                        ]
                    ]
                },
                "mode": {
                    "value": "self.mode",
                    "type": "Attribute",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "arange_10": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_32": {
                "num_features": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_33": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_34": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "growth_rate",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout2d_35": {
                "p": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cat_52": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, out]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_54": {
                "tensors": {
                    "value": "new_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_58": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, out]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_65": {
                "num_features": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_66": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_67": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout2d_68": {
                "p": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "MaxPool2d_69": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_11": {
                "tensors": {
                    "value": "torch.meshgrid(vectors)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "meshgrid_11": {
                "*tensors": {
                    "value": "vectors",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[torch.arange(0, s) for s in size]",
                            "ListComp"
                        ]
                    ]
                }
            }
        }
    },
    "model/utils/loss.py": {
        "torch": {
            "zeros_like_18": {
                "variable": {
                    "value": "lung_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_fixed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_like_54": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_like_55": {
                "variable": {
                    "value": "targets",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "as_tensor_8": {
                "data": {
                    "value": "float('Inf')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "l1_loss_36": {
                "input": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "target": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "mse_loss_40": {
                "input": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "target": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "nll_loss_49": {
                "input": {
                    "value": "metric_utils.flatten(output)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "metric_utils.flatten(target)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_12": {
                "input": {
                    "value": "s[:, :, 1:, :] - s[:, :, :-1, :]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_13": {
                "input": {
                    "value": "s[:, :, :, 1:] - s[:, :, :, :-1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mse_loss_45": {
                "input": {
                    "value": "output_ref",
                    "type": "Variable",
                    "possible_values": []
                },
                "target": {
                    "value": "target_ref",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "mean_14": {
                "input": {
                    "value": "dy",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.abs(s[:, :, 1:, :] - s[:, :, :-1, :]) ** 2",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "model/utils/metric_utils.py": {
        "torch": {
            "mean_15": {
                "variable": {
                    "value": "total_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1.0 - loss",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_27": {
                "variable": {
                    "value": "tp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target * output",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_28": {
                "variable": {
                    "value": "tn",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(1 - target) * (1 - output)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_29": {
                "variable": {
                    "value": "fp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(1 - target) * output",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_30": {
                "variable": {
                    "value": "fn",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target * (1 - output)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_20": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "as_tensor_49": {
                "data": {
                    "value": "tensor.flatten()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "trainer/LongitudinalTrainer.py": {
        "torch": {
            "one_hot_87": {
                "variable": {
                    "value": "d_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "difference_output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "covid_noncovid_output - covid_noncovid_output_ref",
                            "BinOp"
                        ],
                        [
                            "difference_output + 1",
                            "BinOp"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "permute_87": {
                "variable": {
                    "value": "d_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "one_hot_88": {
                "variable": {
                    "value": "d_target",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "difference_target",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "covid_noncovid_target - covid_noncovid_target_ref",
                            "BinOp"
                        ],
                        [
                            "difference_target + 1",
                            "BinOp"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "permute_88": {
                "variable": {
                    "value": "d_target",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "one_hot_89": {
                "variable": {
                    "value": "d_target_reverse",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "difference_target_reverse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "covid_noncovid_target2 - covid_noncovid_target_ref2",
                            "BinOp"
                        ],
                        [
                            "difference_target_reverse + 1",
                            "BinOp"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "permute_89": {
                "variable": {
                    "value": "d_target_reverse",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "one_hot_90": {
                "variable": {
                    "value": "d_output_reverse",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "difference_output_reverse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "covid_noncovid_output2 - covid_noncovid_output_ref2",
                            "BinOp"
                        ],
                        [
                            "difference_output_reverse + 1",
                            "BinOp"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "permute_90": {
                "variable": {
                    "value": "d_output_reverse",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_92": {
                "variable": {
                    "value": "output_refs",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_93": {
                "variable": {
                    "value": "target_refs",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_98": {
                "variable": {
                    "value": "output_refs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(output_refs, output_ref[i].unsqueeze(0))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_99": {
                "variable": {
                    "value": "target_refs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(target_refs, target_ref[i].unsqueeze(0))",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "trainer/LongitudinalWithProgressionTrainer.py": {
        "torch": {
            "one_hot_67": {
                "variable": {
                    "value": "d_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "difference_output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "covid_noncovid_output - covid_noncovid_output_ref",
                            "BinOp"
                        ],
                        [
                            "difference_output + 1",
                            "BinOp"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "permute_67": {
                "variable": {
                    "value": "d_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "one_hot_68": {
                "variable": {
                    "value": "d_target",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "difference_target",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "covid_noncovid_target - covid_noncovid_target_ref",
                            "BinOp"
                        ],
                        [
                            "difference_target + 1",
                            "BinOp"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "permute_68": {
                "variable": {
                    "value": "d_target",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "one_hot_69": {
                "variable": {
                    "value": "d_target_reverse",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "difference_target_reverse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "covid_noncovid_target2 - covid_noncovid_target_ref2",
                            "BinOp"
                        ],
                        [
                            "difference_target_reverse + 1",
                            "BinOp"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "permute_69": {
                "variable": {
                    "value": "d_target_reverse",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "one_hot_70": {
                "variable": {
                    "value": "d_output_reverse",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "difference_output_reverse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "covid_noncovid_output2 - covid_noncovid_output_ref2",
                            "BinOp"
                        ],
                        [
                            "difference_output_reverse + 1",
                            "BinOp"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "permute_70": {
                "variable": {
                    "value": "d_output_reverse",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_74": {
                "variable": {
                    "value": "output_refs",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_75": {
                "variable": {
                    "value": "target_refs",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_80": {
                "variable": {
                    "value": "output_refs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(output_refs, output_ref[i].unsqueeze(0))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_81": {
                "variable": {
                    "value": "target_refs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(target_refs, target_ref[i].unsqueeze(0))",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "trainer/StaticTrainer.py": {
        "torch": {
            "one_hot_81": {
                "variable": {
                    "value": "d_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "difference_output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "covid_noncovid_output - covid_noncovid_output_ref",
                            "BinOp"
                        ],
                        [
                            "difference_output + 1",
                            "BinOp"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "permute_81": {
                "variable": {
                    "value": "d_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "one_hot_82": {
                "variable": {
                    "value": "d_target",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "difference_target",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "covid_noncovid_target - covid_noncovid_target_ref",
                            "BinOp"
                        ],
                        [
                            "difference_target + 1",
                            "BinOp"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "permute_82": {
                "variable": {
                    "value": "d_target",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "one_hot_83": {
                "variable": {
                    "value": "d_target_reverse",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "difference_target_reverse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "covid_noncovid_target2 - covid_noncovid_target_ref2",
                            "BinOp"
                        ],
                        [
                            "difference_target_reverse + 1",
                            "BinOp"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "permute_83": {
                "variable": {
                    "value": "d_target_reverse",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "one_hot_84": {
                "variable": {
                    "value": "d_output_reverse",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "difference_output_reverse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "covid_noncovid_output2 - covid_noncovid_output_ref2",
                            "BinOp"
                        ],
                        [
                            "difference_output_reverse + 1",
                            "BinOp"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "permute_84": {
                "variable": {
                    "value": "d_output_reverse",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "trainer/Trainer.py": {
        "torch": {
            "no_grad_76": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils/illustration_util.py": {
        "torch": {
            "as_tensor_161": {
                "data": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.expand_dims(np.transpose(np.hstack([a1, a2, b, b1, c, c1]), (2, 0, 1)), axis=0)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(np.transpose(np.hstack([a1, a2, b, c]), (2, 0, 1)), axis=0)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(np.transpose(np.hstack(illustration), (2, 0, 1)), axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "as_tensor_128": {
                "data": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.expand_dims(np.transpose(np.hstack([a1, a2, b, b1, c, c1]), (2, 0, 1)), axis=0)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(np.transpose(np.hstack([a1, a2, b, c]), (2, 0, 1)), axis=0)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(np.transpose(np.hstack(illustration), (2, 0, 1)), axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "as_tensor_134": {
                "data": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.expand_dims(np.transpose(np.hstack([a1, a2, b, b1, c, c1]), (2, 0, 1)), axis=0)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(np.transpose(np.hstack([a1, a2, b, c]), (2, 0, 1)), axis=0)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(np.transpose(np.hstack(illustration), (2, 0, 1)), axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "as_tensor_90": {
                "data": {
                    "value": "tensor1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.expand_dims(np.transpose(np.hstack([a1, a2, b1, b, c, c1]), (2, 0, 1)), axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "as_tensor_97": {
                "data": {
                    "value": "tensor2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.expand_dims(np.transpose(np.hstack([a, a1, b, b1, c, c1]), (2, 0, 1)), axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "as_tensor_103": {
                "data": {
                    "value": "tensor3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.expand_dims(np.transpose(np.hstack([d, e, f, g]), (2, 0, 1)), axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "as_tensor_110": {
                "data": {
                    "value": "tensor4",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.expand_dims(np.transpose(np.hstack([d, e, f, g]), (2, 0, 1)), axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "as_tensor_117": {
                "data": {
                    "value": "tensor5",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.expand_dims(np.transpose(encodedd, (2, 0, 1)), axis=0)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(np.transpose(x_toy, (2, 0, 1)), axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "as_tensor_122": {
                "data": {
                    "value": "tensor5",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.expand_dims(np.transpose(encodedd, (2, 0, 1)), axis=0)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(np.transpose(x_toy, (2, 0, 1)), axis=0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}