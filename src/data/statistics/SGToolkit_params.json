{
    "sg_core/scripts/data_loader/data_preprocessor.py": {
        "sklearn": {}
    },
    "sg_core/scripts/model/embedding_space_evaluator.py": {
        "sklearn": {},
        "torch": {
            "load_27": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "embed_net_path",
                    "type": "variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "l1_loss_60": {
                "variable": {
                    "value": "recon_err_real",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "real_poses",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "real_recon",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "l1_loss_61": {
                "variable": {
                    "value": "recon_err_fake",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "generated_poses",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "generated_recon",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "no_grad_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "sg_core/scripts/utils/data_utils.py": {
        "sklearn": {
            "normalize_190": {
                "variable": {
                    "value": "dir_vec[:, i, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "X": {
                    "value": "dir_vec[:, i, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_197": {
                "variable": {
                    "value": "dir_vec[j, :, i, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "X": {
                    "value": "dir_vec[j, :, i, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "device_10": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "zeros_152": {
                "variable": {
                    "value": "joint_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(vec.shape[0], vec.shape[1], 10, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "vec.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "vec.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_10": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_90": {
                "ndarray": {
                    "value": "pca_poses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pca.transform(poses_npy).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "pca.transform(poses_npy).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "pca_poses.reshape((n_samples, n_seq, -1))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_112": {
                "ndarray": {
                    "value": "poses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pca.inverse_transform(pca_data_npy).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "pca.inverse_transform(pca_data_npy).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "poses.reshape((n_samples, n_seq, -1))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "sg_core/scripts/utils/gui_utils.py": {
        "sklearn": {}
    },
    "sg_core/scripts/data_loader/lmdb_data_loader.py": {
        "torch": {
            "zeros_46": {
                "variable": {
                    "value": "style_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, n_poses, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "pose_seq.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "pose_seq.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_56": {
                "variable": {
                    "value": "motion_speed",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(diff)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "(1, 2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "norm_63": {
                "variable": {
                    "value": "space",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "poses_roi[:, :, 6] - poses_roi[:, :, 9]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_64": {
                "variable": {
                    "value": "space",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "space",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(poses_roi[:, :, 6] - poses_roi[:, :, 9], dim=2)",
                            "Call"
                        ],
                        [
                            "torch.mean(space, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_67": {
                "variable": {
                    "value": "left_arm_move",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(poses_roi[:, 1:, 6] - poses_roi[:, :-1, 6])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "mean_68": {
                "variable": {
                    "value": "right_arm_move",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(poses_roi[:, 1:, 9] - poses_roi[:, :-1, 9])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "where_70": {
                "variable": {
                    "value": "handedness",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "right_arm_move > left_arm_move",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "left_arm_move / right_arm_move - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "1 - right_arm_move / left_arm_move",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_83": {
                "variable": {
                    "value": "style_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "style_vec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "default_collate(style_vec)",
                            "Call"
                        ],
                        [
                            "torch.zeros((batch_size, n_poses, 3), dtype=pose_seq.dtype, device=pose_seq.device)",
                            "Call"
                        ],
                        [
                            "(style_vec - mean) / std",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(style_vec, -3, 3)",
                            "Call"
                        ],
                        [
                            "calculate_style_vec(poses, window_size, mean_pose, style_stat)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(self.style_vectors[idx])",
                            "Call"
                        ],
                        [
                            "torch.zeros((self.n_poses, 1))",
                            "Call"
                        ],
                        [
                            "style_vec[0:self.n_poses]",
                            "Subscript"
                        ],
                        [
                            "style_vec.float()",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "-3",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "as_tensor_213": {
                "variable": {
                    "value": "vec_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "vec_seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "default_collate(vec_seq)",
                            "Call"
                        ],
                        [
                            "vec_seq[0:self.n_poses]",
                            "Subscript"
                        ],
                        [
                            "np.copy(vec_seq)",
                            "Call"
                        ],
                        [
                            "vec_seq - self.mean_dir_vec",
                            "BinOp"
                        ],
                        [
                            "torch.as_tensor(vec_seq).reshape((vec_seq.shape[0], -1)).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_213": {
                "variable": {
                    "value": "vec_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(vec_seq.shape[0], -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "as_tensor_214": {
                "variable": {
                    "value": "pose_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.copy(pose_seq)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_214": {
                "variable": {
                    "value": "pose_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(pose_seq.shape[0], -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "as_tensor_215": {
                "variable": {
                    "value": "audio",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.copy(audio)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_37": {
                "data": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "from_numpy_191": {
                "variable": {
                    "value": "style_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.style_vectors[idx]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_193": {
                "variable": {
                    "value": "style_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(self.n_poses, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "abs_56": {
                "input": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "poses_roi[:, 1:] - poses_roi[:, :-1]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "abs_67": {
                "input": {
                    "value": "poses_roi[:, 1:, 6] - poses_roi[:, :-1, 6]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_68": {
                "input": {
                    "value": "poses_roi[:, 1:, 9] - poses_roi[:, :-1, 9]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_126": {
                "variable": {
                    "value": "mean_pose",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "mean_pose",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(mean_pose).squeeze()",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_126": {
                "variable": {
                    "value": "mean_pose",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_127": {
                "variable": {
                    "value": "mean_dir_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "mean_dir_vec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mean_dir_vec.reshape(mean_dir_vec.shape[:-1] + (-1, 3))",
                            "Call"
                        ],
                        [
                            "torch.tensor(mean_dir_vec).squeeze()",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_127": {
                "variable": {
                    "value": "mean_dir_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_128": {
                "variable": {
                    "value": "style_stat",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "style_stat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(style_stat).squeeze()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "squeeze_128": {
                "variable": {
                    "value": "style_stat",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_138": {
                "variable": {
                    "value": "poses",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "vec_seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "default_collate(vec_seq)",
                            "Call"
                        ],
                        [
                            "vec_seq[0:self.n_poses]",
                            "Subscript"
                        ],
                        [
                            "np.copy(vec_seq)",
                            "Call"
                        ],
                        [
                            "vec_seq - self.mean_dir_vec",
                            "BinOp"
                        ],
                        [
                            "torch.as_tensor(vec_seq).reshape((vec_seq.shape[0], -1)).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_138": {
                "variable": {
                    "value": "poses",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "sg_core/scripts/gesture_generator.py": {
        "torch": {
            "device_21": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "from_numpy_110": {
                "variable": {
                    "value": "mean_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(args.mean_dir_vec).flatten()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_113": {
                "variable": {
                    "value": "pose_constraints",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pose_constraints",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(pose_constraints)",
                            "Call"
                        ],
                        [
                            "pose_constraints.unsqueeze(0).to(device)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "from_numpy_148": {
                "variable": {
                    "value": "in_audio",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "in_audio",
                    "type": "variable",
                    "possible_values": [
                        [
                            "audio[audio_start:audio_end]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(in_audio).unsqueeze(0).to(device).float()",
                            "Call"
                        ],
                        [
                            "np.pad(in_audio, (0, audio_sample_length - len(in_audio)), 'constant')",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_148": {
                "variable": {
                    "value": "in_audio",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_160": {
                "variable": {
                    "value": "in_text_padded",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_167": {
                "variable": {
                    "value": "in_pose_const",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, n_frames, len(args.mean_dir_vec) + 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "pad_175": {
                "variable": {
                    "value": "in_pose_const",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "in_pose_const",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((1, n_frames, len(args.mean_dir_vec) + 1))",
                            "Call"
                        ],
                        [
                            "pose_constraints[:, start_frame:end_frame, :]",
                            "Subscript"
                        ],
                        [
                            "F.pad(in_pose_const, [0, 0, 0, n_pad, 0, 0], 'constant', 0)",
                            "Call"
                        ],
                        [
                            "in_pose_const.float().to(device)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "[0, 0, 0, n_pad, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_195": {
                "variable": {
                    "value": "style_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "sg_core/scripts/model/embedding_net.py": {
        "torch": {
            "Conv1d_15": {
                "variable": {
                    "value": "conv_block",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                },
                "stride": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_16": {
                "variable": {
                    "value": "norm_block",
                    "type": "variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_19": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv_block",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_25": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv_block",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_37": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ConvNormRelu(dim, 32, batchnorm=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_44": {
                "variable": {
                    "value": "self.out_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(800, 256)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_56": {
                "variable": {
                    "value": "self.fc_mu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_57": {
                "variable": {
                    "value": "self.fc_logvar",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_104": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose1d(4, 32, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_79": {
                "variable": {
                    "value": "self.pre_pose_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(dim * 4, 32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_88": {
                "variable": {
                    "value": "self.pre_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(feat_size, 64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_118": {
                "variable": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(pre_pose_feat, feat)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_22": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_27": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_41": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_45": {
                "in_features": {
                    "value": "800",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_48": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_49": {
                "negative_slope": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_50": {
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_51": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_52": {
                "negative_slope": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_53": {
                "in_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_95": {
                "variable": {
                    "value": "self.pre_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(feat_size, 128)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ConvTranspose1d_105": {
                "in_channels": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_106": {
                "num_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_107": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose1d_108": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_109": {
                "num_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_110": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_111": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_112": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_80": {
                "in_features": {
                    "value": "dim * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_81": {
                "num_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_82": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_83": {
                "in_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_89": {
                "in_features": {
                    "value": "feat_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Constant"
                        ],
                        [
                            "feat_size + 32",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_90": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_91": {
                "negative_slope": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_92": {
                "in_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "length * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_96": {
                "in_features": {
                    "value": "feat_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Constant"
                        ],
                        [
                            "feat_size + 32",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_97": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_98": {
                "negative_slope": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_99": {
                "in_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "length * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "sg_core/scripts/model/multimodal_context_net.py": {
        "torch": {
            "Linear_17": {
                "variable": {
                    "value": "self.encoder.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_ftrs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.encoder.fc.in_features",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "feat_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "stack_56": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feat_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_63": {
                "variable": {
                    "value": "self.feat_extractor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv1d(1, 16, 15, stride=5, padding=1600)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_102": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_channels[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_103": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "emb_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "GRU_144": {
                "variable": {
                    "value": "self.gru",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.in_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "args.n_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dropout": {
                    "value": "args.dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_146": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.hidden_size, self.hidden_size // 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "GRU_237": {
                "variable": {
                    "value": "self.gru",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "args.n_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dropout": {
                    "value": "args.dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_239": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_240": {
                "variable": {
                    "value": "self.out2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.n_poses",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_267": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output[:, :, :self.hidden_size] + output[:, :, self.hidden_size:]",
                            "BinOp"
                        ],
                        [
                            "self.out(output.reshape(-1, output.shape[2]))",
                            "Call"
                        ],
                        [
                            "output[:, :, :self.hidden_size] + output[:, :, self.hidden_size:]",
                            "BinOp"
                        ],
                        [
                            "output.contiguous().view(-1, output.shape[2])",
                            "Call"
                        ],
                        [
                            "self.out(output)",
                            "Call"
                        ],
                        [
                            "output.view(batch_size, -1)",
                            "Call"
                        ],
                        [
                            "self.out2(output)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(output)",
                            "Call"
                        ],
                        [
                            "output[:, :, :self.hidden_size] + output[:, :, self.hidden_size:]",
                            "BinOp"
                        ],
                        [
                            "output.contiguous().view(-1, output.shape[2])",
                            "Call"
                        ],
                        [
                            "self.out(output)",
                            "Call"
                        ],
                        [
                            "output.view(batch_size, -1)",
                            "Call"
                        ],
                        [
                            "self.out2(output)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(output)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_278": {
                "variable": {
                    "value": "self.pre_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv1d(input_size, 16, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "GRU_288": {
                "variable": {
                    "value": "self.gru",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dropout": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_290": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_291": {
                "variable": {
                    "value": "self.out2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "54",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_316": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output[:, :, :self.hidden_size] + output[:, :, self.hidden_size:]",
                            "BinOp"
                        ],
                        [
                            "self.out(output.reshape(-1, output.shape[2]))",
                            "Call"
                        ],
                        [
                            "output[:, :, :self.hidden_size] + output[:, :, self.hidden_size:]",
                            "BinOp"
                        ],
                        [
                            "output.contiguous().view(-1, output.shape[2])",
                            "Call"
                        ],
                        [
                            "self.out(output)",
                            "Call"
                        ],
                        [
                            "output.view(batch_size, -1)",
                            "Call"
                        ],
                        [
                            "self.out2(output)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(output)",
                            "Call"
                        ],
                        [
                            "output[:, :, :self.hidden_size] + output[:, :, self.hidden_size:]",
                            "BinOp"
                        ],
                        [
                            "output.contiguous().view(-1, output.shape[2])",
                            "Call"
                        ],
                        [
                            "self.out(output)",
                            "Call"
                        ],
                        [
                            "output.view(batch_size, -1)",
                            "Call"
                        ],
                        [
                            "self.out2(output)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(output)",
                            "Call"
                        ]
                    ]
                }
            },
            "Embedding_97": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "n_words",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "embed_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "300",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "randn_174": {
                "variable": {
                    "value": "z_context",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "in_text.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "in_text.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_180": {
                "variable": {
                    "value": "in_data",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(pose_constraints, audio_feat_seq, text_feat_seq)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_209": {
                "variable": {
                    "value": "in_data",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(in_data, style_vector)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_255": {
                "variable": {
                    "value": "poses",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(poses, text_feat_seq)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_64": {
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "15",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1600",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_65": {
                "num_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_66": {
                "negative_slope": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_67": {
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "15",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_68": {
                "num_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_69": {
                "negative_slope": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_70": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "15",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_71": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_72": {
                "negative_slope": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_73": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "15",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_148": {
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "LeakyReLU_149": {
                "negative_slope": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_150": {
                "in_features": {
                    "value": "self.hidden_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "pose_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "device_count_154": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_182": {
                "variable": {
                    "value": "in_data",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(pose_constraints, audio_feat_seq)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_192": {
                "variable": {
                    "value": "style_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(in_data.shape[0], in_data.shape[1], self.style_vec_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "in_data.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_195": {
                "variable": {
                    "value": "ones",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(in_data.shape[0], in_data.shape[1], self.style_vec_size // 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "in_data.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_197": {
                "variable": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(in_data.shape[0], in_data.shape[1], self.style_vec_size // 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "in_data.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_200": {
                "variable": {
                    "value": "style_vec_bit",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "style_vector == 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((in_data.shape[0], in_data.shape[1], self.style_vec_size // 2), device=in_data.device, dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "ones",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones((in_data.shape[0], in_data.shape[1], self.style_vec_size // 2), device=in_data.device, dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_202": {
                "variable": {
                    "value": "style_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(style_vector.float(), style_vec_bit)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_213": {
                "variable": {
                    "value": "in_data",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(in_data, repeated_z)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_count_243": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv1d_279": {
                "in_channels": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size + 32",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_280": {
                "num_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_281": {
                "negative_slope": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_282": {
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_283": {
                "num_features": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_284": {
                "negative_slope": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_285": {
                "in_channels": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_count_294": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_184": {
                "variable": {
                    "value": "in_data",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(pose_constraints, text_feat_seq)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "sg_core/scripts/model/tcn.py": {
        "torch": {
            "weight_norm_19": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Conv1d(n_inputs, n_outputs, kernel_size, stride=stride, padding=padding, dilation=dilation)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_22": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_23": {
                "variable": {
                    "value": "self.dropout1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.2",
                            "MethodArgument"
                        ],
                        [
                            "0.2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "weight_norm_25": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Conv1d(n_outputs, n_outputs, kernel_size, stride=stride, padding=padding, dilation=dilation)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_28": {
                "variable": {
                    "value": "self.relu2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_29": {
                "variable": {
                    "value": "self.dropout2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.2",
                            "MethodArgument"
                        ],
                        [
                            "0.2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_31": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_34": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_61": {
                "variable": {
                    "value": "self.network",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv1d_19": {
                "in_channels": {
                    "value": "n_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv1d_25": {
                "in_channels": {
                    "value": "n_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv1d_33": {
                "in_channels": {
                    "value": "n_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "sg_core/scripts/train.py": {
        "torch": {
            "Adam_69": {
                "variable": {
                    "value": "gen_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "generator.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.5, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "sg_core/scripts/train_eval/diff_augment.py": {
        "torch": {
            "randn_16": {
                "variable": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "sg_core/scripts/train_eval/train_gan.py": {
        "torch": {
            "tensor_22": {
                "variable": {
                    "value": "mean_dir_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "args.mean_dir_vec",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_22": {
                "variable": {
                    "value": "mean_dir_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_23": {
                "variable": {
                    "value": "mean_pose",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "args.mean_pose",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_23": {
                "variable": {
                    "value": "mean_pose",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_73": {
                "variable": {
                    "value": "dis_error",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-torch.mean(torch.log(dis_real + 1e-08) + torch.log(1 - dis_fake + 1e-08))",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_97": {
                "variable": {
                    "value": "style_stat",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[args.style_val_mean, args.style_val_std, args.style_val_max]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_97": {
                "variable": {
                    "value": "style_stat",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "l1_loss_106": {
                "variable": {
                    "value": "style_compliance",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "style_vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                },
                "target": {
                    "value": "out_style",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_loader.lmdb_data_loader.calculate_style_vec(out_joint_poses, window_size, mean_pose, style_stat)",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_like_14": {
                "input": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "smooth_l1_loss_86": {
                "input": {
                    "value": "out_dir_vec / beta",
                    "type": "BinOp",
                    "possible_values": []
                },
                "target": {
                    "value": "target_data / beta",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_93": {
                "input": {
                    "value": "torch.log(dis_output + 1e-08)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_93": {
                "input": {
                    "value": "dis_output + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_73": {
                "input": {
                    "value": "torch.log(dis_real + 1e-08) + torch.log(1 - dis_fake + 1e-08)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_73": {
                "input": {
                    "value": "1 - dis_fake + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "sg_core/scripts/utils/train_utils.py": {
        "torch": {
            "load_146": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "_device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cpu'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "save_140": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "manual_seed_161": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "manual_seed_all_162": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    }
}