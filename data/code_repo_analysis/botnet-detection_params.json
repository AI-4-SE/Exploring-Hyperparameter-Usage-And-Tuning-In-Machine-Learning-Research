{
    "botdet/eval/evaluation.py": {
        "sklearn": {
            "roc_auc_score_29": {
                "variable": {
                    "value": "auroc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "data.y",
                            "Attribute"
                        ],
                        [
                            "data.ndata['y']",
                            "Subscript"
                        ],
                        [
                            "data['y']",
                            "Subscript"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ]
                    ]
                },
                "y_score": {
                    "value": "pred_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred_prob.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "predictor(data)",
                            "Call"
                        ],
                        [
                            "predictor(data)",
                            "Call"
                        ],
                        [
                            "torch.rand(len(data.y))",
                            "Call"
                        ],
                        [
                            "torch.softmax(out, dim=1)[:, 1]",
                            "Subscript"
                        ],
                        [
                            "pred_prob",
                            "Method Argument"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "rand_107": {
                "variable": {
                    "value": "pred_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(data.y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_112": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_120": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_124": {
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(data.x, data.edge_index)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "botdet/data/data_utils.py": {
        "torch": {
            "tensor_12": {
                "data": {
                    "value": "full_dict[k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_17": {
                "data": {
                    "value": "full_dict[k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "botdet/data/dataloader.py": {
        "torch": {}
    },
    "botdet/data/dataset_botnet.py": {
        "torch": {}
    },
    "botdet/models_pyg/common.py": {
        "torch": {
            "ModuleDict_25": {
                "variable": {
                    "value": "activations",
                    "type": "variable",
                    "possible_values": []
                },
                "modules": {
                    "value": "[['lrelu', nn.LeakyReLU(negative_slope)], ['relu', nn.ReLU()], ['elu', nn.ELU()], ['none', Identity()]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "LeakyReLU_26": {
                "negative_slope": {
                    "value": "negative_slope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ELU_28": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "botdet/models_pyg/gcn_base_models.py": {
        "torch": {
            "Parameter_182": {
                "variable": {
                    "value": "self.weight_node",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(in_channels, out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_203": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(x, self.weight_node)",
                            "Call"
                        ],
                        [
                            "scatter_(self.aggr, x_j, edge_index[1], dim_size=x.size(0))",
                            "Call"
                        ],
                        [
                            "x + self.bias",
                            "BinOp"
                        ],
                        [
                            "scatter_(self.aggr, x_j, edge_index[1], dim_size=x.size(0))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "self.weight_node",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_356": {
                "variable": {
                    "value": "self.linsrc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_357": {
                "variable": {
                    "value": "self.lintgt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "index_select_378": {
                "variable": {
                    "value": "x_j",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(x, self.weight_node)",
                            "Call"
                        ],
                        [
                            "scatter_(self.aggr, x_j, edge_index[1], dim_size=x.size(0))",
                            "Call"
                        ],
                        [
                            "x + self.bias",
                            "BinOp"
                        ],
                        [
                            "scatter_(self.aggr, x_j, edge_index[1], dim_size=x.size(0))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "edge_index[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "index_select_379": {
                "variable": {
                    "value": "x_i",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(x, self.weight_node)",
                            "Call"
                        ],
                        [
                            "scatter_(self.aggr, x_j, edge_index[1], dim_size=x.size(0))",
                            "Call"
                        ],
                        [
                            "x + self.bias",
                            "BinOp"
                        ],
                        [
                            "scatter_(self.aggr, x_j, edge_index[1], dim_size=x.size(0))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "edge_index[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sigmoid_386": {
                "variable": {
                    "value": "edge_gate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "edge_gate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.linsrc(x_j) + self.lintgt(x_i)",
                            "BinOp"
                        ],
                        [
                            "edge_gate + self.bias.view(-1, 1)",
                            "BinOp"
                        ],
                        [
                            "torch.sigmoid(edge_gate)",
                            "Call"
                        ],
                        [
                            "'none'",
                            "Method Argument"
                        ],
                        [
                            "'none'",
                            "Method Argument"
                        ],
                        [
                            "'none'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_404": {
                "variable": {
                    "value": "self.edge_gates",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(num_edges, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_185": {
                "variable": {
                    "value": "self.weight_edge",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(in_edgedim, out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_188": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_209": {
                "variable": {
                    "value": "x_je",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "edge_attr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "self.weight_edge",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "index_select_214": {
                "variable": {
                    "value": "x_j",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(x, self.weight_node)",
                            "Call"
                        ],
                        [
                            "scatter_(self.aggr, x_j, edge_index[1], dim_size=x.size(0))",
                            "Call"
                        ],
                        [
                            "x + self.bias",
                            "BinOp"
                        ],
                        [
                            "scatter_(self.aggr, x_j, edge_index[1], dim_size=x.size(0))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "edge_index[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_280": {
                "variable": {
                    "value": "self.mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "variable"
                        ],
                        [
                            "in_channels + in_edgedim",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_359": {
                "variable": {
                    "value": "self.linedge",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_edgedim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_362": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_413": {
                "input": {
                    "value": "self.edge_gates",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_118": {
                "variable": {
                    "value": "edge_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(edge_index.size(1),)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "edge_index.device",
                            "Attribute"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "index_select_223": {
                "variable": {
                    "value": "x_j",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_j",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(x, 0, edge_index[0])",
                            "Call"
                        ],
                        [
                            "x_j + x_je if edge_attr is not None else x_j",
                            "IfExp"
                        ],
                        [
                            "x * norm.view(-1, 1)",
                            "BinOp"
                        ],
                        [
                            "torch.index_select(x_j, 0, edge_index[0])",
                            "Call"
                        ],
                        [
                            "torch.index_select(x, 0, edge_index[0])",
                            "Call"
                        ],
                        [
                            "x_j * norm.view(-1, 1)",
                            "BinOp"
                        ],
                        [
                            "eg * x_j",
                            "BinOp"
                        ],
                        [
                            "x[row]",
                            "Subscript"
                        ],
                        [
                            "x * norm.view(-1, 1)",
                            "BinOp"
                        ],
                        [
                            "torch.index_select(x_j, 0, edge_index[0])",
                            "Call"
                        ],
                        [
                            "torch.index_select(x, 0, edge_index[0])",
                            "Call"
                        ],
                        [
                            "x_j * norm.view(-1, 1)",
                            "BinOp"
                        ],
                        [
                            "self.mlp(torch.cat([x_j, edge_attr], dim=1))",
                            "Call"
                        ],
                        [
                            "self.mlp(x_j)",
                            "Call"
                        ],
                        [
                            "eg * x_j",
                            "BinOp"
                        ],
                        [
                            "torch.index_select(x, 0, edge_index[0])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "edge_index[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "index_select_226": {
                "variable": {
                    "value": "x_j",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(x, self.weight_node)",
                            "Call"
                        ],
                        [
                            "scatter_(self.aggr, x_j, edge_index[1], dim_size=x.size(0))",
                            "Call"
                        ],
                        [
                            "x + self.bias",
                            "BinOp"
                        ],
                        [
                            "scatter_(self.aggr, x_j, edge_index[1], dim_size=x.size(0))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "edge_index[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Sequential_290": {
                "variable": {
                    "value": "self.mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.mlp",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "index_select_316": {
                "variable": {
                    "value": "x_j",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_j",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(x, 0, edge_index[0])",
                            "Call"
                        ],
                        [
                            "x_j + x_je if edge_attr is not None else x_j",
                            "IfExp"
                        ],
                        [
                            "x * norm.view(-1, 1)",
                            "BinOp"
                        ],
                        [
                            "torch.index_select(x_j, 0, edge_index[0])",
                            "Call"
                        ],
                        [
                            "torch.index_select(x, 0, edge_index[0])",
                            "Call"
                        ],
                        [
                            "x_j * norm.view(-1, 1)",
                            "BinOp"
                        ],
                        [
                            "eg * x_j",
                            "BinOp"
                        ],
                        [
                            "x[row]",
                            "Subscript"
                        ],
                        [
                            "x * norm.view(-1, 1)",
                            "BinOp"
                        ],
                        [
                            "torch.index_select(x_j, 0, edge_index[0])",
                            "Call"
                        ],
                        [
                            "torch.index_select(x, 0, edge_index[0])",
                            "Call"
                        ],
                        [
                            "x_j * norm.view(-1, 1)",
                            "BinOp"
                        ],
                        [
                            "self.mlp(torch.cat([x_j, edge_attr], dim=1))",
                            "Call"
                        ],
                        [
                            "self.mlp(x_j)",
                            "Call"
                        ],
                        [
                            "eg * x_j",
                            "BinOp"
                        ],
                        [
                            "torch.index_select(x, 0, edge_index[0])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "edge_index[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "index_select_319": {
                "variable": {
                    "value": "x_j",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(x, self.weight_node)",
                            "Call"
                        ],
                        [
                            "scatter_(self.aggr, x_j, edge_index[1], dim_size=x.size(0))",
                            "Call"
                        ],
                        [
                            "x + self.bias",
                            "BinOp"
                        ],
                        [
                            "scatter_(self.aggr, x_j, edge_index[1], dim_size=x.size(0))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "edge_index[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_324": {
                "tensors": {
                    "value": "[x_j, edge_attr]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_282": {
                "in_features": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "variable"
                        ],
                        [
                            "in_channels + in_edgedim",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "mlp_nhid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_286": {
                "in_features": {
                    "value": "mlp_nhid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "mlp_nhid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_289": {
                "in_features": {
                    "value": "mlp_nhid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "botdet/models_pyg/gcn_model.py": {
        "torch": {
            "Dropout_94": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ModuleList_82": {
                "variable": {
                    "value": "self.gcn_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[GCNLayer(in_c, out_c, nheads=nh, non_linear=non_linear_layer_wise, **kwargs) for (in_c, out_c, nh) in zip(self.enc_sizes, self.enc_sizes[1:], self.nheads)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_86": {
                "variable": {
                    "value": "self.gcn_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[GCNLayer(in_c, out_c, nheads=nh, non_linear=non_linear_layer_wise, **kwargs) for (in_c, out_c, nh) in zip(self.enc_sizes[:-2], self.enc_sizes[1:-1], self.nheads[:-1])]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_97": {
                "variable": {
                    "value": "self.residuals",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(self.enc_sizes[i], self.enc_sizes[j], bias=False) if self.enc_sizes[i] != self.enc_sizes[j] else nn.Identity() for (i, j) in zip(range(0, len(self.enc_sizes), residual_hop), range(residual_hop, len(self.enc_sizes), residual_hop))]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Identity_108": {
                "variable": {
                    "value": "self.final",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_110": {
                "variable": {
                    "value": "self.final",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.enc_sizes[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_classes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pad_sequence_171": {
                "variable": {
                    "value": "x_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "x_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(*[(x[i:j], j - i) for (i, j) in zip(batch_slices_x, batch_slices_x[1:])])",
                            "Call"
                        ],
                        [
                            "pad_sequence(x_batch, batch_first=True, padding_value=0)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_97": {
                "in_features": {
                    "value": "self.enc_sizes[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.enc_sizes[j]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Identity_100": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "botdet/models_pyg/graph_attention.py": {
        "torch": {
            "Parameter_43": {
                "variable": {
                    "value": "self.att_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, nheads, 2 * self.out_channels_1head)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_45": {
                "variable": {
                    "value": "self.att_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "att_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mm_63": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(x, self.weight).view(-1, self.nheads, self.out_channels_1head)",
                            "Call"
                        ],
                        [
                            "scatter_(self.aggr, x_j, edge_index[1], dim_size=x.size(0))",
                            "Call"
                        ],
                        [
                            "x.view(-1, self.out_channels)",
                            "Call"
                        ],
                        [
                            "x.sum(dim=1)",
                            "Call"
                        ],
                        [
                            "x.mean(dim=1)",
                            "Call"
                        ],
                        [
                            "x + self.bias",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "index_select_66": {
                "variable": {
                    "value": "x_j",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(x, self.weight).view(-1, self.nheads, self.out_channels_1head)",
                            "Call"
                        ],
                        [
                            "scatter_(self.aggr, x_j, edge_index[1], dim_size=x.size(0))",
                            "Call"
                        ],
                        [
                            "x.view(-1, self.out_channels)",
                            "Call"
                        ],
                        [
                            "x.sum(dim=1)",
                            "Call"
                        ],
                        [
                            "x.mean(dim=1)",
                            "Call"
                        ],
                        [
                            "x + self.bias",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "edge_index[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "index_select_67": {
                "variable": {
                    "value": "x_i",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(x, self.weight).view(-1, self.nheads, self.out_channels_1head)",
                            "Call"
                        ],
                        [
                            "scatter_(self.aggr, x_j, edge_index[1], dim_size=x.size(0))",
                            "Call"
                        ],
                        [
                            "x.view(-1, self.out_channels)",
                            "Call"
                        ],
                        [
                            "x.sum(dim=1)",
                            "Call"
                        ],
                        [
                            "x.mean(dim=1)",
                            "Call"
                        ],
                        [
                            "x + self.bias",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "edge_index[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Parameter_40": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(in_channels, out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_42": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(in_channels, out_channels * nheads)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_48": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_70": {
                "tensors": {
                    "value": "[x_j, x_i]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "train_botnet.py": {
        "torch": {
            "CrossEntropyLoss_264": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_265": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_266": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(model.parameters(), lr=args.lr, weight_decay=args.weight_decay)",
                            "Call"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "min",
                    "type": "str",
                    "possible_values": []
                },
                "factor": {
                    "value": "0.25",
                    "type": "float",
                    "possible_values": []
                },
                "patience": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_182": {
                "variable": {
                    "value": "best_model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.save_dir, args.save_name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_197": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_201": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_170": {
                "obj": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "GCNModel(args.in_channels, args.enc_sizes, args.n_classes, non_linear=args.act, non_linear_layer_wise=args.layer_act, residual_hop=args.residual_hop, dropout=args.dropout, final_layer_config=final_layer_config, final_type=args.final, pred_on='node', nodemodel=args.nodemodel, deg_norm=args.deg_norm, edge_gate=args.edge_gate, aggr=args.aggr, bias=bool(args.bias), nheads=args.nheads, att_act=args.att_act, att_dropout=args.att_dropout, att_dir=args.att_dir, att_combine=args.att_combine)",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(args.save_dir, args.save_name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_148": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_150": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(batch.x, batch.edge_index)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}