{
    "data/distortion_prior.py": {
        "torch": {
            "arange_6": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "step": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_7": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": []
                },
                "step": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_12": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[xx, yy]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "data/fastec_rs_lmdb.py": {
        "torch": {
            "cat_94": {
                "variable": {
                    "value": "imgs_inp",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "imgs_inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(imgs_inp, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_95": {
                "variable": {
                    "value": "imgs_gt",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "imgs_gt[self.num_fb:self.frames - self.num_ff]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_113": {
                "variable": {
                    "value": "self.loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "para.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "para.threads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "data/rscd_lmdb.py": {
        "torch": {
            "cat_93": {
                "variable": {
                    "value": "imgs_inp",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "imgs_inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(imgs_inp, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_94": {
                "variable": {
                    "value": "imgs_gt",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "imgs_gt[self.num_fb:self.frames - self.num_ff]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_110": {
                "variable": {
                    "value": "self.loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "para.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "para.threads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "data/utils.py": {
        "torch": {
            "from_numpy_71": {
                "variable": {
                    "value": "sample[image]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.ascontiguousarray(image.transpose((2, 0, 1))[np.newaxis, :])",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_72": {
                "variable": {
                    "value": "sample[label]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.ascontiguousarray(label.transpose((2, 0, 1))[np.newaxis, :])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "model/JCD.py": {
        "torch": {
            "arange_11": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "step": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_12": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": []
                },
                "step": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_17": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[xx, yy]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_309": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "320",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_25": {
                "variable": {
                    "value": "self.conv0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_chs",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_chs",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_74": {
                "variable": {
                    "value": "self.F_f",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(3 * n_feats, 6 * n_feats)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_85": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cor",
                    "type": "variable",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "squeeze_85": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Upsample_118": {
                "variable": {
                    "value": "self.upsample2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_128": {
                "variable": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[p_warped2, feat, f_warped2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_136": {
                "variable": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[p_warped1, up_x2, f_warped1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_138": {
                "variable": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x1, up_img2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_145": {
                "variable": {
                    "value": "x0",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[p_warped0, up_x1, f_warped0]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_147": {
                "variable": {
                    "value": "x0",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x0, up_img1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_161": {
                "variable": {
                    "value": "self.leakyReLU2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "LeakyReLU_164": {
                "variable": {
                    "value": "self.leakyReLU1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "LeakyReLU_167": {
                "variable": {
                    "value": "self.leakyReLU0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Upsample_191": {
                "variable": {
                    "value": "self.upsample2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_204": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.conv2_0(corr2), corr2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_205": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.conv2_1(x), x]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_206": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.conv2_2(x), x]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_207": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.conv2_3(x), x]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_208": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.conv2_4(x), x]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_214": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[corr1, upfeat2, upflow2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_215": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.conv1_0(x), x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_216": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.conv1_1(x), x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_217": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.conv1_2(x), x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_218": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.conv1_3(x), x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_219": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.conv1_4(x), x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_194": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_197": {
                "in_channels": {
                    "value": "int(in_planes)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_75": {
                "in_features": {
                    "value": "3 * n_feats",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "6 * n_feats",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_77": {
                "in_features": {
                    "value": "6 * n_feats",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "3 * n_feats",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sigmoid_78": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "interpolate_273": {
                "variable": {
                    "value": "t_flow_ref_to_row0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flow_encoding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img_rs[:, 0, -1:, :, :]",
                            "Subscript"
                        ]
                    ]
                },
                "size": {
                    "value": "(H, W)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_283": {
                "variable": {
                    "value": "t_flow_ref_to_row0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flow_encoding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img_rs[:, 0, -1:, :, :]",
                            "Subscript"
                        ]
                    ]
                },
                "size": {
                    "value": "(H, W)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_293": {
                "variable": {
                    "value": "t_flow_ref_to_row0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flow_encoding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img_rs[:, 0, -1:, :, :]",
                            "Subscript"
                        ]
                    ]
                },
                "size": {
                    "value": "(H, W)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_48": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_173": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_174": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_175": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_176": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_177": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_185": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_186": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_187": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_188": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_189": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "model/model.py": {
        "torch": {}
    },
    "model/utils.py": {
        "torch": {
            "Conv2d_7": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_11": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_15": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_57": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_74": {
                "variable": {
                    "value": "self.main_branch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*op",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cat_94": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, out)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_110": {
                "variable": {
                    "value": "self.dense_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*op",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ModuleList_128": {
                "variable": {
                    "value": "self.RDBs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_141": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.main_branch(x)",
                            "Call"
                        ],
                        [
                            "out + x",
                            "BinOp"
                        ],
                        [
                            "self.act(self.conv(x))",
                            "Call"
                        ],
                        [
                            "torch.cat((x, out), 1)",
                            "Call"
                        ],
                        [
                            "self.dense_layers(x)",
                            "Call"
                        ],
                        [
                            "self.conv1x1(out)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(out, dim=1)",
                            "Call"
                        ],
                        [
                            "self.act(self.conv1x1(out))",
                            "Call"
                        ],
                        [
                            "self.act(self.conv3x3(out))",
                            "Call"
                        ],
                        [
                            "self.deform(x, offset, mask)",
                            "Call"
                        ],
                        [
                            "self.act(out)",
                            "Call"
                        ],
                        [
                            "self.deform(x, offset)",
                            "Call"
                        ],
                        [
                            "self.act(out)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "chunk_168": {
                "variable": {
                    "value": "(offset_x, offset_y, mask)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "offset_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.deform_offset(feat)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_169": {
                "variable": {
                    "value": "offset",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(offset_x, offset_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU6_23": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LeakyReLU_25": {
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "PReLU_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_71": {
                "num_features": {
                    "value": "in_chs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "RReLU_29": {
                "lower": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "upper": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                }
            },
            "SELU_31": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CELU_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ELU_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GELU_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "packages_from_deepunrollnet/package_core/package_core/convertions.py": {
        "torch": {
            "tensor_32": {
                "variable": {
                    "value": "pi",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "3.141592653589793",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ones_like_95": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z_vec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "points[..., -1:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "unsqueeze_171": {
                "variable": {
                    "value": "_angle_axis",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "angle_axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(quaternion)[..., :3]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_172": {
                "variable": {
                    "value": "theta2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "_angle_axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(angle_axis, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "_angle_axis.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_173": {
                "variable": {
                    "value": "theta2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "theta2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(_angle_axis, _angle_axis.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "torch.squeeze(theta2, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_187": {
                "variable": {
                    "value": "rotation_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "chunk_255": {
                "variable": {
                    "value": "(m00, m01, m02, m10, m11, m12, m20, m21, m22)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "rotation_matrix_vec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rotation_matrix.view(*rotation_matrix.shape[:-2], 9)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "9",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "where_292": {
                "variable": {
                    "value": "where_2",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "m11 > m22",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "cond_2()",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "cond_3()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_293": {
                "variable": {
                    "value": "where_1",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "(m00 > m11) & (m00 > m22)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "x": {
                    "value": "cond_1()",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "where_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.where(m11 > m22, cond_2(), cond_3())",
                            "Call"
                        ]
                    ]
                }
            },
            "where_296": {
                "variable": {
                    "value": "quaternion",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "trace > 0.0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "trace_positive_cond()",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "where_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.where((m00 > m11) & (m00 > m22), cond_1(), where_2)",
                            "Call"
                        ]
                    ]
                }
            },
            "chunk_359": {
                "variable": {
                    "value": "(x, y, z, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "quaternion_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "normalize_quaternion(quaternion)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_374": {
                "variable": {
                    "value": "one",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "stack_376": {
                "variable": {
                    "value": "matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[one - (tyy + tzz), txy - twz, txz + twy, txy + twz, one - (txx + tzz), tyz - twx, txz - twy, tyz + twx, one - (txx + tyy)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sqrt_416": {
                "variable": {
                    "value": "sin_theta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sin_squared_theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q1 * q1 + q2 * q2 + q3 * q3",
                            "BinOp"
                        ]
                    ]
                }
            },
            "where_424": {
                "variable": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "sin_squared_theta > 0.0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "k_pos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "two_theta / (sin_theta + 1e-08)",
                            "BinOp"
                        ],
                        [
                            "torch.sin(half_theta) / theta",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "k_neg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2.0 * torch.ones_like(sin_theta)",
                            "BinOp"
                        ],
                        [
                            "0.5 * ones",
                            "BinOp"
                        ]
                    ]
                }
            },
            "norm_456": {
                "variable": {
                    "value": "norm_q",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "quaternion",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rotation_matrix_to_quaternion(rotation_matrix)",
                            "Call"
                        ],
                        [
                            "torch.where(trace > 0.0, trace_positive_cond(), where_1)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(angle_axis)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "clamp_456": {
                "variable": {
                    "value": "norm_q",
                    "type": "variable",
                    "possible_values": []
                },
                "min": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-06",
                            "float"
                        ],
                        [
                            "torch.finfo(numerator.dtype).tiny",
                            "Attribute"
                        ],
                        [
                            "1e-06",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cos_461": {
                "variable": {
                    "value": "quaternion_scalar",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "norm_q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(quaternion, p=2, dim=-1, keepdim=True).clamp(min=eps)",
                            "Call"
                        ],
                        [
                            "torch.norm(quaternion_vector, p=2, dim=-1, keepdim=True).clamp(min=eps)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_464": {
                "variable": {
                    "value": "quaternion_exp",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[quaternion_vector, quaternion_scalar]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "norm_496": {
                "variable": {
                    "value": "norm_q",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "quaternion_vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "quaternion * torch.sin(norm_q) / norm_q",
                            "BinOp"
                        ],
                        [
                            "quaternion[..., 0:3]",
                            "Subscript"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "clamp_496": {
                "variable": {
                    "value": "norm_q",
                    "type": "variable",
                    "possible_values": []
                },
                "min": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-06",
                            "float"
                        ],
                        [
                            "torch.finfo(numerator.dtype).tiny",
                            "Attribute"
                        ],
                        [
                            "1e-06",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sqrt_538": {
                "variable": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "theta_squared",
                    "type": "variable",
                    "possible_values": [
                        [
                            "a0 * a0 + a1 * a1 + a2 * a2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_like_542": {
                "variable": {
                    "value": "ones",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "half_theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "theta * 0.5",
                            "BinOp"
                        ]
                    ]
                }
            },
            "where_546": {
                "variable": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.abs(z_vec) > eps",
                            "Compare"
                        ],
                        [
                            "(theta2 > eps).view(-1, 1, 1).to(theta2.device)",
                            "Call"
                        ],
                        [
                            "theta_squared > 0.0",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "k_pos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "two_theta / (sin_theta + 1e-08)",
                            "BinOp"
                        ],
                        [
                            "torch.sin(half_theta) / theta",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "k_neg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2.0 * torch.ones_like(sin_theta)",
                            "BinOp"
                        ],
                        [
                            "0.5 * ones",
                            "BinOp"
                        ]
                    ]
                }
            },
            "where_547": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.abs(z_vec) > eps",
                            "Compare"
                        ],
                        [
                            "(theta2 > eps).view(-1, 1, 1).to(theta2.device)",
                            "Call"
                        ],
                        [
                            "theta_squared > 0.0",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "torch.cos(half_theta)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "ones",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones_like(half_theta)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_549": {
                "variable": {
                    "value": "quaternion",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "angle_axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(quaternion)[..., :3]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "stack_579": {
                "variable": {
                    "value": "hw",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.tensor(width), torch.tensor(height)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_609": {
                "variable": {
                    "value": "hw",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.tensor(width), torch.tensor(height)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_640": {
                "variable": {
                    "value": "dhw",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.tensor(depth), torch.tensor(width), torch.tensor(height)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_672": {
                "variable": {
                    "value": "dhw",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.tensor(depth), torch.tensor(width), torch.tensor(height)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "atan2_689": {
                "variable": {
                    "value": "Rx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2.0 * (w * x + y * z)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "1.0 - 2.0 * (x * x + y * y)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "asin_690": {
                "variable": {
                    "value": "Ry",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2.0 * (w * y - x * z)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "atan2_691": {
                "variable": {
                    "value": "Rz",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2.0 * (w * z + x * y)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "1.0 - 2.0 * (y * y + z * z)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_693": {
                "variable": {
                    "value": "euler",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[Rx, Ry, Rz]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cos_702": {
                "variable": {
                    "value": "cr",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0.5 * Rx",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_703": {
                "variable": {
                    "value": "sr",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0.5 * Rx",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_704": {
                "variable": {
                    "value": "cp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0.5 * Ry",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_705": {
                "variable": {
                    "value": "sp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0.5 * Ry",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_706": {
                "variable": {
                    "value": "cy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0.5 * Rz",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_707": {
                "variable": {
                    "value": "sy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0.5 * Rz",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_714": {
                "variable": {
                    "value": "Q",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, y, z, w]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "pad_113": {
                "input": {
                    "value": "points",
                    "type": "variable",
                    "possible_values": []
                },
                "pad": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sqrt_143": {
                "variable": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "theta2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(_angle_axis, _angle_axis.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "torch.squeeze(theta2, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "chunk_145": {
                "variable": {
                    "value": "(wx, wy, wz)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "wxyz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "angle_axis / (theta + eps)",
                            "BinOp"
                        ]
                    ]
                },
                "chunks": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cos_146": {
                "variable": {
                    "value": "cos_theta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sqrt(theta2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(theta_squared)",
                            "Call"
                        ]
                    ]
                }
            },
            "sin_147": {
                "variable": {
                    "value": "sin_theta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sqrt(theta2)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(theta_squared)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_158": {
                "variable": {
                    "value": "rotation_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[r00, r01, r02, r10, r11, r12, r20, r21, r22]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "chunk_163": {
                "variable": {
                    "value": "(rx, ry, rz)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "angle_axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(quaternion)[..., :3]",
                            "Subscript"
                        ]
                    ]
                },
                "chunks": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_like_164": {
                "variable": {
                    "value": "k_one",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rx",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_165": {
                "variable": {
                    "value": "rotation_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[k_one, -rz, ry, rz, k_one, -rx, -ry, rx, k_one]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_325": {
                "input": {
                    "value": "quaternion",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rotation_matrix_to_quaternion(rotation_matrix)",
                            "Call"
                        ],
                        [
                            "torch.where(trace > 0.0, trace_positive_cond(), where_1)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(angle_axis)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "eps": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-06",
                            "float"
                        ],
                        [
                            "torch.finfo(numerator.dtype).tiny",
                            "Attribute"
                        ],
                        [
                            "1e-06",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squeeze_383": {
                "variable": {
                    "value": "matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack([one - (tyy + tzz), txy - twz, txz + twy, txy + twz, one - (txx + tzz), tyz - twx, txz - twy, tyz + twx, one - (txx + tyy)], dim=-1).view(-1, 3, 3)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(matrix, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_553": {
                "tensors": {
                    "value": "[quaternion, w]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "abs_94": {
                "input": {
                    "value": "z_vec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "points[..., -1:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_266": {
                "tensors": {
                    "value": "[qx, qy, qz, qw]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_274": {
                "tensors": {
                    "value": "[qx, qy, qz, qw]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_282": {
                "tensors": {
                    "value": "[qx, qy, qz, qw]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_290": {
                "tensors": {
                    "value": "[qx, qy, qz, qw]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "is_tensor_402": {
                "obj": {
                    "value": "quaternion",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rotation_matrix_to_quaternion(rotation_matrix)",
                            "Call"
                        ],
                        [
                            "torch.where(trace > 0.0, trace_positive_cond(), where_1)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(angle_axis)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_418": {
                "condition": {
                    "value": "cos_theta < 0.0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.atan2(-sin_theta, -cos_theta)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "torch.atan2(sin_theta, cos_theta)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_like_423": {
                "input": {
                    "value": "sin_theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sin(theta)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(sin_squared_theta)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_426": {
                "input": {
                    "value": "quaternion",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rotation_matrix_to_quaternion(rotation_matrix)",
                            "Call"
                        ],
                        [
                            "torch.where(trace > 0.0, trace_positive_cond(), where_1)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(angle_axis)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_tensor_524": {
                "obj": {
                    "value": "angle_axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(quaternion)[..., :3]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sin_545": {
                "input": {
                    "value": "half_theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "theta * 0.5",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cos_547": {
                "input": {
                    "value": "half_theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "theta * 0.5",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tensor_583": {
                "data": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_613": {
                "data": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_644": {
                "data": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_676": {
                "data": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_96": {
                "data": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clamp_250": {
                "input": {
                    "value": "denominator",
                    "type": "variable",
                    "possible_values": []
                },
                "min": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-06",
                            "float"
                        ],
                        [
                            "torch.finfo(numerator.dtype).tiny",
                            "Attribute"
                        ],
                        [
                            "1e-06",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sqrt_261": {
                "input": {
                    "value": "trace + 1.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_269": {
                "input": {
                    "value": "1.0 + m00 - m11 - m22 + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_277": {
                "input": {
                    "value": "1.0 + m11 - m00 - m22 + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_285": {
                "input": {
                    "value": "1.0 + m22 - m00 - m11 + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "atan2_419": {
                "input": {
                    "value": "-sin_theta",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "other": {
                    "value": "-cos_theta",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "atan2_420": {
                "input": {
                    "value": "sin_theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sin(theta)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(sin_squared_theta)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "cos_theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cos(theta)",
                            "Call"
                        ],
                        [
                            "quaternion[..., 3]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sin_460": {
                "input": {
                    "value": "norm_q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(quaternion, p=2, dim=-1, keepdim=True).clamp(min=eps)",
                            "Call"
                        ],
                        [
                            "torch.norm(quaternion_vector, p=2, dim=-1, keepdim=True).clamp(min=eps)",
                            "Call"
                        ]
                    ]
                }
            },
            "acos_500": {
                "input": {
                    "value": "torch.clamp(quaternion_scalar, min=-1.0, max=1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_615": {
                "data": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_677": {
                "data": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clamp_501": {
                "input": {
                    "value": "quaternion_scalar",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cos(norm_q)",
                            "Call"
                        ],
                        [
                            "quaternion[..., 3:4]",
                            "Subscript"
                        ]
                    ]
                },
                "min": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_580": {
                "data": {
                    "value": "height",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_610": {
                "data": {
                    "value": "height",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_641": {
                "data": {
                    "value": "height",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_673": {
                "data": {
                    "value": "height",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "packages_from_deepunrollnet/package_core/package_core/disp_netS.py": {
        "torch": {
            "Sequential_8": {
                "*args": {
                    "value": "nn.Conv2d(in_planes, out_planes, kernel_size=kernel_size, stride=2, padding=(kernel_size - 1) // 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_17": {
                "*args": {
                    "value": "nn.Conv2d(in_planes, 1, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_24": {
                "*args": {
                    "value": "nn.Conv2d(in_planes, out_planes, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_31": {
                "*args": {
                    "value": "nn.ConvTranspose2d(in_planes, out_planes, kernel_size=3, stride=2, padding=1, output_padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_98": {
                "variable": {
                    "value": "concat7",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out_upconv7, out_conv6)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_102": {
                "variable": {
                    "value": "concat6",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out_upconv6, out_conv5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_106": {
                "variable": {
                    "value": "concat5",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out_upconv5, out_conv4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_110": {
                "variable": {
                    "value": "concat4",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out_upconv4, out_conv3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_116": {
                "variable": {
                    "value": "concat3",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out_upconv3, out_conv2, disp4_up)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_122": {
                "variable": {
                    "value": "concat2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out_upconv2, out_conv1, disp3_up)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_128": {
                "variable": {
                    "value": "concat1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(out_upconv1, disp2_up)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_9": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "(kernel_size - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_10": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_11": {
                "in_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "(kernel_size - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_12": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_18": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_25": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_26": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_32": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_33": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_115": {
                "input": {
                    "value": "disp4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.alpha * self.predict_disp4(out_iconv4) + self.beta",
                            "BinOp"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_121": {
                "input": {
                    "value": "disp3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.alpha * self.predict_disp3(out_iconv3) + self.beta",
                            "BinOp"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_127": {
                "input": {
                    "value": "disp2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.alpha * self.predict_disp2(out_iconv2) + self.beta",
                            "BinOp"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "packages_from_deepunrollnet/package_core/package_core/geometry.py": {
        "torch": {
            "arange_43": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_skew(w_so3)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_44": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_144": {
                "variable": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "twist.size()[0]",
                            "Subscript"
                        ],
                        [
                            "R.size()[0]",
                            "Subscript"
                        ],
                        [
                            "ai.size()[0]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_182": {
                "variable": {
                    "value": "R_trace",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "R1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_R.bmm(R0)",
                            "Call"
                        ],
                        [
                            "[torch.trace(R[i]) for i in range(R.size()[0])]",
                            "ListComp"
                        ],
                        [
                            "[torch.trace(R[i]) for i in range(R.size()[0])]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "acos_185": {
                "variable": {
                    "value": "angle",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "((R_trace - 1) / 2).clamp(-1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_205": {
                "variable": {
                    "value": "tr",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "R1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_R.bmm(R0)",
                            "Call"
                        ],
                        [
                            "[torch.trace(R[i]) for i in range(R.size()[0])]",
                            "ListComp"
                        ],
                        [
                            "[torch.trace(R[i]) for i in range(R.size()[0])]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "acos_206": {
                "variable": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "((tr - 1) / 2).clamp(-1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "split_208": {
                "variable": {
                    "value": "(r11, r12, r13, r21, r22, r23, r31, r32, r33)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "R.view(B, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_209": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[r32 - r23, r13 - r31, r21 - r12]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_232": {
                "variable": {
                    "value": "I",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(B, 1, H, W)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_233": {
                "variable": {
                    "value": "x_y_1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(p_x, p_y, I)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_238": {
                "variable": {
                    "value": "(x_, y_, s_)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "warped",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(R, x_y_1.view(B, 3, H * W)) + t.view(B, 3, 1).expand(B, 3, H * W) * p_invD.view(B, 1, H * W).expand(B, 3, H * W)",
                            "BinOp"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_239": {
                "variable": {
                    "value": "(fx, fy, cx, cy)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_252": {
                "variable": {
                    "value": "ones",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "pu.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_253": {
                "variable": {
                    "value": "uv",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(pu, pv, ones)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_254": {
                "variable": {
                    "value": "uv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "affine",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "uv.view(B, 3, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_280": {
                "variable": {
                    "value": "uv_grid",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(u_norm.view(B, H, W, 1), v_norm.view(B, H, W, 1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grid_sample_281": {
                "variable": {
                    "value": "F_warped",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F",
                    "type": "variable",
                    "possible_values": []
                },
                "grid": {
                    "value": "uv_grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "meshgrid(H, W, B)",
                            "Call"
                        ],
                        [
                            "torch.cat((u_norm.view(B, H, W, 1), v_norm.view(B, H, W, 1)), dim=3)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "padding_mode": {
                    "value": "border",
                    "type": "str",
                    "possible_values": []
                }
            },
            "baddbmm_297": {
                "variable": {
                    "value": "xyz_t_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "t_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "t.contiguous().view(B, 3, 1).repeat(1, 1, H * W)",
                            "Call"
                        ]
                    ]
                },
                "batch1": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": []
                },
                "batch2": {
                    "value": "p_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xyz_tensor.contiguous().view(B, C, H * W)",
                            "Call"
                        ]
                    ]
                }
            },
            "split_328": {
                "variable": {
                    "value": "(x, y, z)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "xyz_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_329": {
                "variable": {
                    "value": "(fx, fy, cx, cy)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "batch_K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K.expand(H, W, B, 4).permute(2, 3, 0, 1)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_146": {
                "tensors": {
                    "value": "(o, -w2, w1, w2, o, -w0, -w1, w0, o)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_303": {
                "variable": {
                    "value": "J",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(J_r, J_t)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_333": {
                "tensors": {
                    "value": "(u, v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_351": {
                "tensors": {
                    "value": "(x * z, y * z, z)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_409": {
                "tensors": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.stack(c_i, 1), torch.stack(c_j, 1), torch.stack(c_k, 1)]",
                            "List"
                        ],
                        [
                            "permute(r)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_433": {
                "variable": {
                    "value": "sy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "M[:, i, j] ** 2 + M[:, i, k] ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "atan2_436": {
                "variable": {
                    "value": "ax",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "M[:, i, j]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "M[:, i, k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "atan2_437": {
                "variable": {
                    "value": "ay",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sqrt(M[:, i, j] ** 2 + M[:, i, k] ** 2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "M[:, i, i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "atan2_438": {
                "variable": {
                    "value": "az",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "M[:, j, i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "-M[:, k, i]",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sqrt_444": {
                "variable": {
                    "value": "cy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "M[:, i, i] ** 2 + M[:, j, i] ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "atan2_446": {
                "variable": {
                    "value": "ax",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "M[:, k, j]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "M[:, k, k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "atan2_447": {
                "variable": {
                    "value": "ay",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-M[:, k, i]",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "other": {
                    "value": "cy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sqrt(M[:, i, i] ** 2 + M[:, j, i] ** 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "atan2_448": {
                "variable": {
                    "value": "az",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "M[:, j, i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "M[:, i, i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "bmm_90": {
                "input": {
                    "value": "R_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "R.transpose(1, 2)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "t.contiguous().view(-1, 3, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "trace_181": {
                "input": {
                    "value": "R[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "trace_204": {
                "input": {
                    "value": "R[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sin_211": {
                "input": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "twist.norm(p=2, dim=1).view(B, 1)",
                            "Call"
                        ],
                        [
                            "acos(((tr - 1) / 2).clamp(-1, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_235": {
                "input": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "x_y_1.view(B, 3, H * W)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sin_382": {
                "input": {
                    "value": "ak",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cos_383": {
                "input": {
                    "value": "ak",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stack_404": {
                "tensors": {
                    "value": "c_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[cj, sj * si, sj * ci]",
                            "List"
                        ],
                        [
                            "[cj * ck, sj * sc - cs, sj * cc + ss]",
                            "List"
                        ],
                        [
                            "permute(c_i)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_405": {
                "tensors": {
                    "value": "c_j",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[sj * sk, -cj * ss + cc, -cj * cs - sc]",
                            "List"
                        ],
                        [
                            "[cj * sk, sj * ss + cc, sj * cs - sc]",
                            "List"
                        ],
                        [
                            "permute(c_j)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_406": {
                "tensors": {
                    "value": "c_k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[-sj * ck, cj * sc + cs, cj * cc - ss]",
                            "List"
                        ],
                        [
                            "[-sj, cj * si, cj * ci]",
                            "List"
                        ],
                        [
                            "permute(c_k)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "atan2_440": {
                "variable": {
                    "value": "ax[mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "-M[:, j, k][mask]",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "other": {
                    "value": "M[:, j, j][mask]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "atan2_441": {
                "variable": {
                    "value": "ay[mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "sy[mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "M[:, i, i][mask]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "atan2_450": {
                "variable": {
                    "value": "ax[mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "-M[:, j, k][mask]",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "other": {
                    "value": "M[:, j, j][mask]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "atan2_451": {
                "variable": {
                    "value": "ay[mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "-M[:, k, i][mask]",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "other": {
                    "value": "cy[mask]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "eye_166": {
                "n": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_302": {
                "n": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sin_167": {
                "input": {
                    "value": "theta.view(B, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cos_168": {
                "input": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "twist.norm(p=2, dim=1).view(B, 1)",
                            "Call"
                        ],
                        [
                            "acos(((tr - 1) / 2).clamp(-1, 1))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "packages_from_deepunrollnet/package_core/package_core/image_proc.py": {
        "torch": {
            "arange_22": {
                "variable": {
                    "value": "xx",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "arange_23": {
                "variable": {
                    "value": "yy",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_26": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(xx, yy)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_44": {
                "variable": {
                    "value": "flow_fxy",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[flow_fx, flow_fy]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "grid_sample_45": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ref_image",
                    "type": "variable",
                    "possible_values": []
                },
                "grid": {
                    "value": "flow_fxy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack([flow_fx, flow_fy], dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "padding_mode": {
                    "value": "zeros",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ones_like_70": {
                "variable": {
                    "value": "ones",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xx_ref",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_ref.repeat(1, H, 1).unsqueeze(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_73": {
                "variable": {
                    "value": "ones",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "depth_cur",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_75": {
                "variable": {
                    "value": "p4d_ref",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[p3d_ref, ones]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grid_sample_98": {
                "variable": {
                    "value": "syn_ref_image",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img_ref",
                    "type": "variable",
                    "possible_values": []
                },
                "grid": {
                    "value": "p2d_cur",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K.clone().bmm(p3d_cur)[:, :2, :]",
                            "Subscript"
                        ],
                        [
                            "p2d_cur.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "p2d_cur.view(B, H, W, 2)",
                            "Call"
                        ]
                    ]
                },
                "padding_mode": {
                    "value": "zeros",
                    "type": "str",
                    "possible_values": []
                }
            },
            "eye_178": {
                "variable": {
                    "value": "intrinsics",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_178": {
                "variable": {
                    "value": "intrinsics",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_103": {
                "variable": {
                    "value": "self.conv_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "nc",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nc",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_104": {
                "variable": {
                    "value": "self.conv_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "nc",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nc",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_113": {
                "variable": {
                    "value": "fx",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "nc",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "nc",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_114": {
                "variable": {
                    "value": "fy",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "nc",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "nc",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_118": {
                "variable": {
                    "value": "fx_",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1, -1], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_119": {
                "variable": {
                    "value": "fy_",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1, 0], [-1, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Parameter_129": {
                "variable": {
                    "value": "self.conv_x.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "fx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fx.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "torch.zeros(nc, nc, 2, 2).float().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_130": {
                "variable": {
                    "value": "self.conv_y.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "fy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fy.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "torch.zeros(nc, nc, 2, 2).float().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "interpolate_160": {
                "variable": {
                    "value": "scaled_images",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(scaled_h, scaled_w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_56": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "step": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_57": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": []
                },
                "step": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_72": {
                "tensors": {
                    "value": "[xx_ref, yy_ref, ones]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_92": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_107": {
                "variable": {
                    "value": "self.conv_xy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "nc",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nc",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReplicationPad2d_111": {
                "variable": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "[0, 1, 0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_116": {
                "variable": {
                    "value": "fxy",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "nc",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "nc",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_121": {
                "variable": {
                    "value": "fxy_",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1, 0], [0, -1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Parameter_132": {
                "variable": {
                    "value": "self.conv_xy.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "fxy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(nc, nc, 2, 2).float().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_175": {
                "ndarray": {
                    "value": "image.transpose(2, 0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "packages_from_deepunrollnet/package_core/package_core/linalg.py": {
        "torch": {
            "bmm_16": {
                "variable": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "R1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "T1[:, :, :3]",
                            "Subscript"
                        ]
                    ]
                },
                "mat2": {
                    "value": "R2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "T2[:, :, :3]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "bmm_28": {
                "variable": {
                    "value": "t_inv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "R_inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "R.transpose(2, 1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(R1, t2) + t1",
                            "BinOp"
                        ],
                        [
                            "T[:, :, 3:4]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_33": {
                "variable": {
                    "value": "Phi",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[phi.shape[0], 3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "phi.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "phi.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_5": {
                "variable": {
                    "value": "T1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "T1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(T1, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_8": {
                "variable": {
                    "value": "T2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "T2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(T2, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_19": {
                "tensors": {
                    "value": "[R, t]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_30": {
                "tensors": {
                    "value": "[R_inv, t_inv]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_17": {
                "input": {
                    "value": "R1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "T1[:, :, :3]",
                            "Subscript"
                        ]
                    ]
                },
                "mat2": {
                    "value": "t2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "T2[:, :, 3:4]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "packages_from_deepunrollnet/package_core/package_core/losses.py": {
        "torch": {
            "norm_139": {
                "variable": {
                    "value": "epe_map",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_flow - input_flow",
                    "type": "BinOp",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_15": {
                "variable": {
                    "value": "error",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output - target",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_67": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "conv2d_108": {
                "variable": {
                    "value": "mu1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "conv2d_109": {
                "variable": {
                    "value": "mu2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stack_156": {
                "tensors": {
                    "value": "epes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Tensor_94": {
                "variable": {
                    "value": "gauss",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "exp_54": {
                "input": {
                    "value": "-abs_in2_dy",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "conv2d_115": {
                "input": {
                    "value": "img1 * img1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_116": {
                "input": {
                    "value": "img2 * img2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_117": {
                "input": {
                    "value": "img1 * img2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_152": {
                "*size": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "packages_from_deepunrollnet/package_core/package_core/metrics.py": {
        "torch": {
            "Tensor_9": {
                "variable": {
                    "value": "gauss",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "conv2d_22": {
                "variable": {
                    "value": "mu1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img1",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "window",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(_2D_window.expand(channel, 1, window_size, window_size))",
                            "Call"
                        ],
                        [
                            "create_window(window_size, channel).cuda()",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "window_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "groups": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "conv2d_23": {
                "variable": {
                    "value": "mu2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img2",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "window",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(_2D_window.expand(channel, 1, window_size, window_size))",
                            "Call"
                        ],
                        [
                            "create_window(window_size, channel).cuda()",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "window_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "groups": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "mean_46": {
                "variable": {
                    "value": "mse",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(img1 - img2) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_29": {
                "input": {
                    "value": "img1 * img1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "weight": {
                    "value": "window",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(_2D_window.expand(channel, 1, window_size, window_size))",
                            "Call"
                        ],
                        [
                            "create_window(window_size, channel).cuda()",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "window_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "groups": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "conv2d_30": {
                "input": {
                    "value": "img2 * img2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "weight": {
                    "value": "window",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(_2D_window.expand(channel, 1, window_size, window_size))",
                            "Call"
                        ],
                        [
                            "create_window(window_size, channel).cuda()",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "window_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "groups": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "conv2d_31": {
                "input": {
                    "value": "img1 * img2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "weight": {
                    "value": "window",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(_2D_window.expand(channel, 1, window_size, window_size))",
                            "Call"
                        ],
                        [
                            "create_window(window_size, channel).cuda()",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "window_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "groups": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_44": {
                "input": {
                    "value": "mask.float()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "packages_from_deepunrollnet/package_core/package_core/model_base.py": {
        "torch": {
            "save_12": {
                "obj": {
                    "value": "network.cpu().state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(save_dir, save_filename)",
                            "Call"
                        ],
                        [
                            "os.path.join(save_dir, save_filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_20": {
                "f": {
                    "value": "save_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(save_dir, save_filename)",
                            "Call"
                        ],
                        [
                            "os.path.join(save_dir, save_filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "StepLR_43": {
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "getattr(self, 'optimizer_' + name)",
                            "Call"
                        ],
                        [
                            "getattr(self, 'optimizer_' + name)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "self.opts.lr_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "packages_from_deepunrollnet/package_core/package_core/net_basics.py": {
        "torch": {
            "Sequential_28": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*modules",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Upsample_46": {
                "variable": {
                    "value": "self.upsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_47": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv2d(in_planes=in_planes, out_planes=out_planes, batch_norm=False, activation=False, kernel_size=3, stride=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_90": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*resnet_blocks",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_76": {
                "*args": {
                    "value": "*conv_block",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_22": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "(kernel_size - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "bool"
                        ],
                        [
                            "False",
                            "bool"
                        ]
                    ]
                }
            },
            "BatchNorm2d_24": {
                "num_features": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_73": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "packages_from_deepunrollnet/package_core/package_core/resnet.py": {
        "torch": {
            "Conv2d_28": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_34": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_52": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_93": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_141": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_144": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_145": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_153": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_154": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_181": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv1x1(self.inplanes, planes * block.expansion, stride)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_195": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "packages_from_deepunrollnet/package_core/package_core/transforms.py": {
        "torch": {
            "from_numpy_89": {
                "ndarray": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image / 255.0",
                            "BinOp"
                        ],
                        [
                            "image.transpose((2, 0, 1))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "packages_from_deepunrollnet/package_core/package_core/utils.py": {
        "torch": {
            "arange_63": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "step": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_64": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": []
                },
                "step": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_69": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[xx, yy]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "packages_from_deepunrollnet/package_correlation/correlation_package/corr_cuda.py": {
        "torch": {
            "zeros_33": {
                "variable": {
                    "value": "rbot1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[B, C, paddedbottomheight, paddedbottomwidth]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "input1.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_34": {
                "variable": {
                    "value": "rbot2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[B, C, paddedbottomheight, paddedbottomwidth]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "input1.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_35": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[B, nOutputPlane, nOutputRows, nOutputCols]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "input1.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_69": {
                "variable": {
                    "value": "rbot1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[B, C, paddedbottomheight, paddedbottomwidth]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "input1.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_70": {
                "variable": {
                    "value": "rbot2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[B, C, paddedbottomheight, paddedbottomwidth]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "input1.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_72": {
                "variable": {
                    "value": "grad_input1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ctx.input1",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_like_73": {
                "variable": {
                    "value": "grad_input2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ctx.input2",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "packages_from_deepunrollnet/package_correlation/setup.py": {
        "torch": {}
    },
    "packages_from_deepunrollnet/package_correlation/test/test.py": {
        "torch": {
            "mean_22": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(A_, B_)",
                            "Call"
                        ],
                        [
                            "Correlation(3, 3, 20, 1, 2, 1)(A_, B_)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_42": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(A_, B_)",
                            "Call"
                        ],
                        [
                            "Correlation(3, 3, 20, 1, 2, 1)(A_, B_)",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_10": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_12": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_32": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_34": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "packages_from_deepunrollnet/package_forward_warp/forward_warp_package/flow_forward_shift.py": {
        "torch": {
            "zeros_like_22": {
                "variable": {
                    "value": "tar_image_w_I",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "src_image",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_23": {
                "variable": {
                    "value": "tar_image_w",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[B, 1, H, W]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "src_image.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_24": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[B, 1, H, W]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "src_image.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_35": {
                "variable": {
                    "value": "grad_src_image",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad_tar_image",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_36": {
                "variable": {
                    "value": "grad_flow",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[B, 2, H, W]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "grad_tar_image.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "packages_from_deepunrollnet/package_forward_warp/forward_warp_package/utils.py": {
        "torch": {
            "arange_11": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "step": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_12": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": []
                },
                "step": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_17": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[xx, yy]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "packages_from_deepunrollnet/package_forward_warp/setup.py": {
        "torch": {}
    },
    "packages_from_deepunrollnet/package_forward_warp/test/test_flow_shifter_backward.py": {
        "torch": {
            "zeros_18": {
                "variable": {
                    "value": "flow",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1, 2, H, W]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sum_30": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "warped_image[:, :, 0, 0] ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_44": {
                "variable": {
                    "value": "grad_im_numerical",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad_im_analytic",
                    "type": "variable",
                    "possible_values": [
                        [
                            "im.grad.clone()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_60": {
                "variable": {
                    "value": "grad_flow_numerical",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad_flow_analytic",
                    "type": "variable",
                    "possible_values": [
                        [
                            "flow.grad.clone()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_14": {
                "ndarray": {
                    "value": "im",
                    "type": "variable",
                    "possible_values": [
                        [
                            "io.imread('data/0.png')",
                            "Call"
                        ],
                        [
                            "im.transpose(2, 0, 1)[1:2]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(im).cuda().unsqueeze(0).float() / 255.0",
                            "BinOp"
                        ],
                        [
                            "im[:, :, 105:105 + crop_H, 100:100 + crop_W].clone()",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_14": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_51": {
                "variable": {
                    "value": "loss2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "warped_image2[:, :, 0, 0] ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_68": {
                "variable": {
                    "value": "loss2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "warped_image2[:, :, 0, 0] ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_66": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "packages_from_deepunrollnet/package_forward_warp/test/test_flow_shifter_forward.py": {
        "torch": {
            "from_numpy_15": {
                "variable": {
                    "value": "im1",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "im1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "io.imread('data/0.png')",
                            "Call"
                        ],
                        [
                            "im1.transpose(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(im1).cuda().unsqueeze(0).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_15": {
                "variable": {
                    "value": "im1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_19": {
                "variable": {
                    "value": "im2",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "im2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "io.imread('data/10.png')",
                            "Call"
                        ],
                        [
                            "im2.transpose(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(im2).cuda().unsqueeze(0).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_19": {
                "variable": {
                    "value": "im2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_21": {
                "tensors": {
                    "value": "[im1, im2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_23": {
                "*size": {
                    "value": "[2, H, W]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unsqueeze_23": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "train/loss.py": {
        "torch": {}
    },
    "train/metrics.py": {
        "torch": {}
    },
    "train/optimizer.py": {
        "torch": {
            "MultiStepLR_19": {
                "variable": {
                    "value": "self.scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "milestones": {
                    "value": "milestones",
                    "type": "variable",
                    "possible_values": [
                        [
                            "para.milestones",
                            "Attribute"
                        ]
                    ]
                },
                "gamma": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "para.decay_gamma",
                            "Attribute"
                        ]
                    ]
                }
            },
            "CosineAnnealingLR_21": {
                "variable": {
                    "value": "self.scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "T_max": {
                    "value": "para.end_epoch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eta_min": {
                    "value": "1e-08",
                    "type": "float",
                    "possible_values": []
                }
            },
            "CosineAnnealingWarmRestarts_23": {
                "variable": {
                    "value": "self.scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "T_0": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "T_mult": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "eta_min": {
                    "value": "1e-08",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "train/trainer.py": {
        "torch": {
            "DataParallel_76": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Model(para).model",
                            "Attribute"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "Model(para).model.cuda()",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_253": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpointPath",
                    "type": "variable",
                    "possible_values": [
                        [
                            "para.test_checkpoint",
                            "Attribute"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage.cuda()",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "DataParallel_254": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Model(para).model",
                            "Attribute"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "Model(para).model.cuda()",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_49": {
                "seed": {
                    "value": "para.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_50": {
                "seed": {
                    "value": "para.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_87": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "para.resume_file",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage.cuda(0)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "clip_grad_norm__158": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "norm_type": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_199": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_276": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_301": {
                "variable": {
                    "value": "input_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "input_seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(input_seq)[np.newaxis, :]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(input_seq).float().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_302": {
                "variable": {
                    "value": "label_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "label_seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(label_seq)[np.newaxis, :]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(label_seq).float().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_300": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "util/logger.py": {
        "torch": {
            "save_83": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'_' + state.lower()",
                            "BinOp"
                        ]
                    ]
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "join(self.save_dir, filename)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "video_inference.py": {
        "torch": {
            "empty_cache_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_47": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Model(Parameter().args).model.cuda()",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_48": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.checkpoint",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_57": {
                "variable": {
                    "value": "inp_imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "inp_imgs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.concatenate(imgs)[np.newaxis, :]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(inp_imgs).float().cuda()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}