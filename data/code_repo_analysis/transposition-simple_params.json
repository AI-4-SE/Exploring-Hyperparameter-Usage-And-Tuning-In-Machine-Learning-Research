{
    "BERT/BERT_BoW_encoder.py": {
        "tensorflow": {
            "reduce_mean_18": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seq",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "BERT/BERT_encode_sents.py": {
        "tensorflow": {
            "placeholder_30": {
                "variable": {
                    "value": "self._inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_31": {
                "variable": {
                    "value": "self._mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ConfigProto_41": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_43": {
                "variable": {
                    "value": "self._sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "modeling.BertConfig(**self._conf)",
                            "Call"
                        ],
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "Saver_45": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "BERT/extract_features.py": {
        "tensorflow": {
            "RunConfig_357": {
                "variable": {
                    "value": "run_config",
                    "type": "variable",
                    "possible_values": []
                },
                "master": {
                    "value": "FLAGS.master",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tpu_config": {
                    "value": "tf.contrib.tpu.TPUConfig(num_shards=FLAGS.num_tpu_cores, per_host_input_for_training=is_per_host)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TPUEstimator_382": {
                "variable": {
                    "value": "estimator",
                    "type": "variable",
                    "possible_values": []
                },
                "use_tpu": {
                    "value": "FLAGS.use_tpu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "model_fn": {
                    "value": "model_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_fn",
                            "Call"
                        ],
                        [
                            "model_fn_builder(bert_config=bert_config, init_checkpoint=FLAGS.init_checkpoint, layer_indexes=layer_indexes, use_tpu=FLAGS.use_tpu, use_one_hot_embeddings=FLAGS.use_one_hot_embeddings)",
                            "Call"
                        ]
                    ]
                },
                "config": {
                    "value": "run_config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.tpu.RunConfig(master=FLAGS.master, tpu_config=tf.contrib.tpu.TPUConfig(num_shards=FLAGS.num_tpu_cores, per_host_input_for_training=is_per_host))",
                            "Call"
                        ]
                    ]
                },
                "predict_batch_size": {
                    "value": "FLAGS.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "trainable_variables_172": {
                "variable": {
                    "value": "tvars",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "TPUEstimatorSpec_203": {
                "variable": {
                    "value": "output_spec",
                    "type": "variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mode",
                            "Method Argument"
                        ]
                    ]
                },
                "predictions": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'unique_id': unique_ids}",
                            "Dict"
                        ]
                    ]
                },
                "scaffold_fn": {
                    "value": "scaffold_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "tpu_scaffold",
                            "variable"
                        ]
                    ]
                }
            },
            "set_verbosity_347": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "run_422": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "info_186": {
                "msg": {
                    "value": "**** Trainable Variables ****",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GFile_326": {
                "name": {
                    "value": "input_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_file",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "r",
                    "type": "str",
                    "possible_values": []
                }
            },
            "init_from_checkpoint_184": {
                "ckpt_dir_or_file": {
                    "value": "init_checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "init_checkpoint",
                            "Method Argument"
                        ]
                    ]
                },
                "assignment_map": {
                    "value": "assignment_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "modeling.get_assignment_map_from_checkpoint(tvars, init_checkpoint)",
                            "Call"
                        ]
                    ]
                }
            },
            "info_191": {
                "msg": {
                    "value": "  name = %s, shape = %s%s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "var.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "var.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_284": {
                "msg": {
                    "value": "*** Example ***",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_285": {
                "msg": {
                    "value": "'unique_id: %s' % example.unique_id",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_286": {
                "msg": {
                    "value": "'tokens: %s' % ' '.join([tokenization.printable_text(x) for x in tokens])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_289": {
                "msg": {
                    "value": "'input_ids: %s' % ' '.join([str(x) for x in input_ids])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_291": {
                "msg": {
                    "value": "'input_mask: %s' % ' '.join([str(x) for x in input_mask])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_293": {
                "msg": {
                    "value": "'input_type_ids: %s' % ' '.join([str(x) for x in input_type_ids])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "TPUConfig_359": {
                "num_shards": {
                    "value": "FLAGS.num_tpu_cores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "per_host_input_for_training": {
                    "value": "is_per_host",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.tpu.InputPipelineConfig.PER_HOST_V2",
                            "Attribute"
                        ]
                    ]
                }
            },
            "constant_126": {
                "value": {
                    "value": "all_unique_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "shape": {
                    "value": "[num_examples]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_130": {
                "value": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "shape": {
                    "value": "[num_examples, seq_length]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_134": {
                "value": {
                    "value": "all_input_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "shape": {
                    "value": "[num_examples, seq_length]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_138": {
                "value": {
                    "value": "all_input_type_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "shape": {
                    "value": "[num_examples, seq_length]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "init_from_checkpoint_179": {
                "ckpt_dir_or_file": {
                    "value": "init_checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "init_checkpoint",
                            "Method Argument"
                        ]
                    ]
                },
                "assignment_map": {
                    "value": "assignment_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "modeling.get_assignment_map_from_checkpoint(tvars, init_checkpoint)",
                            "Call"
                        ]
                    ]
                }
            },
            "Scaffold_180": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "BERT/main_model2.py": {
        "tensorflow": {
            "reduce_mean_41": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.softmax_cross_entropy_with_logits(labels=targets, logits=output)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "GradientTape_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_42": {
                "labels": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "targets",
                            "Method Argument"
                        ]
                    ]
                },
                "logits": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._classifier(x, y)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "BERT/make_dataset_from_indices.py": {
        "tensorflow": {
            "placeholder_29": {
                "variable": {
                    "value": "self._inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_30": {
                "variable": {
                    "value": "self._mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ConfigProto_40": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_42": {
                "variable": {
                    "value": "self._sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "modeling.BertConfig(**self._conf)",
                            "Call"
                        ],
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "Saver_44": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "BERT/make_simple_bert_data.py": {
        "tensorflow": {
            "placeholder_28": {
                "variable": {
                    "value": "self._inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_29": {
                "variable": {
                    "value": "self._mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ConfigProto_39": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_41": {
                "variable": {
                    "value": "self._sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "modeling.BertConfig(**self._conf)",
                            "Call"
                        ],
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "Saver_43": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "BERT/modeling.py": {
        "tensorflow": {
            "list_variables_320": {
                "variable": {
                    "value": "init_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "init_checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "init_checkpoint",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dropout_346": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ]
                    ]
                },
                "rate": {
                    "value": "1.0 - dropout_prob",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_variable_398": {
                "variable": {
                    "value": "embedding_table",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "word_embedding_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'word_embeddings'",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[vocab_size, embedding_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "create_initializer(initializer_range)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_412": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(input_tensor, 1.0 - dropout_prob)",
                            "Call"
                        ],
                        [
                            "tf.matmul(one_hot_input_ids, embedding_table)",
                            "Call"
                        ],
                        [
                            "tf.nn.embedding_lookup(embedding_table, input_ids)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, input_shape[0:-1] + [input_shape[-1] * embedding_size])",
                            "Call"
                        ],
                        [
                            "input_tensor",
                            "variable"
                        ],
                        [
                            "output + position_embeddings",
                            "BinOp"
                        ],
                        [
                            "layer_norm_and_dropout(output, dropout_prob)",
                            "Call"
                        ],
                        [
                            "copy.deepcopy(self.__dict__)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "input_shape[0:-1] + [input_shape[-1] * embedding_size]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_526": {
                "variable": {
                    "value": "to_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reshape(to_mask, [batch_size, 1, to_seq_length])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_534": {
                "variable": {
                    "value": "broadcast_ones",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, from_seq_length, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_645": {
                "variable": {
                    "value": "query_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "from_tensor_2d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reshape_to_matrix(from_tensor)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "num_attention_heads * size_per_head",
                    "type": "BinOp",
                    "possible_values": []
                },
                "activation": {
                    "value": "query_act",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "query",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "create_initializer(initializer_range)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_653": {
                "variable": {
                    "value": "key_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "to_tensor_2d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reshape_to_matrix(to_tensor)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "num_attention_heads * size_per_head",
                    "type": "BinOp",
                    "possible_values": []
                },
                "activation": {
                    "value": "key_act",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "key",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "create_initializer(initializer_range)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_661": {
                "variable": {
                    "value": "value_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "to_tensor_2d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reshape_to_matrix(to_tensor)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "num_attention_heads * size_per_head",
                    "type": "BinOp",
                    "possible_values": []
                },
                "activation": {
                    "value": "value_act",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "value",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "create_initializer(initializer_range)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_680": {
                "variable": {
                    "value": "attention_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "query_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(from_tensor_2d, num_attention_heads * size_per_head, activation=query_act, name='query', kernel_initializer=create_initializer(initializer_range))",
                            "Call"
                        ],
                        [
                            "transpose_for_scores(query_layer, batch_size, num_attention_heads, from_seq_length, size_per_head)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "key_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(to_tensor_2d, num_attention_heads * size_per_head, activation=key_act, name='key', kernel_initializer=create_initializer(initializer_range))",
                            "Call"
                        ],
                        [
                            "transpose_for_scores(key_layer, batch_size, num_attention_heads, to_seq_length, size_per_head)",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "multiply_681": {
                "variable": {
                    "value": "attention_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "attention_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(query_layer, key_layer, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.multiply(attention_scores, 1.0 / math.sqrt(float(size_per_head)))",
                            "Call"
                        ],
                        [
                            "attention_scores + adder",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "1.0 / math.sqrt(float(size_per_head))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_699": {
                "variable": {
                    "value": "attention_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "attention_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(query_layer, key_layer, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.multiply(attention_scores, 1.0 / math.sqrt(float(size_per_head)))",
                            "Call"
                        ],
                        [
                            "attention_scores + adder",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_706": {
                "variable": {
                    "value": "value_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "value_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(to_tensor_2d, num_attention_heads * size_per_head, activation=value_act, name='value', kernel_initializer=create_initializer(initializer_range))",
                            "Call"
                        ],
                        [
                            "tf.reshape(value_layer, [batch_size, to_seq_length, num_attention_heads, size_per_head])",
                            "Call"
                        ],
                        [
                            "tf.transpose(value_layer, [0, 2, 1, 3])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, to_seq_length, num_attention_heads, size_per_head]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_711": {
                "variable": {
                    "value": "value_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "value_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(to_tensor_2d, num_attention_heads * size_per_head, activation=value_act, name='value', kernel_initializer=create_initializer(initializer_range))",
                            "Call"
                        ],
                        [
                            "tf.reshape(value_layer, [batch_size, to_seq_length, num_attention_heads, size_per_head])",
                            "Call"
                        ],
                        [
                            "tf.transpose(value_layer, [0, 2, 1, 3])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_714": {
                "variable": {
                    "value": "context_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "attention_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(attention_scores)",
                            "Call"
                        ],
                        [
                            "dropout(attention_probs, attention_probs_dropout_prob)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "value_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(to_tensor_2d, num_attention_heads * size_per_head, activation=value_act, name='value', kernel_initializer=create_initializer(initializer_range))",
                            "Call"
                        ],
                        [
                            "tf.reshape(value_layer, [batch_size, to_seq_length, num_attention_heads, size_per_head])",
                            "Call"
                        ],
                        [
                            "tf.transpose(value_layer, [0, 2, 1, 3])",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_717": {
                "variable": {
                    "value": "context_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "context_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(attention_probs, value_layer)",
                            "Call"
                        ],
                        [
                            "tf.transpose(context_layer, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(context_layer, [batch_size * from_seq_length, num_attention_heads * size_per_head])",
                            "Call"
                        ],
                        [
                            "tf.reshape(context_layer, [batch_size, from_seq_length, num_attention_heads * size_per_head])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_902": {
                "variable": {
                    "value": "dyn_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_918": {
                "variable": {
                    "value": "output_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_367": {
                "stddev": {
                    "value": "initializer_range",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.02",
                            "Method Argument"
                        ],
                        [
                            "0.02",
                            "Method Argument"
                        ],
                        [
                            "0.02",
                            "Method Argument"
                        ],
                        [
                            "0.02",
                            "Method Argument"
                        ],
                        [
                            "0.02",
                            "Method Argument"
                        ],
                        [
                            "0.02",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "expand_dims_396": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(input_ids, axis=[-1])",
                            "Call"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_404": {
                "variable": {
                    "value": "flat_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(input_ids, axis=[-1])",
                            "Call"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "one_hot_405": {
                "variable": {
                    "value": "one_hot_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "flat_input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(input_ids, [-1])",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vocab_size",
                            "Method Argument"
                        ],
                        [
                            "vocab_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_406": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "one_hot_input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(flat_input_ids, depth=vocab_size)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "embedding_table",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name=word_embedding_name, shape=[vocab_size, embedding_size], initializer=create_initializer(initializer_range))",
                            "Call"
                        ]
                    ]
                }
            },
            "embedding_lookup_408": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "embedding_table",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name=word_embedding_name, shape=[vocab_size, embedding_size], initializer=create_initializer(initializer_range))",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(input_ids, axis=[-1])",
                            "Call"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ],
                        [
                            "input_ids",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_462": {
                "variable": {
                    "value": "token_type_table",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "token_type_embedding_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'token_type_embeddings'",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[token_type_vocab_size, width]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "create_initializer(initializer_range)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_468": {
                "variable": {
                    "value": "flat_token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros(shape=[batch_size, seq_length], dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "one_hot_469": {
                "variable": {
                    "value": "one_hot_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "flat_token_type_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(token_type_ids, [-1])",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "token_type_vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_471": {
                "variable": {
                    "value": "token_type_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "one_hot_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(flat_token_type_ids, depth=token_type_vocab_size)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "token_type_table",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name=token_type_embedding_name, shape=[token_type_vocab_size, width], initializer=create_initializer(initializer_range))",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_472": {
                "variable": {
                    "value": "token_type_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "token_type_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(one_hot_ids, token_type_table)",
                            "Call"
                        ],
                        [
                            "tf.reshape(token_type_embeddings, [batch_size, seq_length, width])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, seq_length, width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "assert_less_equal_477": {
                "variable": {
                    "value": "assert_op",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "seq_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_shape[1]",
                            "Subscript"
                        ],
                        [
                            "input_shape[1]",
                            "Subscript"
                        ],
                        [
                            "input_shape[1]",
                            "Subscript"
                        ],
                        [
                            "seq_length",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "max_position_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_609": {
                "variable": {
                    "value": "output_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, seq_length, num_attention_heads, width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_612": {
                "variable": {
                    "value": "output_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "output_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer_norm(input_tensor, name)",
                            "Call"
                        ],
                        [
                            "dropout(output_tensor, dropout_prob)",
                            "Call"
                        ],
                        [
                            "tf.reshape(input_tensor, [batch_size, seq_length, num_attention_heads, width])",
                            "Call"
                        ],
                        [
                            "tf.transpose(output_tensor, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(input_tensor, [-1, width])",
                            "Call"
                        ],
                        [
                            "output_tensor",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_686": {
                "variable": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(attention_mask, axis=[1])",
                            "Call"
                        ],
                        [
                            "create_attention_mask_from_input_mask(input_ids, input_mask)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_721": {
                "variable": {
                    "value": "context_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "context_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(attention_probs, value_layer)",
                            "Call"
                        ],
                        [
                            "tf.transpose(context_layer, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(context_layer, [batch_size * from_seq_length, num_attention_heads * size_per_head])",
                            "Call"
                        ],
                        [
                            "tf.reshape(context_layer, [batch_size, from_seq_length, num_attention_heads * size_per_head])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size * from_seq_length, num_attention_heads * size_per_head]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_726": {
                "variable": {
                    "value": "context_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "context_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(attention_probs, value_layer)",
                            "Call"
                        ],
                        [
                            "tf.transpose(context_layer, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(context_layer, [batch_size * from_seq_length, num_attention_heads * size_per_head])",
                            "Call"
                        ],
                        [
                            "tf.reshape(context_layer, [batch_size, from_seq_length, num_attention_heads * size_per_head])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, from_seq_length, num_attention_heads * size_per_head]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_932": {
                "tensor": {
                    "value": "output_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer_norm(input_tensor, name)",
                            "Call"
                        ],
                        [
                            "dropout(output_tensor, dropout_prob)",
                            "Call"
                        ],
                        [
                            "tf.reshape(input_tensor, [batch_size, seq_length, num_attention_heads, width])",
                            "Call"
                        ],
                        [
                            "tf.transpose(output_tensor, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(input_tensor, [-1, width])",
                            "Call"
                        ],
                        [
                            "output_tensor",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "orig_dims + [width]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_159": {
                "variable": {
                    "value": "input_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, seq_length]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_162": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, seq_length]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_479": {
                "variable": {
                    "value": "full_position_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "position_embedding_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'position_embeddings'",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[max_position_embeddings, width]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "create_initializer(initializer_range)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "slice_492": {
                "variable": {
                    "value": "position_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "full_position_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name=position_embedding_name, shape=[max_position_embeddings, width], initializer=create_initializer(initializer_range))",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[seq_length, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_503": {
                "variable": {
                    "value": "position_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "position_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(full_position_embeddings, [0, 0], [seq_length, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(position_embeddings, position_broadcast_shape)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "position_broadcast_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "reshape_526": {
                "tensor": {
                    "value": "to_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.reshape(to_mask, [batch_size, 1, to_seq_length]), tf.float32)",
                            "Call"
                        ],
                        [
                            "to_mask",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, 1, to_seq_length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "GFile_91": {
                "name": {
                    "value": "json_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "json_file",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "r",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_165": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "brt",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_223": {
                "variable": {
                    "value": "first_token_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.sequence_output[:, 0:1, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dense_225": {
                "variable": {
                    "value": "self.pooled_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "first_token_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(self.sequence_output[:, 0:1, :], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "create_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "erf_269": {
                "x": {
                    "value": "input_tensor / tf.sqrt(2.0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "control_dependencies_478": {
                "control_inputs": {
                    "value": "[assert_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_801": {
                "name_or_scope": {
                    "value": "'layer_%d' % layer_idx",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dense_845": {
                "variable": {
                    "value": "intermediate_output",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "attention_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "attention_heads[0]",
                            "Subscript"
                        ],
                        [
                            "tf.concat(attention_heads, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(attention_output, hidden_size, kernel_initializer=create_initializer(initializer_range))",
                            "Call"
                        ],
                        [
                            "dropout(attention_output, hidden_dropout_prob)",
                            "Call"
                        ],
                        [
                            "layer_norm(attention_output + layer_input)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "intermediate_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3072",
                            "Method Argument"
                        ],
                        [
                            "3072",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "intermediate_act_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gelu",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "create_initializer(initializer_range)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_853": {
                "variable": {
                    "value": "layer_output",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "intermediate_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(attention_output, intermediate_size, activation=intermediate_act_fn, kernel_initializer=create_initializer(initializer_range))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "768",
                            "Method Argument"
                        ],
                        [
                            "768",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "create_initializer(initializer_range)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_scope_956": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_166": {
                "name_or_scope": {
                    "value": "embeddings",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_191": {
                "name_or_scope": {
                    "value": "encoder",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_220": {
                "name_or_scope": {
                    "value": "pooler",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_691": {
                "x": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(attention_mask, axis=[1])",
                            "Call"
                        ],
                        [
                            "create_attention_mask_from_input_mask(input_ids, input_mask)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_804": {
                "name_or_scope": {
                    "value": "attention",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_828": {
                "variable": {
                    "value": "attention_output",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "attention_heads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "dense_833": {
                "variable": {
                    "value": "attention_output",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "attention_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "attention_heads[0]",
                            "Subscript"
                        ],
                        [
                            "tf.concat(attention_heads, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(attention_output, hidden_size, kernel_initializer=create_initializer(initializer_range))",
                            "Call"
                        ],
                        [
                            "dropout(attention_output, hidden_dropout_prob)",
                            "Call"
                        ],
                        [
                            "layer_norm(attention_output + layer_input)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "768",
                            "Method Argument"
                        ],
                        [
                            "768",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "create_initializer(initializer_range)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_844": {
                "name_or_scope": {
                    "value": "intermediate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_852": {
                "name_or_scope": {
                    "value": "output",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sqrt_269": {
                "x": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "variable_scope_806": {
                "name_or_scope": {
                    "value": "self",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_832": {
                "name_or_scope": {
                    "value": "output",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "BERT/optimization.py": {
        "tensorflow": {
            "get_or_create_global_step_27": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_29": {
                "variable": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "init_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "init_lr",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "polynomial_decay_32": {
                "variable": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(value=init_lr, shape=[], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.train.polynomial_decay(learning_rate, global_step, num_train_steps, end_learning_rate=0.0, power=1.0, cycle=False)",
                            "Call"
                        ],
                        [
                            "(1.0 - is_warmup) * learning_rate + is_warmup * warmup_learning_rate",
                            "BinOp"
                        ],
                        [
                            "learning_rate",
                            "Method Argument"
                        ]
                    ]
                },
                "global_step": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.get_or_create_global_step()",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "decay_steps": {
                    "value": "num_train_steps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_train_steps",
                            "Method Argument"
                        ]
                    ]
                },
                "end_learning_rate": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "power": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "cycle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "trainable_variables_69": {
                "variable": {
                    "value": "tvars",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "gradients_70": {
                "variable": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss",
                            "Method Argument"
                        ]
                    ]
                },
                "xs": {
                    "value": "tvars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_global_norm_73": {
                "variable": {
                    "value": "(grads, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gradients(loss, tvars)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_global_norm(grads, clip_norm=1.0)",
                            "Call"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "group_79": {
                "variable": {
                    "value": "train_op",
                    "type": "variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "train_op",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimizer.apply_gradients(zip(grads, tvars), global_step=global_step)",
                            "Call"
                        ],
                        [
                            "tf.group(train_op, [global_step.assign(new_global_step)])",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "[global_step.assign(new_global_step)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_42": {
                "variable": {
                    "value": "global_steps_int",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.get_or_create_global_step()",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_43": {
                "variable": {
                    "value": "warmup_steps_int",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "num_warmup_steps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_warmup_steps",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_45": {
                "variable": {
                    "value": "global_steps_float",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "global_steps_int",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(global_step, tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_46": {
                "variable": {
                    "value": "warmup_steps_float",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "warmup_steps_int",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(num_warmup_steps, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_51": {
                "variable": {
                    "value": "is_warmup",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "global_steps_int < warmup_steps_int",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossShardOptimizer_67": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "opt": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "AdamWeightDecayOptimizer(learning_rate=learning_rate, weight_decay_rate=0.01, beta_1=0.9, beta_2=0.999, epsilon=1e-06, exclude_from_weight_decay=['LayerNorm', 'layer_norm', 'bias'])",
                            "Call"
                        ],
                        [
                            "tf.contrib.tpu.CrossShardOptimizer(optimizer)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_113": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "param_name + '/adam_m'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "param.shape.as_list()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_118": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "param_name + '/adam_v'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "param.shape.as_list()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "group_150": {
                "*inputs": {
                    "value": "*assignments",
                    "type": "Starred",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'AdamWeightDecayOptimizer'",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "multiply_125": {
                "x": {
                    "value": "self.beta_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name=param_name + '/adam_m', shape=param.shape.as_list(), dtype=tf.float32, trainable=False, initializer=tf.zeros_initializer())",
                            "Call"
                        ],
                        [
                            "re.match('^(.*):\\\\d+$', param_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_126": {
                "x": {
                    "value": "1.0 - self.beta_1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grads_and_vars",
                            "variable"
                        ]
                    ]
                }
            },
            "multiply_127": {
                "x": {
                    "value": "self.beta_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name=param_name + '/adam_v', shape=param.shape.as_list(), dtype=tf.float32, trainable=False, initializer=tf.zeros_initializer())",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_128": {
                "x": {
                    "value": "1.0 - self.beta_2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.square(grad)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_initializer_117": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_122": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "square_128": {
                "x": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grads_and_vars",
                            "variable"
                        ]
                    ]
                }
            },
            "sqrt_130": {
                "x": {
                    "value": "next_v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(self.beta_2, v) + tf.multiply(1.0 - self.beta_2, tf.square(grad))",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "BERT/simple_bert.py": {
        "tensorflow": {}
    },
    "BERT/tokenization.py": {
        "tensorflow": {
            "GFile_74": {
                "name": {
                    "value": "vocab_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vocab_file",
                            "Method Argument"
                        ],
                        [
                            "vocab_file",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "r",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "Simpler_Models/AttentionBasedDeterminer1.py": {
        "tensorflow": {
            "Dropout_26": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.2",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "name + '/Dropout'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dense_27": {
                "variable": {
                    "value": "self.dense1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "name + '/Dense1'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dense_28": {
                "variable": {
                    "value": "self.dense2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "name + '/Dense2'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "expand_dims_42": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "expand_dims(a, axis=i)",
                            "Call"
                        ],
                        [
                            "self.dense1(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(a)",
                            "Call"
                        ],
                        [
                            "self.dense2(a)",
                            "Call"
                        ],
                        [
                            "self.dropout(a)",
                            "Call"
                        ],
                        [
                            "tf.reshape(a, shape=(a.shape[0], self.par_len * self.par_len))",
                            "Call"
                        ],
                        [
                            "softmax(a, axis=1)",
                            "Call"
                        ],
                        [
                            "self.reshape(a, 2, dim)",
                            "Call"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concatenate_49": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "arys": {
                    "value": "[self.reshape(h, 2, self.par_len), self.reshape(q, 2, self.par_len)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_53": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layers.concatenate([self.reshape(h, 2, self.par_len), self.reshape(q, 2, self.par_len)])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, shape=(x.shape[0], self.par_len * self.par_len, dim))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(x.shape[0], self.par_len * self.par_len, dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_60": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "expand_dims(a, axis=i)",
                            "Call"
                        ],
                        [
                            "self.dense1(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(a)",
                            "Call"
                        ],
                        [
                            "self.dense2(a)",
                            "Call"
                        ],
                        [
                            "self.dropout(a)",
                            "Call"
                        ],
                        [
                            "tf.reshape(a, shape=(a.shape[0], self.par_len * self.par_len))",
                            "Call"
                        ],
                        [
                            "softmax(a, axis=1)",
                            "Call"
                        ],
                        [
                            "self.reshape(a, 2, dim)",
                            "Call"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(a.shape[0], self.par_len * self.par_len)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "softmax_61": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "expand_dims(a, axis=i)",
                            "Call"
                        ],
                        [
                            "self.dense1(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(a)",
                            "Call"
                        ],
                        [
                            "self.dense2(a)",
                            "Call"
                        ],
                        [
                            "self.dropout(a)",
                            "Call"
                        ],
                        [
                            "tf.reshape(a, shape=(a.shape[0], self.par_len * self.par_len))",
                            "Call"
                        ],
                        [
                            "softmax(a, axis=1)",
                            "Call"
                        ],
                        [
                            "self.reshape(a, 2, dim)",
                            "Call"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_63": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "a * x",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "Simpler_Models/AttentionBasedDeterminer2.py": {
        "tensorflow": {
            "Dropout_26": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.2",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "name + '/Dropout'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dense_27": {
                "variable": {
                    "value": "self.dense1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "name + '/Dense1'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dense_28": {
                "variable": {
                    "value": "self.dense2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "name + '/Dense2'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "expand_dims_41": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "expand_dims(a, axis=i)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "a",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0, 1]",
                            "List"
                        ],
                        [
                            "i",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "convert_to_tensor_53": {
                "variable": {
                    "value": "h[i ^ 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "h[i ^ 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concatenate_54": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "arys": {
                    "value": "[H[i], h[i ^ 1]]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "Simpler_Models/CNNEncoder1.py": {
        "tensorflow": {
            "Dropout_33": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv1D_34": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "name + '/Conv1D'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "MaxPool1D_38": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pool_size": {
                    "value": "pool_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "name + '/MaxPool1D'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "GlobalAveragePooling1D_40": {
                "variable": {
                    "value": "self.global_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "name + '/GlobalAvePool1D'",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "Simpler_Models/CNNEncoder2.py": {
        "tensorflow": {
            "Dropout_48": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv1D_49": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "name + '/Conv1D'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "MaxPool1D_53": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pool_size": {
                    "value": "pool_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "name + '/MaxPool1D'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "GlobalAveragePooling1D_55": {
                "variable": {
                    "value": "self.global_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "name + '/GlobalAvePool1D'",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "Simpler_Models/CNNEncoder3.py": {
        "tensorflow": {
            "Reshape_49": {
                "name": {
                    "value": "name + '/Reshape1'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "target_shape": {
                    "value": "(batch_size * paragraph_len, sentence_len, dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Reshape_65": {
                "name": {
                    "value": "name + '/Reshape2'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "target_shape": {
                    "value": "(batch_size, paragraph_len, dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "Simpler_Models/GatedCNNEncoder1.py": {
        "tensorflow": {
            "Dropout_32": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv1D_33": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "name + '/Conv1D'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv1D_37": {
                "variable": {
                    "value": "self.gate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "sigmoid",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "name + '/Gate'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "GlobalAveragePooling1D_42": {
                "variable": {
                    "value": "self.global_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "name + '/GlobalAvePool1D'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Multiply_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "Simpler_Models/determiner.py": {
        "tensorflow": {
            "Dropout_21": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.2",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "name + '/Dropout'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dense_22": {
                "variable": {
                    "value": "self.layer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "name + '/Dense1'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dense_25": {
                "variable": {
                    "value": "self.layer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "self.output_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "softmax",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "name + '/Dense2'",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "Simpler_Models/encoder.py": {
        "tensorflow": {
            "constant_16": {
                "variable": {
                    "value": "embedding_initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "embedding_table",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedding_table",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Embedding_17": {
                "variable": {
                    "value": "self._embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_dim": {
                    "value": "self._vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_dim": {
                    "value": "self._embedding_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embeddings_initializer": {
                    "value": "embedding_initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.keras.initializers.constant(embedding_table)",
                            "Call"
                        ]
                    ]
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "mask_zero": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "self._name + '/embedding'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "LSTM_24": {
                "variable": {
                    "value": "self._LSTM",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "self._hidden_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "self._name + '/LSTM'",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "Simpler_Models/main_model.py": {
        "tensorflow": {
            "concat_42": {
                "values": {
                    "value": "(x, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "Simpler_Models/main_model3.py": {
        "tensorflow": {
            "range_47": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "expand_dims_48": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.range(tf.shape(first)[0])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_49": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(a, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "tf.constant([1, tf.shape(first)[1]])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_50": {
                "variable": {
                    "value": "range",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(b, tf.constant([1, tf.shape(first)[1]]))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_52": {
                "variable": {
                    "value": "first",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "first",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[2]",
                            "Subscript"
                        ],
                        [
                            "tf.expand_dims(first, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_53": {
                "variable": {
                    "value": "sec",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[3]",
                            "Subscript"
                        ],
                        [
                            "tf.expand_dims(sec, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_55": {
                "variable": {
                    "value": "first_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(range, tf.dtypes.cast(first, tf.int32))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_57": {
                "variable": {
                    "value": "sec_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(range, tf.dtypes.cast(sec, tf.int32))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_nd_59": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "sent_encoder(inputs[0])",
                    "type": "Call",
                    "possible_values": []
                },
                "indices": {
                    "value": "first_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat((range, tf.dtypes.cast(first, tf.int32)), axis=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_nd_62": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "sent_encoder(inputs[1])",
                    "type": "Call",
                    "possible_values": []
                },
                "indices": {
                    "value": "sec_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat((range, tf.dtypes.cast(sec, tf.int32)), axis=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_49": {
                "value": {
                    "value": "[1, tf.shape(first)[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_47": {
                "input": {
                    "value": "first",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[2]",
                            "Subscript"
                        ],
                        [
                            "tf.expand_dims(first, axis=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_55": {
                "x": {
                    "value": "first",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[2]",
                            "Subscript"
                        ],
                        [
                            "tf.expand_dims(first, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_57": {
                "x": {
                    "value": "sec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[3]",
                            "Subscript"
                        ],
                        [
                            "tf.expand_dims(sec, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_49": {
                "input": {
                    "value": "first",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs[2]",
                            "Subscript"
                        ],
                        [
                            "tf.expand_dims(first, axis=2)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Simpler_Models/sent_encoder.py": {
        "tensorflow": {
            "constant_16": {
                "variable": {
                    "value": "embedding_initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "embedding_table",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedding_table",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Embedding_17": {
                "variable": {
                    "value": "self._embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_dim": {
                    "value": "self._vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_dim": {
                    "value": "self._embedding_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embeddings_initializer": {
                    "value": "embedding_initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.keras.initializers.constant(embedding_table)",
                            "Call"
                        ]
                    ]
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "mask_zero": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "self._name + '/embedding'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "LSTM_24": {
                "variable": {
                    "value": "self._LSTM",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "self._hidden_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "self._name + '/LSTM'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "return_sequences": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dropout": {
                    "value": "self._dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "classifier.py": {
        "tensorflow": {}
    },
    "encoder.py": {
        "tensorflow": {}
    },
    "entity_network/batch_generator.py": {
        "tensorflow": {}
    },
    "entity_network/entity_main_model.py": {
        "tensorflow": {}
    },
    "entity_network/staticRecurrentEntNet.py": {
        "tensorflow": {
            "tile_202": {
                "variable": {
                    "value": "initial_entity_hidden_state",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(entity_cell.get_initial_state(), axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[batch_size, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_208": {
                "variable": {
                    "value": "all_entity_hiddens",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "initial_entity_hidden_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_212": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "mask[:, i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cast_213": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.squeeze(indices, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_214": {
                "variable": {
                    "value": "curr_encoded_sents",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "encoded_sents[:, i, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "indices": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(mask[:, i])",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.squeeze(indices, axis=1), tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.where(prgrph_mask[:, i, 0])",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.squeeze(indices, axis=1), tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_215": {
                "variable": {
                    "value": "curr_keys",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "keys",
                    "type": "variable",
                    "possible_values": [
                        [
                            "keys",
                            "Method Argument"
                        ],
                        [
                            "keys",
                            "Method Argument"
                        ],
                        [
                            "keys",
                            "Method Argument"
                        ],
                        [
                            "keys",
                            "Method Argument"
                        ],
                        [
                            "keys",
                            "Method Argument"
                        ],
                        [
                            "keys",
                            "Method Argument"
                        ]
                    ]
                },
                "indices": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(mask[:, i])",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.squeeze(indices, axis=1), tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.where(prgrph_mask[:, i, 0])",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.squeeze(indices, axis=1), tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "embedding_lookup_360": {
                "variable": {
                    "value": "prgrph_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.embedding_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "prgrph",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_363": {
                "variable": {
                    "value": "encoded_sents",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, 1, prgrph_embeddings.shape[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_24": {
                "input_tensor": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_78": {
                "x": {
                    "value": "tf.reduce_sum(tf.multiply(tf.expand_dims(encoded_sents, 1), current_hiddens) + tf.multiply(tf.expand_dims(encoded_sents, 1), current_keys), axis=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "l2_normalize_121": {
                "x": {
                    "value": "hiddens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hiddens",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_155": {
                "shape": {
                    "value": "[self.max_entity_num, self.entity_embedding_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_217": {
                "variable": {
                    "value": "prev_states",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "entity_hiddens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "initial_entity_hidden_state",
                            "variable"
                        ],
                        [
                            "entity_hiddens + tf.scatter_nd(tf.expand_dims(indices, 1), updated_hiddens - prev_states, keys.shape)",
                            "BinOp"
                        ]
                    ]
                },
                "indices": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(mask[:, i])",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.squeeze(indices, axis=1), tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.where(prgrph_mask[:, i, 0])",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.squeeze(indices, axis=1), tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_224": {
                "variable": {
                    "value": "prev_states",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "all_entity_hiddens[:, -1, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "indices": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(mask[:, i])",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.squeeze(indices, axis=1), tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.where(prgrph_mask[:, i, 0])",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.squeeze(indices, axis=1), tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_225": {
                "variable": {
                    "value": "updated_hiddens",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "entity_cell(curr_encoded_sents, prev_states, curr_keys)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_228": {
                "variable": {
                    "value": "all_entity_hiddens",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[all_entity_hiddens, tf.scatter_nd(tf.expand_dims(indices, 1), updated_hiddens, [batch_size, 1, key_num, entity_embedding_dim])]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_366": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "prgrph_mask[:, i, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cast_368": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.squeeze(indices, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_369": {
                "variable": {
                    "value": "current_sents",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "prgrph_embeddings[:, i, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "indices": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(mask[:, i])",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.squeeze(indices, axis=1), tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.where(prgrph_mask[:, i, 0])",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.squeeze(indices, axis=1), tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_371": {
                "variable": {
                    "value": "curr_encoded_sents",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.sent_encoder_module(current_sents)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_373": {
                "variable": {
                    "value": "encoded_sents",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[encoded_sents, curr_encoded_sents]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_79": {
                "input_tensor": {
                    "value": "tf.multiply(tf.expand_dims(encoded_sents, 1), current_hiddens) + tf.multiply(tf.expand_dims(encoded_sents, 1), current_keys)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_97": {
                "tensor": {
                    "value": "tf.matmul(tf.reshape(current_hiddens, [-1, self.entity_embedding_dim]), self.U) + tf.matmul(tf.reshape(current_keys, [-1, self.entity_embedding_dim]), self.V) + tf.matmul(tf.reshape(tf.tile(tf.expand_dims(encoded_sents, 1), [1, self.max_entity_num, 1]), shape=[-1, self.entity_embedding_dim]), self.W)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[curr_prgrphs_num, self.max_entity_num, self.entity_embedding_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "multiply_114": {
                "x": {
                    "value": "tf.tile(tf.expand_dims(gates, axis=2), [1, 1, self.entity_embedding_dim])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "h_tilda",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.activation(tf.reshape(tf.matmul(tf.reshape(current_hiddens, [-1, self.entity_embedding_dim]), self.U) + tf.matmul(tf.reshape(current_keys, [-1, self.entity_embedding_dim]), self.V) + tf.matmul(tf.reshape(tf.tile(tf.expand_dims(encoded_sents, 1), [1, self.max_entity_num, 1]), shape=[-1, self.entity_embedding_dim]), self.W), shape=[curr_prgrphs_num, self.max_entity_num, self.entity_embedding_dim]))",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_203": {
                "input": {
                    "value": "entity_cell.get_initial_state()",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_213": {
                "input": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(mask[:, i])",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.squeeze(indices, axis=1), tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.where(prgrph_mask[:, i, 0])",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.squeeze(indices, axis=1), tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_115": {
                "input": {
                    "value": "tf.expand_dims(gates, axis=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, self.entity_embedding_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "scatter_nd_220": {
                "indices": {
                    "value": "tf.expand_dims(indices, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "updates": {
                    "value": "updated_hiddens - prev_states",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "keys.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_368": {
                "input": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(mask[:, i])",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.squeeze(indices, axis=1), tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.where(prgrph_mask[:, i, 0])",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.squeeze(indices, axis=1), tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multiply_80": {
                "x": {
                    "value": "tf.expand_dims(encoded_sents, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "current_hiddens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "current_hiddens",
                            "Method Argument"
                        ],
                        [
                            "current_hiddens",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "multiply_81": {
                "x": {
                    "value": "tf.expand_dims(encoded_sents, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "current_keys",
                    "type": "variable",
                    "possible_values": [
                        [
                            "current_keys",
                            "Method Argument"
                        ],
                        [
                            "current_keys",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_104": {
                "a": {
                    "value": "tf.reshape(tf.tile(tf.expand_dims(encoded_sents, 1), [1, self.max_entity_num, 1]), shape=[-1, self.entity_embedding_dim])",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_115": {
                "input": {
                    "value": "gates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_gate(encoded_sents, prev_states, keys)",
                            "Call"
                        ],
                        [
                            "gates",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_221": {
                "input": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(mask[:, i])",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.squeeze(indices, axis=1), tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.where(prgrph_mask[:, i, 0])",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.squeeze(indices, axis=1), tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "scatter_nd_230": {
                "indices": {
                    "value": "tf.expand_dims(indices, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "updates": {
                    "value": "updated_hiddens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "entity_cell(curr_encoded_sents, prev_states, curr_keys)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(entity_cell(curr_encoded_sents, prev_states, curr_keys), axis=1)",
                            "Call"
                        ],
                        [
                            "current_hiddens + tf.multiply(tf.tile(tf.expand_dims(gates, axis=2), [1, 1, self.entity_embedding_dim]), h_tilda)",
                            "BinOp"
                        ],
                        [
                            "self.update_hidden(gates, prev_states, keys, encoded_sents)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, 1, key_num, entity_embedding_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_80": {
                "input": {
                    "value": "encoded_sents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.zeros([batch_size, 1, prgrph_embeddings.shape[3]])",
                            "Call"
                        ],
                        [
                            "tf.concat([encoded_sents, curr_encoded_sents], axis=1)",
                            "Call"
                        ],
                        [
                            "encoded_sents[:, 1:, :]",
                            "Subscript"
                        ],
                        [
                            "encoded_sents",
                            "Method Argument"
                        ],
                        [
                            "encoded_sents",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_81": {
                "input": {
                    "value": "encoded_sents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.zeros([batch_size, 1, prgrph_embeddings.shape[3]])",
                            "Call"
                        ],
                        [
                            "tf.concat([encoded_sents, curr_encoded_sents], axis=1)",
                            "Call"
                        ],
                        [
                            "encoded_sents[:, 1:, :]",
                            "Subscript"
                        ],
                        [
                            "encoded_sents",
                            "Method Argument"
                        ],
                        [
                            "encoded_sents",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_98": {
                "a": {
                    "value": "tf.reshape(current_hiddens, [-1, self.entity_embedding_dim])",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "self.U",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_101": {
                "a": {
                    "value": "tf.reshape(current_keys, [-1, self.entity_embedding_dim])",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "self.V",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_105": {
                "tensor": {
                    "value": "tf.tile(tf.expand_dims(encoded_sents, 1), [1, self.max_entity_num, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.entity_embedding_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_230": {
                "input": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(mask[:, i])",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.squeeze(indices, axis=1), tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.where(prgrph_mask[:, i, 0])",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.squeeze(indices, axis=1), tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_99": {
                "tensor": {
                    "value": "current_hiddens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "current_hiddens",
                            "Method Argument"
                        ],
                        [
                            "current_hiddens",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.entity_embedding_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_102": {
                "tensor": {
                    "value": "current_keys",
                    "type": "variable",
                    "possible_values": [
                        [
                            "current_keys",
                            "Method Argument"
                        ],
                        [
                            "current_keys",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.entity_embedding_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_105": {
                "input": {
                    "value": "tf.expand_dims(encoded_sents, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, self.max_entity_num, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_105": {
                "input": {
                    "value": "encoded_sents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.zeros([batch_size, 1, prgrph_embeddings.shape[3]])",
                            "Call"
                        ],
                        [
                            "tf.concat([encoded_sents, curr_encoded_sents], axis=1)",
                            "Call"
                        ],
                        [
                            "encoded_sents[:, 1:, :]",
                            "Subscript"
                        ],
                        [
                            "encoded_sents",
                            "Method Argument"
                        ],
                        [
                            "encoded_sents",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "entity_network/train.py": {
        "tensorflow": {
            "enable_eager_execution_12": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdamOptimizer_58": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "learning_rate",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_mean_28": {
                "input_tensor": {
                    "value": "tf.multiply(losses.categorical_crossentropy(one_hot(y_true), y_pred), mask)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_29": {
                "x": {
                    "value": "losses.categorical_crossentropy(one_hot(y_true), y_pred)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask",
                            "Method Argument"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "GradientTape_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "categorical_crossentropy_29": {
                "y_true": {
                    "value": "one_hot(y_true)",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_or_create_global_step_76": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "main_model.py": {
        "tensorflow": {}
    },
    "train.py": {
        "tensorflow": {
            "ConfigProto_9": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_11": {
                "variable": {
                    "value": "session",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_18": {
                "variable": {
                    "value": "adam",
                    "type": "variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "learning_rate",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ModelCheckpoint_24": {
                "variable": {
                    "value": "cp_callback",
                    "type": "variable",
                    "possible_values": []
                },
                "filepath": {
                    "value": "save_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "save_path",
                            "Method Argument"
                        ]
                    ]
                },
                "save_weights_only": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "verbose": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "set_session_12": {
                "session": {
                    "value": "session",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Session(config=config)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_14": {
                "device_name": {
                    "value": "/gpu:0",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "transformer_model/attention_layer.py": {
        "tensorflow": {
            "Dense_40": {
                "variable": {
                    "value": "self.q_dense_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "q",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_43": {
                "variable": {
                    "value": "self.k_dense_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "k",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_46": {
                "variable": {
                    "value": "self.v_dense_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "v",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_50": {
                "variable": {
                    "value": "self.output_dense_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "output_transform",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_138": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.q_dense_layer(x)",
                            "Call"
                        ],
                        [
                            "self.split_heads(q)",
                            "Call"
                        ],
                        [
                            "q * depth ** (-0.5)",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.k_dense_layer(y)",
                            "Call"
                        ],
                        [
                            "tf.concat([cache['k'], k], axis=1)",
                            "Call"
                        ],
                        [
                            "self.split_heads(k)",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_140": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(q, k, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "logits + bias",
                            "BinOp"
                        ]
                    ]
                },
                "name": {
                    "value": "attention_weights",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_143": {
                "variable": {
                    "value": "attention_output",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(logits, name='attention_weights')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(weights, 1.0 - self.attention_dropout)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.v_dense_layer(y)",
                            "Call"
                        ],
                        [
                            "tf.concat([cache['v'], v], axis=1)",
                            "Call"
                        ],
                        [
                            "self.split_heads(v)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_74": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [batch_size, length, self.num_heads, depth])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, length, self.num_heads, depth]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_91": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [batch_size, length, self.num_heads, depth])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_121": {
                "variable": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[cache['k'], k]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_122": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[cache['v'], v]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_142": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(logits, name='attention_weights')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(weights, 1.0 - self.attention_dropout)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "1.0 - self.attention_dropout",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "name_scope_66": {
                "name": {
                    "value": "split_heads",
                    "type": "str",
                    "possible_values": []
                }
            },
            "transpose_77": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [batch_size, length, self.num_heads, depth])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "name_scope_88": {
                "name": {
                    "value": "combine_heads",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_93": {
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [batch_size, length, self.num_heads, depth])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, length, self.hidden_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_67": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [batch_size, length, self.num_heads, depth])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_68": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [batch_size, length, self.num_heads, depth])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_89": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [batch_size, length, self.num_heads, depth])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_90": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [batch_size, length, self.num_heads, depth])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "transformer_model/beam_search.py": {
        "tensorflow": {
            "expand_dims_457": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tensor, axis=1)",
                            "Call"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_470": {
                "variable": {
                    "value": "dynamic_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tensor, axis=1)",
                            "Call"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_546": {
                "variable": {
                    "value": "batch_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "batch_pos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.range(batch_size * new_beam_size) // new_beam_size",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(batch_pos, [batch_size, new_beam_size])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, new_beam_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_551": {
                "variable": {
                    "value": "coordinates",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[batch_pos, beam_indices]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "top_k_559": {
                "variable": {
                    "value": "(_, topk_indexes)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "score_or_log_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "score_or_log_prob",
                            "Method Argument"
                        ]
                    ]
                },
                "k": {
                    "value": "beam_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "beam_size",
                            "Method Argument"
                        ],
                        [
                            "beam_size",
                            "Method Argument"
                        ],
                        [
                            "beam_size",
                            "Method Argument"
                        ],
                        [
                            "beam_size",
                            "Method Argument"
                        ],
                        [
                            "beam_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "while_loop_77": {
                "variable": {
                    "value": "finished_state",
                    "type": "variable",
                    "possible_values": []
                },
                "cond": {
                    "value": "self._continue_search",
                    "type": "Attribute",
                    "possible_values": []
                },
                "body": {
                    "value": "self._search_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "[state]",
                    "type": "List",
                    "possible_values": []
                },
                "shape_invariants": {
                    "value": "[state_shapes]",
                    "type": "List",
                    "possible_values": []
                },
                "parallel_iterations": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "back_prop": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "where_94": {
                "variable": {
                    "value": "finished_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.reduce_any(finished_flags, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "finished_seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "finished_state[_StateKeys.FINISHED_SEQ]",
                            "Subscript"
                        ],
                        [
                            "tf.where(tf.reduce_any(finished_flags, 1), finished_seq, alive_seq)",
                            "Call"
                        ],
                        [
                            "tf.zeros(tf.shape(alive_seq), tf.int32)",
                            "Call"
                        ],
                        [
                            "state[_StateKeys.FINISHED_SEQ]",
                            "Subscript"
                        ],
                        [
                            "tf.concat([finished_seq, tf.zeros([self.batch_size, self.beam_size, 1], tf.int32)], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.concat([finished_seq, new_seq], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "alive_seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "finished_state[_StateKeys.ALIVE_SEQ]",
                            "Subscript"
                        ],
                        [
                            "_expand_to_beam_size(initial_ids, self.beam_size)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(alive_seq, axis=2)",
                            "Call"
                        ],
                        [
                            "state[_StateKeys.ALIVE_SEQ]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "where_96": {
                "variable": {
                    "value": "finished_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.reduce_any(finished_flags, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "finished_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "finished_state[_StateKeys.FINISHED_SCORES]",
                            "Subscript"
                        ],
                        [
                            "tf.where(tf.reduce_any(finished_flags, 1), finished_scores, alive_log_probs)",
                            "Call"
                        ],
                        [
                            "tf.ones([self.batch_size, self.beam_size]) * -INF",
                            "BinOp"
                        ],
                        [
                            "state[_StateKeys.FINISHED_SCORES]",
                            "Subscript"
                        ],
                        [
                            "finished_scores * tf.to_float(finished_flags)",
                            "BinOp"
                        ],
                        [
                            "state[_StateKeys.FINISHED_SCORES]",
                            "Subscript"
                        ],
                        [
                            "tf.concat([finished_scores, new_scores], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "alive_log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "finished_state[_StateKeys.ALIVE_LOG_PROBS]",
                            "Subscript"
                        ],
                        [
                            "tf.tile(initial_log_probs, [self.batch_size, 1])",
                            "Call"
                        ],
                        [
                            "state[_StateKeys.ALIVE_LOG_PROBS]",
                            "Subscript"
                        ],
                        [
                            "state[_StateKeys.ALIVE_LOG_PROBS]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "constant_113": {
                "variable": {
                    "value": "cur_index",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_117": {
                "variable": {
                    "value": "alive_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alive_seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "finished_state[_StateKeys.ALIVE_SEQ]",
                            "Subscript"
                        ],
                        [
                            "_expand_to_beam_size(initial_ids, self.beam_size)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(alive_seq, axis=2)",
                            "Call"
                        ],
                        [
                            "state[_StateKeys.ALIVE_SEQ]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_121": {
                "variable": {
                    "value": "initial_log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0.0] + [-float('inf')] * (self.beam_size - 1)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_123": {
                "variable": {
                    "value": "alive_log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "initial_log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([[0.0] + [-float('inf')] * (self.beam_size - 1)])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[self.batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "map_structure_127": {
                "variable": {
                    "value": "alive_cache",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "lambda t: _expand_to_beam_size(t, self.beam_size)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "*structure": {
                    "value": "initial_cache",
                    "type": "variable",
                    "possible_values": [
                        [
                            "initial_cache",
                            "Method Argument"
                        ],
                        [
                            "initial_cache",
                            "Method Argument"
                        ],
                        [
                            "initial_cache",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_131": {
                "variable": {
                    "value": "finished_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.shape(alive_seq)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_137": {
                "variable": {
                    "value": "finished_flags",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.beam_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "less_195": {
                "variable": {
                    "value": "not_at_max_decode_length",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i in range(len(shape))",
                            "Call"
                        ],
                        [
                            "i in range(len(shape_list) - 1)",
                            "Call"
                        ],
                        [
                            "state[_StateKeys.CUR_INDEX]",
                            "Subscript"
                        ],
                        [
                            "state[_StateKeys.CUR_INDEX]",
                            "Subscript"
                        ],
                        [
                            "state[_StateKeys.CUR_INDEX]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "self.max_decode_length",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_min_206": {
                "variable": {
                    "value": "lowest_finished_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "finished_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "finished_state[_StateKeys.FINISHED_SCORES]",
                            "Subscript"
                        ],
                        [
                            "tf.where(tf.reduce_any(finished_flags, 1), finished_scores, alive_log_probs)",
                            "Call"
                        ],
                        [
                            "tf.ones([self.batch_size, self.beam_size]) * -INF",
                            "BinOp"
                        ],
                        [
                            "state[_StateKeys.FINISHED_SCORES]",
                            "Subscript"
                        ],
                        [
                            "finished_scores * tf.to_float(finished_flags)",
                            "BinOp"
                        ],
                        [
                            "state[_StateKeys.FINISHED_SCORES]",
                            "Subscript"
                        ],
                        [
                            "tf.concat([finished_scores, new_scores], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_any_210": {
                "variable": {
                    "value": "finished_batches",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "finished_flags",
                    "type": "variable",
                    "possible_values": [
                        [
                            "finished_state[_StateKeys.FINISHED_FLAGS]",
                            "Subscript"
                        ],
                        [
                            "tf.zeros([self.batch_size, self.beam_size], tf.bool)",
                            "Call"
                        ],
                        [
                            "state[_StateKeys.FINISHED_FLAGS]",
                            "Subscript"
                        ],
                        [
                            "state[_StateKeys.FINISHED_FLAGS]",
                            "Subscript"
                        ],
                        [
                            "tf.concat([finished_flags, new_finished_flags], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_all_213": {
                "variable": {
                    "value": "worst_finished_score_better_than_best_alive_score",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.greater(lowest_finished_scores, best_alive_scores)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "map_structure_279": {
                "variable": {
                    "value": "flat_cache",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "_flatten_beam_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_flatten_beam_dim",
                            "Call"
                        ]
                    ]
                },
                "*structure": {
                    "value": "alive_cache",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nest.map_structure(lambda t: _expand_to_beam_size(t, self.beam_size), initial_cache)",
                            "Call"
                        ],
                        [
                            "state[_StateKeys.ALIVE_CACHE]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "map_structure_287": {
                "variable": {
                    "value": "new_cache",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "lambda t: _unflatten_beam_dim(t, self.batch_size, self.beam_size)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "*structure": {
                    "value": "flat_cache",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nest.map_structure(_flatten_beam_dim, alive_cache)",
                            "Call"
                        ],
                        [
                            "self.symbols_to_logits_fn(flat_ids, i, flat_cache)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_302": {
                "variable": {
                    "value": "flat_log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "candidate_log_probs + tf.expand_dims(alive_log_probs, axis=2)",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.beam_size * self.vocab_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "top_k_304": {
                "variable": {
                    "value": "(topk_log_probs, topk_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "flat_log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(log_probs, [-1, self.beam_size * self.vocab_size])",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "beams_to_keep",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * self.beam_size",
                            "BinOp"
                        ]
                    ]
                }
            },
            "expand_dims_316": {
                "variable": {
                    "value": "topk_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "topk_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "topk_indices % self.vocab_size",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(topk_ids, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_317": {
                "variable": {
                    "value": "topk_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[topk_seq, topk_ids]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "equal_337": {
                "variable": {
                    "value": "new_finished_flags",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "new_seq[:, :, -1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "self.eos_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_373": {
                "variable": {
                    "value": "finished_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[finished_seq, tf.zeros([self.batch_size, self.beam_size, 1], tf.int32)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "equal_384": {
                "variable": {
                    "value": "new_finished_flags",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "new_seq[:, :, -1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "self.eos_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_388": {
                "variable": {
                    "value": "finished_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[finished_seq, new_seq]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_389": {
                "variable": {
                    "value": "finished_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[finished_scores, new_scores]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_390": {
                "variable": {
                    "value": "finished_flags",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[finished_flags, new_finished_flags]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_444": {
                "x": {
                    "value": "(5.0 + tf.to_float(length)) / 6.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "alpha",
                            "Method Argument"
                        ],
                        [
                            "alpha",
                            "Method Argument"
                        ],
                        [
                            "alpha",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tile_461": {
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tensor, axis=1)",
                            "Call"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ]
                    ]
                },
                "multiples": {
                    "value": "tile_dims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1] * tensor.shape.ndims",
                            "BinOp"
                        ]
                    ]
                }
            },
            "TensorShape_486": {
                "dims": {
                    "value": "shape_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_shape_list(tensor)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_501": {
                "tensor": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tensor, axis=1)",
                            "Call"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor.get_shape().as_list()",
                            "Call"
                        ],
                        [
                            "_shape_list(tensor)",
                            "Call"
                        ],
                        [
                            "_shape_list(tensor)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_517": {
                "tensor": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tensor, axis=1)",
                            "Call"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "new_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[batch_size, beam_size] + shape[1:]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "map_structure_553": {
                "func": {
                    "value": "lambda state: tf.gather_nd(state, coordinates)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "*structure": {
                    "value": "nested",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nested",
                            "Method Argument"
                        ],
                        [
                            "nested",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "to_float_204": {
                "x": {
                    "value": "finished_flags",
                    "type": "variable",
                    "possible_values": [
                        [
                            "finished_state[_StateKeys.FINISHED_FLAGS]",
                            "Subscript"
                        ],
                        [
                            "tf.zeros([self.batch_size, self.beam_size], tf.bool)",
                            "Call"
                        ],
                        [
                            "state[_StateKeys.FINISHED_FLAGS]",
                            "Subscript"
                        ],
                        [
                            "state[_StateKeys.FINISHED_FLAGS]",
                            "Subscript"
                        ],
                        [
                            "tf.concat([finished_flags, new_finished_flags], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "logical_and_216": {
                "x": {
                    "value": "not_at_max_decode_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.less(i, self.max_decode_length)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.logical_not(worst_finished_score_better_than_best_alive_score)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_432": {
                "input": {
                    "value": "initial_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "initial_ids",
                            "Method Argument"
                        ],
                        [
                            "initial_ids",
                            "Method Argument"
                        ],
                        [
                            "initial_ids",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_logsumexp_439": {
                "input_tensor": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_unflatten_beam_dim(flat_logits, self.batch_size, self.beam_size)",
                            "Call"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_any_94": {
                "input_tensor": {
                    "value": "finished_flags",
                    "type": "variable",
                    "possible_values": [
                        [
                            "finished_state[_StateKeys.FINISHED_FLAGS]",
                            "Subscript"
                        ],
                        [
                            "tf.zeros([self.batch_size, self.beam_size], tf.bool)",
                            "Call"
                        ],
                        [
                            "state[_StateKeys.FINISHED_FLAGS]",
                            "Subscript"
                        ],
                        [
                            "state[_StateKeys.FINISHED_FLAGS]",
                            "Subscript"
                        ],
                        [
                            "tf.concat([finished_flags, new_finished_flags], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_any_96": {
                "input_tensor": {
                    "value": "finished_flags",
                    "type": "variable",
                    "possible_values": [
                        [
                            "finished_state[_StateKeys.FINISHED_FLAGS]",
                            "Subscript"
                        ],
                        [
                            "tf.zeros([self.batch_size, self.beam_size], tf.bool)",
                            "Call"
                        ],
                        [
                            "state[_StateKeys.FINISHED_FLAGS]",
                            "Subscript"
                        ],
                        [
                            "state[_StateKeys.FINISHED_FLAGS]",
                            "Subscript"
                        ],
                        [
                            "tf.concat([finished_flags, new_finished_flags], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_131": {
                "input": {
                    "value": "alive_seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "finished_state[_StateKeys.ALIVE_SEQ]",
                            "Subscript"
                        ],
                        [
                            "_expand_to_beam_size(initial_ids, self.beam_size)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(alive_seq, axis=2)",
                            "Call"
                        ],
                        [
                            "state[_StateKeys.ALIVE_SEQ]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ones_134": {
                "shape": {
                    "value": "[self.batch_size, self.beam_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_157": {
                "dims": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_159": {
                "dims": {
                    "value": "[None, self.beam_size, None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_161": {
                "dims": {
                    "value": "[None, self.beam_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "map_structure_163": {
                "func": {
                    "value": "_get_shape_keep_last_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_get_shape_keep_last_dim",
                            "Call"
                        ]
                    ]
                },
                "*structure": {
                    "value": "alive_cache",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nest.map_structure(lambda t: _expand_to_beam_size(t, self.beam_size), initial_cache)",
                            "Call"
                        ],
                        [
                            "state[_StateKeys.ALIVE_CACHE]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "TensorShape_165": {
                "dims": {
                    "value": "[None, self.beam_size, None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_167": {
                "dims": {
                    "value": "[None, self.beam_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_169": {
                "dims": {
                    "value": "[None, self.beam_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "greater_214": {
                "x": {
                    "value": "lowest_finished_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_min(finished_scores, axis=1)",
                            "Call"
                        ],
                        [
                            "lowest_finished_scores + (1.0 - tf.to_float(finished_batches)) * -INF",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "best_alive_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "alive_log_probs[:, 0] / max_length_norm",
                            "BinOp"
                        ]
                    ]
                }
            },
            "logical_not_218": {
                "x": {
                    "value": "worst_finished_score_better_than_best_alive_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_all(tf.greater(lowest_finished_scores, best_alive_scores))",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_297": {
                "input": {
                    "value": "alive_log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "finished_state[_StateKeys.ALIVE_LOG_PROBS]",
                            "Subscript"
                        ],
                        [
                            "tf.tile(initial_log_probs, [self.batch_size, 1])",
                            "Call"
                        ],
                        [
                            "state[_StateKeys.ALIVE_LOG_PROBS]",
                            "Subscript"
                        ],
                        [
                            "state[_StateKeys.ALIVE_LOG_PROBS]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "to_float_338": {
                "x": {
                    "value": "new_finished_flags",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(new_seq[:, :, -1], self.eos_id)",
                            "Call"
                        ],
                        [
                            "tf.equal(new_seq[:, :, -1], self.eos_id)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_nd_553": {
                "params": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._create_initial_state(initial_ids, initial_cache)",
                            "Call"
                        ],
                        [
                            "{_StateKeys.CUR_INDEX: cur_index, _StateKeys.ALIVE_SEQ: alive_seq, _StateKeys.ALIVE_LOG_PROBS: alive_log_probs, _StateKeys.ALIVE_CACHE: alive_cache, _StateKeys.FINISHED_SEQ: finished_seq, _StateKeys.FINISHED_SCORES: finished_scores, _StateKeys.FINISHED_FLAGS: finished_flags}",
                            "Dict"
                        ],
                        [
                            "state",
                            "Method Argument"
                        ],
                        [
                            "state",
                            "Method Argument"
                        ],
                        [
                            "state",
                            "Method Argument"
                        ],
                        [
                            "state",
                            "Method Argument"
                        ]
                    ]
                },
                "indices": {
                    "value": "coordinates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([batch_pos, beam_indices], axis=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_211": {
                "x": {
                    "value": "finished_batches",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_any(finished_flags, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_375": {
                "shape": {
                    "value": "[self.batch_size, self.beam_size, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_float_385": {
                "x": {
                    "value": "new_finished_flags",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(new_seq[:, :, -1], self.eos_id)",
                            "Call"
                        ],
                        [
                            "tf.equal(new_seq[:, :, -1], self.eos_id)",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_444": {
                "x": {
                    "value": "length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "length",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "transformer_model/beam_search_test.py": {
        "tensorflow": {
            "ones_29": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[7, 4, 2, 5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_36": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_37": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[7, y, 2, 5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_45": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "4.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ones_46": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[7, tf.to_int32(tf.sqrt(y)), 2, 5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_51": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[7, 4, 2, 5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_58": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[28, 2, 5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_65": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.range(24)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2, 3, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_82": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.range(24)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2, 3, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "main_94": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "shape_32": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones([7, 4, 2, 5])",
                            "Call"
                        ],
                        [
                            "beam_search._expand_to_beam_size(x, 3)",
                            "Call"
                        ],
                        [
                            "tf.ones([7, y, 2, 5])",
                            "Call"
                        ],
                        [
                            "tf.ones([7, tf.to_int32(tf.sqrt(y)), 2, 5])",
                            "Call"
                        ],
                        [
                            "tf.ones([7, 4, 2, 5])",
                            "Call"
                        ],
                        [
                            "beam_search._flatten_beam_dim(x)",
                            "Call"
                        ],
                        [
                            "tf.ones([28, 2, 5])",
                            "Call"
                        ],
                        [
                            "beam_search._unflatten_beam_dim(x, 7, 4)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.range(24), [2, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.range(24), [2, 3, 4])",
                            "Call"
                        ]
                    ]
                }
            },
            "to_int32_46": {
                "x": {
                    "value": "tf.sqrt(y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_54": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones([7, 4, 2, 5])",
                            "Call"
                        ],
                        [
                            "beam_search._expand_to_beam_size(x, 3)",
                            "Call"
                        ],
                        [
                            "tf.ones([7, y, 2, 5])",
                            "Call"
                        ],
                        [
                            "tf.ones([7, tf.to_int32(tf.sqrt(y)), 2, 5])",
                            "Call"
                        ],
                        [
                            "tf.ones([7, 4, 2, 5])",
                            "Call"
                        ],
                        [
                            "beam_search._flatten_beam_dim(x)",
                            "Call"
                        ],
                        [
                            "tf.ones([28, 2, 5])",
                            "Call"
                        ],
                        [
                            "beam_search._unflatten_beam_dim(x, 7, 4)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.range(24), [2, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.range(24), [2, 3, 4])",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_61": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones([7, 4, 2, 5])",
                            "Call"
                        ],
                        [
                            "beam_search._expand_to_beam_size(x, 3)",
                            "Call"
                        ],
                        [
                            "tf.ones([7, y, 2, 5])",
                            "Call"
                        ],
                        [
                            "tf.ones([7, tf.to_int32(tf.sqrt(y)), 2, 5])",
                            "Call"
                        ],
                        [
                            "tf.ones([7, 4, 2, 5])",
                            "Call"
                        ],
                        [
                            "beam_search._flatten_beam_dim(x)",
                            "Call"
                        ],
                        [
                            "tf.ones([28, 2, 5])",
                            "Call"
                        ],
                        [
                            "beam_search._unflatten_beam_dim(x, 7, 4)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.range(24), [2, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.range(24), [2, 3, 4])",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_46": {
                "x": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(dtype=tf.int32, shape=[])",
                            "Call"
                        ],
                        [
                            "tf.constant(4.0)",
                            "Call"
                        ],
                        [
                            "beam_search._gather_beams(x, [[1, 2], [0, 2]], 2, 2)",
                            "Call"
                        ],
                        [
                            "sess.run(y)",
                            "Call"
                        ],
                        [
                            "beam_search._gather_topk_beams(x, x_scores, 2, 2)",
                            "Call"
                        ],
                        [
                            "sess.run(y)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "transformer_model/embedding_layer.py": {
        "tensorflow": {
            "get_variable_55": {
                "variable": {
                    "value": "self.shared_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.vocab_size, self.hidden_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(0.0, self.hidden_size ** (-0.5))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "to_float_74": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.not_equal(x, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_106": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, self.hidden_size])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.hidden_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_107": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, self.hidden_size])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "self.shared_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_52": {
                "name_or_scope": {
                    "value": "embedding_and_softmax",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_72": {
                "name": {
                    "value": "embedding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_102": {
                "name": {
                    "value": "presoftmax_linear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_109": {
                "tensor": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(x, self.shared_weights, transpose_b=True)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, length, self.vocab_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "not_equal_74": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, self.hidden_size])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_103": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, self.hidden_size])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_104": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, self.hidden_size])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "random_normal_initializer_57": {
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "self.hidden_size ** (-0.5)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "transformer_model/ffn_layer.py": {
        "tensorflow": {
            "Dense_36": {
                "variable": {
                    "value": "self.filter_dense_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "filter_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filter_size",
                            "Method Argument"
                        ]
                    ]
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "filter_layer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_40": {
                "variable": {
                    "value": "self.output_dense_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "output_layer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_81": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.filter_dense_layer(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(output, 1.0 - self.relu_dropout)",
                            "Call"
                        ],
                        [
                            "self.output_dense_layer(output)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(output, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.scatter_nd(indices=nonpad_ids, updates=output, shape=[batch_size * length, self.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch_size, length, self.hidden_size])",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "1.0 - self.relu_dropout",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_61": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, self.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(x, indices=nonpad_ids)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, axis=0)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_62": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, self.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(x, indices=nonpad_ids)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, axis=0)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_67": {
                "variable": {
                    "value": "pad_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None if not self.allow_pad else padding",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_int32_69": {
                "variable": {
                    "value": "nonpad_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.where(pad_mask < 1e-09)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_72": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, self.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(x, indices=nonpad_ids)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, axis=0)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.hidden_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_nd_73": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, self.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(x, indices=nonpad_ids)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, axis=0)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "indices": {
                    "value": "nonpad_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_int32(tf.where(pad_mask < 1e-09))",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_77": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, self.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(x, indices=nonpad_ids)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, axis=0)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_86": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.filter_dense_layer(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(output, 1.0 - self.relu_dropout)",
                            "Call"
                        ],
                        [
                            "self.output_dense_layer(output)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(output, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.scatter_nd(indices=nonpad_ids, updates=output, shape=[batch_size * length, self.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch_size, length, self.hidden_size])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "scatter_nd_87": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "nonpad_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_int32(tf.where(pad_mask < 1e-09))",
                            "Call"
                        ]
                    ]
                },
                "updates": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.filter_dense_layer(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(output, 1.0 - self.relu_dropout)",
                            "Call"
                        ],
                        [
                            "self.output_dense_layer(output)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(output, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.scatter_nd(indices=nonpad_ids, updates=output, shape=[batch_size * length, self.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch_size, length, self.hidden_size])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size * length, self.hidden_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_91": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.filter_dense_layer(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(output, 1.0 - self.relu_dropout)",
                            "Call"
                        ],
                        [
                            "self.output_dense_layer(output)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(output, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.scatter_nd(indices=nonpad_ids, updates=output, shape=[batch_size * length, self.hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch_size, length, self.hidden_size])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, length, self.hidden_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "name_scope_65": {
                "name": {
                    "value": "remove_padding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_85": {
                "name": {
                    "value": "re_add_padding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "where_69": {
                "condition": {
                    "value": "pad_mask < 1e-09",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    },
    "transformer_model/model_utils.py": {
        "tensorflow": {
            "to_float_47": {
                "variable": {
                    "value": "position",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.range(length)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_56": {
                "variable": {
                    "value": "signal",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.sin(scaled_time), tf.cos(scaled_time)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_75": {
                "variable": {
                    "value": "valid_locs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "valid_locs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matrix_band_part(tf.ones([length, length]), -1, 0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(valid_locs, [1, 1, length, length])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, 1, length, length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_111": {
                "input": {
                    "value": "attention_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "padding * _NEG_INF",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(attention_bias, axis=1), axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_52": {
                "x": {
                    "value": "tf.to_float(tf.range(num_timescales)) * -log_timescale_increment",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "expand_dims_54": {
                "input": {
                    "value": "inv_timescales",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min_timescale * tf.exp(tf.to_float(tf.range(num_timescales)) * -log_timescale_increment)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "name_scope_73": {
                "name": {
                    "value": "decoder_self_attention_bias",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_91": {
                "name": {
                    "value": "padding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "to_float_92": {
                "x": {
                    "value": "tf.equal(x, padding_value)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "name_scope_108": {
                "name": {
                    "value": "attention_bias",
                    "type": "str",
                    "possible_values": []
                }
            },
            "to_float_51": {
                "x": {
                    "value": "num_timescales",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sin_56": {
                "x": {
                    "value": "scaled_time",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(position, 1) * tf.expand_dims(inv_timescales, 0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cos_56": {
                "x": {
                    "value": "scaled_time",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(position, 1) * tf.expand_dims(inv_timescales, 0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_74": {
                "shape": {
                    "value": "[length, length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "equal_92": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "padding_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "to_float_53": {
                "x": {
                    "value": "tf.range(num_timescales)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "transformer_model/model_utils_test.py": {
        "tensorflow": {
            "constant_31": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[1, 0, 0, 0, 2], [3, 4, 0, 0, 0], [0, 5, 6, 0, 7]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_40": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[1, 0, 0, 0, 2], [3, 4, 0, 0, 0], [0, 5, 6, 0, 7]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_42": {
                "variable": {
                    "value": "bias_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_utils.get_padding_bias(x)",
                            "Call"
                        ],
                        [
                            "model_utils.get_decoder_self_attention_bias(length)",
                            "Call"
                        ],
                        [
                            "sess.run(bias)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_43": {
                "variable": {
                    "value": "flattened_bias",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_utils.get_padding_bias(x)",
                            "Call"
                        ],
                        [
                            "model_utils.get_decoder_self_attention_bias(length)",
                            "Call"
                        ],
                        [
                            "sess.run(bias)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[3, 5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "main_66": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "transformer_model/train_transformer.py": {
        "tensorflow": {
            "ConfigProto_18": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_124": {
                "variable": {
                    "value": "saver2",
                    "type": "variable",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "keep_checkpoint_every_n_hours": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Saver_44": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "{v.name: v for v in tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, scope='bert')}",
                    "type": "DictComp",
                    "possible_values": []
                }
            },
            "Variable_51": {
                "variable": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "placeholder_52": {
                "variable": {
                    "value": "lr_new_value",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "assign_53": {
                "variable": {
                    "value": "lr_update",
                    "type": "variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(0.0, trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "lr_new_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [])",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_55": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "gradients_57": {
                "variable": {
                    "value": "gradients",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "model.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "xs": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "AdamOptimizer_60": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(0.0, trainable=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_41": {
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_64": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_collection_45": {
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "bert",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "transformer_model/train_transformer2.py": {
        "tensorflow": {
            "ConfigProto_13": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Variable_33": {
                "variable": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "placeholder_34": {
                "variable": {
                    "value": "lr_new_value",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "assign_35": {
                "variable": {
                    "value": "lr_update",
                    "type": "variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(0.0, trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "lr_new_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [])",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_37": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "gradients_39": {
                "variable": {
                    "value": "gradients",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "model.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "xs": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "AdamOptimizer_42": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(0.0, trainable=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "Saver_133": {
                "variable": {
                    "value": "saver2",
                    "type": "variable",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "keep_checkpoint_every_n_hours": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Session_30": {
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_47": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "transformer_model/transformer.py": {
        "tensorflow": {
            "get_variable_267": {
                "variable": {
                    "value": "self.scale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "layer_norm_scale",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.hidden_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.ones_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_269": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "layer_norm_bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.hidden_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_274": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_mean_275": {
                "variable": {
                    "value": "variance",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(x - mean)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "dense_120": {
                "variable": {
                    "value": "embedded_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "inputs[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "units": {
                    "value": "self.params['hidden_size']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "squeeze_214": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.decode(targets, encoder_outputs, attention_bias)",
                            "Call"
                        ],
                        [
                            "self.embedding_softmax_layer.linear(outputs)",
                            "Call"
                        ],
                        [
                            "self.embedding_softmax_layer.linear(decoder_outputs)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(logits, axis=[1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dropout_300": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.layer(y, *args, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(y, 1 - self.postprocess_dropout)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "1 - self.postprocess_dropout",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_86": {
                "name_or_scope": {
                    "value": "Transformer",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.variance_scaling_initializer(self.params['initializer_gain'], mode='fan_avg', distribution='uniform')",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_113": {
                "name": {
                    "value": "encode",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_131": {
                "variable": {
                    "value": "encoder_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "encoder_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedded_inputs + pos_encoding",
                            "BinOp"
                        ],
                        [
                            "tf.nn.dropout(encoder_inputs, 1 - self.params['layer_postprocess_dropout'])",
                            "Call"
                        ],
                        [
                            "self_attention_layer(encoder_inputs, attention_bias)",
                            "Call"
                        ],
                        [
                            "feed_forward_network(encoder_inputs, inputs_padding)",
                            "Call"
                        ],
                        [
                            "encoder_inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "rate": {
                    "value": "1 - self.params['layer_postprocess_dropout']",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "name_scope_151": {
                "name": {
                    "value": "decode",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_164": {
                "variable": {
                    "value": "decoder_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "decoder_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embedding_softmax_layer(targets)",
                            "Call"
                        ],
                        [
                            "tf.pad(decoder_inputs, [[0, 0], [1, 0], [0, 0]])[:, :-1, :]",
                            "Subscript"
                        ],
                        [
                            "decoder_inputs + model_utils.get_position_encoding(length, self.params['hidden_size'])",
                            "BinOp"
                        ],
                        [
                            "tf.nn.dropout(decoder_inputs, 1 - self.params['layer_postprocess_dropout'])",
                            "Call"
                        ],
                        [
                            "self_attention_layer(decoder_inputs, decoder_self_attention_bias, cache=layer_cache)",
                            "Call"
                        ],
                        [
                            "enc_dec_attention_layer(decoder_inputs, encoder_outputs, attention_bias)",
                            "Call"
                        ],
                        [
                            "feed_forward_network(decoder_inputs)",
                            "Call"
                        ],
                        [
                            "decoder_inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "rate": {
                    "value": "1 - self.params['layer_postprocess_dropout']",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_275": {
                "x": {
                    "value": "x - mean",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rsqrt_276": {
                "x": {
                    "value": "variance + epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "name_scope_124": {
                "name": {
                    "value": "add_pos_encoding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_155": {
                "name": {
                    "value": "shift_targets",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_159": {
                "name": {
                    "value": "add_pos_encoding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ones_initializer_268": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_270": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_351": {
                "name_or_scope": {
                    "value": "'layer_%d' % n",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_430": {
                "name_or_scope": {
                    "value": "layer_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'layer_%d' % n",
                            "BinOp"
                        ]
                    ]
                }
            },
            "shape_125": {
                "input": {
                    "value": "embedded_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs[0], self.params['hidden_size'])",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_157": {
                "tensor": {
                    "value": "decoder_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embedding_softmax_layer(targets)",
                            "Call"
                        ],
                        [
                            "tf.pad(decoder_inputs, [[0, 0], [1, 0], [0, 0]])[:, :-1, :]",
                            "Subscript"
                        ],
                        [
                            "decoder_inputs + model_utils.get_position_encoding(length, self.params['hidden_size'])",
                            "BinOp"
                        ],
                        [
                            "tf.nn.dropout(decoder_inputs, 1 - self.params['layer_postprocess_dropout'])",
                            "Call"
                        ],
                        [
                            "self_attention_layer(decoder_inputs, decoder_self_attention_bias, cache=layer_cache)",
                            "Call"
                        ],
                        [
                            "enc_dec_attention_layer(decoder_inputs, encoder_outputs, attention_bias)",
                            "Call"
                        ],
                        [
                            "feed_forward_network(decoder_inputs)",
                            "Call"
                        ],
                        [
                            "decoder_inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [1, 0], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_160": {
                "input": {
                    "value": "decoder_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embedding_softmax_layer(targets)",
                            "Call"
                        ],
                        [
                            "tf.pad(decoder_inputs, [[0, 0], [1, 0], [0, 0]])[:, :-1, :]",
                            "Subscript"
                        ],
                        [
                            "decoder_inputs + model_utils.get_position_encoding(length, self.params['hidden_size'])",
                            "BinOp"
                        ],
                        [
                            "tf.nn.dropout(decoder_inputs, 1 - self.params['layer_postprocess_dropout'])",
                            "Call"
                        ],
                        [
                            "self_attention_layer(decoder_inputs, decoder_self_attention_bias, cache=layer_cache)",
                            "Call"
                        ],
                        [
                            "enc_dec_attention_layer(decoder_inputs, encoder_outputs, attention_bias)",
                            "Call"
                        ],
                        [
                            "feed_forward_network(decoder_inputs)",
                            "Call"
                        ],
                        [
                            "decoder_inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_352": {
                "name_or_scope": {
                    "value": "self_attention",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_355": {
                "name_or_scope": {
                    "value": "ffn",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_431": {
                "name_or_scope": {
                    "value": "self_attention",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_436": {
                "name_or_scope": {
                    "value": "encdec_attention",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_439": {
                "name_or_scope": {
                    "value": "ffn",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "transformer_model/transformer_test.py": {
        "tensorflow": {
            "ConfigProto_9": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_26": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_28": {
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "transformer_model/transformer_transposition.py": {
        "tensorflow": {
            "reduce_mean_135": {
                "variable": {
                    "value": "transformer_encoded",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "transformer_res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._transformer.encode((bert_res, transformer_padding), attention_bias)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_collection_150": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "transformer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_40": {
                "variable": {
                    "value": "self.first_num_sents",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "first_num_sent",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_43": {
                "variable": {
                    "value": "self.second_num_sents",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "second_num_sent",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_48": {
                "variable": {
                    "value": "self.indices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "first_indices",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_53": {
                "variable": {
                    "value": "self.inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "inputs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_58": {
                "variable": {
                    "value": "self.mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "mask",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_63": {
                "variable": {
                    "value": "self.target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "targets",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_89": {
                "variable": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.bert_model.get_all_encoder_layers()[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_94": {
                "variable": {
                    "value": "tiled_separator",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self._separator",
                    "type": "Attribute",
                    "possible_values": []
                },
                "multiples": {
                    "value": "tf.constant([self._batch_size, 1], dtype=tf.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_97": {
                "variable": {
                    "value": "separator_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(tf.expand_dims(tf.range(self._batch_size), axis=1), tf.expand_dims(self.first_num_sents, axis=1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_101": {
                "variable": {
                    "value": "all_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(embeddings, tiled_separator)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_102": {
                "variable": {
                    "value": "all_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(self.indices, separator_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "scatter_nd_105": {
                "variable": {
                    "value": "bert_res",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "all_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat((self.indices, separator_indices), axis=0)",
                            "Call"
                        ]
                    ]
                },
                "updates": {
                    "value": "all_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat((embeddings, tiled_separator), axis=0)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.constant([self._batch_size, 2 * self._max_sent_num + 1, self._embedding_len], dtype=tf.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_115": {
                "variable": {
                    "value": "transformer_padding",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.bitwise.invert(tf.sequence_mask(self.first_num_sents + self.second_num_sents + 1, maxlen=2 * self._max_sent_num + 1, dtype=tf.int32))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_123": {
                "input": {
                    "value": "transformer_padding * _NEG_INF",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_38": {
                "device_name": {
                    "value": "/gpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_69": {
                "variable": {
                    "value": "self._separator",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "separator",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, self._embedding_len]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_87": {
                "device_name": {
                    "value": "/gpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_130": {
                "name_or_scope": {
                    "value": "transformer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_137": {
                "device_name": {
                    "value": "/gpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_140": {
                "variable": {
                    "value": "logits1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.layers.dense(transformer_encoded, 32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_141": {
                "variable": {
                    "value": "self.final_logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "logits1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.layers.dense(transformer_encoded, 32))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_142": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.softmax_cross_entropy_with_logits_v2(logits=self.final_logits, labels=self.target)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_collection_152": {
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "feedforward",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_collection_154": {
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "separator",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_68": {
                "name_or_scope": {
                    "value": "separator",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_96": {
                "value": {
                    "value": "[self._batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "invert_116": {
                "x": {
                    "value": "tf.sequence_mask(self.first_num_sents + self.second_num_sents + 1, maxlen=2 * self._max_sent_num + 1, dtype=tf.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_139": {
                "name_or_scope": {
                    "value": "feedforward",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_98": {
                "input": {
                    "value": "tf.range(self._batch_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_99": {
                "input": {
                    "value": "self.first_num_sents",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_108": {
                "value": {
                    "value": "[self._batch_size, 2 * self._max_sent_num + 1, self._embedding_len]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sequence_mask_117": {
                "lengths": {
                    "value": "self.first_num_sents + self.second_num_sents + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "maxlen": {
                    "value": "2 * self._max_sent_num + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_140": {
                "inputs": {
                    "value": "transformer_encoded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(transformer_res, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_v2_143": {
                "logits": {
                    "value": "self.final_logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "self.target",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "transformer_model/transformer_transposition2.py": {
        "tensorflow": {
            "placeholder_23": {
                "variable": {
                    "value": "self.first_num_sents",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "first_num_sent",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_26": {
                "variable": {
                    "value": "self.second_num_sents",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "second_num_sent",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_33": {
                "variable": {
                    "value": "self.inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, 2 * max_sent_num + 1, embedding_len]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "inputs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_39": {
                "variable": {
                    "value": "self.target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "targets",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tile_53": {
                "variable": {
                    "value": "tiled_separator",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self._separator",
                    "type": "Attribute",
                    "possible_values": []
                },
                "multiples": {
                    "value": "tf.constant([self._batch_size, 1], dtype=tf.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_55": {
                "variable": {
                    "value": "separator_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(tf.expand_dims(tf.range(self._batch_size), axis=1), tf.expand_dims(self.first_num_sents, axis=1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "scatter_nd_61": {
                "variable": {
                    "value": "updates",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "separator_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat((tf.expand_dims(tf.range(self._batch_size), axis=1), tf.expand_dims(self.first_num_sents, axis=1)), axis=1)",
                            "Call"
                        ]
                    ]
                },
                "updates": {
                    "value": "tiled_separator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(self._separator, tf.constant([self._batch_size, 1], dtype=tf.int32))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.constant([self._batch_size, 2 * self._max_sent_num + 1, self._embedding_len], dtype=tf.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_71": {
                "variable": {
                    "value": "transformer_padding",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.bitwise.invert(tf.sequence_mask(self.first_num_sents + self.second_num_sents + 1, maxlen=2 * self._max_sent_num + 1, dtype=tf.int32))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_78": {
                "input": {
                    "value": "transformer_padding * _NEG_INF",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_89": {
                "variable": {
                    "value": "transformer_encoded",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "transformer_res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._transformer.encode((transformer_inputs, transformer_padding), attention_bias)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_collection_103": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "transformer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_44": {
                "variable": {
                    "value": "self._separator",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "separator",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, self._embedding_len]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_93": {
                "variable": {
                    "value": "logits1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.layers.dense(transformer_encoded, 32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_94": {
                "variable": {
                    "value": "self.final_logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "logits1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.layers.dense(transformer_encoded, 32))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_95": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.softmax_cross_entropy_with_logits_v2(logits=self.final_logits, labels=self.target)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_43": {
                "name_or_scope": {
                    "value": "separator",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_54": {
                "value": {
                    "value": "[self._batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "invert_72": {
                "x": {
                    "value": "tf.sequence_mask(self.first_num_sents + self.second_num_sents + 1, maxlen=2 * self._max_sent_num + 1, dtype=tf.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_84": {
                "name_or_scope": {
                    "value": "transformer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_92": {
                "name_or_scope": {
                    "value": "feedforward",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_collection_105": {
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "feedforward",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_collection_107": {
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "separator",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_56": {
                "input": {
                    "value": "tf.range(self._batch_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_57": {
                "input": {
                    "value": "self.first_num_sents",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_63": {
                "value": {
                    "value": "[self._batch_size, 2 * self._max_sent_num + 1, self._embedding_len]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sequence_mask_73": {
                "lengths": {
                    "value": "self.first_num_sents + self.second_num_sents + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "maxlen": {
                    "value": "2 * self._max_sent_num + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_93": {
                "inputs": {
                    "value": "transformer_encoded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(transformer_res, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_v2_96": {
                "logits": {
                    "value": "self.final_logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "self.target",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}