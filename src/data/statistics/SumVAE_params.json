{
    "predict_len.py": {
        "sklearn": {
            "LinearRegression_21": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "config.py": {
        "tensorflow": {
            "ConfigProto_73": {
                "variable": {
                    "value": "config.SESS_CONFIG",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gpu_options": {
                    "value": "tf.GPUOptions(allow_growth=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "GPUOptions_73": {
                "allow_growth": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "sampling.py": {
        "tensorflow": {
            "get_default_graph_190": {
                "variable": {
                    "value": "graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_191": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config.SESS_CONFIG",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "import_meta_graph_192": {
                "variable": {
                    "value": "loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "meta_graph_or_file": {
                    "value": "os.path.join(model_dir, 'model.ckpt.meta')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "latest_checkpoint_194": {
                "checkpoint_dir": {
                    "value": "model_dir",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(experiment_dir, 'model')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "train_vae.py": {
        "tensorflow": {
            "Summary_153": {
                "variable": {
                    "value": "summary",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_31": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_45": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FileWriter_46": {
                "variable": {
                    "value": "summary_writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "model_dir",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(config.OUTPUT_DIR, 'model')",
                            "Call"
                        ]
                    ]
                },
                "graph": {
                    "value": "sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_32": {
                "config": {
                    "value": "config.SESS_CONFIG",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_34": {
                "name_or_scope": {
                    "value": "VAE",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_39": {
                "name_or_scope": {
                    "value": "VAE",
                    "type": "Constant",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "global_variables_initializer_48": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "vae/model/decoder.py": {
        "tensorflow": {
            "MultiRNNCell_44": {
                "variable": {
                    "value": "cell",
                    "type": "Variable",
                    "possible_values": []
                },
                "cells": {
                    "value": "[create_cell() for _ in range(2)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Dense_46": {
                "variable": {
                    "value": "projection_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "units": {
                    "value": "self.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_72": {
                "variable": {
                    "value": "bow_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "self.latent_variables",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "self.config.BOW_SIZE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.tanh",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_76": {
                "variable": {
                    "value": "self.bow_logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "bow_h",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.layers.dense(self.latent_variables, self.config.BOW_SIZE, activation=tf.tanh)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(bow_h, self.config.DROPOUT_KEEP)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "bow_logits",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tile_79": {
                "variable": {
                    "value": "go_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "[self.go_idx]",
                    "type": "List",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[self.batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "embedding_lookup_58": {
                "variable": {
                    "value": "decoder_emb_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.decoder_input",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_74": {
                "variable": {
                    "value": "bow_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "bow_h",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.layers.dense(self.latent_variables, self.config.BOW_SIZE, activation=tf.tanh)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(bow_h, self.config.DROPOUT_KEEP)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "self.config.DROPOUT_KEEP",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_13": {
                "name": {
                    "value": "decoder_input",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_24": {
                "name_or_scope": {
                    "value": "Length_Control",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_26": {
                "variable": {
                    "value": "self.len_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "len_embeddings",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.config.NUM_LEN_EMB, self.config.LEN_EMB_SIZE)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DropoutWrapper_41": {
                "variable": {
                    "value": "cell",
                    "type": "Variable",
                    "possible_values": []
                },
                "cell": {
                    "value": "cell",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.nn.rnn_cell.MultiRNNCell([create_cell() for _ in range(2)])",
                            "Call"
                        ],
                        [
                            "LenControlWrapper(cell, self.output_len, self.len_embeddings, initial_cell_state=initial_state)",
                            "Call"
                        ],
                        [
                            "AlignmentWrapper(cell, latent_variables, initial_cell_state=initial_state)",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.LayerNormBasicLSTMCell(self.config.DEC_RNN_SIZE)",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.BasicLSTMCell(self.config.DEC_RNN_SIZE)",
                            "Call"
                        ],
                        [
                            "tf.nn.rnn_cell.DropoutWrapper(cell, output_keep_prob=self.config.DROPOUT_KEEP)",
                            "Call"
                        ],
                        [
                            "tf.contrib.rnn.GRUCell(self.config.DEC_RNN_SIZE)",
                            "Call"
                        ],
                        [
                            "LenControlWrapper(cell, output_seq_len, self.len_embeddings, initial_cell_state=initial_state)",
                            "Call"
                        ],
                        [
                            "AlignmentWrapper(cell, latent_variables, initial_cell_state=initial_state)",
                            "Call"
                        ]
                    ]
                },
                "output_keep_prob": {
                    "value": "self.config.DROPOUT_KEEP",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BasicLSTMCell_35": {
                "variable": {
                    "value": "cell",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_units": {
                    "value": "self.config.DEC_RNN_SIZE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_max_67": {
                "input_tensor": {
                    "value": "self.output_len",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GRUCell_37": {
                "variable": {
                    "value": "cell",
                    "type": "Variable",
                    "possible_values": []
                },
                "units": {
                    "value": "self.config.DEC_RNN_SIZE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_max_99": {
                "input_tensor": {
                    "value": "self.output_len",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "random_normal_initializer_29": {
                "stddev": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "vae/model/encoder.py": {
        "tensorflow": {
            "embedding_lookup_22": {
                "variable": {
                    "value": "encoder_emb_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.encoder_input",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bidirectional_dynamic_rnn_40": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "cell_fw": {
                    "value": "cell_fw",
                    "type": "Name",
                    "possible_values": [
                        [
                            "create_cell()",
                            "Call"
                        ]
                    ]
                },
                "cell_bw": {
                    "value": "cell_bw",
                    "type": "Name",
                    "possible_values": [
                        [
                            "create_cell()",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "encoder_emb_inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(self.embedding, self.encoder_input)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_68": {
                "variable": {
                    "value": "mu",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "encoder_rnn_output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.concat(encoder_outputs, -1), 1)",
                            "Call"
                        ],
                        [
                            "get_last_hidden()",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.config.LATENT_VARIABLE_SIZE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.tanh",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_69": {
                "variable": {
                    "value": "self.mu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "mu",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.dense(encoder_rnn_output, self.config.LATENT_VARIABLE_SIZE, activation=tf.nn.tanh)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.config.LATENT_VARIABLE_SIZE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dense_71": {
                "variable": {
                    "value": "logvar",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "encoder_rnn_output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.concat(encoder_outputs, -1), 1)",
                            "Call"
                        ],
                        [
                            "get_last_hidden()",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.config.LATENT_VARIABLE_SIZE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.tanh",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_72": {
                "variable": {
                    "value": "self.logvar",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "logvar",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.dense(encoder_rnn_output, self.config.LATENT_VARIABLE_SIZE, activation=tf.nn.tanh)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.config.LATENT_VARIABLE_SIZE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_13": {
                "name_or_scope": {
                    "value": "encoder_input",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_21": {
                "name_or_scope": {
                    "value": "encoder_rnn",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_51": {
                "variable": {
                    "value": "encoder_rnn_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.concat(encoder_outputs, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "name_scope_67": {
                "name": {
                    "value": "mu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "name_scope_70": {
                "name": {
                    "value": "log_var",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "name_scope_74": {
                "name": {
                    "value": "epsilon",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "name_scope_77": {
                "name": {
                    "value": "latent_variables",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DropoutWrapper_34": {
                "variable": {
                    "value": "cell",
                    "type": "Variable",
                    "possible_values": []
                },
                "cell": {
                    "value": "cell",
                    "type": "Call",
                    "possible_values": [
                        [
                            "rnn.LayerNormBasicLSTMCell(self.config.ENC_RNN_SIZE)",
                            "Call"
                        ],
                        [
                            "rnn.BasicLSTMCell(self.config.ENC_RNN_SIZE)",
                            "Call"
                        ],
                        [
                            "tf.nn.rnn_cell.DropoutWrapper(cell, output_keep_prob=self.config.DROPOUT_KEEP)",
                            "Call"
                        ],
                        [
                            "rnn.GRUCell(self.config.ENC_RNN_SIZE)",
                            "Call"
                        ]
                    ]
                },
                "output_keep_prob": {
                    "value": "self.config.DROPOUT_KEEP",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BasicLSTMCell_28": {
                "variable": {
                    "value": "cell",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_units": {
                    "value": "self.config.ENC_RNN_SIZE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_45": {
                "values": {
                    "value": "[encoder_state[0], encoder_state[1]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_47": {
                "values": {
                    "value": "[encoder_state[0][1], encoder_state[1][1]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_51": {
                "values": {
                    "value": "encoder_outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "GRUCell_30": {
                "variable": {
                    "value": "cell",
                    "type": "Variable",
                    "possible_values": []
                },
                "units": {
                    "value": "self.config.ENC_RNN_SIZE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_79": {
                "x": {
                    "value": "0.5 * self.logvar",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_81": {
                "x": {
                    "value": "0.5 * self.logvar",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concat_56": {
                "values": {
                    "value": "encoder_outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_61": {
                "values": {
                    "value": "encoder_outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "vae/model/vae.py": {
        "tensorflow": {
            "placeholder_18": {
                "variable": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "learning_rate",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_22": {
                "variable": {
                    "value": "self.encoder_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "encoder_input",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_24": {
                "variable": {
                    "value": "self.decoder_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "decoder_input",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_26": {
                "variable": {
                    "value": "self.target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "target",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_28": {
                "variable": {
                    "value": "self.input_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input_len",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_30": {
                "variable": {
                    "value": "self.output_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "output_len",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_32": {
                "variable": {
                    "value": "self.step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "step",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_34": {
                "variable": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "batch_size",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_37": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "embedding",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.vocab_size, self.config.EMBED_SIZE]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sequence_mask_74": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "lengths": {
                    "value": "self.input_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_103": {
                "variable": {
                    "value": "self.kld",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "-0.5 * tf.reduce_sum(self.encoder.logvar - tf.square(self.encoder.mu) - tf.exp(self.encoder.logvar) + 1, axis=1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_107": {
                "variable": {
                    "value": "self.kld_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "kld_weight",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "trainable_variables_137": {
                "variable": {
                    "value": "tvars",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "name_scope_20": {
                "name": {
                    "value": "Placeholders",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_36": {
                "name_or_scope": {
                    "value": "Embedding",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_42": {
                "name_or_scope": {
                    "value": "Encoder",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "name_scope_51": {
                "name": {
                    "value": "Latent_variables",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_55": {
                "variable": {
                    "value": "self.latent_variables",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, self.config.LATENT_VARIABLE_SIZE)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "latent_variables_input",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_59": {
                "name_or_scope": {
                    "value": "Decoder",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "name_scope_72": {
                "name": {
                    "value": "Loss",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_93": {
                "variable": {
                    "value": "self.reconst_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "reconst_loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.contrib.seq2seq.sequence_loss(rnn_output, self.target, mask, softmax_loss_function=_sampled_loss, average_across_timesteps=False)",
                            "Call"
                        ],
                        [
                            "sequence_loss(self.logits, self.target, mask, average_across_timesteps=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "one_hot_96": {
                "variable": {
                    "value": "eos_one_hot",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "[self.eos_idx]",
                    "type": "List",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_97": {
                "variable": {
                    "value": "eos_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.ones([self.batch_size, tf.shape(self.target)[1] - tf.shape(self.logits)[1], self.vocab_size])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "eos_one_hot",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.one_hot([self.eos_idx], self.vocab_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_98": {
                "variable": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.logits, eos_seq]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_100": {
                "variable": {
                    "value": "self.reconst_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "reconst_loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.contrib.seq2seq.sequence_loss(rnn_output, self.target, mask, softmax_loss_function=_sampled_loss, average_across_timesteps=False)",
                            "Call"
                        ],
                        [
                            "sequence_loss(self.logits, self.target, mask, average_across_timesteps=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "one_hot_114": {
                "variable": {
                    "value": "bow_targets",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "self.target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "minimum_115": {
                "variable": {
                    "value": "bow_targets",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(bow_targets, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_116": {
                "variable": {
                    "value": "bow_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "bow_targets",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.one_hot(self.target, self.vocab_size)",
                            "Call"
                        ],
                        [
                            "tf.minimum(tf.reduce_sum(bow_targets, 1), 1)",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "self.bow_logits",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_117": {
                "variable": {
                    "value": "self.bow_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reduce_sum(bow_loss, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "name_scope_121": {
                "name": {
                    "value": "Summary",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "scalar_123": {
                "variable": {
                    "value": "loss_summary",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "loss",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "family": {
                    "value": "train_loss",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "scalar_124": {
                "variable": {
                    "value": "reconst_loss_summary",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "reconst_loss",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "self.reconst_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "family": {
                    "value": "train_loss",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "scalar_125": {
                "variable": {
                    "value": "bow_loss_summary",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bow_loss",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "self.bow_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "family": {
                    "value": "train_loss",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "scalar_126": {
                "variable": {
                    "value": "kld_summary",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "kld",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "self.kld",
                    "type": "Attribute",
                    "possible_values": []
                },
                "family": {
                    "value": "kld",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "scalar_127": {
                "variable": {
                    "value": "kld_weight_summary",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "kld_weight",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "self.kld_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "family": {
                    "value": "parameters",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "histogram_128": {
                "variable": {
                    "value": "mu_summary",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "mu",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.reduce_mean(self.encoder.mu, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "histogram_129": {
                "variable": {
                    "value": "var_summary",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "var",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.reduce_mean(tf.exp(self.encoder.logvar), 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_130": {
                "variable": {
                    "value": "lr_summary",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "lr",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "family": {
                    "value": "parameters",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "merge_132": {
                "variable": {
                    "value": "self.merged_summary",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[loss_summary, reconst_loss_summary, bow_loss_summary, kld_summary, kld_weight_summary, mu_summary, var_summary, lr_summary]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "trainable_variables_139": {
                "variable": {
                    "value": "tvars",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_by_global_norm_140": {
                "variable": {
                    "value": "(grads, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "tf.gradients(self.loss, tvars)",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "self.config.MAX_GRAD",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_141": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensordot_78": {
                "a": {
                    "value": "rnn_output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.decoder.rnn_output",
                            "Attribute"
                        ]
                    ]
                },
                "b": {
                    "value": "proj_weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.decoder.proj_weights",
                            "Attribute"
                        ]
                    ]
                },
                "axes": {
                    "value": "((2,), (0,))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "name_scope_138": {
                "name": {
                    "value": "Optimizer",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "random_normal_initializer_40": {
                "stddev": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sampled_softmax_loss_84": {
                "weights": {
                    "value": "tf.transpose(proj_weights)",
                    "type": "Call",
                    "possible_values": []
                },
                "biases": {
                    "value": "proj_bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.decoder.proj_bias",
                            "Attribute"
                        ]
                    ]
                },
                "labels": {
                    "value": "tf.expand_dims(labels, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_sampled": {
                    "value": "self.config.NUM_SAMPLED_SOFTMAX",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_classes": {
                    "value": "vocab_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_97": {
                "shape": {
                    "value": "[self.batch_size, tf.shape(self.target)[1] - tf.shape(self.logits)[1], self.vocab_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_103": {
                "input_tensor": {
                    "value": "self.encoder.logvar - tf.square(self.encoder.mu) - tf.exp(self.encoder.logvar) + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_115": {
                "input_tensor": {
                    "value": "bow_targets",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.one_hot(self.target, self.vocab_size)",
                            "Call"
                        ],
                        [
                            "tf.minimum(tf.reduce_sum(bow_targets, 1), 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_117": {
                "input_tensor": {
                    "value": "bow_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid_cross_entropy_with_logits(labels=bow_targets, logits=self.bow_logits)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_mean_128": {
                "input_tensor": {
                    "value": "self.encoder.mu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_129": {
                "input_tensor": {
                    "value": "tf.exp(self.encoder.logvar)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gradients_140": {
                "ys": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "xs": {
                    "value": "tvars",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ],
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_84": {
                "a": {
                    "value": "proj_weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.decoder.proj_weights",
                            "Attribute"
                        ]
                    ]
                }
            },
            "expand_dims_86": {
                "input": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_129": {
                "x": {
                    "value": "self.encoder.logvar",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_105": {
                "x": {
                    "value": "self.encoder.logvar",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_97": {
                "input": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_104": {
                "x": {
                    "value": "self.encoder.mu",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "vae/utils/tf_utils.py": {
        "tensorflow": {
            "maximum_136": {
                "variable": {
                    "value": "time_left",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self._seq_len - 1 - state.time",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "embedding_lookup_137": {
                "variable": {
                    "value": "len_embedding_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self._len_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "time_left",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.maximum(self._seq_len - 1 - state.time, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "identity_153": {
                "variable": {
                    "value": "cell_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cell_output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "array_ops.identity(cell_output, name='checked_cell_output')",
                            "Call"
                        ],
                        [
                            "array_ops.identity(cell_output, name='checked_cell_output')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "checked_cell_output",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "identity_291": {
                "variable": {
                    "value": "cell_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cell_output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "array_ops.identity(cell_output, name='checked_cell_output')",
                            "Call"
                        ],
                        [
                            "array_ops.identity(cell_output, name='checked_cell_output')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "checked_cell_output",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "name_scope_76": {
                "name": {
                    "value": "name",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "assert_equal_97": {
                "x": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.shape(self._seq_len)[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "name_scope_110": {
                "name": {
                    "value": "type(self).__name__ + 'ZeroState'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "values": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "map_structure_124": {
                "variable": {
                    "value": "cell_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "func": {
                    "value": "lambda s: array_ops.identity(s, name='checked_cell_state')",
                    "type": "Lambda",
                    "possible_values": []
                },
                "*structure": {
                    "value": "cell_state",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "self._initial_cell_state",
                            "Attribute"
                        ],
                        [
                            "self._cell.zero_state(batch_size, dtype)",
                            "Call"
                        ],
                        [
                            "nest.map_structure(lambda s: array_ops.identity(s, name='checked_cell_state'), cell_state)",
                            "Call"
                        ],
                        [
                            "state.cell_state",
                            "Attribute"
                        ],
                        [
                            "self._initial_cell_state",
                            "Attribute"
                        ],
                        [
                            "self._cell.zero_state(batch_size, dtype)",
                            "Call"
                        ],
                        [
                            "nest.map_structure(lambda s: array_ops.identity(s, name='checked_cell_state'), cell_state)",
                            "Call"
                        ],
                        [
                            "state.cell_state",
                            "Attribute"
                        ]
                    ]
                }
            },
            "control_dependencies_151": {
                "control_inputs": {
                    "value": "self._batch_size_checks(cell_batch_size, error_message)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "name_scope_216": {
                "name": {
                    "value": "name",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "assert_equal_237": {
                "x": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.shape(self._alignment_input)[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "name_scope_250": {
                "name": {
                    "value": "type(self).__name__ + 'ZeroState'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "values": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "map_structure_264": {
                "variable": {
                    "value": "cell_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "func": {
                    "value": "lambda s: array_ops.identity(s, name='checked_cell_state')",
                    "type": "Lambda",
                    "possible_values": []
                },
                "*structure": {
                    "value": "cell_state",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "self._initial_cell_state",
                            "Attribute"
                        ],
                        [
                            "self._cell.zero_state(batch_size, dtype)",
                            "Call"
                        ],
                        [
                            "nest.map_structure(lambda s: array_ops.identity(s, name='checked_cell_state'), cell_state)",
                            "Call"
                        ],
                        [
                            "state.cell_state",
                            "Attribute"
                        ],
                        [
                            "self._initial_cell_state",
                            "Attribute"
                        ],
                        [
                            "self._cell.zero_state(batch_size, dtype)",
                            "Call"
                        ],
                        [
                            "nest.map_structure(lambda s: array_ops.identity(s, name='checked_cell_state'), cell_state)",
                            "Call"
                        ],
                        [
                            "state.cell_state",
                            "Attribute"
                        ]
                    ]
                }
            },
            "control_dependencies_289": {
                "control_inputs": {
                    "value": "self._batch_size_checks(cell_batch_size, error_message)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_65": {
                "values": {
                    "value": "[inputs, len_embedding]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "map_structure_92": {
                "variable": {
                    "value": "self._initial_cell_state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "func": {
                    "value": "lambda s: array_ops.identity(s, name='check_initial_cell_state')",
                    "type": "Lambda",
                    "possible_values": []
                },
                "*structure": {
                    "value": "initial_cell_state",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "TensorShape_107": {
                "dims": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "control_dependencies_123": {
                "control_inputs": {
                    "value": "self._batch_size_checks(batch_size, error_message)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_143": {
                "input": {
                    "value": "cell_output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "array_ops.identity(cell_output, name='checked_cell_output')",
                            "Call"
                        ],
                        [
                            "array_ops.identity(cell_output, name='checked_cell_output')",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_206": {
                "values": {
                    "value": "[inputs, alignment_input]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "map_structure_232": {
                "variable": {
                    "value": "self._initial_cell_state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "func": {
                    "value": "lambda s: array_ops.identity(s, name='check_initial_cell_state')",
                    "type": "Lambda",
                    "possible_values": []
                },
                "*structure": {
                    "value": "initial_cell_state",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "TensorShape_247": {
                "dims": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "control_dependencies_263": {
                "control_inputs": {
                    "value": "self._batch_size_checks(batch_size, error_message)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_281": {
                "input": {
                    "value": "cell_output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "array_ops.identity(cell_output, name='checked_cell_output')",
                            "Call"
                        ],
                        [
                            "array_ops.identity(cell_output, name='checked_cell_output')",
                            "Call"
                        ]
                    ]
                }
            },
            "flatten_80": {
                "structure": {
                    "value": "initial_cell_state",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "control_dependencies_91": {
                "control_inputs": {
                    "value": "self._batch_size_checks(state_batch_size, error_message)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_97": {
                "input": {
                    "value": "self._seq_len",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_129": {
                "shape": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtypes.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "flatten_220": {
                "structure": {
                    "value": "initial_cell_state",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "control_dependencies_231": {
                "control_inputs": {
                    "value": "self._batch_size_checks(state_batch_size, error_message)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_237": {
                "input": {
                    "value": "self._alignment_input",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_269": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtypes.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_83": {
                "input": {
                    "value": "final_state_tensor",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "nest.flatten(initial_cell_state)[-1]",
                            "Subscript"
                        ],
                        [
                            "nest.flatten(initial_cell_state)[-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "identity_125": {
                "input": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "checked_cell_state",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "shape_223": {
                "input": {
                    "value": "final_state_tensor",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "nest.flatten(initial_cell_state)[-1]",
                            "Subscript"
                        ],
                        [
                            "nest.flatten(initial_cell_state)[-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "identity_265": {
                "input": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "checked_cell_state",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "identity_93": {
                "input": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "check_initial_cell_state",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "identity_233": {
                "input": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "check_initial_cell_state",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    }
}